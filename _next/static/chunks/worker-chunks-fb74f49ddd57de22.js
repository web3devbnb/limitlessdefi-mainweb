(self.webpackChunk_N_E = self.webpackChunk_N_E || []).push([[6723], {
    1306: function(e, t, n) {
        "use strict";
        n.d(t, {
            i: function() {
                return r
            }
        });
        let r = "abi/5.7.0"
    },
    33244: function(e, t, n) {
        "use strict";
        n.d(t, {
            R: function() {
                return P
            },
            $: function() {
                return B
            }
        });
        var r = n(70367)
          , i = n(28609)
          , a = n(61941)
          , o = n(1306)
          , s = n(53082)
          , u = n(60727);
        class l extends s.XI {
            constructor(e) {
                super("address", "address", e, !1)
            }
            defaultValue() {
                return "0x0000000000000000000000000000000000000000"
            }
            encode(e, t) {
                try {
                    t = (0,
                    u.getAddress)(t)
                } catch (e) {
                    this._throwError(e.message, t)
                }
                return e.writeValue(t)
            }
            decode(e) {
                return (0,
                u.getAddress)((0,
                r.hexZeroPad)(e.readValue().toHexString(), 20))
            }
        }
        class c extends s.XI {
            constructor(e) {
                super(e.name, e.type, void 0, e.dynamic),
                this.coder = e
            }
            defaultValue() {
                return this.coder.defaultValue()
            }
            encode(e, t) {
                return this.coder.encode(e, t)
            }
            decode(e) {
                return this.coder.decode(e)
            }
        }
        let d = new a.Logger(o.i);
        function p(e, t, n) {
            let r = null;
            if (Array.isArray(n))
                r = n;
            else if (n && "object" == typeof n) {
                let e = {};
                r = t.map(t=>{
                    let r = t.localName;
                    return r || d.throwError("cannot encode object for signature with missing names", a.Logger.errors.INVALID_ARGUMENT, {
                        argument: "values",
                        coder: t,
                        value: n
                    }),
                    e[r] && d.throwError("cannot encode object for signature with duplicate names", a.Logger.errors.INVALID_ARGUMENT, {
                        argument: "values",
                        coder: t,
                        value: n
                    }),
                    e[r] = !0,
                    n[r]
                }
                )
            } else
                d.throwArgumentError("invalid tuple value", "tuple", n);
            t.length !== r.length && d.throwArgumentError("types/value length mismatch", "tuple", n);
            let i = new s.QV(e.wordSize)
              , o = new s.QV(e.wordSize)
              , u = [];
            return t.forEach((e,t)=>{
                let n = r[t];
                if (e.dynamic) {
                    let t = o.length;
                    e.encode(o, n);
                    let r = i.writeUpdatableValue();
                    u.push(e=>{
                        r(e + t)
                    }
                    )
                } else
                    e.encode(i, n)
            }
            ),
            u.forEach(e=>{
                e(i.length)
            }
            ),
            e.appendWriter(i) + e.appendWriter(o)
        }
        function f(e, t) {
            let n = []
              , r = e.subReader(0);
            t.forEach(t=>{
                let i = null;
                if (t.dynamic) {
                    let n = e.readValue()
                      , o = r.subReader(n.toNumber());
                    try {
                        i = t.decode(o)
                    } catch (e) {
                        if (e.code === a.Logger.errors.BUFFER_OVERRUN)
                            throw e;
                        (i = e).baseType = t.name,
                        i.name = t.localName,
                        i.type = t.type
                    }
                } else
                    try {
                        i = t.decode(e)
                    } catch (e) {
                        if (e.code === a.Logger.errors.BUFFER_OVERRUN)
                            throw e;
                        (i = e).baseType = t.name,
                        i.name = t.localName,
                        i.type = t.type
                    }
                void 0 != i && n.push(i)
            }
            );
            let i = t.reduce((e,t)=>{
                let n = t.localName;
                return n && (e[n] || (e[n] = 0),
                e[n]++),
                e
            }
            , {});
            t.forEach((e,t)=>{
                let r = e.localName;
                if (!r || 1 !== i[r] || ("length" === r && (r = "_length"),
                null != n[r]))
                    return;
                let a = n[t];
                a instanceof Error ? Object.defineProperty(n, r, {
                    enumerable: !0,
                    get: ()=>{
                        throw a
                    }
                }) : n[r] = a
            }
            );
            for (let e = 0; e < n.length; e++) {
                let t = n[e];
                t instanceof Error && Object.defineProperty(n, e, {
                    enumerable: !0,
                    get: ()=>{
                        throw t
                    }
                })
            }
            return Object.freeze(n)
        }
        class h extends s.XI {
            constructor(e, t, n) {
                let r = e.type + "[" + (t >= 0 ? t : "") + "]"
                  , i = -1 === t || e.dynamic;
                super("array", r, n, i),
                this.coder = e,
                this.length = t
            }
            defaultValue() {
                let e = this.coder.defaultValue()
                  , t = [];
                for (let n = 0; n < this.length; n++)
                    t.push(e);
                return t
            }
            encode(e, t) {
                Array.isArray(t) || this._throwError("expected array value", t);
                let n = this.length;
                -1 === n && (n = t.length,
                e.writeValue(t.length)),
                d.checkArgumentCount(t.length, n, "coder array" + (this.localName ? " " + this.localName : ""));
                let r = [];
                for (let e = 0; e < t.length; e++)
                    r.push(this.coder);
                return p(e, r, t)
            }
            decode(e) {
                let t = this.length;
                -1 === t && 32 * (t = e.readValue().toNumber()) > e._data.length && d.throwError("insufficient data length", a.Logger.errors.BUFFER_OVERRUN, {
                    length: e._data.length,
                    count: t
                });
                let n = [];
                for (let e = 0; e < t; e++)
                    n.push(new c(this.coder));
                return e.coerce(this.name, f(e, n))
            }
        }
        class m extends s.XI {
            constructor(e) {
                super("bool", "bool", e, !1)
            }
            defaultValue() {
                return !1
            }
            encode(e, t) {
                return e.writeValue(t ? 1 : 0)
            }
            decode(e) {
                return e.coerce(this.type, !e.readValue().isZero())
            }
        }
        class y extends s.XI {
            constructor(e, t) {
                super(e, e, t, !0)
            }
            defaultValue() {
                return "0x"
            }
            encode(e, t) {
                return t = (0,
                r.arrayify)(t),
                e.writeValue(t.length) + e.writeBytes(t)
            }
            decode(e) {
                return e.readBytes(e.readValue().toNumber(), !0)
            }
        }
        class g extends y {
            constructor(e) {
                super("bytes", e)
            }
            decode(e) {
                return e.coerce(this.name, (0,
                r.hexlify)(super.decode(e)))
            }
        }
        class b extends s.XI {
            constructor(e, t) {
                let n = "bytes" + String(e);
                super(n, n, t, !1),
                this.size = e
            }
            defaultValue() {
                return "0x0000000000000000000000000000000000000000000000000000000000000000".substring(0, 2 + 2 * this.size)
            }
            encode(e, t) {
                let n = (0,
                r.arrayify)(t);
                return n.length !== this.size && this._throwError("incorrect data length", t),
                e.writeBytes(n)
            }
            decode(e) {
                return e.coerce(this.name, (0,
                r.hexlify)(e.readBytes(this.size)))
            }
        }
        class v extends s.XI {
            constructor(e) {
                super("null", "", e, !1)
            }
            defaultValue() {
                return null
            }
            encode(e, t) {
                return null != t && this._throwError("not null", t),
                e.writeBytes([])
            }
            decode(e) {
                return e.readBytes(0),
                e.coerce(this.name, null)
            }
        }
        var w = n(13004)
          , T = n(84668);
        class E extends s.XI {
            constructor(e, t, n) {
                let r = (t ? "int" : "uint") + 8 * e;
                super(r, r, n, !1),
                this.size = e,
                this.signed = t
            }
            defaultValue() {
                return 0
            }
            encode(e, t) {
                let n = w.O$.from(t)
                  , r = T.Bz.mask(8 * e.wordSize);
                if (this.signed) {
                    let e = r.mask(8 * this.size - 1);
                    (n.gt(e) || n.lt(e.add(T.fh).mul(T.tL))) && this._throwError("value out-of-bounds", t)
                } else
                    (n.lt(T._Y) || n.gt(r.mask(8 * this.size))) && this._throwError("value out-of-bounds", t);
                return n = n.toTwos(8 * this.size).mask(8 * this.size),
                this.signed && (n = n.fromTwos(8 * this.size).toTwos(8 * e.wordSize)),
                e.writeValue(n)
            }
            decode(e) {
                let t = e.readValue().mask(8 * this.size);
                return this.signed && (t = t.fromTwos(8 * this.size)),
                e.coerce(this.name, t)
            }
        }
        var A = n(4082);
        class x extends y {
            constructor(e) {
                super("string", e)
            }
            defaultValue() {
                return ""
            }
            encode(e, t) {
                return super.encode(e, (0,
                A.Y0)(t))
            }
            decode(e) {
                return (0,
                A.ZN)(super.decode(e))
            }
        }
        class k extends s.XI {
            constructor(e, t) {
                let n = !1
                  , r = [];
                e.forEach(e=>{
                    e.dynamic && (n = !0),
                    r.push(e.type)
                }
                );
                let i = "tuple(" + r.join(",") + ")";
                super("tuple", i, t, n),
                this.coders = e
            }
            defaultValue() {
                let e = [];
                this.coders.forEach(t=>{
                    e.push(t.defaultValue())
                }
                );
                let t = this.coders.reduce((e,t)=>{
                    let n = t.localName;
                    return n && (e[n] || (e[n] = 0),
                    e[n]++),
                    e
                }
                , {});
                return this.coders.forEach((n,r)=>{
                    let i = n.localName;
                    i && 1 === t[i] && ("length" === i && (i = "_length"),
                    null == e[i] && (e[i] = e[r]))
                }
                ),
                Object.freeze(e)
            }
            encode(e, t) {
                return p(e, this.coders, t)
            }
            decode(e) {
                return e.coerce(this.name, f(e, this.coders))
            }
        }
        var C = n(4356);
        let _ = new a.Logger(o.i)
          , S = new RegExp(/^bytes([0-9]*)$/)
          , I = new RegExp(/^(u?int)([0-9]*)$/);
        class P {
            constructor(e) {
                (0,
                i.defineReadOnly)(this, "coerceFunc", e || null)
            }
            _getCoder(e) {
                switch (e.baseType) {
                case "address":
                    return new l(e.name);
                case "bool":
                    return new m(e.name);
                case "string":
                    return new x(e.name);
                case "bytes":
                    return new g(e.name);
                case "array":
                    return new h(this._getCoder(e.arrayChildren),e.arrayLength,e.name);
                case "tuple":
                    return new k((e.components || []).map(e=>this._getCoder(e)),e.name);
                case "":
                    return new v(e.name)
                }
                let t = e.type.match(I);
                if (t) {
                    let n = parseInt(t[2] || "256");
                    return (0 === n || n > 256 || n % 8 != 0) && _.throwArgumentError("invalid " + t[1] + " bit length", "param", e),
                    new E(n / 8,"int" === t[1],e.name)
                }
                if (t = e.type.match(S)) {
                    let n = parseInt(t[1]);
                    return (0 === n || n > 32) && _.throwArgumentError("invalid bytes length", "param", e),
                    new b(n,e.name)
                }
                return _.throwArgumentError("invalid type", "type", e.type)
            }
            _getWordSize() {
                return 32
            }
            _getReader(e, t) {
                return new s.Ej(e,this._getWordSize(),this.coerceFunc,t)
            }
            _getWriter() {
                return new s.QV(this._getWordSize())
            }
            getDefaultValue(e) {
                let t = e.map(e=>this._getCoder(C._R.from(e)))
                  , n = new k(t,"_");
                return n.defaultValue()
            }
            encode(e, t) {
                e.length !== t.length && _.throwError("types/values length mismatch", a.Logger.errors.INVALID_ARGUMENT, {
                    count: {
                        types: e.length,
                        values: t.length
                    },
                    value: {
                        types: e,
                        values: t
                    }
                });
                let n = e.map(e=>this._getCoder(C._R.from(e)))
                  , r = new k(n,"_")
                  , i = this._getWriter();
                return r.encode(i, t),
                i.data
            }
            decode(e, t, n) {
                let i = e.map(e=>this._getCoder(C._R.from(e)))
                  , a = new k(i,"_");
                return a.decode(this._getReader((0,
                r.arrayify)(t), n))
            }
        }
        let B = new P
    },
    53082: function(e, t, n) {
        "use strict";
        n.d(t, {
            BR: function() {
                return l
            },
            Ej: function() {
                return p
            },
            QV: function() {
                return d
            },
            XI: function() {
                return c
            }
        });
        var r = n(70367)
          , i = n(13004)
          , a = n(28609)
          , o = n(61941)
          , s = n(1306);
        let u = new o.Logger(s.i);
        function l(e) {
            let t = []
              , n = function(e, r) {
                if (Array.isArray(r))
                    for (let i in r) {
                        let a = e.slice();
                        a.push(i);
                        try {
                            n(a, r[i])
                        } catch (e) {
                            t.push({
                                path: a,
                                error: e
                            })
                        }
                    }
            };
            return n([], e),
            t
        }
        class c {
            constructor(e, t, n, r) {
                this.name = e,
                this.type = t,
                this.localName = n,
                this.dynamic = r
            }
            _throwError(e, t) {
                u.throwArgumentError(e, this.localName, t)
            }
        }
        class d {
            constructor(e) {
                (0,
                a.defineReadOnly)(this, "wordSize", e || 32),
                this._data = [],
                this._dataLength = 0,
                this._padding = new Uint8Array(e)
            }
            get data() {
                return (0,
                r.hexConcat)(this._data)
            }
            get length() {
                return this._dataLength
            }
            _writeData(e) {
                return this._data.push(e),
                this._dataLength += e.length,
                e.length
            }
            appendWriter(e) {
                return this._writeData((0,
                r.concat)(e._data))
            }
            writeBytes(e) {
                let t = (0,
                r.arrayify)(e)
                  , n = t.length % this.wordSize;
                return n && (t = (0,
                r.concat)([t, this._padding.slice(n)])),
                this._writeData(t)
            }
            _getValue(e) {
                let t = (0,
                r.arrayify)(i.O$.from(e));
                return t.length > this.wordSize && u.throwError("value out-of-bounds", o.Logger.errors.BUFFER_OVERRUN, {
                    length: this.wordSize,
                    offset: t.length
                }),
                t.length % this.wordSize && (t = (0,
                r.concat)([this._padding.slice(t.length % this.wordSize), t])),
                t
            }
            writeValue(e) {
                return this._writeData(this._getValue(e))
            }
            writeUpdatableValue() {
                let e = this._data.length;
                return this._data.push(this._padding),
                this._dataLength += this.wordSize,
                t=>{
                    this._data[e] = this._getValue(t)
                }
            }
        }
        class p {
            constructor(e, t, n, i) {
                (0,
                a.defineReadOnly)(this, "_data", (0,
                r.arrayify)(e)),
                (0,
                a.defineReadOnly)(this, "wordSize", t || 32),
                (0,
                a.defineReadOnly)(this, "_coerceFunc", n),
                (0,
                a.defineReadOnly)(this, "allowLoose", i),
                this._offset = 0
            }
            get data() {
                return (0,
                r.hexlify)(this._data)
            }
            get consumed() {
                return this._offset
            }
            static coerce(e, t) {
                let n = e.match("^u?int([0-9]+)$");
                return n && 48 >= parseInt(n[1]) && (t = t.toNumber()),
                t
            }
            coerce(e, t) {
                return this._coerceFunc ? this._coerceFunc(e, t) : p.coerce(e, t)
            }
            _peekBytes(e, t, n) {
                let r = Math.ceil(t / this.wordSize) * this.wordSize;
                return this._offset + r > this._data.length && (this.allowLoose && n && this._offset + t <= this._data.length ? r = t : u.throwError("data out-of-bounds", o.Logger.errors.BUFFER_OVERRUN, {
                    length: this._data.length,
                    offset: this._offset + r
                })),
                this._data.slice(this._offset, this._offset + r)
            }
            subReader(e) {
                return new p(this._data.slice(this._offset + e),this.wordSize,this._coerceFunc,this.allowLoose)
            }
            readBytes(e, t) {
                let n = this._peekBytes(0, e, !!t);
                return this._offset += n.length,
                n.slice(0, e)
            }
            readValue() {
                return i.O$.from(this.readBytes(this.wordSize))
            }
        }
    },
    4356: function(e, t, n) {
        "use strict";
        n.d(t, {
            HY: function() {
                return g
            },
            IC: function() {
                return k
            },
            QV: function() {
                return b
            },
            Xg: function() {
                return E
            },
            YW: function() {
                return A
            },
            _R: function() {
                return m
            },
            pc: function() {
                return f
            }
        });
        var r = n(13004)
          , i = n(28609)
          , a = n(61941)
          , o = n(1306);
        let s = new a.Logger(o.i)
          , u = {}
          , l = {
            calldata: !0,
            memory: !0,
            storage: !0
        }
          , c = {
            calldata: !0,
            memory: !0
        };
        function d(e, t) {
            if ("bytes" === e || "string" === e) {
                if (l[t])
                    return !0
            } else if ("address" === e) {
                if ("payable" === t)
                    return !0
            } else if ((e.indexOf("[") >= 0 || "tuple" === e) && c[t])
                return !0;
            return (l[t] || "payable" === t) && s.throwArgumentError("invalid modifier", "name", t),
            !1
        }
        function p(e, t) {
            for (let n in t)
                (0,
                i.defineReadOnly)(e, n, t[n])
        }
        let f = Object.freeze({
            sighash: "sighash",
            minimal: "minimal",
            full: "full",
            json: "json"
        })
          , h = new RegExp(/^(.*)\[([0-9]*)\]$/);
        class m {
            constructor(e, t) {
                e !== u && s.throwError("use fromString", a.Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "new ParamType()"
                }),
                p(this, t);
                let n = this.type.match(h);
                n ? p(this, {
                    arrayLength: parseInt(n[2] || "-1"),
                    arrayChildren: m.fromObject({
                        type: n[1],
                        components: this.components
                    }),
                    baseType: "array"
                }) : p(this, {
                    arrayLength: null,
                    arrayChildren: null,
                    baseType: null != this.components ? "tuple" : this.type
                }),
                this._isParamType = !0,
                Object.freeze(this)
            }
            format(e) {
                if (e || (e = f.sighash),
                f[e] || s.throwArgumentError("invalid format type", "format", e),
                e === f.json) {
                    let t = {
                        type: "tuple" === this.baseType ? "tuple" : this.type,
                        name: this.name || void 0
                    };
                    return "boolean" == typeof this.indexed && (t.indexed = this.indexed),
                    this.components && (t.components = this.components.map(t=>JSON.parse(t.format(e)))),
                    JSON.stringify(t)
                }
                let t = "";
                return "array" === this.baseType ? t += this.arrayChildren.format(e) + "[" + (this.arrayLength < 0 ? "" : String(this.arrayLength)) + "]" : "tuple" === this.baseType ? (e !== f.sighash && (t += this.type),
                t += "(" + this.components.map(t=>t.format(e)).join(e === f.full ? ", " : ",") + ")") : t += this.type,
                e !== f.sighash && (!0 === this.indexed && (t += " indexed"),
                e === f.full && this.name && (t += " " + this.name)),
                t
            }
            static from(e, t) {
                return "string" == typeof e ? m.fromString(e, t) : m.fromObject(e)
            }
            static fromObject(e) {
                return m.isParamType(e) ? e : new m(u,{
                    name: e.name || null,
                    type: C(e.type),
                    indexed: null == e.indexed ? null : !!e.indexed,
                    components: e.components ? e.components.map(m.fromObject) : null
                })
            }
            static fromString(e, t) {
                var n;
                return n = function(e, t) {
                    let n = e;
                    function r(t) {
                        s.throwArgumentError(`unexpected character at position ${t}`, "param", e)
                    }
                    function i(e) {
                        let n = {
                            type: "",
                            name: "",
                            parent: e,
                            state: {
                                allowType: !0
                            }
                        };
                        return t && (n.indexed = !1),
                        n
                    }
                    e = e.replace(/\s/g, " ");
                    let a = {
                        type: "",
                        name: "",
                        state: {
                            allowType: !0
                        }
                    }
                      , o = a;
                    for (let n = 0; n < e.length; n++) {
                        let a = e[n];
                        switch (a) {
                        case "(":
                            o.state.allowType && "" === o.type ? o.type = "tuple" : o.state.allowParams || r(n),
                            o.state.allowType = !1,
                            o.type = C(o.type),
                            o.components = [i(o)],
                            o = o.components[0];
                            break;
                        case ")":
                            delete o.state,
                            "indexed" === o.name && (t || r(n),
                            o.indexed = !0,
                            o.name = ""),
                            d(o.type, o.name) && (o.name = ""),
                            o.type = C(o.type);
                            let s = o;
                            (o = o.parent) || r(n),
                            delete s.parent,
                            o.state.allowParams = !1,
                            o.state.allowName = !0,
                            o.state.allowArray = !0;
                            break;
                        case ",":
                            delete o.state,
                            "indexed" === o.name && (t || r(n),
                            o.indexed = !0,
                            o.name = ""),
                            d(o.type, o.name) && (o.name = ""),
                            o.type = C(o.type);
                            let u = i(o.parent);
                            o.parent.components.push(u),
                            delete o.parent,
                            o = u;
                            break;
                        case " ":
                            o.state.allowType && "" !== o.type && (o.type = C(o.type),
                            delete o.state.allowType,
                            o.state.allowName = !0,
                            o.state.allowParams = !0),
                            o.state.allowName && "" !== o.name && ("indexed" === o.name ? (t || r(n),
                            o.indexed && r(n),
                            o.indexed = !0,
                            o.name = "") : d(o.type, o.name) ? o.name = "" : o.state.allowName = !1);
                            break;
                        case "[":
                            o.state.allowArray || r(n),
                            o.type += a,
                            o.state.allowArray = !1,
                            o.state.allowName = !1,
                            o.state.readArray = !0;
                            break;
                        case "]":
                            o.state.readArray || r(n),
                            o.type += a,
                            o.state.readArray = !1,
                            o.state.allowArray = !0,
                            o.state.allowName = !0;
                            break;
                        default:
                            o.state.allowType ? (o.type += a,
                            o.state.allowParams = !0,
                            o.state.allowArray = !0) : o.state.allowName ? (o.name += a,
                            delete o.state.allowArray) : o.state.readArray ? o.type += a : r(n)
                        }
                    }
                    return o.parent && s.throwArgumentError("unexpected eof", "param", e),
                    delete a.state,
                    "indexed" === o.name ? (t || r(n.length - 7),
                    o.indexed && r(n.length - 7),
                    o.indexed = !0,
                    o.name = "") : d(o.type, o.name) && (o.name = ""),
                    a.type = C(a.type),
                    a
                }(e, !!t),
                m.fromObject({
                    name: n.name,
                    type: n.type,
                    indexed: n.indexed,
                    components: n.components
                })
            }
            static isParamType(e) {
                return !!(null != e && e._isParamType)
            }
        }
        function y(e, t) {
            return (function(e) {
                e = e.trim();
                let t = []
                  , n = ""
                  , r = 0;
                for (let i = 0; i < e.length; i++) {
                    let a = e[i];
                    "," === a && 0 === r ? (t.push(n),
                    n = "") : (n += a,
                    "(" === a ? r++ : ")" === a && -1 == --r && s.throwArgumentError("unbalanced parenthesis", "value", e))
                }
                return n && t.push(n),
                t
            }
            )(e).map(e=>m.fromString(e, t))
        }
        class g {
            constructor(e, t) {
                e !== u && s.throwError("use a static from method", a.Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "new Fragment()"
                }),
                p(this, t),
                this._isFragment = !0,
                Object.freeze(this)
            }
            static from(e) {
                return g.isFragment(e) ? e : "string" == typeof e ? g.fromString(e) : g.fromObject(e)
            }
            static fromObject(e) {
                if (g.isFragment(e))
                    return e;
                switch (e.type) {
                case "function":
                    return A.fromObject(e);
                case "event":
                    return b.fromObject(e);
                case "constructor":
                    return E.fromObject(e);
                case "error":
                    return k.fromObject(e);
                case "fallback":
                case "receive":
                    return null
                }
                return s.throwArgumentError("invalid fragment object", "value", e)
            }
            static fromString(e) {
                return "event" === (e = (e = (e = e.replace(/\s/g, " ")).replace(/\(/g, " (").replace(/\)/g, ") ").replace(/\s+/g, " ")).trim()).split(" ")[0] ? b.fromString(e.substring(5).trim()) : "function" === e.split(" ")[0] ? A.fromString(e.substring(8).trim()) : "constructor" === e.split("(")[0].trim() ? E.fromString(e.trim()) : "error" === e.split(" ")[0] ? k.fromString(e.substring(5).trim()) : s.throwArgumentError("unsupported fragment", "value", e)
            }
            static isFragment(e) {
                return !!(e && e._isFragment)
            }
        }
        class b extends g {
            format(e) {
                if (e || (e = f.sighash),
                f[e] || s.throwArgumentError("invalid format type", "format", e),
                e === f.json)
                    return JSON.stringify({
                        type: "event",
                        anonymous: this.anonymous,
                        name: this.name,
                        inputs: this.inputs.map(t=>JSON.parse(t.format(e)))
                    });
                let t = "";
                return e !== f.sighash && (t += "event "),
                t += this.name + "(" + this.inputs.map(t=>t.format(e)).join(e === f.full ? ", " : ",") + ") ",
                e !== f.sighash && this.anonymous && (t += "anonymous "),
                t.trim()
            }
            static from(e) {
                return "string" == typeof e ? b.fromString(e) : b.fromObject(e)
            }
            static fromObject(e) {
                if (b.isEventFragment(e))
                    return e;
                "event" !== e.type && s.throwArgumentError("invalid event object", "value", e);
                let t = {
                    name: S(e.name),
                    anonymous: e.anonymous,
                    inputs: e.inputs ? e.inputs.map(m.fromObject) : [],
                    type: "event"
                };
                return new b(u,t)
            }
            static fromString(e) {
                let t = e.match(I);
                t || s.throwArgumentError("invalid event string", "value", e);
                let n = !1;
                return t[3].split(" ").forEach(e=>{
                    switch (e.trim()) {
                    case "anonymous":
                        n = !0;
                        break;
                    case "":
                        break;
                    default:
                        s.warn("unknown modifier: " + e)
                    }
                }
                ),
                b.fromObject({
                    name: t[1].trim(),
                    anonymous: n,
                    inputs: y(t[2], !0),
                    type: "event"
                })
            }
            static isEventFragment(e) {
                return e && e._isFragment && "event" === e.type
            }
        }
        function v(e, t) {
            t.gas = null;
            let n = e.split("@");
            return 1 !== n.length ? (n.length > 2 && s.throwArgumentError("invalid human-readable ABI signature", "value", e),
            n[1].match(/^[0-9]+$/) || s.throwArgumentError("invalid human-readable ABI signature gas", "value", e),
            t.gas = r.O$.from(n[1]),
            n[0]) : e
        }
        function w(e, t) {
            t.constant = !1,
            t.payable = !1,
            t.stateMutability = "nonpayable",
            e.split(" ").forEach(e=>{
                switch (e.trim()) {
                case "constant":
                    t.constant = !0;
                    break;
                case "payable":
                    t.payable = !0,
                    t.stateMutability = "payable";
                    break;
                case "nonpayable":
                    t.payable = !1,
                    t.stateMutability = "nonpayable";
                    break;
                case "pure":
                    t.constant = !0,
                    t.stateMutability = "pure";
                    break;
                case "view":
                    t.constant = !0,
                    t.stateMutability = "view";
                    break;
                case "external":
                case "public":
                case "":
                    break;
                default:
                    console.log("unknown modifier: " + e)
                }
            }
            )
        }
        function T(e) {
            let t = {
                constant: !1,
                payable: !0,
                stateMutability: "payable"
            };
            return null != e.stateMutability ? (t.stateMutability = e.stateMutability,
            t.constant = "view" === t.stateMutability || "pure" === t.stateMutability,
            null != e.constant && !!e.constant !== t.constant && s.throwArgumentError("cannot have constant function with mutability " + t.stateMutability, "value", e),
            t.payable = "payable" === t.stateMutability,
            null != e.payable && !!e.payable !== t.payable && s.throwArgumentError("cannot have payable function with mutability " + t.stateMutability, "value", e)) : null != e.payable ? (t.payable = !!e.payable,
            null != e.constant || t.payable || "constructor" === e.type || s.throwArgumentError("unable to determine stateMutability", "value", e),
            t.constant = !!e.constant,
            t.constant ? t.stateMutability = "view" : t.stateMutability = t.payable ? "payable" : "nonpayable",
            t.payable && t.constant && s.throwArgumentError("cannot have constant payable function", "value", e)) : null != e.constant ? (t.constant = !!e.constant,
            t.payable = !t.constant,
            t.stateMutability = t.constant ? "view" : "payable") : "constructor" !== e.type && s.throwArgumentError("unable to determine stateMutability", "value", e),
            t
        }
        class E extends g {
            format(e) {
                if (e || (e = f.sighash),
                f[e] || s.throwArgumentError("invalid format type", "format", e),
                e === f.json)
                    return JSON.stringify({
                        type: "constructor",
                        stateMutability: "nonpayable" !== this.stateMutability ? this.stateMutability : void 0,
                        payable: this.payable,
                        gas: this.gas ? this.gas.toNumber() : void 0,
                        inputs: this.inputs.map(t=>JSON.parse(t.format(e)))
                    });
                e === f.sighash && s.throwError("cannot format a constructor for sighash", a.Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "format(sighash)"
                });
                let t = "constructor(" + this.inputs.map(t=>t.format(e)).join(e === f.full ? ", " : ",") + ") ";
                return this.stateMutability && "nonpayable" !== this.stateMutability && (t += this.stateMutability + " "),
                t.trim()
            }
            static from(e) {
                return "string" == typeof e ? E.fromString(e) : E.fromObject(e)
            }
            static fromObject(e) {
                if (E.isConstructorFragment(e))
                    return e;
                "constructor" !== e.type && s.throwArgumentError("invalid constructor object", "value", e);
                let t = T(e);
                t.constant && s.throwArgumentError("constructor cannot be constant", "value", e);
                let n = {
                    name: null,
                    type: e.type,
                    inputs: e.inputs ? e.inputs.map(m.fromObject) : [],
                    payable: t.payable,
                    stateMutability: t.stateMutability,
                    gas: e.gas ? r.O$.from(e.gas) : null
                };
                return new E(u,n)
            }
            static fromString(e) {
                let t = {
                    type: "constructor"
                }
                  , n = (e = v(e, t)).match(I);
                return n && "constructor" === n[1].trim() || s.throwArgumentError("invalid constructor string", "value", e),
                t.inputs = y(n[2].trim(), !1),
                w(n[3].trim(), t),
                E.fromObject(t)
            }
            static isConstructorFragment(e) {
                return e && e._isFragment && "constructor" === e.type
            }
        }
        class A extends E {
            format(e) {
                if (e || (e = f.sighash),
                f[e] || s.throwArgumentError("invalid format type", "format", e),
                e === f.json)
                    return JSON.stringify({
                        type: "function",
                        name: this.name,
                        constant: this.constant,
                        stateMutability: "nonpayable" !== this.stateMutability ? this.stateMutability : void 0,
                        payable: this.payable,
                        gas: this.gas ? this.gas.toNumber() : void 0,
                        inputs: this.inputs.map(t=>JSON.parse(t.format(e))),
                        outputs: this.outputs.map(t=>JSON.parse(t.format(e)))
                    });
                let t = "";
                return e !== f.sighash && (t += "function "),
                t += this.name + "(" + this.inputs.map(t=>t.format(e)).join(e === f.full ? ", " : ",") + ") ",
                e !== f.sighash && (this.stateMutability ? "nonpayable" !== this.stateMutability && (t += this.stateMutability + " ") : this.constant && (t += "view "),
                this.outputs && this.outputs.length && (t += "returns (" + this.outputs.map(t=>t.format(e)).join(", ") + ") "),
                null != this.gas && (t += "@" + this.gas.toString() + " ")),
                t.trim()
            }
            static from(e) {
                return "string" == typeof e ? A.fromString(e) : A.fromObject(e)
            }
            static fromObject(e) {
                if (A.isFunctionFragment(e))
                    return e;
                "function" !== e.type && s.throwArgumentError("invalid function object", "value", e);
                let t = T(e)
                  , n = {
                    type: e.type,
                    name: S(e.name),
                    constant: t.constant,
                    inputs: e.inputs ? e.inputs.map(m.fromObject) : [],
                    outputs: e.outputs ? e.outputs.map(m.fromObject) : [],
                    payable: t.payable,
                    stateMutability: t.stateMutability,
                    gas: e.gas ? r.O$.from(e.gas) : null
                };
                return new A(u,n)
            }
            static fromString(e) {
                let t = {
                    type: "function"
                }
                  , n = (e = v(e, t)).split(" returns ");
                n.length > 2 && s.throwArgumentError("invalid function string", "value", e);
                let r = n[0].match(I);
                if (r || s.throwArgumentError("invalid function signature", "value", e),
                t.name = r[1].trim(),
                t.name && S(t.name),
                t.inputs = y(r[2], !1),
                w(r[3].trim(), t),
                n.length > 1) {
                    let r = n[1].match(I);
                    ("" != r[1].trim() || "" != r[3].trim()) && s.throwArgumentError("unexpected tokens", "value", e),
                    t.outputs = y(r[2], !1)
                } else
                    t.outputs = [];
                return A.fromObject(t)
            }
            static isFunctionFragment(e) {
                return e && e._isFragment && "function" === e.type
            }
        }
        function x(e) {
            let t = e.format();
            return ("Error(string)" === t || "Panic(uint256)" === t) && s.throwArgumentError(`cannot specify user defined ${t} error`, "fragment", e),
            e
        }
        class k extends g {
            format(e) {
                if (e || (e = f.sighash),
                f[e] || s.throwArgumentError("invalid format type", "format", e),
                e === f.json)
                    return JSON.stringify({
                        type: "error",
                        name: this.name,
                        inputs: this.inputs.map(t=>JSON.parse(t.format(e)))
                    });
                let t = "";
                return e !== f.sighash && (t += "error "),
                (t += this.name + "(" + this.inputs.map(t=>t.format(e)).join(e === f.full ? ", " : ",") + ") ").trim()
            }
            static from(e) {
                return "string" == typeof e ? k.fromString(e) : k.fromObject(e)
            }
            static fromObject(e) {
                if (k.isErrorFragment(e))
                    return e;
                "error" !== e.type && s.throwArgumentError("invalid error object", "value", e);
                let t = {
                    type: e.type,
                    name: S(e.name),
                    inputs: e.inputs ? e.inputs.map(m.fromObject) : []
                };
                return x(new k(u,t))
            }
            static fromString(e) {
                let t = {
                    type: "error"
                }
                  , n = e.match(I);
                return n || s.throwArgumentError("invalid error signature", "value", e),
                t.name = n[1].trim(),
                t.name && S(t.name),
                t.inputs = y(n[2], !1),
                x(k.fromObject(t))
            }
            static isErrorFragment(e) {
                return e && e._isFragment && "error" === e.type
            }
        }
        function C(e) {
            return e.match(/^uint($|[^1-9])/) ? e = "uint256" + e.substring(4) : e.match(/^int($|[^1-9])/) && (e = "int256" + e.substring(3)),
            e
        }
        let _ = RegExp("^[a-zA-Z$_][a-zA-Z0-9$_]*$");
        function S(e) {
            return e && e.match(_) || s.throwArgumentError(`invalid identifier "${e}"`, "value", e),
            e
        }
        let I = RegExp("^([^)(]*)\\((.*)\\)([^)(]*)$")
    },
    73617: function(e, t, n) {
        "use strict";
        n.r(t),
        n.d(t, {
            AbiCoder: function() {
                return i.R
            },
            ConstructorFragment: function() {
                return r.Xg
            },
            ErrorFragment: function() {
                return r.IC
            },
            EventFragment: function() {
                return r.QV
            },
            FormatTypes: function() {
                return r.pc
            },
            Fragment: function() {
                return r.HY
            },
            FunctionFragment: function() {
                return r.YW
            },
            Indexed: function() {
                return a.Hk
            },
            Interface: function() {
                return a.vU
            },
            LogDescription: function() {
                return a.CC
            },
            ParamType: function() {
                return r._R
            },
            TransactionDescription: function() {
                return a.vk
            },
            checkResultErrors: function() {
                return o.BR
            },
            defaultAbiCoder: function() {
                return i.$
            }
        });
        var r = n(4356)
          , i = n(33244)
          , a = n(36284)
          , o = n(53082)
    },
    36284: function(e, t, n) {
        "use strict";
        n.d(t, {
            CC: function() {
                return h
            },
            Hk: function() {
                return g
            },
            vU: function() {
                return w
            },
            vk: function() {
                return m
            }
        });
        var r = n(60727)
          , i = n(13004)
          , a = n(70367)
          , o = n(58853)
          , s = n(92381)
          , u = n(28609)
          , l = n(33244)
          , c = n(4356)
          , d = n(61941)
          , p = n(1306);
        let f = new d.Logger(p.i);
        class h extends u.Description {
        }
        class m extends u.Description {
        }
        class y extends u.Description {
        }
        class g extends u.Description {
            static isIndexed(e) {
                return !!(e && e._isIndexed)
            }
        }
        let b = {
            "0x08c379a0": {
                signature: "Error(string)",
                name: "Error",
                inputs: ["string"],
                reason: !0
            },
            "0x4e487b71": {
                signature: "Panic(uint256)",
                name: "Panic",
                inputs: ["uint256"]
            }
        };
        function v(e, t) {
            let n = Error(`deferred error during ABI decoding triggered accessing ${e}`);
            return n.error = t,
            n
        }
        class w {
            constructor(e) {
                let t = [];
                t = "string" == typeof e ? JSON.parse(e) : e,
                (0,
                u.defineReadOnly)(this, "fragments", t.map(e=>c.HY.from(e)).filter(e=>null != e)),
                (0,
                u.defineReadOnly)(this, "_abiCoder", (0,
                u.getStatic)(new.target, "getAbiCoder")()),
                (0,
                u.defineReadOnly)(this, "functions", {}),
                (0,
                u.defineReadOnly)(this, "errors", {}),
                (0,
                u.defineReadOnly)(this, "events", {}),
                (0,
                u.defineReadOnly)(this, "structs", {}),
                this.fragments.forEach(e=>{
                    let t = null;
                    switch (e.type) {
                    case "constructor":
                        if (this.deploy) {
                            f.warn("duplicate definition - constructor");
                            return
                        }
                        (0,
                        u.defineReadOnly)(this, "deploy", e);
                        return;
                    case "function":
                        t = this.functions;
                        break;
                    case "event":
                        t = this.events;
                        break;
                    case "error":
                        t = this.errors;
                        break;
                    default:
                        return
                    }
                    let n = e.format();
                    if (t[n]) {
                        f.warn("duplicate definition - " + n);
                        return
                    }
                    t[n] = e
                }
                ),
                this.deploy || (0,
                u.defineReadOnly)(this, "deploy", c.Xg.from({
                    payable: !1,
                    type: "constructor"
                })),
                (0,
                u.defineReadOnly)(this, "_isInterface", !0)
            }
            format(e) {
                e || (e = c.pc.full),
                e === c.pc.sighash && f.throwArgumentError("interface does not support formatting sighash", "format", e);
                let t = this.fragments.map(t=>t.format(e));
                return e === c.pc.json ? JSON.stringify(t.map(e=>JSON.parse(e))) : t
            }
            static getAbiCoder() {
                return l.$
            }
            static getAddress(e) {
                return (0,
                r.getAddress)(e)
            }
            static getSighash(e) {
                return (0,
                a.hexDataSlice)((0,
                o.id)(e.format()), 0, 4)
            }
            static getEventTopic(e) {
                return (0,
                o.id)(e.format())
            }
            getFunction(e) {
                if ((0,
                a.isHexString)(e)) {
                    for (let t in this.functions)
                        if (e === this.getSighash(t))
                            return this.functions[t];
                    f.throwArgumentError("no matching function", "sighash", e)
                }
                if (-1 === e.indexOf("(")) {
                    let t = e.trim()
                      , n = Object.keys(this.functions).filter(e=>e.split("(")[0] === t);
                    return 0 === n.length ? f.throwArgumentError("no matching function", "name", t) : n.length > 1 && f.throwArgumentError("multiple matching functions", "name", t),
                    this.functions[n[0]]
                }
                let t = this.functions[c.YW.fromString(e).format()];
                return t || f.throwArgumentError("no matching function", "signature", e),
                t
            }
            getEvent(e) {
                if ((0,
                a.isHexString)(e)) {
                    let t = e.toLowerCase();
                    for (let e in this.events)
                        if (t === this.getEventTopic(e))
                            return this.events[e];
                    f.throwArgumentError("no matching event", "topichash", t)
                }
                if (-1 === e.indexOf("(")) {
                    let t = e.trim()
                      , n = Object.keys(this.events).filter(e=>e.split("(")[0] === t);
                    return 0 === n.length ? f.throwArgumentError("no matching event", "name", t) : n.length > 1 && f.throwArgumentError("multiple matching events", "name", t),
                    this.events[n[0]]
                }
                let t = this.events[c.QV.fromString(e).format()];
                return t || f.throwArgumentError("no matching event", "signature", e),
                t
            }
            getError(e) {
                if ((0,
                a.isHexString)(e)) {
                    let t = (0,
                    u.getStatic)(this.constructor, "getSighash");
                    for (let n in this.errors) {
                        let r = this.errors[n];
                        if (e === t(r))
                            return this.errors[n]
                    }
                    f.throwArgumentError("no matching error", "sighash", e)
                }
                if (-1 === e.indexOf("(")) {
                    let t = e.trim()
                      , n = Object.keys(this.errors).filter(e=>e.split("(")[0] === t);
                    return 0 === n.length ? f.throwArgumentError("no matching error", "name", t) : n.length > 1 && f.throwArgumentError("multiple matching errors", "name", t),
                    this.errors[n[0]]
                }
                let t = this.errors[c.YW.fromString(e).format()];
                return t || f.throwArgumentError("no matching error", "signature", e),
                t
            }
            getSighash(e) {
                if ("string" == typeof e)
                    try {
                        e = this.getFunction(e)
                    } catch (t) {
                        try {
                            e = this.getError(e)
                        } catch (e) {
                            throw t
                        }
                    }
                return (0,
                u.getStatic)(this.constructor, "getSighash")(e)
            }
            getEventTopic(e) {
                return "string" == typeof e && (e = this.getEvent(e)),
                (0,
                u.getStatic)(this.constructor, "getEventTopic")(e)
            }
            _decodeParams(e, t) {
                return this._abiCoder.decode(e, t)
            }
            _encodeParams(e, t) {
                return this._abiCoder.encode(e, t)
            }
            encodeDeploy(e) {
                return this._encodeParams(this.deploy.inputs, e || [])
            }
            decodeErrorResult(e, t) {
                "string" == typeof e && (e = this.getError(e));
                let n = (0,
                a.arrayify)(t);
                return (0,
                a.hexlify)(n.slice(0, 4)) !== this.getSighash(e) && f.throwArgumentError(`data signature does not match error ${e.name}.`, "data", (0,
                a.hexlify)(n)),
                this._decodeParams(e.inputs, n.slice(4))
            }
            encodeErrorResult(e, t) {
                return "string" == typeof e && (e = this.getError(e)),
                (0,
                a.hexlify)((0,
                a.concat)([this.getSighash(e), this._encodeParams(e.inputs, t || [])]))
            }
            decodeFunctionData(e, t) {
                "string" == typeof e && (e = this.getFunction(e));
                let n = (0,
                a.arrayify)(t);
                return (0,
                a.hexlify)(n.slice(0, 4)) !== this.getSighash(e) && f.throwArgumentError(`data signature does not match function ${e.name}.`, "data", (0,
                a.hexlify)(n)),
                this._decodeParams(e.inputs, n.slice(4))
            }
            encodeFunctionData(e, t) {
                return "string" == typeof e && (e = this.getFunction(e)),
                (0,
                a.hexlify)((0,
                a.concat)([this.getSighash(e), this._encodeParams(e.inputs, t || [])]))
            }
            decodeFunctionResult(e, t) {
                "string" == typeof e && (e = this.getFunction(e));
                let n = (0,
                a.arrayify)(t)
                  , r = null
                  , i = ""
                  , o = null
                  , s = null
                  , u = null;
                switch (n.length % this._abiCoder._getWordSize()) {
                case 0:
                    try {
                        return this._abiCoder.decode(e.outputs, n)
                    } catch (e) {}
                    break;
                case 4:
                    {
                        let e = (0,
                        a.hexlify)(n.slice(0, 4))
                          , t = b[e];
                        if (t)
                            o = this._abiCoder.decode(t.inputs, n.slice(4)),
                            s = t.name,
                            u = t.signature,
                            t.reason && (r = o[0]),
                            "Error" === s ? i = `; VM Exception while processing transaction: reverted with reason string ${JSON.stringify(o[0])}` : "Panic" === s && (i = `; VM Exception while processing transaction: reverted with panic code ${o[0]}`);
                        else
                            try {
                                let t = this.getError(e);
                                o = this._abiCoder.decode(t.inputs, n.slice(4)),
                                s = t.name,
                                u = t.format()
                            } catch (e) {}
                    }
                }
                return f.throwError("call revert exception" + i, d.Logger.errors.CALL_EXCEPTION, {
                    method: e.format(),
                    data: (0,
                    a.hexlify)(t),
                    errorArgs: o,
                    errorName: s,
                    errorSignature: u,
                    reason: r
                })
            }
            encodeFunctionResult(e, t) {
                return "string" == typeof e && (e = this.getFunction(e)),
                (0,
                a.hexlify)(this._abiCoder.encode(e.outputs, t || []))
            }
            encodeFilterTopics(e, t) {
                "string" == typeof e && (e = this.getEvent(e)),
                t.length > e.inputs.length && f.throwError("too many arguments for " + e.format(), d.Logger.errors.UNEXPECTED_ARGUMENT, {
                    argument: "values",
                    value: t
                });
                let n = [];
                e.anonymous || n.push(this.getEventTopic(e));
                let r = (e,t)=>"string" === e.type ? (0,
                o.id)(t) : "bytes" === e.type ? (0,
                s.keccak256)((0,
                a.hexlify)(t)) : ("bool" === e.type && "boolean" == typeof t && (t = t ? "0x01" : "0x00"),
                e.type.match(/^u?int/) && (t = i.O$.from(t).toHexString()),
                "address" === e.type && this._abiCoder.encode(["address"], [t]),
                (0,
                a.hexZeroPad)((0,
                a.hexlify)(t), 32));
                for (t.forEach((t,i)=>{
                    let a = e.inputs[i];
                    if (!a.indexed) {
                        null != t && f.throwArgumentError("cannot filter non-indexed parameters; must be null", "contract." + a.name, t);
                        return
                    }
                    null == t ? n.push(null) : "array" === a.baseType || "tuple" === a.baseType ? f.throwArgumentError("filtering with tuples or arrays not supported", "contract." + a.name, t) : Array.isArray(t) ? n.push(t.map(e=>r(a, e))) : n.push(r(a, t))
                }
                ); n.length && null === n[n.length - 1]; )
                    n.pop();
                return n
            }
            encodeEventLog(e, t) {
                "string" == typeof e && (e = this.getEvent(e));
                let n = []
                  , r = []
                  , i = [];
                return e.anonymous || n.push(this.getEventTopic(e)),
                t.length !== e.inputs.length && f.throwArgumentError("event arguments/values mismatch", "values", t),
                e.inputs.forEach((e,a)=>{
                    let u = t[a];
                    if (e.indexed) {
                        if ("string" === e.type)
                            n.push((0,
                            o.id)(u));
                        else if ("bytes" === e.type)
                            n.push((0,
                            s.keccak256)(u));
                        else if ("tuple" === e.baseType || "array" === e.baseType)
                            throw Error("not implemented");
                        else
                            n.push(this._abiCoder.encode([e.type], [u]))
                    } else
                        r.push(e),
                        i.push(u)
                }
                ),
                {
                    data: this._abiCoder.encode(r, i),
                    topics: n
                }
            }
            decodeEventLog(e, t, n) {
                if ("string" == typeof e && (e = this.getEvent(e)),
                null != n && !e.anonymous) {
                    let t = this.getEventTopic(e);
                    (0,
                    a.isHexString)(n[0], 32) && n[0].toLowerCase() === t || f.throwError("fragment/topic mismatch", d.Logger.errors.INVALID_ARGUMENT, {
                        argument: "topics[0]",
                        expected: t,
                        value: n[0]
                    }),
                    n = n.slice(1)
                }
                let r = []
                  , i = []
                  , o = [];
                e.inputs.forEach((e,t)=>{
                    e.indexed ? "string" === e.type || "bytes" === e.type || "tuple" === e.baseType || "array" === e.baseType ? (r.push(c._R.fromObject({
                        type: "bytes32",
                        name: e.name
                    })),
                    o.push(!0)) : (r.push(e),
                    o.push(!1)) : (i.push(e),
                    o.push(!1))
                }
                );
                let s = null != n ? this._abiCoder.decode(r, (0,
                a.concat)(n)) : null
                  , u = this._abiCoder.decode(i, t, !0)
                  , l = []
                  , p = 0
                  , h = 0;
                e.inputs.forEach((e,t)=>{
                    if (e.indexed) {
                        if (null == s)
                            l[t] = new g({
                                _isIndexed: !0,
                                hash: null
                            });
                        else if (o[t])
                            l[t] = new g({
                                _isIndexed: !0,
                                hash: s[h++]
                            });
                        else
                            try {
                                l[t] = s[h++]
                            } catch (e) {
                                l[t] = e
                            }
                    } else
                        try {
                            l[t] = u[p++]
                        } catch (e) {
                            l[t] = e
                        }
                    if (e.name && null == l[e.name]) {
                        let n = l[t];
                        n instanceof Error ? Object.defineProperty(l, e.name, {
                            enumerable: !0,
                            get: ()=>{
                                throw v(`property ${JSON.stringify(e.name)}`, n)
                            }
                        }) : l[e.name] = n
                    }
                }
                );
                for (let e = 0; e < l.length; e++) {
                    let t = l[e];
                    t instanceof Error && Object.defineProperty(l, e, {
                        enumerable: !0,
                        get: ()=>{
                            throw v(`index ${e}`, t)
                        }
                    })
                }
                return Object.freeze(l)
            }
            parseTransaction(e) {
                let t = this.getFunction(e.data.substring(0, 10).toLowerCase());
                return t ? new m({
                    args: this._abiCoder.decode(t.inputs, "0x" + e.data.substring(10)),
                    functionFragment: t,
                    name: t.name,
                    signature: t.format(),
                    sighash: this.getSighash(t),
                    value: i.O$.from(e.value || "0")
                }) : null
            }
            parseLog(e) {
                let t = this.getEvent(e.topics[0]);
                return !t || t.anonymous ? null : new h({
                    eventFragment: t,
                    name: t.name,
                    signature: t.format(),
                    topic: this.getEventTopic(t),
                    args: this.decodeEventLog(t, e.data, e.topics)
                })
            }
            parseError(e) {
                let t = (0,
                a.hexlify)(e)
                  , n = this.getError(t.substring(0, 10).toLowerCase());
                return n ? new y({
                    args: this._abiCoder.decode(n.inputs, "0x" + t.substring(10)),
                    errorFragment: n,
                    name: n.name,
                    signature: n.format(),
                    sighash: this.getSighash(n)
                }) : null
            }
            static isInterface(e) {
                return !!(e && e._isInterface)
            }
        }
    },
    480: function(e, t, n) {
        "use strict";
        n.r(t),
        n.d(t, {
            BlockForkEvent: function() {
                return l
            },
            ForkEvent: function() {
                return u
            },
            Provider: function() {
                return p
            },
            TransactionForkEvent: function() {
                return c
            },
            TransactionOrderForkEvent: function() {
                return d
            }
        });
        var r = n(13004);
        if (2272 == n.j)
            var i = n(70367);
        var a = n(28609)
          , o = n(61941);
        let s = new o.Logger("abstract-provider/5.7.0");
        class u extends a.Description {
            static isForkEvent(e) {
                return !!(e && e._isForkEvent)
            }
        }
        class l extends (2272 == n.j ? u : null) {
            constructor(e, t) {
                (0,
                i.isHexString)(e, 32) || s.throwArgumentError("invalid blockHash", "blockHash", e),
                super({
                    _isForkEvent: !0,
                    _isBlockForkEvent: !0,
                    expiry: t || 0,
                    blockHash: e
                })
            }
        }
        class c extends (2272 == n.j ? u : null) {
            constructor(e, t) {
                (0,
                i.isHexString)(e, 32) || s.throwArgumentError("invalid transaction hash", "hash", e),
                super({
                    _isForkEvent: !0,
                    _isTransactionForkEvent: !0,
                    expiry: t || 0,
                    hash: e
                })
            }
        }
        class d extends (2272 == n.j ? u : null) {
            constructor(e, t, n) {
                (0,
                i.isHexString)(e, 32) || s.throwArgumentError("invalid transaction hash", "beforeHash", e),
                (0,
                i.isHexString)(t, 32) || s.throwArgumentError("invalid transaction hash", "afterHash", t),
                super({
                    _isForkEvent: !0,
                    _isTransactionOrderForkEvent: !0,
                    expiry: n || 0,
                    beforeHash: e,
                    afterHash: t
                })
            }
        }
        class p {
            constructor() {
                s.checkAbstract(new.target, p),
                (0,
                a.defineReadOnly)(this, "_isProvider", !0)
            }
            getFeeData() {
                var e, t, n, i;
                return e = this,
                t = void 0,
                n = void 0,
                i = function*() {
                    let {block: e, gasPrice: t} = yield(0,
                    a.resolveProperties)({
                        block: this.getBlock("latest"),
                        gasPrice: this.getGasPrice().catch(e=>null)
                    })
                      , n = null
                      , i = null
                      , o = null;
                    return e && e.baseFeePerGas && (n = e.baseFeePerGas,
                    o = r.O$.from("1500000000"),
                    i = e.baseFeePerGas.mul(2).add(o)),
                    {
                        lastBaseFeePerGas: n,
                        maxFeePerGas: i,
                        maxPriorityFeePerGas: o,
                        gasPrice: t
                    }
                }
                ,
                new (n || (n = Promise))(function(r, a) {
                    function o(e) {
                        try {
                            u(i.next(e))
                        } catch (e) {
                            a(e)
                        }
                    }
                    function s(e) {
                        try {
                            u(i.throw(e))
                        } catch (e) {
                            a(e)
                        }
                    }
                    function u(e) {
                        var t;
                        e.done ? r(e.value) : ((t = e.value)instanceof n ? t : new n(function(e) {
                            e(t)
                        }
                        )).then(o, s)
                    }
                    u((i = i.apply(e, t || [])).next())
                }
                )
            }
            addListener(e, t) {
                return this.on(e, t)
            }
            removeListener(e, t) {
                return this.off(e, t)
            }
            static isProvider(e) {
                return !!(e && e._isProvider)
            }
        }
    },
    62563: function(e, t, n) {
        "use strict";
        n.r(t),
        n.d(t, {
            Signer: function() {
                return l
            },
            VoidSigner: function() {
                return c
            }
        });
        var r = n(28609)
          , i = n(61941)
          , a = function(e, t, n, r) {
            return new (n || (n = Promise))(function(i, a) {
                function o(e) {
                    try {
                        u(r.next(e))
                    } catch (e) {
                        a(e)
                    }
                }
                function s(e) {
                    try {
                        u(r.throw(e))
                    } catch (e) {
                        a(e)
                    }
                }
                function u(e) {
                    var t;
                    e.done ? i(e.value) : ((t = e.value)instanceof n ? t : new n(function(e) {
                        e(t)
                    }
                    )).then(o, s)
                }
                u((r = r.apply(e, t || [])).next())
            }
            )
        };
        let o = new i.Logger("abstract-signer/5.7.0")
          , s = ["accessList", "ccipReadEnabled", "chainId", "customData", "data", "from", "gasLimit", "gasPrice", "maxFeePerGas", "maxPriorityFeePerGas", "nonce", "to", "type", "value"]
          , u = [i.Logger.errors.INSUFFICIENT_FUNDS, i.Logger.errors.NONCE_EXPIRED, i.Logger.errors.REPLACEMENT_UNDERPRICED];
        class l {
            constructor() {
                o.checkAbstract(new.target, l),
                (0,
                r.defineReadOnly)(this, "_isSigner", !0)
            }
            getBalance(e) {
                return a(this, void 0, void 0, function*() {
                    return this._checkProvider("getBalance"),
                    yield this.provider.getBalance(this.getAddress(), e)
                })
            }
            getTransactionCount(e) {
                return a(this, void 0, void 0, function*() {
                    return this._checkProvider("getTransactionCount"),
                    yield this.provider.getTransactionCount(this.getAddress(), e)
                })
            }
            estimateGas(e) {
                return a(this, void 0, void 0, function*() {
                    this._checkProvider("estimateGas");
                    let t = yield(0,
                    r.resolveProperties)(this.checkTransaction(e));
                    return yield this.provider.estimateGas(t)
                })
            }
            call(e, t) {
                return a(this, void 0, void 0, function*() {
                    this._checkProvider("call");
                    let n = yield(0,
                    r.resolveProperties)(this.checkTransaction(e));
                    return yield this.provider.call(n, t)
                })
            }
            sendTransaction(e) {
                return a(this, void 0, void 0, function*() {
                    this._checkProvider("sendTransaction");
                    let t = yield this.populateTransaction(e)
                      , n = yield this.signTransaction(t);
                    return yield this.provider.sendTransaction(n)
                })
            }
            getChainId() {
                return a(this, void 0, void 0, function*() {
                    this._checkProvider("getChainId");
                    let e = yield this.provider.getNetwork();
                    return e.chainId
                })
            }
            getGasPrice() {
                return a(this, void 0, void 0, function*() {
                    return this._checkProvider("getGasPrice"),
                    yield this.provider.getGasPrice()
                })
            }
            getFeeData() {
                return a(this, void 0, void 0, function*() {
                    return this._checkProvider("getFeeData"),
                    yield this.provider.getFeeData()
                })
            }
            resolveName(e) {
                return a(this, void 0, void 0, function*() {
                    return this._checkProvider("resolveName"),
                    yield this.provider.resolveName(e)
                })
            }
            checkTransaction(e) {
                for (let t in e)
                    -1 === s.indexOf(t) && o.throwArgumentError("invalid transaction key: " + t, "transaction", e);
                let t = (0,
                r.shallowCopy)(e);
                return null == t.from ? t.from = this.getAddress() : t.from = Promise.all([Promise.resolve(t.from), this.getAddress()]).then(t=>(t[0].toLowerCase() !== t[1].toLowerCase() && o.throwArgumentError("from address mismatch", "transaction", e),
                t[0])),
                t
            }
            populateTransaction(e) {
                return a(this, void 0, void 0, function*() {
                    let t = yield(0,
                    r.resolveProperties)(this.checkTransaction(e));
                    null != t.to && (t.to = Promise.resolve(t.to).then(e=>a(this, void 0, void 0, function*() {
                        if (null == e)
                            return null;
                        let t = yield this.resolveName(e);
                        return null == t && o.throwArgumentError("provided ENS name resolves to null", "tx.to", e),
                        t
                    })),
                    t.to.catch(e=>{}
                    ));
                    let n = null != t.maxFeePerGas || null != t.maxPriorityFeePerGas;
                    if (null != t.gasPrice && (2 === t.type || n) ? o.throwArgumentError("eip-1559 transaction do not support gasPrice", "transaction", e) : (0 === t.type || 1 === t.type) && n && o.throwArgumentError("pre-eip-1559 transaction do not support maxFeePerGas/maxPriorityFeePerGas", "transaction", e),
                    (2 === t.type || null == t.type) && null != t.maxFeePerGas && null != t.maxPriorityFeePerGas)
                        t.type = 2;
                    else if (0 === t.type || 1 === t.type)
                        null == t.gasPrice && (t.gasPrice = this.getGasPrice());
                    else {
                        let e = yield this.getFeeData();
                        if (null == t.type) {
                            if (null != e.maxFeePerGas && null != e.maxPriorityFeePerGas) {
                                if (t.type = 2,
                                null != t.gasPrice) {
                                    let e = t.gasPrice;
                                    delete t.gasPrice,
                                    t.maxFeePerGas = e,
                                    t.maxPriorityFeePerGas = e
                                } else
                                    null == t.maxFeePerGas && (t.maxFeePerGas = e.maxFeePerGas),
                                    null == t.maxPriorityFeePerGas && (t.maxPriorityFeePerGas = e.maxPriorityFeePerGas)
                            } else
                                null != e.gasPrice ? (n && o.throwError("network does not support EIP-1559", i.Logger.errors.UNSUPPORTED_OPERATION, {
                                    operation: "populateTransaction"
                                }),
                                null == t.gasPrice && (t.gasPrice = e.gasPrice),
                                t.type = 0) : o.throwError("failed to get consistent fee data", i.Logger.errors.UNSUPPORTED_OPERATION, {
                                    operation: "signer.getFeeData"
                                })
                        } else
                            2 === t.type && (null == t.maxFeePerGas && (t.maxFeePerGas = e.maxFeePerGas),
                            null == t.maxPriorityFeePerGas && (t.maxPriorityFeePerGas = e.maxPriorityFeePerGas))
                    }
                    return null == t.nonce && (t.nonce = this.getTransactionCount("pending")),
                    null == t.gasLimit && (t.gasLimit = this.estimateGas(t).catch(e=>{
                        if (u.indexOf(e.code) >= 0)
                            throw e;
                        return o.throwError("cannot estimate gas; transaction may fail or may require manual gas limit", i.Logger.errors.UNPREDICTABLE_GAS_LIMIT, {
                            error: e,
                            tx: t
                        })
                    }
                    )),
                    null == t.chainId ? t.chainId = this.getChainId() : t.chainId = Promise.all([Promise.resolve(t.chainId), this.getChainId()]).then(t=>(0 !== t[1] && t[0] !== t[1] && o.throwArgumentError("chainId address mismatch", "transaction", e),
                    t[0])),
                    yield(0,
                    r.resolveProperties)(t)
                })
            }
            _checkProvider(e) {
                this.provider || o.throwError("missing provider", i.Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: e || "_checkProvider"
                })
            }
            static isSigner(e) {
                return !!(e && e._isSigner)
            }
        }
        class c extends l {
            constructor(e, t) {
                super(),
                (0,
                r.defineReadOnly)(this, "address", e),
                (0,
                r.defineReadOnly)(this, "provider", t || null)
            }
            getAddress() {
                return Promise.resolve(this.address)
            }
            _fail(e, t) {
                return Promise.resolve().then(()=>{
                    o.throwError(e, i.Logger.errors.UNSUPPORTED_OPERATION, {
                        operation: t
                    })
                }
                )
            }
            signMessage(e) {
                return this._fail("VoidSigner cannot sign messages", "signMessage")
            }
            signTransaction(e) {
                return this._fail("VoidSigner cannot sign transactions", "signTransaction")
            }
            _signTypedData(e, t, n) {
                return this._fail("VoidSigner cannot sign typed data", "signTypedData")
            }
            connect(e) {
                return new c(this.address,e)
            }
        }
    },
    60727: function(e, t, n) {
        "use strict";
        n.r(t),
        n.d(t, {
            getAddress: function() {
                return f
            },
            getContractAddress: function() {
                return y
            },
            getCreate2Address: function() {
                return g
            },
            getIcapAddress: function() {
                return m
            },
            isAddress: function() {
                return h
            }
        });
        var r = n(70367)
          , i = n(13004)
          , a = n(92381)
          , o = n(90634)
          , s = n(61941);
        let u = new s.Logger("address/5.7.0");
        function l(e) {
            (0,
            r.isHexString)(e, 20) || u.throwArgumentError("invalid address", "address", e),
            e = e.toLowerCase();
            let t = e.substring(2).split("")
              , n = new Uint8Array(40);
            for (let e = 0; e < 40; e++)
                n[e] = t[e].charCodeAt(0);
            let i = (0,
            r.arrayify)((0,
            a.keccak256)(n));
            for (let e = 0; e < 40; e += 2)
                i[e >> 1] >> 4 >= 8 && (t[e] = t[e].toUpperCase()),
                (15 & i[e >> 1]) >= 8 && (t[e + 1] = t[e + 1].toUpperCase());
            return "0x" + t.join("")
        }
        let c = {};
        for (let e = 0; e < 10; e++)
            c[String(e)] = String(e);
        for (let e = 0; e < 26; e++)
            c[String.fromCharCode(65 + e)] = String(10 + e);
        let d = Math.floor(Math.log10 ? Math.log10(9007199254740991) : Math.log(9007199254740991) / Math.LN10);
        function p(e) {
            let t = (e = (e = e.toUpperCase()).substring(4) + e.substring(0, 2) + "00").split("").map(e=>c[e]).join("");
            for (; t.length >= d; ) {
                let e = t.substring(0, d);
                t = parseInt(e, 10) % 97 + t.substring(e.length)
            }
            let n = String(98 - parseInt(t, 10) % 97);
            for (; n.length < 2; )
                n = "0" + n;
            return n
        }
        function f(e) {
            let t = null;
            if ("string" != typeof e && u.throwArgumentError("invalid address", "address", e),
            e.match(/^(0x)?[0-9a-fA-F]{40}$/))
                "0x" !== e.substring(0, 2) && (e = "0x" + e),
                t = l(e),
                e.match(/([A-F].*[a-f])|([a-f].*[A-F])/) && t !== e && u.throwArgumentError("bad address checksum", "address", e);
            else if (e.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {
                for (e.substring(2, 4) !== p(e) && u.throwArgumentError("bad icap checksum", "address", e),
                t = (0,
                i.g$)(e.substring(4)); t.length < 40; )
                    t = "0" + t;
                t = l("0x" + t)
            } else
                u.throwArgumentError("invalid address", "address", e);
            return t
        }
        function h(e) {
            try {
                return f(e),
                !0
            } catch (e) {}
            return !1
        }
        function m(e) {
            let t = (0,
            i.t2)(f(e).substring(2)).toUpperCase();
            for (; t.length < 30; )
                t = "0" + t;
            return "XE" + p("XE00" + t) + t
        }
        function y(e) {
            let t = null;
            try {
                t = f(e.from)
            } catch (t) {
                u.throwArgumentError("missing from address", "transaction", e)
            }
            let n = (0,
            r.stripZeros)((0,
            r.arrayify)(i.O$.from(e.nonce).toHexString()));
            return f((0,
            r.hexDataSlice)((0,
            a.keccak256)((0,
            o.encode)([t, n])), 12))
        }
        function g(e, t, n) {
            return 32 !== (0,
            r.hexDataLength)(t) && u.throwArgumentError("salt must be 32 bytes", "salt", t),
            32 !== (0,
            r.hexDataLength)(n) && u.throwArgumentError("initCodeHash must be 32 bytes", "initCodeHash", n),
            f((0,
            r.hexDataSlice)((0,
            a.keccak256)((0,
            r.concat)(["0xff", f(e), t, n])), 12))
        }
    },
    73054: function(e, t, n) {
        "use strict";
        n.d(t, {
            J: function() {
                return i
            },
            c: function() {
                return a
            }
        });
        var r = n(70367);
        function i(e) {
            e = atob(e);
            let t = [];
            for (let n = 0; n < e.length; n++)
                t.push(e.charCodeAt(n));
            return (0,
            r.arrayify)(t)
        }
        function a(e) {
            e = (0,
            r.arrayify)(e);
            let t = "";
            for (let n = 0; n < e.length; n++)
                t += String.fromCharCode(e[n]);
            return btoa(t)
        }
    },
    9182: function(e, t, n) {
        "use strict";
        n.r(t),
        n.d(t, {
            decode: function() {
                return r.J
            },
            encode: function() {
                return r.c
            }
        });
        var r = n(73054)
    },
    23583: function(e, t, n) {
        "use strict";
        n.r(t),
        n.d(t, {
            Base32: function() {
                return o
            },
            Base58: function() {
                return s
            },
            BaseX: function() {
                return a
            }
        });
        var r = n(70367)
          , i = n(28609);
        class a {
            constructor(e) {
                (0,
                i.defineReadOnly)(this, "alphabet", e),
                (0,
                i.defineReadOnly)(this, "base", e.length),
                (0,
                i.defineReadOnly)(this, "_alphabetMap", {}),
                (0,
                i.defineReadOnly)(this, "_leader", e.charAt(0));
                for (let t = 0; t < e.length; t++)
                    this._alphabetMap[e.charAt(t)] = t
            }
            encode(e) {
                let t = (0,
                r.arrayify)(e);
                if (0 === t.length)
                    return "";
                let n = [0];
                for (let e = 0; e < t.length; ++e) {
                    let r = t[e];
                    for (let e = 0; e < n.length; ++e)
                        r += n[e] << 8,
                        n[e] = r % this.base,
                        r = r / this.base | 0;
                    for (; r > 0; )
                        n.push(r % this.base),
                        r = r / this.base | 0
                }
                let i = "";
                for (let e = 0; 0 === t[e] && e < t.length - 1; ++e)
                    i += this._leader;
                for (let e = n.length - 1; e >= 0; --e)
                    i += this.alphabet[n[e]];
                return i
            }
            decode(e) {
                if ("string" != typeof e)
                    throw TypeError("Expected String");
                let t = [];
                if (0 === e.length)
                    return new Uint8Array(t);
                t.push(0);
                for (let n = 0; n < e.length; n++) {
                    let r = this._alphabetMap[e[n]];
                    if (void 0 === r)
                        throw Error("Non-base" + this.base + " character");
                    let i = r;
                    for (let e = 0; e < t.length; ++e)
                        i += t[e] * this.base,
                        t[e] = 255 & i,
                        i >>= 8;
                    for (; i > 0; )
                        t.push(255 & i),
                        i >>= 8
                }
                for (let n = 0; e[n] === this._leader && n < e.length - 1; ++n)
                    t.push(0);
                return (0,
                r.arrayify)(new Uint8Array(t.reverse()))
            }
        }
        let o = new a("abcdefghijklmnopqrstuvwxyz234567")
          , s = new a("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz")
    },
    57662: function(e, t, n) {
        "use strict";
        n.d(t, {
            i: function() {
                return r
            }
        });
        let r = "bignumber/5.7.0"
    },
    13004: function(e, t, n) {
        "use strict";
        n.d(t, {
            O$: function() {
                return f
            },
            Zm: function() {
                return d
            },
            g$: function() {
                return b
            },
            t2: function() {
                return v
            }
        });
        var r = n(98394)
          , i = n.n(r)
          , a = n(70367)
          , o = n(61941)
          , s = n(57662)
          , u = i().BN;
        let l = new o.Logger(s.i)
          , c = {};
        function d(e) {
            return null != e && (f.isBigNumber(e) || "number" == typeof e && e % 1 == 0 || "string" == typeof e && !!e.match(/^-?[0-9]+$/) || (0,
            a.isHexString)(e) || "bigint" == typeof e || (0,
            a.isBytes)(e))
        }
        let p = !1;
        class f {
            constructor(e, t) {
                e !== c && l.throwError("cannot call constructor directly; use BigNumber.from", o.Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "new (BigNumber)"
                }),
                this._hex = t,
                this._isBigNumber = !0,
                Object.freeze(this)
            }
            fromTwos(e) {
                return m(y(this).fromTwos(e))
            }
            toTwos(e) {
                return m(y(this).toTwos(e))
            }
            abs() {
                return "-" === this._hex[0] ? f.from(this._hex.substring(1)) : this
            }
            add(e) {
                return m(y(this).add(y(e)))
            }
            sub(e) {
                return m(y(this).sub(y(e)))
            }
            div(e) {
                let t = f.from(e);
                return t.isZero() && g("division-by-zero", "div"),
                m(y(this).div(y(e)))
            }
            mul(e) {
                return m(y(this).mul(y(e)))
            }
            mod(e) {
                let t = y(e);
                return t.isNeg() && g("division-by-zero", "mod"),
                m(y(this).umod(t))
            }
            pow(e) {
                let t = y(e);
                return t.isNeg() && g("negative-power", "pow"),
                m(y(this).pow(t))
            }
            and(e) {
                let t = y(e);
                return (this.isNegative() || t.isNeg()) && g("unbound-bitwise-result", "and"),
                m(y(this).and(t))
            }
            or(e) {
                let t = y(e);
                return (this.isNegative() || t.isNeg()) && g("unbound-bitwise-result", "or"),
                m(y(this).or(t))
            }
            xor(e) {
                let t = y(e);
                return (this.isNegative() || t.isNeg()) && g("unbound-bitwise-result", "xor"),
                m(y(this).xor(t))
            }
            mask(e) {
                return (this.isNegative() || e < 0) && g("negative-width", "mask"),
                m(y(this).maskn(e))
            }
            shl(e) {
                return (this.isNegative() || e < 0) && g("negative-width", "shl"),
                m(y(this).shln(e))
            }
            shr(e) {
                return (this.isNegative() || e < 0) && g("negative-width", "shr"),
                m(y(this).shrn(e))
            }
            eq(e) {
                return y(this).eq(y(e))
            }
            lt(e) {
                return y(this).lt(y(e))
            }
            lte(e) {
                return y(this).lte(y(e))
            }
            gt(e) {
                return y(this).gt(y(e))
            }
            gte(e) {
                return y(this).gte(y(e))
            }
            isNegative() {
                return "-" === this._hex[0]
            }
            isZero() {
                return y(this).isZero()
            }
            toNumber() {
                try {
                    return y(this).toNumber()
                } catch (e) {
                    g("overflow", "toNumber", this.toString())
                }
                return null
            }
            toBigInt() {
                try {
                    return BigInt(this.toString())
                } catch (e) {}
                return l.throwError("this platform does not support BigInt", o.Logger.errors.UNSUPPORTED_OPERATION, {
                    value: this.toString()
                })
            }
            toString() {
                return arguments.length > 0 && (10 === arguments[0] ? p || (p = !0,
                l.warn("BigNumber.toString does not accept any parameters; base-10 is assumed")) : 16 === arguments[0] ? l.throwError("BigNumber.toString does not accept any parameters; use bigNumber.toHexString()", o.Logger.errors.UNEXPECTED_ARGUMENT, {}) : l.throwError("BigNumber.toString does not accept parameters", o.Logger.errors.UNEXPECTED_ARGUMENT, {})),
                y(this).toString(10)
            }
            toHexString() {
                return this._hex
            }
            toJSON(e) {
                return {
                    type: "BigNumber",
                    hex: this.toHexString()
                }
            }
            static from(e) {
                if (e instanceof f)
                    return e;
                if ("string" == typeof e)
                    return e.match(/^-?0x[0-9a-f]+$/i) ? new f(c,h(e)) : e.match(/^-?[0-9]+$/) ? new f(c,h(new u(e))) : l.throwArgumentError("invalid BigNumber string", "value", e);
                if ("number" == typeof e)
                    return e % 1 && g("underflow", "BigNumber.from", e),
                    (e >= 9007199254740991 || e <= -9007199254740991) && g("overflow", "BigNumber.from", e),
                    f.from(String(e));
                if ("bigint" == typeof e)
                    return f.from(e.toString());
                if ((0,
                a.isBytes)(e))
                    return f.from((0,
                    a.hexlify)(e));
                if (e) {
                    if (e.toHexString) {
                        let t = e.toHexString();
                        if ("string" == typeof t)
                            return f.from(t)
                    } else {
                        let t = e._hex;
                        if (null == t && "BigNumber" === e.type && (t = e.hex),
                        "string" == typeof t && ((0,
                        a.isHexString)(t) || "-" === t[0] && (0,
                        a.isHexString)(t.substring(1))))
                            return f.from(t)
                    }
                }
                return l.throwArgumentError("invalid BigNumber value", "value", e)
            }
            static isBigNumber(e) {
                return !!(e && e._isBigNumber)
            }
        }
        function h(e) {
            if ("string" != typeof e)
                return h(e.toString(16));
            if ("-" === e[0])
                return ("-" === (e = e.substring(1))[0] && l.throwArgumentError("invalid hex", "value", e),
                "0x00" === (e = h(e))) ? e : "-" + e;
            if ("0x" !== e.substring(0, 2) && (e = "0x" + e),
            "0x" === e)
                return "0x00";
            for (e.length % 2 && (e = "0x0" + e.substring(2)); e.length > 4 && "0x00" === e.substring(0, 4); )
                e = "0x" + e.substring(4);
            return e
        }
        function m(e) {
            return f.from(h(e))
        }
        function y(e) {
            let t = f.from(e).toHexString();
            return "-" === t[0] ? new u("-" + t.substring(3),16) : new u(t.substring(2),16)
        }
        function g(e, t, n) {
            let r = {
                fault: e,
                operation: t
            };
            return null != n && (r.value = n),
            l.throwError(e, o.Logger.errors.NUMERIC_FAULT, r)
        }
        function b(e) {
            return new u(e,36).toString(16)
        }
        function v(e) {
            return new u(e,16).toString(36)
        }
    },
    81358: function(e, t, n) {
        "use strict";
        n.d(t, {
            Ox: function() {
                return m
            },
            S5: function() {
                return h
            },
            xs: function() {
                return g
            }
        });
        var r = n(70367)
          , i = n(61941)
          , a = n(57662)
          , o = n(13004);
        let s = new i.Logger(a.i)
          , u = {}
          , l = o.O$.from(0)
          , c = o.O$.from(-1);
        function d(e, t, n, r) {
            let a = {
                fault: t,
                operation: n
            };
            return void 0 !== r && (a.value = r),
            s.throwError(e, i.Logger.errors.NUMERIC_FAULT, a)
        }
        let p = "0";
        for (; p.length < 256; )
            p += p;
        function f(e) {
            if ("number" != typeof e)
                try {
                    e = o.O$.from(e).toNumber()
                } catch (e) {}
            return "number" == typeof e && e >= 0 && e <= 256 && !(e % 1) ? "1" + p.substring(0, e) : s.throwArgumentError("invalid decimal size", "decimals", e)
        }
        function h(e, t) {
            null == t && (t = 0);
            let n = f(t);
            e = o.O$.from(e);
            let r = e.lt(l);
            r && (e = e.mul(c));
            let i = e.mod(n).toString();
            for (; i.length < n.length - 1; )
                i = "0" + i;
            i = i.match(/^([0-9]*[1-9]|0)(0*)/)[1];
            let a = e.div(n).toString();
            return e = 1 === n.length ? a : a + "." + i,
            r && (e = "-" + e),
            e
        }
        function m(e, t) {
            null == t && (t = 0);
            let n = f(t);
            "string" == typeof e && e.match(/^-?[0-9.]+$/) || s.throwArgumentError("invalid decimal value", "value", e);
            let r = "-" === e.substring(0, 1);
            r && (e = e.substring(1)),
            "." === e && s.throwArgumentError("missing value", "value", e);
            let i = e.split(".");
            i.length > 2 && s.throwArgumentError("too many decimal points", "value", e);
            let a = i[0]
              , u = i[1];
            for (a || (a = "0"),
            u || (u = "0"); "0" === u[u.length - 1]; )
                u = u.substring(0, u.length - 1);
            for (u.length > n.length - 1 && d("fractional component exceeds decimals", "underflow", "parseFixed"),
            "" === u && (u = "0"); u.length < n.length - 1; )
                u += "0";
            let l = o.O$.from(a)
              , p = o.O$.from(u)
              , h = l.mul(n).add(p);
            return r && (h = h.mul(c)),
            h
        }
        class y {
            constructor(e, t, n, r) {
                e !== u && s.throwError("cannot use FixedFormat constructor; use FixedFormat.from", i.Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "new FixedFormat"
                }),
                this.signed = t,
                this.width = n,
                this.decimals = r,
                this.name = (t ? "" : "u") + "fixed" + String(n) + "x" + String(r),
                this._multiplier = f(r),
                Object.freeze(this)
            }
            static from(e) {
                if (e instanceof y)
                    return e;
                "number" == typeof e && (e = `fixed128x ${e}`);
                let t = !0
                  , n = 128
                  , r = 18;
                if ("string" == typeof e) {
                    if ("fixed" === e)
                        ;
                    else if ("ufixed" === e)
                        t = !1;
                    else {
                        let i = e.match(/^(u?)fixed([0-9]+)x([0-9]+)$/);
                        i || s.throwArgumentError("invalid fixed format", "format", e),
                        t = "u" !== i[1],
                        n = parseInt(i[2]),
                        r = parseInt(i[3])
                    }
                } else if (e) {
                    let i = (t,n,r)=>null == e[t] ? r : (typeof e[t] !== n && s.throwArgumentError("invalid fixed format (" + t + " not " + n + ")", "format." + t, e[t]),
                    e[t]);
                    t = i("signed", "boolean", t),
                    n = i("width", "number", n),
                    r = i("decimals", "number", r)
                }
                return n % 8 && s.throwArgumentError("invalid fixed format width (not byte aligned)", "format.width", n),
                r > 80 && s.throwArgumentError("invalid fixed format (decimals too large)", "format.decimals", r),
                new y(u,t,n,r)
            }
        }
        class g {
            constructor(e, t, n, r) {
                e !== u && s.throwError("cannot use FixedNumber constructor; use FixedNumber.from", i.Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "new FixedFormat"
                }),
                this.format = r,
                this._hex = t,
                this._value = n,
                this._isFixedNumber = !0,
                Object.freeze(this)
            }
            _checkFormat(e) {
                this.format.name !== e.format.name && s.throwArgumentError("incompatible format; use fixedNumber.toFormat", "other", e)
            }
            addUnsafe(e) {
                this._checkFormat(e);
                let t = m(this._value, this.format.decimals)
                  , n = m(e._value, e.format.decimals);
                return g.fromValue(t.add(n), this.format.decimals, this.format)
            }
            subUnsafe(e) {
                this._checkFormat(e);
                let t = m(this._value, this.format.decimals)
                  , n = m(e._value, e.format.decimals);
                return g.fromValue(t.sub(n), this.format.decimals, this.format)
            }
            mulUnsafe(e) {
                this._checkFormat(e);
                let t = m(this._value, this.format.decimals)
                  , n = m(e._value, e.format.decimals);
                return g.fromValue(t.mul(n).div(this.format._multiplier), this.format.decimals, this.format)
            }
            divUnsafe(e) {
                this._checkFormat(e);
                let t = m(this._value, this.format.decimals)
                  , n = m(e._value, e.format.decimals);
                return g.fromValue(t.mul(this.format._multiplier).div(n), this.format.decimals, this.format)
            }
            floor() {
                let e = this.toString().split(".");
                1 === e.length && e.push("0");
                let t = g.from(e[0], this.format)
                  , n = !e[1].match(/^(0*)$/);
                return this.isNegative() && n && (t = t.subUnsafe(b.toFormat(t.format))),
                t
            }
            ceiling() {
                let e = this.toString().split(".");
                1 === e.length && e.push("0");
                let t = g.from(e[0], this.format)
                  , n = !e[1].match(/^(0*)$/);
                return !this.isNegative() && n && (t = t.addUnsafe(b.toFormat(t.format))),
                t
            }
            round(e) {
                null == e && (e = 0);
                let t = this.toString().split(".");
                if (1 === t.length && t.push("0"),
                (e < 0 || e > 80 || e % 1) && s.throwArgumentError("invalid decimal count", "decimals", e),
                t[1].length <= e)
                    return this;
                let n = g.from("1" + p.substring(0, e), this.format)
                  , r = v.toFormat(this.format);
                return this.mulUnsafe(n).addUnsafe(r).floor().divUnsafe(n)
            }
            isZero() {
                return "0.0" === this._value || "0" === this._value
            }
            isNegative() {
                return "-" === this._value[0]
            }
            toString() {
                return this._value
            }
            toHexString(e) {
                if (null == e)
                    return this._hex;
                e % 8 && s.throwArgumentError("invalid byte width", "width", e);
                let t = o.O$.from(this._hex).fromTwos(this.format.width).toTwos(e).toHexString();
                return (0,
                r.hexZeroPad)(t, e / 8)
            }
            toUnsafeFloat() {
                return parseFloat(this.toString())
            }
            toFormat(e) {
                return g.fromString(this._value, e)
            }
            static fromValue(e, t, n) {
                return null != n || null == t || (0,
                o.Zm)(t) || (n = t,
                t = null),
                null == t && (t = 0),
                null == n && (n = "fixed"),
                g.fromString(h(e, t), y.from(n))
            }
            static fromString(e, t) {
                null == t && (t = "fixed");
                let n = y.from(t)
                  , i = m(e, n.decimals);
                !n.signed && i.lt(l) && d("unsigned value cannot be negative", "overflow", "value", e);
                let a = null;
                n.signed ? a = i.toTwos(n.width).toHexString() : (a = i.toHexString(),
                a = (0,
                r.hexZeroPad)(a, n.width / 8));
                let o = h(i, n.decimals);
                return new g(u,a,o,n)
            }
            static fromBytes(e, t) {
                null == t && (t = "fixed");
                let n = y.from(t);
                if ((0,
                r.arrayify)(e).length > n.width / 8)
                    throw Error("overflow");
                let i = o.O$.from(e);
                n.signed && (i = i.fromTwos(n.width));
                let a = i.toTwos((n.signed ? 0 : 1) + n.width).toHexString()
                  , s = h(i, n.decimals);
                return new g(u,a,s,n)
            }
            static from(e, t) {
                if ("string" == typeof e)
                    return g.fromString(e, t);
                if ((0,
                r.isBytes)(e))
                    return g.fromBytes(e, t);
                try {
                    return g.fromValue(e, 0, t)
                } catch (e) {
                    if (e.code !== i.Logger.errors.INVALID_ARGUMENT)
                        throw e
                }
                return s.throwArgumentError("invalid FixedNumber value", "value", e)
            }
            static isFixedNumber(e) {
                return !!(e && e._isFixedNumber)
            }
        }
        let b = g.from(1)
          , v = g.from("0.5")
    },
    70367: function(e, t, n) {
        "use strict";
        n.r(t),
        n.d(t, {
            arrayify: function() {
                return c
            },
            concat: function() {
                return d
            },
            hexConcat: function() {
                return v
            },
            hexDataLength: function() {
                return g
            },
            hexDataSlice: function() {
                return b
            },
            hexStripZeros: function() {
                return T
            },
            hexValue: function() {
                return w
            },
            hexZeroPad: function() {
                return E
            },
            hexlify: function() {
                return y
            },
            isBytes: function() {
                return l
            },
            isBytesLike: function() {
                return s
            },
            isHexString: function() {
                return h
            },
            joinSignature: function() {
                return x
            },
            splitSignature: function() {
                return A
            },
            stripZeros: function() {
                return p
            },
            zeroPad: function() {
                return f
            }
        });
        var r = n(61941);
        let i = new r.Logger("bytes/5.7.0");
        function a(e) {
            return !!e.toHexString
        }
        function o(e) {
            return e.slice || (e.slice = function() {
                let t = Array.prototype.slice.call(arguments);
                return o(new Uint8Array(Array.prototype.slice.apply(e, t)))
            }
            ),
            e
        }
        function s(e) {
            return h(e) && !(e.length % 2) || l(e)
        }
        function u(e) {
            return "number" == typeof e && e == e && e % 1 == 0
        }
        function l(e) {
            if (null == e)
                return !1;
            if (e.constructor === Uint8Array)
                return !0;
            if ("string" == typeof e || !u(e.length) || e.length < 0)
                return !1;
            for (let t = 0; t < e.length; t++) {
                let n = e[t];
                if (!u(n) || n < 0 || n >= 256)
                    return !1
            }
            return !0
        }
        function c(e, t) {
            if (t || (t = {}),
            "number" == typeof e) {
                i.checkSafeUint53(e, "invalid arrayify value");
                let t = [];
                for (; e; )
                    t.unshift(255 & e),
                    e = parseInt(String(e / 256));
                return 0 === t.length && t.push(0),
                o(new Uint8Array(t))
            }
            if (t.allowMissingPrefix && "string" == typeof e && "0x" !== e.substring(0, 2) && (e = "0x" + e),
            a(e) && (e = e.toHexString()),
            h(e)) {
                let n = e.substring(2);
                n.length % 2 && ("left" === t.hexPad ? n = "0" + n : "right" === t.hexPad ? n += "0" : i.throwArgumentError("hex data is odd-length", "value", e));
                let r = [];
                for (let e = 0; e < n.length; e += 2)
                    r.push(parseInt(n.substring(e, e + 2), 16));
                return o(new Uint8Array(r))
            }
            return l(e) ? o(new Uint8Array(e)) : i.throwArgumentError("invalid arrayify value", "value", e)
        }
        function d(e) {
            let t = e.map(e=>c(e))
              , n = t.reduce((e,t)=>e + t.length, 0)
              , r = new Uint8Array(n);
            return t.reduce((e,t)=>(r.set(t, e),
            e + t.length), 0),
            o(r)
        }
        function p(e) {
            let t = c(e);
            if (0 === t.length)
                return t;
            let n = 0;
            for (; n < t.length && 0 === t[n]; )
                n++;
            return n && (t = t.slice(n)),
            t
        }
        function f(e, t) {
            (e = c(e)).length > t && i.throwArgumentError("value out of range", "value", arguments[0]);
            let n = new Uint8Array(t);
            return n.set(e, t - e.length),
            o(n)
        }
        function h(e, t) {
            return "string" == typeof e && !!e.match(/^0x[0-9A-Fa-f]*$/) && (!t || e.length === 2 + 2 * t)
        }
        let m = "0123456789abcdef";
        function y(e, t) {
            if (t || (t = {}),
            "number" == typeof e) {
                i.checkSafeUint53(e, "invalid hexlify value");
                let t = "";
                for (; e; )
                    t = m[15 & e] + t,
                    e = Math.floor(e / 16);
                return t.length ? (t.length % 2 && (t = "0" + t),
                "0x" + t) : "0x00"
            }
            if ("bigint" == typeof e)
                return (e = e.toString(16)).length % 2 ? "0x0" + e : "0x" + e;
            if (t.allowMissingPrefix && "string" == typeof e && "0x" !== e.substring(0, 2) && (e = "0x" + e),
            a(e))
                return e.toHexString();
            if (h(e))
                return e.length % 2 && ("left" === t.hexPad ? e = "0x0" + e.substring(2) : "right" === t.hexPad ? e += "0" : i.throwArgumentError("hex data is odd-length", "value", e)),
                e.toLowerCase();
            if (l(e)) {
                let t = "0x";
                for (let n = 0; n < e.length; n++) {
                    let r = e[n];
                    t += m[(240 & r) >> 4] + m[15 & r]
                }
                return t
            }
            return i.throwArgumentError("invalid hexlify value", "value", e)
        }
        function g(e) {
            if ("string" != typeof e)
                e = y(e);
            else if (!h(e) || e.length % 2)
                return null;
            return (e.length - 2) / 2
        }
        function b(e, t, n) {
            return ("string" != typeof e ? e = y(e) : (!h(e) || e.length % 2) && i.throwArgumentError("invalid hexData", "value", e),
            t = 2 + 2 * t,
            null != n) ? "0x" + e.substring(t, 2 + 2 * n) : "0x" + e.substring(t)
        }
        function v(e) {
            let t = "0x";
            return e.forEach(e=>{
                t += y(e).substring(2)
            }
            ),
            t
        }
        function w(e) {
            let t = T(y(e, {
                hexPad: "left"
            }));
            return "0x" === t ? "0x0" : t
        }
        function T(e) {
            "string" != typeof e && (e = y(e)),
            h(e) || i.throwArgumentError("invalid hex string", "value", e),
            e = e.substring(2);
            let t = 0;
            for (; t < e.length && "0" === e[t]; )
                t++;
            return "0x" + e.substring(t)
        }
        function E(e, t) {
            for ("string" != typeof e ? e = y(e) : h(e) || i.throwArgumentError("invalid hex string", "value", e),
            e.length > 2 * t + 2 && i.throwArgumentError("value out of range", "value", arguments[1]); e.length < 2 * t + 2; )
                e = "0x0" + e.substring(2);
            return e
        }
        function A(e) {
            let t = {
                r: "0x",
                s: "0x",
                _vs: "0x",
                recoveryParam: 0,
                v: 0,
                yParityAndS: "0x",
                compact: "0x"
            };
            if (s(e)) {
                let n = c(e);
                64 === n.length ? (t.v = 27 + (n[32] >> 7),
                n[32] &= 127,
                t.r = y(n.slice(0, 32)),
                t.s = y(n.slice(32, 64))) : 65 === n.length ? (t.r = y(n.slice(0, 32)),
                t.s = y(n.slice(32, 64)),
                t.v = n[64]) : i.throwArgumentError("invalid signature string", "signature", e),
                t.v < 27 && (0 === t.v || 1 === t.v ? t.v += 27 : i.throwArgumentError("signature invalid v byte", "signature", e)),
                t.recoveryParam = 1 - t.v % 2,
                t.recoveryParam && (n[32] |= 128),
                t._vs = y(n.slice(32, 64))
            } else {
                if (t.r = e.r,
                t.s = e.s,
                t.v = e.v,
                t.recoveryParam = e.recoveryParam,
                t._vs = e._vs,
                null != t._vs) {
                    let n = f(c(t._vs), 32);
                    t._vs = y(n);
                    let r = n[0] >= 128 ? 1 : 0;
                    null == t.recoveryParam ? t.recoveryParam = r : t.recoveryParam !== r && i.throwArgumentError("signature recoveryParam mismatch _vs", "signature", e),
                    n[0] &= 127;
                    let a = y(n);
                    null == t.s ? t.s = a : t.s !== a && i.throwArgumentError("signature v mismatch _vs", "signature", e)
                }
                if (null == t.recoveryParam)
                    null == t.v ? i.throwArgumentError("signature missing v and recoveryParam", "signature", e) : 0 === t.v || 1 === t.v ? t.recoveryParam = t.v : t.recoveryParam = 1 - t.v % 2;
                else if (null == t.v)
                    t.v = 27 + t.recoveryParam;
                else {
                    let n = 0 === t.v || 1 === t.v ? t.v : 1 - t.v % 2;
                    t.recoveryParam !== n && i.throwArgumentError("signature recoveryParam mismatch v", "signature", e)
                }
                null != t.r && h(t.r) ? t.r = E(t.r, 32) : i.throwArgumentError("signature missing or invalid r", "signature", e),
                null != t.s && h(t.s) ? t.s = E(t.s, 32) : i.throwArgumentError("signature missing or invalid s", "signature", e);
                let n = c(t.s);
                n[0] >= 128 && i.throwArgumentError("signature s out of range", "signature", e),
                t.recoveryParam && (n[0] |= 128);
                let r = y(n);
                t._vs && (h(t._vs) || i.throwArgumentError("signature invalid _vs", "signature", e),
                t._vs = E(t._vs, 32)),
                null == t._vs ? t._vs = r : t._vs !== r && i.throwArgumentError("signature _vs mismatch v and s", "signature", e)
            }
            return t.yParityAndS = t._vs,
            t.compact = t.r + t.yParityAndS.substring(2),
            t
        }
        function x(e) {
            return y(d([(e = A(e)).r, e.s, e.recoveryParam ? "0x1c" : "0x1b"]))
        }
    },
    14852: function(e, t, n) {
        "use strict";
        n.d(t, {
            d: function() {
                return r
            }
        });
        let r = "0x0000000000000000000000000000000000000000"
    },
    84668: function(e, t, n) {
        "use strict";
        n.d(t, {
            $B: function() {
                return c
            },
            Bz: function() {
                return l
            },
            Ce: function() {
                return u
            },
            PS: function() {
                return d
            },
            Py: function() {
                return s
            },
            _Y: function() {
                return a
            },
            fh: function() {
                return o
            },
            tL: function() {
                return i
            }
        });
        var r = n(13004);
        let i = r.O$.from(-1)
          , a = r.O$.from(0)
          , o = r.O$.from(1)
          , s = 2272 == n.j ? r.O$.from(2) : null
          , u = 2272 == n.j ? r.O$.from("1000000000000000000") : null
          , l = r.O$.from("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff")
          , c = 2272 == n.j ? r.O$.from("-0x8000000000000000000000000000000000000000000000000000000000000000") : null
          , d = 2272 == n.j ? r.O$.from("0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff") : null
    },
    64943: function(e, t, n) {
        "use strict";
        n.d(t, {
            R: function() {
                return r
            }
        });
        let r = "0x0000000000000000000000000000000000000000000000000000000000000000"
    },
    2714: function(e, t, n) {
        "use strict";
        if (n.r(t),
        n.d(t, {
            AddressZero: function() {
                return r.d
            },
            EtherSymbol: function() {
                return o.v
            },
            HashZero: function() {
                return a.R
            },
            MaxInt256: function() {
                return i.PS
            },
            MaxUint256: function() {
                return i.Bz
            },
            MinInt256: function() {
                return i.$B
            },
            NegativeOne: function() {
                return i.tL
            },
            One: function() {
                return i.fh
            },
            Two: function() {
                return i.Py
            },
            WeiPerEther: function() {
                return i.Ce
            },
            Zero: function() {
                return i._Y
            }
        }),
        2272 == n.j)
            var r = n(14852);
        if (2272 == n.j)
            var i = n(84668);
        if (2272 == n.j)
            var a = n(64943);
        if (2272 == n.j)
            var o = n(78692)
    },
    78692: function(e, t, n) {
        "use strict";
        n.d(t, {
            v: function() {
                return r
            }
        });
        let r = "Ξ"
    },
    4817: function(e, t, n) {
        "use strict";
        n.d(t, {
            VZ: function() {
                return _
            },
            CH: function() {
                return S
            },
            lV: function() {
                return I
            }
        });
        var r = n(53082)
          , i = n(36284)
          , a = n(480)
          , o = n(62563)
          , s = n(60727)
          , u = n(13004)
          , l = n(70367)
          , c = n(28609)
          , d = n(38593)
          , p = n(61941)
          , f = function(e, t, n, r) {
            return new (n || (n = Promise))(function(i, a) {
                function o(e) {
                    try {
                        u(r.next(e))
                    } catch (e) {
                        a(e)
                    }
                }
                function s(e) {
                    try {
                        u(r.throw(e))
                    } catch (e) {
                        a(e)
                    }
                }
                function u(e) {
                    var t;
                    e.done ? i(e.value) : ((t = e.value)instanceof n ? t : new n(function(e) {
                        e(t)
                    }
                    )).then(o, s)
                }
                u((r = r.apply(e, t || [])).next())
            }
            )
        };
        let h = new p.Logger("contracts/5.7.0")
          , m = {
            chainId: !0,
            data: !0,
            from: !0,
            gasLimit: !0,
            gasPrice: !0,
            nonce: !0,
            to: !0,
            value: !0,
            type: !0,
            accessList: !0,
            maxFeePerGas: !0,
            maxPriorityFeePerGas: !0,
            customData: !0,
            ccipReadEnabled: !0
        };
        function y(e, t) {
            return f(this, void 0, void 0, function*() {
                let n = yield t;
                "string" != typeof n && h.throwArgumentError("invalid address or ENS name", "name", n);
                try {
                    return (0,
                    s.getAddress)(n)
                } catch (e) {}
                e || h.throwError("a provider or signer is needed to resolve ENS names", p.Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "resolveName"
                });
                let r = yield e.resolveName(n);
                return null == r && h.throwArgumentError("resolver or addr is not configured for ENS name", "name", n),
                r
            })
        }
        function g(e, t, n) {
            return f(this, void 0, void 0, function*() {
                return Array.isArray(n) ? yield Promise.all(n.map((n,r)=>g(e, Array.isArray(t) ? t[r] : t[n.name], n))) : "address" === n.type ? yield y(e, t) : "tuple" === n.type ? yield g(e, t, n.components) : "array" === n.baseType ? Array.isArray(t) ? yield Promise.all(t.map(t=>g(e, t, n.arrayChildren))) : Promise.reject(h.makeError("invalid value for array", p.Logger.errors.INVALID_ARGUMENT, {
                    argument: "value",
                    value: t
                })) : t
            })
        }
        function b(e, t, n) {
            return f(this, void 0, void 0, function*() {
                let r = {};
                n.length === t.inputs.length + 1 && "object" == typeof n[n.length - 1] && (r = (0,
                c.shallowCopy)(n.pop())),
                h.checkArgumentCount(n.length, t.inputs.length, "passed to contract"),
                e.signer ? r.from ? r.from = (0,
                c.resolveProperties)({
                    override: y(e.signer, r.from),
                    signer: e.signer.getAddress()
                }).then(e=>f(this, void 0, void 0, function*() {
                    return (0,
                    s.getAddress)(e.signer) !== e.override && h.throwError("Contract with a Signer cannot override from", p.Logger.errors.UNSUPPORTED_OPERATION, {
                        operation: "overrides.from"
                    }),
                    e.override
                })) : r.from = e.signer.getAddress() : r.from && (r.from = y(e.provider, r.from));
                let i = yield(0,
                c.resolveProperties)({
                    args: g(e.signer || e.provider, n, t.inputs),
                    address: e.resolvedAddress,
                    overrides: (0,
                    c.resolveProperties)(r) || {}
                })
                  , a = e.interface.encodeFunctionData(t, i.args)
                  , o = {
                    data: a,
                    to: i.address
                }
                  , m = i.overrides;
                if (null != m.nonce && (o.nonce = u.O$.from(m.nonce).toNumber()),
                null != m.gasLimit && (o.gasLimit = u.O$.from(m.gasLimit)),
                null != m.gasPrice && (o.gasPrice = u.O$.from(m.gasPrice)),
                null != m.maxFeePerGas && (o.maxFeePerGas = u.O$.from(m.maxFeePerGas)),
                null != m.maxPriorityFeePerGas && (o.maxPriorityFeePerGas = u.O$.from(m.maxPriorityFeePerGas)),
                null != m.from && (o.from = m.from),
                null != m.type && (o.type = m.type),
                null != m.accessList && (o.accessList = (0,
                d.accessListify)(m.accessList)),
                null == o.gasLimit && null != t.gas) {
                    let e = 21e3
                      , n = (0,
                    l.arrayify)(a);
                    for (let t = 0; t < n.length; t++)
                        e += 4,
                        n[t] && (e += 64);
                    o.gasLimit = u.O$.from(t.gas).add(e)
                }
                if (m.value) {
                    let e = u.O$.from(m.value);
                    e.isZero() || t.payable || h.throwError("non-payable method cannot override value", p.Logger.errors.UNSUPPORTED_OPERATION, {
                        operation: "overrides.value",
                        value: r.value
                    }),
                    o.value = e
                }
                m.customData && (o.customData = (0,
                c.shallowCopy)(m.customData)),
                m.ccipReadEnabled && (o.ccipReadEnabled = !!m.ccipReadEnabled),
                delete r.nonce,
                delete r.gasLimit,
                delete r.gasPrice,
                delete r.from,
                delete r.value,
                delete r.type,
                delete r.accessList,
                delete r.maxFeePerGas,
                delete r.maxPriorityFeePerGas,
                delete r.customData,
                delete r.ccipReadEnabled;
                let b = Object.keys(r).filter(e=>null != r[e]);
                return b.length && h.throwError(`cannot override ${b.map(e=>JSON.stringify(e)).join(",")}`, p.Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "overrides",
                    overrides: b
                }),
                o
            })
        }
        function v(e, t) {
            let n = t.wait.bind(t);
            t.wait = t=>n(t).then(t=>(t.events = t.logs.map(n=>{
                let r = (0,
                c.deepCopy)(n)
                  , i = null;
                try {
                    i = e.interface.parseLog(n)
                } catch (e) {}
                return i && (r.args = i.args,
                r.decode = (t,n)=>e.interface.decodeEventLog(i.eventFragment, t, n),
                r.event = i.name,
                r.eventSignature = i.signature),
                r.removeListener = ()=>e.provider,
                r.getBlock = ()=>e.provider.getBlock(t.blockHash),
                r.getTransaction = ()=>e.provider.getTransaction(t.transactionHash),
                r.getTransactionReceipt = ()=>Promise.resolve(t),
                r
            }
            ),
            t))
        }
        function w(e, t, n) {
            let r = e.signer || e.provider;
            return function(...i) {
                return f(this, void 0, void 0, function*() {
                    let a;
                    if (i.length === t.inputs.length + 1 && "object" == typeof i[i.length - 1]) {
                        let e = (0,
                        c.shallowCopy)(i.pop());
                        null != e.blockTag && (a = yield e.blockTag),
                        delete e.blockTag,
                        i.push(e)
                    }
                    null != e.deployTransaction && (yield e._deployed(a));
                    let o = yield b(e, t, i)
                      , s = yield r.call(o, a);
                    try {
                        let r = e.interface.decodeFunctionResult(t, s);
                        return n && 1 === t.outputs.length && (r = r[0]),
                        r
                    } catch (t) {
                        throw t.code === p.Logger.errors.CALL_EXCEPTION && (t.address = e.address,
                        t.args = i,
                        t.transaction = o),
                        t
                    }
                })
            }
        }
        function T(e, t, n) {
            return t.constant ? w(e, t, n) : function(...n) {
                return f(this, void 0, void 0, function*() {
                    e.signer || h.throwError("sending a transaction requires a signer", p.Logger.errors.UNSUPPORTED_OPERATION, {
                        operation: "sendTransaction"
                    }),
                    null != e.deployTransaction && (yield e._deployed());
                    let r = yield b(e, t, n)
                      , i = yield e.signer.sendTransaction(r);
                    return v(e, i),
                    i
                })
            }
        }
        function E(e) {
            return e.address && (null == e.topics || 0 === e.topics.length) ? "*" : (e.address || "*") + "@" + (e.topics ? e.topics.map(e=>Array.isArray(e) ? e.join("|") : e).join(":") : "")
        }
        class A {
            constructor(e, t) {
                (0,
                c.defineReadOnly)(this, "tag", e),
                (0,
                c.defineReadOnly)(this, "filter", t),
                this._listeners = []
            }
            addListener(e, t) {
                this._listeners.push({
                    listener: e,
                    once: t
                })
            }
            removeListener(e) {
                let t = !1;
                this._listeners = this._listeners.filter(n=>!!t || n.listener !== e || (t = !0,
                !1))
            }
            removeAllListeners() {
                this._listeners = []
            }
            listeners() {
                return this._listeners.map(e=>e.listener)
            }
            listenerCount() {
                return this._listeners.length
            }
            run(e) {
                let t = this.listenerCount();
                return this._listeners = this._listeners.filter(t=>{
                    let n = e.slice();
                    return setTimeout(()=>{
                        t.listener.apply(this, n)
                    }
                    , 0),
                    !t.once
                }
                ),
                t
            }
            prepareEvent(e) {}
            getEmit(e) {
                return [e]
            }
        }
        class x extends A {
            constructor() {
                super("error", null)
            }
        }
        class k extends A {
            constructor(e, t, n, r) {
                let i = {
                    address: e
                }
                  , a = t.getEventTopic(n);
                r ? (a !== r[0] && h.throwArgumentError("topic mismatch", "topics", r),
                i.topics = r.slice()) : i.topics = [a],
                super(E(i), i),
                (0,
                c.defineReadOnly)(this, "address", e),
                (0,
                c.defineReadOnly)(this, "interface", t),
                (0,
                c.defineReadOnly)(this, "fragment", n)
            }
            prepareEvent(e) {
                super.prepareEvent(e),
                e.event = this.fragment.name,
                e.eventSignature = this.fragment.format(),
                e.decode = (e,t)=>this.interface.decodeEventLog(this.fragment, e, t);
                try {
                    e.args = this.interface.decodeEventLog(this.fragment, e.data, e.topics)
                } catch (t) {
                    e.args = null,
                    e.decodeError = t
                }
            }
            getEmit(e) {
                let t = (0,
                r.BR)(e.args);
                if (t.length)
                    throw t[0].error;
                let n = (e.args || []).slice();
                return n.push(e),
                n
            }
        }
        class C extends A {
            constructor(e, t) {
                super("*", {
                    address: e
                }),
                (0,
                c.defineReadOnly)(this, "address", e),
                (0,
                c.defineReadOnly)(this, "interface", t)
            }
            prepareEvent(e) {
                super.prepareEvent(e);
                try {
                    let t = this.interface.parseLog(e);
                    e.event = t.name,
                    e.eventSignature = t.signature,
                    e.decode = (e,n)=>this.interface.decodeEventLog(t.eventFragment, e, n),
                    e.args = t.args
                } catch (e) {}
            }
        }
        class _ {
            constructor(e, t, n) {
                (0,
                c.defineReadOnly)(this, "interface", (0,
                c.getStatic)(new.target, "getInterface")(t)),
                null == n ? ((0,
                c.defineReadOnly)(this, "provider", null),
                (0,
                c.defineReadOnly)(this, "signer", null)) : o.Signer.isSigner(n) ? ((0,
                c.defineReadOnly)(this, "provider", n.provider || null),
                (0,
                c.defineReadOnly)(this, "signer", n)) : a.Provider.isProvider(n) ? ((0,
                c.defineReadOnly)(this, "provider", n),
                (0,
                c.defineReadOnly)(this, "signer", null)) : h.throwArgumentError("invalid signer or provider", "signerOrProvider", n),
                (0,
                c.defineReadOnly)(this, "callStatic", {}),
                (0,
                c.defineReadOnly)(this, "estimateGas", {}),
                (0,
                c.defineReadOnly)(this, "functions", {}),
                (0,
                c.defineReadOnly)(this, "populateTransaction", {}),
                (0,
                c.defineReadOnly)(this, "filters", {});
                {
                    let e = {};
                    Object.keys(this.interface.events).forEach(t=>{
                        let n = this.interface.events[t];
                        (0,
                        c.defineReadOnly)(this.filters, t, (...e)=>({
                            address: this.address,
                            topics: this.interface.encodeFilterTopics(n, e)
                        })),
                        e[n.name] || (e[n.name] = []),
                        e[n.name].push(t)
                    }
                    ),
                    Object.keys(e).forEach(t=>{
                        let n = e[t];
                        1 === n.length ? (0,
                        c.defineReadOnly)(this.filters, t, this.filters[n[0]]) : h.warn(`Duplicate definition of ${t} (${n.join(", ")})`)
                    }
                    )
                }
                if ((0,
                c.defineReadOnly)(this, "_runningEvents", {}),
                (0,
                c.defineReadOnly)(this, "_wrappedEmits", {}),
                null == e && h.throwArgumentError("invalid contract address or ENS name", "addressOrName", e),
                (0,
                c.defineReadOnly)(this, "address", e),
                this.provider)
                    (0,
                    c.defineReadOnly)(this, "resolvedAddress", y(this.provider, e));
                else
                    try {
                        (0,
                        c.defineReadOnly)(this, "resolvedAddress", Promise.resolve((0,
                        s.getAddress)(e)))
                    } catch (e) {
                        h.throwError("provider is required to use ENS name as contract address", p.Logger.errors.UNSUPPORTED_OPERATION, {
                            operation: "new Contract"
                        })
                    }
                this.resolvedAddress.catch(e=>{}
                );
                let r = {}
                  , i = {};
                Object.keys(this.interface.functions).forEach(e=>{
                    let t = this.interface.functions[e];
                    if (i[e]) {
                        h.warn(`Duplicate ABI entry for ${JSON.stringify(e)}`);
                        return
                    }
                    i[e] = !0;
                    {
                        let n = t.name;
                        r[`%${n}`] || (r[`%${n}`] = []),
                        r[`%${n}`].push(e)
                    }
                    if (null == this[e] && (0,
                    c.defineReadOnly)(this, e, T(this, t, !0)),
                    null == this.functions[e] && (0,
                    c.defineReadOnly)(this.functions, e, T(this, t, !1)),
                    null == this.callStatic[e] && (0,
                    c.defineReadOnly)(this.callStatic, e, w(this, t, !0)),
                    null == this.populateTransaction[e]) {
                        var n;
                        (0,
                        c.defineReadOnly)(this.populateTransaction, e, (n = this,
                        function(...e) {
                            return b(n, t, e)
                        }
                        ))
                    }
                    null == this.estimateGas[e] && (0,
                    c.defineReadOnly)(this.estimateGas, e, function(e, t) {
                        let n = e.signer || e.provider;
                        return function(...r) {
                            return f(this, void 0, void 0, function*() {
                                n || h.throwError("estimate require a provider or signer", p.Logger.errors.UNSUPPORTED_OPERATION, {
                                    operation: "estimateGas"
                                });
                                let i = yield b(e, t, r);
                                return yield n.estimateGas(i)
                            })
                        }
                    }(this, t))
                }
                ),
                Object.keys(r).forEach(e=>{
                    let t = r[e];
                    if (t.length > 1)
                        return;
                    e = e.substring(1);
                    let n = t[0];
                    try {
                        null == this[e] && (0,
                        c.defineReadOnly)(this, e, this[n])
                    } catch (e) {}
                    null == this.functions[e] && (0,
                    c.defineReadOnly)(this.functions, e, this.functions[n]),
                    null == this.callStatic[e] && (0,
                    c.defineReadOnly)(this.callStatic, e, this.callStatic[n]),
                    null == this.populateTransaction[e] && (0,
                    c.defineReadOnly)(this.populateTransaction, e, this.populateTransaction[n]),
                    null == this.estimateGas[e] && (0,
                    c.defineReadOnly)(this.estimateGas, e, this.estimateGas[n])
                }
                )
            }
            static getContractAddress(e) {
                return (0,
                s.getContractAddress)(e)
            }
            static getInterface(e) {
                return i.vU.isInterface(e) ? e : new i.vU(e)
            }
            deployed() {
                return this._deployed()
            }
            _deployed(e) {
                return this._deployedPromise || (this.deployTransaction ? this._deployedPromise = this.deployTransaction.wait().then(()=>this) : this._deployedPromise = this.provider.getCode(this.address, e).then(e=>("0x" === e && h.throwError("contract not deployed", p.Logger.errors.UNSUPPORTED_OPERATION, {
                    contractAddress: this.address,
                    operation: "getDeployed"
                }),
                this))),
                this._deployedPromise
            }
            fallback(e) {
                this.signer || h.throwError("sending a transactions require a signer", p.Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "sendTransaction(fallback)"
                });
                let t = (0,
                c.shallowCopy)(e || {});
                return ["from", "to"].forEach(function(e) {
                    null != t[e] && h.throwError("cannot override " + e, p.Logger.errors.UNSUPPORTED_OPERATION, {
                        operation: e
                    })
                }),
                t.to = this.resolvedAddress,
                this.deployed().then(()=>this.signer.sendTransaction(t))
            }
            connect(e) {
                "string" == typeof e && (e = new o.VoidSigner(e,this.provider));
                let t = new this.constructor(this.address,this.interface,e);
                return this.deployTransaction && (0,
                c.defineReadOnly)(t, "deployTransaction", this.deployTransaction),
                t
            }
            attach(e) {
                return new this.constructor(e,this.interface,this.signer || this.provider)
            }
            static isIndexed(e) {
                return i.Hk.isIndexed(e)
            }
            _normalizeRunningEvent(e) {
                return this._runningEvents[e.tag] ? this._runningEvents[e.tag] : e
            }
            _getRunningEvent(e) {
                if ("string" == typeof e) {
                    if ("error" === e)
                        return this._normalizeRunningEvent(new x);
                    if ("event" === e)
                        return this._normalizeRunningEvent(new A("event",null));
                    if ("*" === e)
                        return this._normalizeRunningEvent(new C(this.address,this.interface));
                    let t = this.interface.getEvent(e);
                    return this._normalizeRunningEvent(new k(this.address,this.interface,t))
                }
                if (e.topics && e.topics.length > 0) {
                    try {
                        let t = e.topics[0];
                        if ("string" != typeof t)
                            throw Error("invalid topic");
                        let n = this.interface.getEvent(t);
                        return this._normalizeRunningEvent(new k(this.address,this.interface,n,e.topics))
                    } catch (e) {}
                    let t = {
                        address: this.address,
                        topics: e.topics
                    };
                    return this._normalizeRunningEvent(new A(E(t),t))
                }
                return this._normalizeRunningEvent(new C(this.address,this.interface))
            }
            _checkRunningEvents(e) {
                if (0 === e.listenerCount()) {
                    delete this._runningEvents[e.tag];
                    let t = this._wrappedEmits[e.tag];
                    t && e.filter && (this.provider.off(e.filter, t),
                    delete this._wrappedEmits[e.tag])
                }
            }
            _wrapEvent(e, t, n) {
                let r = (0,
                c.deepCopy)(t);
                return r.removeListener = ()=>{
                    n && (e.removeListener(n),
                    this._checkRunningEvents(e))
                }
                ,
                r.getBlock = ()=>this.provider.getBlock(t.blockHash),
                r.getTransaction = ()=>this.provider.getTransaction(t.transactionHash),
                r.getTransactionReceipt = ()=>this.provider.getTransactionReceipt(t.transactionHash),
                e.prepareEvent(r),
                r
            }
            _addEventListener(e, t, n) {
                if (this.provider || h.throwError("events require a provider or a signer with a provider", p.Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "once"
                }),
                e.addListener(t, n),
                this._runningEvents[e.tag] = e,
                !this._wrappedEmits[e.tag]) {
                    let n = n=>{
                        let r = this._wrapEvent(e, n, t);
                        if (null == r.decodeError)
                            try {
                                let t = e.getEmit(r);
                                this.emit(e.filter, ...t)
                            } catch (e) {
                                r.decodeError = e.error
                            }
                        null != e.filter && this.emit("event", r),
                        null != r.decodeError && this.emit("error", r.decodeError, r)
                    }
                    ;
                    this._wrappedEmits[e.tag] = n,
                    null != e.filter && this.provider.on(e.filter, n)
                }
            }
            queryFilter(e, t, n) {
                let r = this._getRunningEvent(e)
                  , i = (0,
                c.shallowCopy)(r.filter);
                return "string" == typeof t && (0,
                l.isHexString)(t, 32) ? (null != n && h.throwArgumentError("cannot specify toBlock with blockhash", "toBlock", n),
                i.blockHash = t) : (i.fromBlock = null != t ? t : 0,
                i.toBlock = null != n ? n : "latest"),
                this.provider.getLogs(i).then(e=>e.map(e=>this._wrapEvent(r, e, null)))
            }
            on(e, t) {
                return this._addEventListener(this._getRunningEvent(e), t, !1),
                this
            }
            once(e, t) {
                return this._addEventListener(this._getRunningEvent(e), t, !0),
                this
            }
            emit(e, ...t) {
                if (!this.provider)
                    return !1;
                let n = this._getRunningEvent(e)
                  , r = n.run(t) > 0;
                return this._checkRunningEvents(n),
                r
            }
            listenerCount(e) {
                return this.provider ? null == e ? Object.keys(this._runningEvents).reduce((e,t)=>e + this._runningEvents[t].listenerCount(), 0) : this._getRunningEvent(e).listenerCount() : 0
            }
            listeners(e) {
                if (!this.provider)
                    return [];
                if (null == e) {
                    let e = [];
                    for (let t in this._runningEvents)
                        this._runningEvents[t].listeners().forEach(t=>{
                            e.push(t)
                        }
                        );
                    return e
                }
                return this._getRunningEvent(e).listeners()
            }
            removeAllListeners(e) {
                if (!this.provider)
                    return this;
                if (null == e) {
                    for (let e in this._runningEvents) {
                        let t = this._runningEvents[e];
                        t.removeAllListeners(),
                        this._checkRunningEvents(t)
                    }
                    return this
                }
                let t = this._getRunningEvent(e);
                return t.removeAllListeners(),
                this._checkRunningEvents(t),
                this
            }
            off(e, t) {
                if (!this.provider)
                    return this;
                let n = this._getRunningEvent(e);
                return n.removeListener(t),
                this._checkRunningEvents(n),
                this
            }
            removeListener(e, t) {
                return this.off(e, t)
            }
        }
        class S extends _ {
        }
        class I {
            constructor(e, t, n) {
                let r = null;
                "0x" !== (r = "string" == typeof t ? t : (0,
                l.isBytes)(t) ? (0,
                l.hexlify)(t) : t && "string" == typeof t.object ? t.object : "!").substring(0, 2) && (r = "0x" + r),
                (!(0,
                l.isHexString)(r) || r.length % 2) && h.throwArgumentError("invalid bytecode", "bytecode", t),
                n && !o.Signer.isSigner(n) && h.throwArgumentError("invalid signer", "signer", n),
                (0,
                c.defineReadOnly)(this, "bytecode", r),
                (0,
                c.defineReadOnly)(this, "interface", (0,
                c.getStatic)(new.target, "getInterface")(e)),
                (0,
                c.defineReadOnly)(this, "signer", n || null)
            }
            getDeployTransaction(...e) {
                let t = {};
                if (e.length === this.interface.deploy.inputs.length + 1 && "object" == typeof e[e.length - 1]) {
                    for (let n in t = (0,
                    c.shallowCopy)(e.pop()))
                        if (!m[n])
                            throw Error("unknown transaction override " + n)
                }
                if (["data", "from", "to"].forEach(e=>{
                    null != t[e] && h.throwError("cannot override " + e, p.Logger.errors.UNSUPPORTED_OPERATION, {
                        operation: e
                    })
                }
                ),
                t.value) {
                    let e = u.O$.from(t.value);
                    e.isZero() || this.interface.deploy.payable || h.throwError("non-payable constructor cannot override value", p.Logger.errors.UNSUPPORTED_OPERATION, {
                        operation: "overrides.value",
                        value: t.value
                    })
                }
                return h.checkArgumentCount(e.length, this.interface.deploy.inputs.length, " in Contract constructor"),
                t.data = (0,
                l.hexlify)((0,
                l.concat)([this.bytecode, this.interface.encodeDeploy(e)])),
                t
            }
            deploy(...e) {
                return f(this, void 0, void 0, function*() {
                    let t = {};
                    e.length === this.interface.deploy.inputs.length + 1 && (t = e.pop()),
                    h.checkArgumentCount(e.length, this.interface.deploy.inputs.length, " in Contract constructor");
                    let n = yield g(this.signer, e, this.interface.deploy.inputs);
                    n.push(t);
                    let r = this.getDeployTransaction(...n)
                      , i = yield this.signer.sendTransaction(r)
                      , a = (0,
                    c.getStatic)(this.constructor, "getContractAddress")(i)
                      , o = (0,
                    c.getStatic)(this.constructor, "getContract")(a, this.interface, this.signer);
                    return v(o, i),
                    (0,
                    c.defineReadOnly)(o, "deployTransaction", i),
                    o
                })
            }
            attach(e) {
                return this.constructor.getContract(e, this.interface, this.signer)
            }
            connect(e) {
                return new this.constructor(this.interface,this.bytecode,e)
            }
            static fromSolidity(e, t) {
                null == e && h.throwError("missing compiler output", p.Logger.errors.MISSING_ARGUMENT, {
                    argument: "compilerOutput"
                }),
                "string" == typeof e && (e = JSON.parse(e));
                let n = e.abi
                  , r = null;
                return e.bytecode ? r = e.bytecode : e.evm && e.evm.bytecode && (r = e.evm.bytecode),
                new this(n,r,t)
            }
            static getInterface(e) {
                return S.getInterface(e)
            }
            static getContractAddress(e) {
                return (0,
                s.getContractAddress)(e)
            }
            static getContract(e, t, n) {
                return new S(e,t,n)
            }
        }
    },
    24489: function(e, t, n) {
        "use strict";
        n.d(t, {
            i: function() {
                return r
            }
        });
        let r = "hash/5.7.0"
    },
    58853: function(e, t, n) {
        "use strict";
        n.d(t, {
            id: function() {
                return a
            }
        });
        var r = n(92381)
          , i = n(4082);
        function a(e) {
            return (0,
            r.keccak256)((0,
            i.Y0)(e))
        }
    },
    43284: function(e, t, n) {
        "use strict";
        n.r(t),
        n.d(t, {
            _TypedDataEncoder: function() {
                return o.E
            },
            dnsEncode: function() {
                return i.Kn
            },
            ensNormalize: function() {
                return i.w3
            },
            hashMessage: function() {
                return a.r
            },
            id: function() {
                return r.id
            },
            isValidName: function() {
                return i.r1
            },
            messagePrefix: function() {
                return a.B
            },
            namehash: function() {
                return i.VM
            }
        });
        var r = n(58853)
          , i = n(84432)
          , a = n(36869)
          , o = n(19794)
    },
    36869: function(e, t, n) {
        "use strict";
        n.d(t, {
            B: function() {
                return o
            },
            r: function() {
                return s
            }
        });
        var r = n(70367)
          , i = n(92381)
          , a = n(4082);
        let o = "\x19Ethereum Signed Message:\n";
        function s(e) {
            return "string" == typeof e && (e = (0,
            a.Y0)(e)),
            (0,
            i.keccak256)((0,
            r.concat)([(0,
            a.Y0)(o), (0,
            a.Y0)(String(e.length)), e]))
        }
    },
    84432: function(e, t, n) {
        "use strict";
        let r, i;
        n.d(t, {
            Kn: function() {
                return P
            },
            w3: function() {
                return _
            },
            r1: function() {
                return S
            },
            VM: function() {
                return I
            }
        });
        var a, o = n(70367), s = n(4082), u = n(92381), l = n(61941), c = n(24489), d = n(73054);
        function p(e, t) {
            null == t && (t = 1);
            let n = []
              , r = n.forEach
              , i = function(e, t) {
                r.call(e, function(e) {
                    t > 0 && Array.isArray(e) ? i(e, t - 1) : n.push(e)
                })
            };
            return i(e, t),
            n
        }
        function f(e, t) {
            let n = Array(e);
            for (let r = 0, i = -1; r < e; r++)
                n[r] = i += 1 + t();
            return n
        }
        function h(e, t) {
            let n = f(e(), e)
              , r = e()
              , i = f(r, e)
              , a = function(e, t) {
                let n = Array(e);
                for (let r = 0; r < e; r++)
                    n[r] = 1 + t();
                return n
            }(r, e);
            for (let e = 0; e < r; e++)
                for (let t = 0; t < a[e]; t++)
                    n.push(i[e] + t);
            return t ? n.map(e=>t[e]) : n
        }
        function m(e, t, n) {
            let r = Array(e).fill(void 0).map(()=>[]);
            for (let i = 0; i < t; i++)
                (function(e, t) {
                    let n = Array(e);
                    for (let i = 0, a = 0; i < e; i++) {
                        var r;
                        n[i] = a += 1 & (r = t()) ? ~r >> 1 : r >> 1
                    }
                    return n
                }
                )(e, n).forEach((e,t)=>r[t].push(e));
            return r
        }
        let y = (a = function(e) {
            let t = 0;
            function n() {
                return e[t++] << 8 | e[t++]
            }
            let r = n()
              , i = 1
              , a = [0, 1];
            for (let e = 1; e < r; e++)
                a.push(i += n());
            let o = n()
              , s = t;
            t += o;
            let u = 0
              , l = 0;
            function c() {
                return 0 == u && (l = l << 8 | e[t++],
                u = 8),
                l >> --u & 1
            }
            let d = 0;
            for (let e = 0; e < 31; e++)
                d = d << 1 | c();
            let p = []
              , f = 0
              , h = 2147483648;
            for (; ; ) {
                let e = Math.floor(((d - f + 1) * i - 1) / h)
                  , t = 0
                  , n = r;
                for (; n - t > 1; ) {
                    let r = t + n >>> 1;
                    e < a[r] ? n = r : t = r
                }
                if (0 == t)
                    break;
                p.push(t);
                let o = f + Math.floor(h * a[t] / i)
                  , s = f + Math.floor(h * a[t + 1] / i) - 1;
                for (; ((o ^ s) & 1073741824) == 0; )
                    d = d << 1 & 2147483647 | c(),
                    o = o << 1 & 2147483647,
                    s = s << 1 & 2147483647 | 1;
                for (; o & ~s & 536870912; )
                    d = 1073741824 & d | d << 1 & 1073741823 | c(),
                    o = o << 1 ^ 1073741824,
                    s = (1073741824 ^ s) << 1 | 1073741825;
                f = o,
                h = 1 + s - o
            }
            let m = r - 4;
            return p.map(t=>{
                switch (t - m) {
                case 3:
                    return m + 65792 + (e[s++] << 16 | e[s++] << 8 | e[s++]);
                case 2:
                    return m + 256 + (e[s++] << 8 | e[s++]);
                case 1:
                    return m + e[s++];
                default:
                    return t - 1
                }
            }
            )
        }((0,
        d.J)("")),
        i = 0,
        ()=>a[i++])
          , g = new Set(h(y))
          , b = new Set(h(y))
          , v = function(e) {
            let t = [];
            for (; ; ) {
                let n = e();
                if (0 == n)
                    break;
                t.push(function(e, t) {
                    let n = 1 + t()
                      , r = t()
                      , i = function(e) {
                        let t = [];
                        for (; ; ) {
                            let n = e();
                            if (0 == n)
                                break;
                            t.push(n)
                        }
                        return t
                    }(t);
                    return p(m(i.length, 1 + e, t).map((e,t)=>{
                        let a = e[0]
                          , o = e.slice(1);
                        return Array(i[t]).fill(void 0).map((e,t)=>{
                            let i = t * r;
                            return [a + t * n, o.map(e=>e + i)]
                        }
                        )
                    }
                    ))
                }(n, e))
            }
            for (; ; ) {
                let n = e() - 1;
                if (n < 0)
                    break;
                t.push(m(1 + e(), 1 + n, e).map(e=>[e[0], e.slice(1)]))
            }
            return function(e) {
                let t = {};
                for (let n = 0; n < e.length; n++) {
                    let r = e[n];
                    t[r[0]] = r[1]
                }
                return t
            }(p(t))
        }(y)
          , w = (r = h(y).sort((e,t)=>e - t),
        function e() {
            let t = [];
            for (; ; ) {
                let n = h(y, r);
                if (0 == n.length)
                    break;
                t.push({
                    set: new Set(n),
                    node: e()
                })
            }
            t.sort((e,t)=>t.set.size - e.set.size);
            let n = y();
            return {
                branches: t,
                valid: n % 3,
                fe0f: !!(1 & (n = n / 3 | 0)),
                save: 1 == (n >>= 1),
                check: 2 == n
            }
        }());
        function T(e) {
            return e.filter(e=>65039 != e)
        }
        function E(e) {
            for (let n of e.split(".")) {
                var t;
                let e = (t = n,
                (0,
                s.XL)(t));
                try {
                    for (let t = e.lastIndexOf(95) - 1; t >= 0; t--)
                        if (95 !== e[t])
                            throw Error("underscore only allowed at start");
                    if (e.length >= 4 && e.every(e=>e < 128) && 45 === e[2] && 45 === e[3])
                        throw Error("invalid label extension")
                } catch (e) {
                    throw Error(`Invalid label "${n}": ${e.message}`)
                }
            }
            return e
        }
        let A = new l.Logger(c.i)
          , x = new Uint8Array(32);
        function k(e) {
            if (0 === e.length)
                throw Error("invalid ENS name; empty component");
            return e
        }
        function C(e) {
            let t = (0,
            s.Y0)(E(function(e, t) {
                let n = (0,
                s.XL)(e).reverse()
                  , r = [];
                for (; n.length; ) {
                    let e = function(e, t) {
                        var n;
                        let r, i;
                        let a = w
                          , o = []
                          , s = e.length;
                        for (t && (t.length = 0); s; ) {
                            let u = e[--s];
                            if (!(a = null === (n = a.branches.find(e=>e.set.has(u))) || void 0 === n ? void 0 : n.node))
                                break;
                            if (a.save)
                                i = u;
                            else if (a.check && u === i)
                                break;
                            o.push(u),
                            a.fe0f && (o.push(65039),
                            s > 0 && 65039 == e[s - 1] && s--),
                            a.valid && (r = o.slice(),
                            2 == a.valid && r.splice(1, 1),
                            t && t.push(...e.slice(s).reverse()),
                            e.length = s)
                        }
                        return r
                    }(n);
                    if (e) {
                        r.push(...t(e));
                        continue
                    }
                    let i = n.pop();
                    if (g.has(i)) {
                        r.push(i);
                        continue
                    }
                    if (b.has(i))
                        continue;
                    let a = v[i];
                    if (a) {
                        r.push(...a);
                        continue
                    }
                    throw Error(`Disallowed codepoint: 0x ${i.toString(16).toUpperCase()}`)
                }
                return E(String.fromCodePoint(...r).normalize("NFC"))
            }(e, T)))
              , n = [];
            if (0 === e.length)
                return n;
            let r = 0;
            for (let e = 0; e < t.length; e++) {
                let i = t[e];
                46 === i && (n.push(k(t.slice(r, e))),
                r = e + 1)
            }
            if (r >= t.length)
                throw Error("invalid ENS name; empty component");
            return n.push(k(t.slice(r))),
            n
        }
        function _(e) {
            return C(e).map(e=>(0,
            s.ZN)(e)).join(".")
        }
        function S(e) {
            try {
                return 0 !== C(e).length
            } catch (e) {}
            return !1
        }
        function I(e) {
            "string" != typeof e && A.throwArgumentError("invalid ENS name; not a string", "name", e);
            let t = x
              , n = C(e);
            for (; n.length; )
                t = (0,
                u.keccak256)((0,
                o.concat)([t, (0,
                u.keccak256)(n.pop())]));
            return (0,
            o.hexlify)(t)
        }
        function P(e) {
            return (0,
            o.hexlify)((0,
            o.concat)(C(e).map(e=>{
                if (e.length > 63)
                    throw Error("invalid DNS encoded entry; length exceeds 63 bytes");
                let t = new Uint8Array(e.length + 1);
                return t.set(e, 1),
                t[0] = t.length - 1,
                t
            }
            ))) + "00"
        }
        x.fill(0)
    },
    19794: function(e, t, n) {
        "use strict";
        n.d(t, {
            E: function() {
                return k
            }
        });
        var r = n(60727)
          , i = n(13004)
          , a = n(70367)
          , o = n(92381)
          , s = n(28609)
          , u = n(61941)
          , l = n(24489)
          , c = n(58853);
        let d = new u.Logger(l.i)
          , p = new Uint8Array(32);
        p.fill(0);
        let f = i.O$.from(-1)
          , h = i.O$.from(0)
          , m = i.O$.from(1)
          , y = i.O$.from("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff")
          , g = (0,
        a.hexZeroPad)(m.toHexString(), 32)
          , b = (0,
        a.hexZeroPad)(h.toHexString(), 32)
          , v = {
            name: "string",
            version: "string",
            chainId: "uint256",
            verifyingContract: "address",
            salt: "bytes32"
        }
          , w = ["name", "version", "chainId", "verifyingContract", "salt"];
        function T(e) {
            return function(t) {
                return "string" != typeof t && d.throwArgumentError(`invalid domain value for ${JSON.stringify(e)}`, `domain.${e}`, t),
                t
            }
        }
        let E = {
            name: T("name"),
            version: T("version"),
            chainId: function(e) {
                try {
                    return i.O$.from(e).toString()
                } catch (e) {}
                return d.throwArgumentError('invalid domain value for "chainId"', "domain.chainId", e)
            },
            verifyingContract: function(e) {
                try {
                    return (0,
                    r.getAddress)(e).toLowerCase()
                } catch (e) {}
                return d.throwArgumentError('invalid domain value "verifyingContract"', "domain.verifyingContract", e)
            },
            salt: function(e) {
                try {
                    let t = (0,
                    a.arrayify)(e);
                    if (32 !== t.length)
                        throw Error("bad length");
                    return (0,
                    a.hexlify)(t)
                } catch (e) {}
                return d.throwArgumentError('invalid domain value "salt"', "domain.salt", e)
            }
        };
        function A(e) {
            {
                let t = e.match(/^(u?)int(\d*)$/);
                if (t) {
                    let n = "" === t[1]
                      , r = parseInt(t[2] || "256");
                    (r % 8 != 0 || r > 256 || t[2] && t[2] !== String(r)) && d.throwArgumentError("invalid numeric width", "type", e);
                    let o = y.mask(n ? r - 1 : r)
                      , s = n ? o.add(m).mul(f) : h;
                    return function(t) {
                        let n = i.O$.from(t);
                        return (n.lt(s) || n.gt(o)) && d.throwArgumentError(`value out-of-bounds for ${e}`, "value", t),
                        (0,
                        a.hexZeroPad)(n.toTwos(256).toHexString(), 32)
                    }
                }
            }
            {
                let t = e.match(/^bytes(\d+)$/);
                if (t) {
                    let n = parseInt(t[1]);
                    return (0 === n || n > 32 || t[1] !== String(n)) && d.throwArgumentError("invalid bytes width", "type", e),
                    function(t) {
                        let r = (0,
                        a.arrayify)(t);
                        return r.length !== n && d.throwArgumentError(`invalid length for ${e}`, "value", t),
                        function(e) {
                            let t = (0,
                            a.arrayify)(e)
                              , n = t.length % 32;
                            return n ? (0,
                            a.hexConcat)([t, p.slice(n)]) : (0,
                            a.hexlify)(t)
                        }(t)
                    }
                }
            }
            switch (e) {
            case "address":
                return function(e) {
                    return (0,
                    a.hexZeroPad)((0,
                    r.getAddress)(e), 32)
                }
                ;
            case "bool":
                return function(e) {
                    return e ? g : b
                }
                ;
            case "bytes":
                return function(e) {
                    return (0,
                    o.keccak256)(e)
                }
                ;
            case "string":
                return function(e) {
                    return (0,
                    c.id)(e)
                }
            }
            return null
        }
        function x(e, t) {
            return `${e}(${t.map(({name: e, type: t})=>t + " " + e).join(",")})`
        }
        class k {
            constructor(e) {
                (0,
                s.defineReadOnly)(this, "types", Object.freeze((0,
                s.deepCopy)(e))),
                (0,
                s.defineReadOnly)(this, "_encoderCache", {}),
                (0,
                s.defineReadOnly)(this, "_types", {});
                let t = {}
                  , n = {}
                  , r = {};
                for (let i in Object.keys(e).forEach(e=>{
                    t[e] = {},
                    n[e] = [],
                    r[e] = {}
                }
                ),
                e) {
                    let r = {};
                    e[i].forEach(a=>{
                        r[a.name] && d.throwArgumentError(`duplicate variable name ${JSON.stringify(a.name)} in ${JSON.stringify(i)}`, "types", e),
                        r[a.name] = !0;
                        let o = a.type.match(/^([^\x5b]*)(\x5b|$)/)[1];
                        o === i && d.throwArgumentError(`circular type reference to ${JSON.stringify(o)}`, "types", e);
                        let s = A(o);
                        s || (n[o] || d.throwArgumentError(`unknown type ${JSON.stringify(o)}`, "types", e),
                        n[o].push(i),
                        t[i][o] = !0)
                    }
                    )
                }
                let i = Object.keys(n).filter(e=>0 === n[e].length);
                for (let a in 0 === i.length ? d.throwArgumentError("missing primary type", "types", e) : i.length > 1 && d.throwArgumentError(`ambiguous primary types or unused types: ${i.map(e=>JSON.stringify(e)).join(", ")}`, "types", e),
                (0,
                s.defineReadOnly)(this, "primaryType", i[0]),
                !function i(a, o) {
                    o[a] && d.throwArgumentError(`circular type reference to ${JSON.stringify(a)}`, "types", e),
                    o[a] = !0,
                    Object.keys(t[a]).forEach(e=>{
                        n[e] && (i(e, o),
                        Object.keys(o).forEach(t=>{
                            r[t][e] = !0
                        }
                        ))
                    }
                    ),
                    delete o[a]
                }(this.primaryType, {}),
                r) {
                    let t = Object.keys(r[a]);
                    t.sort(),
                    this._types[a] = x(a, e[a]) + t.map(t=>x(t, e[t])).join("")
                }
            }
            getEncoder(e) {
                let t = this._encoderCache[e];
                return t || (t = this._encoderCache[e] = this._getEncoder(e)),
                t
            }
            _getEncoder(e) {
                {
                    let t = A(e);
                    if (t)
                        return t
                }
                let t = e.match(/^(.*)(\x5b(\d*)\x5d)$/);
                if (t) {
                    let e = t[1]
                      , n = this.getEncoder(e)
                      , r = parseInt(t[3]);
                    return t=>{
                        r >= 0 && t.length !== r && d.throwArgumentError("array length mismatch; expected length ${ arrayLength }", "value", t);
                        let i = t.map(n);
                        return this._types[e] && (i = i.map(o.keccak256)),
                        (0,
                        o.keccak256)((0,
                        a.hexConcat)(i))
                    }
                }
                let n = this.types[e];
                if (n) {
                    let t = (0,
                    c.id)(this._types[e]);
                    return e=>{
                        let r = n.map(({name: t, type: n})=>{
                            let r = this.getEncoder(n)(e[t]);
                            return this._types[n] ? (0,
                            o.keccak256)(r) : r
                        }
                        );
                        return r.unshift(t),
                        (0,
                        a.hexConcat)(r)
                    }
                }
                return d.throwArgumentError(`unknown type: ${e}`, "type", e)
            }
            encodeType(e) {
                let t = this._types[e];
                return t || d.throwArgumentError(`unknown type: ${JSON.stringify(e)}`, "name", e),
                t
            }
            encodeData(e, t) {
                return this.getEncoder(e)(t)
            }
            hashStruct(e, t) {
                return (0,
                o.keccak256)(this.encodeData(e, t))
            }
            encode(e) {
                return this.encodeData(this.primaryType, e)
            }
            hash(e) {
                return this.hashStruct(this.primaryType, e)
            }
            _visit(e, t, n) {
                {
                    let r = A(e);
                    if (r)
                        return n(e, t)
                }
                let r = e.match(/^(.*)(\x5b(\d*)\x5d)$/);
                if (r) {
                    let e = r[1]
                      , i = parseInt(r[3]);
                    return i >= 0 && t.length !== i && d.throwArgumentError("array length mismatch; expected length ${ arrayLength }", "value", t),
                    t.map(t=>this._visit(e, t, n))
                }
                let i = this.types[e];
                return i ? i.reduce((e,{name: r, type: i})=>(e[r] = this._visit(i, t[r], n),
                e), {}) : d.throwArgumentError(`unknown type: ${e}`, "type", e)
            }
            visit(e, t) {
                return this._visit(this.primaryType, e, t)
            }
            static from(e) {
                return new k(e)
            }
            static getPrimaryType(e) {
                return k.from(e).primaryType
            }
            static hashStruct(e, t, n) {
                return k.from(t).hashStruct(e, n)
            }
            static hashDomain(e) {
                let t = [];
                for (let n in e) {
                    let r = v[n];
                    r || d.throwArgumentError(`invalid typed-data domain key: ${JSON.stringify(n)}`, "domain", e),
                    t.push({
                        name: n,
                        type: r
                    })
                }
                return t.sort((e,t)=>w.indexOf(e.name) - w.indexOf(t.name)),
                k.hashStruct("EIP712Domain", {
                    EIP712Domain: t
                }, e)
            }
            static encode(e, t, n) {
                return (0,
                a.hexConcat)(["0x1901", k.hashDomain(e), k.from(t).hash(n)])
            }
            static hash(e, t, n) {
                return (0,
                o.keccak256)(k.encode(e, t, n))
            }
            static resolveNames(e, t, n, r) {
                var i, o, u, l;
                return i = this,
                o = void 0,
                u = void 0,
                l = function*() {
                    e = (0,
                    s.shallowCopy)(e);
                    let i = {};
                    e.verifyingContract && !(0,
                    a.isHexString)(e.verifyingContract, 20) && (i[e.verifyingContract] = "0x");
                    let o = k.from(t);
                    for (let e in o.visit(n, (e,t)=>("address" !== e || (0,
                    a.isHexString)(t, 20) || (i[t] = "0x"),
                    t)),
                    i)
                        i[e] = yield r(e);
                    return e.verifyingContract && i[e.verifyingContract] && (e.verifyingContract = i[e.verifyingContract]),
                    {
                        domain: e,
                        value: n = o.visit(n, (e,t)=>"address" === e && i[t] ? i[t] : t)
                    }
                }
                ,
                new (u || (u = Promise))(function(e, t) {
                    function n(e) {
                        try {
                            a(l.next(e))
                        } catch (e) {
                            t(e)
                        }
                    }
                    function r(e) {
                        try {
                            a(l.throw(e))
                        } catch (e) {
                            t(e)
                        }
                    }
                    function a(t) {
                        var i;
                        t.done ? e(t.value) : ((i = t.value)instanceof u ? i : new u(function(e) {
                            e(i)
                        }
                        )).then(n, r)
                    }
                    a((l = l.apply(i, o || [])).next())
                }
                )
            }
            static getPayload(e, t, n) {
                k.hashDomain(e);
                let r = {}
                  , o = [];
                w.forEach(t=>{
                    let n = e[t];
                    null != n && (r[t] = E[t](n),
                    o.push({
                        name: t,
                        type: v[t]
                    }))
                }
                );
                let u = k.from(t)
                  , l = (0,
                s.shallowCopy)(t);
                return l.EIP712Domain ? d.throwArgumentError("types must not contain EIP712Domain type", "types.EIP712Domain", t) : l.EIP712Domain = o,
                u.encode(n),
                {
                    types: l,
                    domain: r,
                    primaryType: u.primaryType,
                    message: u.visit(n, (e,t)=>{
                        if (e.match(/^bytes(\d*)/))
                            return (0,
                            a.hexlify)((0,
                            a.arrayify)(t));
                        if (e.match(/^u?int/))
                            return i.O$.from(t).toString();
                        switch (e) {
                        case "address":
                            return t.toLowerCase();
                        case "bool":
                            return !!t;
                        case "string":
                            return "string" != typeof t && d.throwArgumentError("invalid string", "value", t),
                            t
                        }
                        return d.throwArgumentError("unsupported type", "type", e)
                    }
                    )
                }
            }
        }
    },
    54897: function(e, t, n) {
        "use strict";
        n.r(t),
        n.d(t, {
            HDNode: function() {
                return x
            },
            defaultPath: function() {
                return A
            },
            entropyToMnemonic: function() {
                return _
            },
            getAccountPath: function() {
                return I
            },
            isValidMnemonic: function() {
                return S
            },
            mnemonicToEntropy: function() {
                return C
            },
            mnemonicToSeed: function() {
                return k
            }
        });
        var r = n(23583)
          , i = n(70367)
          , a = n(13004)
          , o = n(4082)
          , s = n(11511)
          , u = n(28609)
          , l = n(47770)
          , c = n(15549)
          , d = n(11187)
          , p = n(38593)
          , f = n(4153)
          , h = n(61941);
        let m = new h.Logger("hdnode/5.7.0")
          , y = a.O$.from("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141")
          , g = (0,
        o.Y0)("Bitcoin seed");
        function b(e) {
            return (1 << e) - 1 << 8 - e
        }
        function v(e) {
            return (0,
            i.hexZeroPad)((0,
            i.hexlify)(e), 32)
        }
        function w(e) {
            return r.Base58.encode((0,
            i.concat)([e, (0,
            i.hexDataSlice)((0,
            c.JQ)((0,
            c.JQ)(e)), 0, 4)]))
        }
        function T(e) {
            if (null == e)
                return f.E.en;
            if ("string" == typeof e) {
                let t = f.E[e];
                return null == t && m.throwArgumentError("unknown locale", "wordlist", e),
                t
            }
            return e
        }
        let E = {}
          , A = "m/44'/60'/0'/0/0";
        class x {
            constructor(e, t, n, r, a, o, s, d) {
                if (e !== E)
                    throw Error("HDNode constructor cannot be called directly");
                if (t) {
                    let e = new l.SigningKey(t);
                    (0,
                    u.defineReadOnly)(this, "privateKey", e.privateKey),
                    (0,
                    u.defineReadOnly)(this, "publicKey", e.compressedPublicKey)
                } else
                    (0,
                    u.defineReadOnly)(this, "privateKey", null),
                    (0,
                    u.defineReadOnly)(this, "publicKey", (0,
                    i.hexlify)(n));
                (0,
                u.defineReadOnly)(this, "parentFingerprint", r),
                (0,
                u.defineReadOnly)(this, "fingerprint", (0,
                i.hexDataSlice)((0,
                c.bP)((0,
                c.JQ)(this.publicKey)), 0, 4)),
                (0,
                u.defineReadOnly)(this, "address", (0,
                p.computeAddress)(this.publicKey)),
                (0,
                u.defineReadOnly)(this, "chainCode", a),
                (0,
                u.defineReadOnly)(this, "index", o),
                (0,
                u.defineReadOnly)(this, "depth", s),
                null == d ? ((0,
                u.defineReadOnly)(this, "mnemonic", null),
                (0,
                u.defineReadOnly)(this, "path", null)) : "string" == typeof d ? ((0,
                u.defineReadOnly)(this, "mnemonic", null),
                (0,
                u.defineReadOnly)(this, "path", d)) : ((0,
                u.defineReadOnly)(this, "mnemonic", d),
                (0,
                u.defineReadOnly)(this, "path", d.path))
            }
            get extendedKey() {
                if (this.depth >= 256)
                    throw Error("Depth too large!");
                return w((0,
                i.concat)([null != this.privateKey ? "0x0488ADE4" : "0x0488B21E", (0,
                i.hexlify)(this.depth), this.parentFingerprint, (0,
                i.hexZeroPad)((0,
                i.hexlify)(this.index), 4), this.chainCode, null != this.privateKey ? (0,
                i.concat)(["0x00", this.privateKey]) : this.publicKey]))
            }
            neuter() {
                return new x(E,null,this.publicKey,this.parentFingerprint,this.chainCode,this.index,this.depth,this.path)
            }
            _derive(e) {
                if (e > 4294967295)
                    throw Error("invalid index - " + String(e));
                let t = this.path;
                t && (t += "/" + (2147483647 & e));
                let n = new Uint8Array(37);
                if (2147483648 & e) {
                    if (!this.privateKey)
                        throw Error("cannot derive child of neutered node");
                    n.set((0,
                    i.arrayify)(this.privateKey), 1),
                    t && (t += "'")
                } else
                    n.set((0,
                    i.arrayify)(this.publicKey));
                for (let t = 24; t >= 0; t -= 8)
                    n[33 + (t >> 3)] = e >> 24 - t & 255;
                let r = (0,
                i.arrayify)((0,
                c.Gy)(d.p.sha512, this.chainCode, n))
                  , o = r.slice(0, 32)
                  , s = r.slice(32)
                  , u = null
                  , p = null;
                if (this.privateKey)
                    u = v(a.O$.from(o).add(this.privateKey).mod(y));
                else {
                    let e = new l.SigningKey((0,
                    i.hexlify)(o));
                    p = e._addPoint(this.publicKey)
                }
                let f = t
                  , h = this.mnemonic;
                return h && (f = Object.freeze({
                    phrase: h.phrase,
                    path: t,
                    locale: h.locale || "en"
                })),
                new x(E,u,p,this.fingerprint,v(s),e,this.depth + 1,f)
            }
            derivePath(e) {
                let t = e.split("/");
                if (0 === t.length || "m" === t[0] && 0 !== this.depth)
                    throw Error("invalid path - " + e);
                "m" === t[0] && t.shift();
                let n = this;
                for (let e = 0; e < t.length; e++) {
                    let r = t[e];
                    if (r.match(/^[0-9]+'$/)) {
                        let e = parseInt(r.substring(0, r.length - 1));
                        if (e >= 2147483648)
                            throw Error("invalid path index - " + r);
                        n = n._derive(2147483648 + e)
                    } else if (r.match(/^[0-9]+$/)) {
                        let e = parseInt(r);
                        if (e >= 2147483648)
                            throw Error("invalid path index - " + r);
                        n = n._derive(e)
                    } else
                        throw Error("invalid path component - " + r)
                }
                return n
            }
            static _fromSeed(e, t) {
                let n = (0,
                i.arrayify)(e);
                if (n.length < 16 || n.length > 64)
                    throw Error("invalid seed");
                let r = (0,
                i.arrayify)((0,
                c.Gy)(d.p.sha512, g, n));
                return new x(E,v(r.slice(0, 32)),null,"0x00000000",v(r.slice(32)),0,0,t)
            }
            static fromMnemonic(e, t, n) {
                return e = _(C(e, n = T(n)), n),
                x._fromSeed(k(e, t), {
                    phrase: e,
                    path: "m",
                    locale: n.locale
                })
            }
            static fromSeed(e) {
                return x._fromSeed(e, null)
            }
            static fromExtendedKey(e) {
                let t = r.Base58.decode(e);
                (82 !== t.length || w(t.slice(0, 78)) !== e) && m.throwArgumentError("invalid extended key", "extendedKey", "[REDACTED]");
                let n = t[4]
                  , a = (0,
                i.hexlify)(t.slice(5, 9))
                  , o = parseInt((0,
                i.hexlify)(t.slice(9, 13)).substring(2), 16)
                  , s = (0,
                i.hexlify)(t.slice(13, 45))
                  , u = t.slice(45, 78);
                switch ((0,
                i.hexlify)(t.slice(0, 4))) {
                case "0x0488b21e":
                case "0x043587cf":
                    return new x(E,null,(0,
                    i.hexlify)(u),a,s,o,n,null);
                case "0x0488ade4":
                case "0x04358394 ":
                    if (0 !== u[0])
                        break;
                    return new x(E,(0,
                    i.hexlify)(u.slice(1)),null,a,s,o,n,null)
                }
                return m.throwArgumentError("invalid extended key", "extendedKey", "[REDACTED]")
            }
        }
        function k(e, t) {
            t || (t = "");
            let n = (0,
            o.Y0)("mnemonic" + t, o.Uj.NFKD);
            return (0,
            s.n)((0,
            o.Y0)(e, o.Uj.NFKD), n, 2048, 64, "sha512")
        }
        function C(e, t) {
            t = T(t),
            m.checkNormalize();
            let n = t.split(e);
            if (n.length % 3 != 0)
                throw Error("invalid mnemonic");
            let r = (0,
            i.arrayify)(new Uint8Array(Math.ceil(11 * n.length / 8)))
              , a = 0;
            for (let e = 0; e < n.length; e++) {
                let i = t.getWordIndex(n[e].normalize("NFKD"));
                if (-1 === i)
                    throw Error("invalid mnemonic");
                for (let e = 0; e < 11; e++)
                    i & 1 << 10 - e && (r[a >> 3] |= 1 << 7 - a % 8),
                    a++
            }
            let o = 32 * n.length / 3
              , s = n.length / 3
              , u = b(s)
              , l = (0,
            i.arrayify)((0,
            c.JQ)(r.slice(0, o / 8)))[0] & u;
            if (l !== (r[r.length - 1] & u))
                throw Error("invalid checksum");
            return (0,
            i.hexlify)(r.slice(0, o / 8))
        }
        function _(e, t) {
            if (t = T(t),
            (e = (0,
            i.arrayify)(e)).length % 4 != 0 || e.length < 16 || e.length > 32)
                throw Error("invalid entropy");
            let n = [0]
              , r = 11;
            for (let t = 0; t < e.length; t++)
                r > 8 ? (n[n.length - 1] <<= 8,
                n[n.length - 1] |= e[t],
                r -= 8) : (n[n.length - 1] <<= r,
                n[n.length - 1] |= e[t] >> 8 - r,
                n.push(e[t] & (1 << 8 - r) - 1),
                r += 3);
            let a = e.length / 4
              , o = (0,
            i.arrayify)((0,
            c.JQ)(e))[0] & b(a);
            return n[n.length - 1] <<= a,
            n[n.length - 1] |= o >> 8 - a,
            t.join(n.map(e=>t.getWord(e)))
        }
        function S(e, t) {
            try {
                return C(e, t),
                !0
            } catch (e) {}
            return !1
        }
        function I(e) {
            return ("number" != typeof e || e < 0 || e >= 2147483648 || e % 1) && m.throwArgumentError("invalid account index", "index", e),
            `m/44'/60'/${e}'/0/0`
        }
    },
    39413: function(e, t, n) {
        "use strict";
        n.d(t, {
            i: function() {
                return r
            }
        });
        let r = "json-wallets/5.7.0"
    },
    65306: function(e, t, n) {
        "use strict";
        n.r(t),
        n.d(t, {
            decryptCrowdsale: function() {
                return y
            },
            decryptJsonWallet: function() {
                return v
            },
            decryptJsonWalletSync: function() {
                return w
            },
            decryptKeystore: function() {
                return b.pe
            },
            decryptKeystoreSync: function() {
                return b.hb
            },
            encryptKeystore: function() {
                return b.HI
            },
            getJsonWalletAddress: function() {
                return g.Rb
            },
            isCrowdsaleWallet: function() {
                return g.LW
            },
            isKeystoreWallet: function() {
                return g.aO
            }
        });
        var r = n(46254)
          , i = n.n(r)
          , a = n(60727)
          , o = n(70367)
          , s = n(92381)
          , u = n(11511)
          , l = n(4082)
          , c = n(28609)
          , d = n(61941)
          , p = n(39413)
          , f = n(83957);
        let h = new d.Logger(p.i);
        class m extends c.Description {
            isCrowdsaleAccount(e) {
                return !!(e && e._isCrowdsaleAccount)
            }
        }
        function y(e, t) {
            let n = JSON.parse(e);
            t = (0,
            f.Ij)(t);
            let r = (0,
            a.getAddress)((0,
            f.gx)(n, "ethaddr"))
              , c = (0,
            f.p3)((0,
            f.gx)(n, "encseed"));
            c && c.length % 16 == 0 || h.throwArgumentError("invalid encseed", "json", e);
            let d = (0,
            o.arrayify)((0,
            u.n)(t, t, 2e3, 32, "sha256")).slice(0, 16)
              , p = c.slice(0, 16)
              , y = c.slice(16)
              , g = new (i()).ModeOfOperation.cbc(d,p)
              , b = i().padding.pkcs7.strip((0,
            o.arrayify)(g.decrypt(y)))
              , v = "";
            for (let e = 0; e < b.length; e++)
                v += String.fromCharCode(b[e]);
            let w = (0,
            l.Y0)(v)
              , T = (0,
            s.keccak256)(w);
            return new m({
                _isCrowdsaleAccount: !0,
                address: r,
                privateKey: T
            })
        }
        var g = n(1842)
          , b = n(88071);
        function v(e, t, n) {
            if ((0,
            g.LW)(e)) {
                n && n(0);
                let r = y(e, t);
                return n && n(1),
                Promise.resolve(r)
            }
            return (0,
            g.aO)(e) ? (0,
            b.pe)(e, t, n) : Promise.reject(Error("invalid JSON wallet"))
        }
        function w(e, t) {
            if ((0,
            g.LW)(e))
                return y(e, t);
            if ((0,
            g.aO)(e))
                return (0,
                b.hb)(e, t);
            throw Error("invalid JSON wallet")
        }
    },
    1842: function(e, t, n) {
        "use strict";
        n.d(t, {
            LW: function() {
                return i
            },
            Rb: function() {
                return o
            },
            aO: function() {
                return a
            }
        });
        var r = n(60727);
        function i(e) {
            let t = null;
            try {
                t = JSON.parse(e)
            } catch (e) {
                return !1
            }
            return t.encseed && t.ethaddr
        }
        function a(e) {
            let t = null;
            try {
                t = JSON.parse(e)
            } catch (e) {
                return !1
            }
            return !!t.version && parseInt(t.version) === t.version && 3 === parseInt(t.version)
        }
        function o(e) {
            if (i(e))
                try {
                    return (0,
                    r.getAddress)(JSON.parse(e).ethaddr)
                } catch (e) {
                    return null
                }
            if (a(e))
                try {
                    return (0,
                    r.getAddress)(JSON.parse(e).address)
                } catch (e) {}
            return null
        }
    },
    88071: function(e, t, n) {
        "use strict";
        n.d(t, {
            HI: function() {
                return _
            },
            hb: function() {
                return k
            },
            pe: function() {
                return C
            }
        });
        var r = n(46254)
          , i = n.n(r)
          , a = n(37508)
          , o = n.n(a)
          , s = n(60727)
          , u = n(70367)
          , l = n(54897)
          , c = n(92381)
          , d = n(11511)
          , p = n(60264)
          , f = n(28609)
          , h = n(38593)
          , m = n(83957)
          , y = n(61941)
          , g = n(39413);
        let b = new y.Logger(g.i);
        function v(e) {
            return null != e && e.mnemonic && e.mnemonic.phrase
        }
        class w extends f.Description {
            isKeystoreAccount(e) {
                return !!(e && e._isKeystoreAccount)
            }
        }
        function T(e, t) {
            let n = (0,
            m.p3)((0,
            m.gx)(e, "crypto/ciphertext"))
              , r = (0,
            u.hexlify)((0,
            c.keccak256)((0,
            u.concat)([t.slice(16, 32), n]))).substring(2);
            if (r !== (0,
            m.gx)(e, "crypto/mac").toLowerCase())
                throw Error("invalid password");
            let a = function(e, t, n) {
                let r = (0,
                m.gx)(e, "crypto/cipher");
                if ("aes-128-ctr" === r) {
                    let r = (0,
                    m.p3)((0,
                    m.gx)(e, "crypto/cipherparams/iv"))
                      , a = new (i()).Counter(r)
                      , o = new (i()).ModeOfOperation.ctr(t,a);
                    return (0,
                    u.arrayify)(o.decrypt(n))
                }
                return null
            }(e, t.slice(0, 16), n);
            a || b.throwError("unsupported cipher", y.Logger.errors.UNSUPPORTED_OPERATION, {
                operation: "decrypt"
            });
            let o = t.slice(32, 64)
              , d = (0,
            h.computeAddress)(a);
            if (e.address) {
                let t = e.address.toLowerCase();
                if ("0x" !== t.substring(0, 2) && (t = "0x" + t),
                (0,
                s.getAddress)(t) !== d)
                    throw Error("address mismatch")
            }
            let p = {
                _isKeystoreAccount: !0,
                address: d,
                privateKey: (0,
                u.hexlify)(a)
            };
            if ("0.1" === (0,
            m.gx)(e, "x-ethers/version")) {
                let t = (0,
                m.p3)((0,
                m.gx)(e, "x-ethers/mnemonicCiphertext"))
                  , n = (0,
                m.p3)((0,
                m.gx)(e, "x-ethers/mnemonicCounter"))
                  , r = new (i()).Counter(n)
                  , a = new (i()).ModeOfOperation.ctr(o,r)
                  , s = (0,
                m.gx)(e, "x-ethers/path") || l.defaultPath
                  , c = (0,
                m.gx)(e, "x-ethers/locale") || "en"
                  , d = (0,
                u.arrayify)(a.decrypt(t));
                try {
                    let e = (0,
                    l.entropyToMnemonic)(d, c)
                      , t = l.HDNode.fromMnemonic(e, null, c).derivePath(s);
                    if (t.privateKey != p.privateKey)
                        throw Error("mnemonic mismatch");
                    p.mnemonic = t.mnemonic
                } catch (e) {
                    if (e.code !== y.Logger.errors.INVALID_ARGUMENT || "wordlist" !== e.argument)
                        throw e
                }
            }
            return new w(p)
        }
        function E(e, t, n, r, i) {
            return (0,
            u.arrayify)((0,
            d.n)(e, t, n, r, i))
        }
        function A(e, t, n, r, i) {
            return Promise.resolve(E(e, t, n, r, i))
        }
        function x(e, t, n, r, i) {
            let a = (0,
            m.Ij)(t)
              , o = (0,
            m.gx)(e, "crypto/kdf");
            if (o && "string" == typeof o) {
                let t = function(e, t) {
                    return b.throwArgumentError("invalid key-derivation function parameters", e, t)
                };
                if ("scrypt" === o.toLowerCase()) {
                    let n = (0,
                    m.p3)((0,
                    m.gx)(e, "crypto/kdfparams/salt"))
                      , s = parseInt((0,
                    m.gx)(e, "crypto/kdfparams/n"))
                      , u = parseInt((0,
                    m.gx)(e, "crypto/kdfparams/r"))
                      , l = parseInt((0,
                    m.gx)(e, "crypto/kdfparams/p"));
                    s && u && l || t("kdf", o),
                    (s & s - 1) != 0 && t("N", s);
                    let c = parseInt((0,
                    m.gx)(e, "crypto/kdfparams/dklen"));
                    return 32 !== c && t("dklen", c),
                    r(a, n, s, u, l, 64, i)
                }
                if ("pbkdf2" === o.toLowerCase()) {
                    let r = (0,
                    m.p3)((0,
                    m.gx)(e, "crypto/kdfparams/salt"))
                      , i = null
                      , o = (0,
                    m.gx)(e, "crypto/kdfparams/prf");
                    "hmac-sha256" === o ? i = "sha256" : "hmac-sha512" === o ? i = "sha512" : t("prf", o);
                    let s = parseInt((0,
                    m.gx)(e, "crypto/kdfparams/c"))
                      , u = parseInt((0,
                    m.gx)(e, "crypto/kdfparams/dklen"));
                    return 32 !== u && t("dklen", u),
                    n(a, r, s, u, i)
                }
            }
            return b.throwArgumentError("unsupported key-derivation function", "kdf", o)
        }
        function k(e, t) {
            let n = JSON.parse(e)
              , r = x(n, t, E, o().syncScrypt);
            return T(n, r)
        }
        function C(e, t, n) {
            var r, i, a, s;
            return r = this,
            i = void 0,
            a = void 0,
            s = function*() {
                let r = JSON.parse(e)
                  , i = yield x(r, t, A, o().scrypt, n);
                return T(r, i)
            }
            ,
            new (a || (a = Promise))(function(e, t) {
                function n(e) {
                    try {
                        u(s.next(e))
                    } catch (e) {
                        t(e)
                    }
                }
                function o(e) {
                    try {
                        u(s.throw(e))
                    } catch (e) {
                        t(e)
                    }
                }
                function u(t) {
                    var r;
                    t.done ? e(t.value) : ((r = t.value)instanceof a ? r : new a(function(e) {
                        e(r)
                    }
                    )).then(n, o)
                }
                u((s = s.apply(r, i || [])).next())
            }
            )
        }
        function _(e, t, n, r) {
            try {
                if ((0,
                s.getAddress)(e.address) !== (0,
                h.computeAddress)(e.privateKey))
                    throw Error("address/privateKey mismatch");
                if (v(e)) {
                    let t = e.mnemonic
                      , n = l.HDNode.fromMnemonic(t.phrase, null, t.locale).derivePath(t.path || l.defaultPath);
                    if (n.privateKey != e.privateKey)
                        throw Error("mnemonic mismatch")
                }
            } catch (e) {
                return Promise.reject(e)
            }
            "function" != typeof n || r || (r = n,
            n = {}),
            n || (n = {});
            let a = (0,
            u.arrayify)(e.privateKey)
              , d = (0,
            m.Ij)(t)
              , f = null
              , y = null
              , g = null;
            if (v(e)) {
                let t = e.mnemonic;
                f = (0,
                u.arrayify)((0,
                l.mnemonicToEntropy)(t.phrase, t.locale || "en")),
                y = t.path || l.defaultPath,
                g = t.locale || "en"
            }
            let b = n.client;
            b || (b = "ethers.js");
            let w = null;
            w = n.salt ? (0,
            u.arrayify)(n.salt) : (0,
            p.O)(32);
            let T = null;
            if (n.iv) {
                if (16 !== (T = (0,
                u.arrayify)(n.iv)).length)
                    throw Error("invalid iv")
            } else
                T = (0,
                p.O)(16);
            let E = null;
            if (n.uuid) {
                if (16 !== (E = (0,
                u.arrayify)(n.uuid)).length)
                    throw Error("invalid uuid")
            } else
                E = (0,
                p.O)(16);
            let A = 131072
              , x = 8
              , k = 1;
            return n.scrypt && (n.scrypt.N && (A = n.scrypt.N),
            n.scrypt.r && (x = n.scrypt.r),
            n.scrypt.p && (k = n.scrypt.p)),
            o().scrypt(d, w, A, x, k, 64, r).then(t=>{
                t = (0,
                u.arrayify)(t);
                let n = t.slice(0, 16)
                  , r = t.slice(16, 32)
                  , o = t.slice(32, 64)
                  , s = new (i()).Counter(T)
                  , l = new (i()).ModeOfOperation.ctr(n,s)
                  , d = (0,
                u.arrayify)(l.encrypt(a))
                  , h = (0,
                c.keccak256)((0,
                u.concat)([r, d]))
                  , v = {
                    address: e.address.substring(2).toLowerCase(),
                    id: (0,
                    m.EH)(E),
                    version: 3,
                    crypto: {
                        cipher: "aes-128-ctr",
                        cipherparams: {
                            iv: (0,
                            u.hexlify)(T).substring(2)
                        },
                        ciphertext: (0,
                        u.hexlify)(d).substring(2),
                        kdf: "scrypt",
                        kdfparams: {
                            salt: (0,
                            u.hexlify)(w).substring(2),
                            n: A,
                            dklen: 32,
                            p: k,
                            r: x
                        },
                        mac: h.substring(2)
                    }
                };
                if (f) {
                    let e = (0,
                    p.O)(16)
                      , t = new (i()).Counter(e)
                      , n = new (i()).ModeOfOperation.ctr(o,t)
                      , r = (0,
                    u.arrayify)(n.encrypt(f))
                      , a = new Date
                      , s = a.getUTCFullYear() + "-" + (0,
                    m.VP)(a.getUTCMonth() + 1, 2) + "-" + (0,
                    m.VP)(a.getUTCDate(), 2) + "T" + (0,
                    m.VP)(a.getUTCHours(), 2) + "-" + (0,
                    m.VP)(a.getUTCMinutes(), 2) + "-" + (0,
                    m.VP)(a.getUTCSeconds(), 2) + ".0Z";
                    v["x-ethers"] = {
                        client: b,
                        gethFilename: "UTC--" + s + "--" + v.address,
                        mnemonicCounter: (0,
                        u.hexlify)(e).substring(2),
                        mnemonicCiphertext: (0,
                        u.hexlify)(r).substring(2),
                        path: y,
                        locale: g,
                        version: "0.1"
                    }
                }
                return JSON.stringify(v)
            }
            )
        }
    },
    83957: function(e, t, n) {
        "use strict";
        n.d(t, {
            EH: function() {
                return l
            },
            Ij: function() {
                return s
            },
            VP: function() {
                return o
            },
            gx: function() {
                return u
            },
            p3: function() {
                return a
            }
        });
        var r = n(70367)
          , i = n(4082);
        function a(e) {
            return "string" == typeof e && "0x" !== e.substring(0, 2) && (e = "0x" + e),
            (0,
            r.arrayify)(e)
        }
        function o(e, t) {
            for (e = String(e); e.length < t; )
                e = "0" + e;
            return e
        }
        function s(e) {
            return "string" == typeof e ? (0,
            i.Y0)(e, i.Uj.NFKC) : (0,
            r.arrayify)(e)
        }
        function u(e, t) {
            let n = e
              , r = t.toLowerCase().split("/");
            for (let e = 0; e < r.length; e++) {
                let t = null;
                for (let i in n)
                    if (i.toLowerCase() === r[e]) {
                        t = n[i];
                        break
                    }
                if (null === t)
                    return null;
                n = t
            }
            return n
        }
        function l(e) {
            let t = (0,
            r.arrayify)(e);
            t[6] = 15 & t[6] | 64,
            t[8] = 63 & t[8] | 128;
            let n = (0,
            r.hexlify)(t);
            return [n.substring(2, 10), n.substring(10, 14), n.substring(14, 18), n.substring(18, 22), n.substring(22, 34)].join("-")
        }
    },
    92381: function(e, t, n) {
        "use strict";
        n.r(t),
        n.d(t, {
            keccak256: function() {
                return o
            }
        });
        var r = n(94474)
          , i = n.n(r)
          , a = n(70367);
        function o(e) {
            return "0x" + i().keccak_256((0,
            a.arrayify)(e))
        }
    },
    61941: function(e, t, n) {
        "use strict";
        var r, i, a, o;
        n.r(t),
        n.d(t, {
            ErrorCode: function() {
                return i
            },
            LogLevel: function() {
                return r
            },
            Logger: function() {
                return h
            }
        });
        let s = !1
          , u = !1
          , l = {
            debug: 1,
            default: 2,
            info: 2,
            warning: 3,
            error: 4,
            off: 5
        }
          , c = l.default
          , d = null
          , p = function() {
            try {
                let e = [];
                if (["NFD", "NFC", "NFKD", "NFKC"].forEach(t=>{
                    try {
                        if ("test" !== "test".normalize(t))
                            throw Error("bad normalize")
                    } catch (n) {
                        e.push(t)
                    }
                }
                ),
                e.length)
                    throw Error("missing " + e.join(", "));
                if (String.fromCharCode(233).normalize("NFD") !== String.fromCharCode(101, 769))
                    throw Error("broken implementation")
            } catch (e) {
                return e.message
            }
            return null
        }();
        (a = r || (r = {})).DEBUG = "DEBUG",
        a.INFO = "INFO",
        a.WARNING = "WARNING",
        a.ERROR = "ERROR",
        a.OFF = "OFF",
        (o = i || (i = {})).UNKNOWN_ERROR = "UNKNOWN_ERROR",
        o.NOT_IMPLEMENTED = "NOT_IMPLEMENTED",
        o.UNSUPPORTED_OPERATION = "UNSUPPORTED_OPERATION",
        o.NETWORK_ERROR = "NETWORK_ERROR",
        o.SERVER_ERROR = "SERVER_ERROR",
        o.TIMEOUT = "TIMEOUT",
        o.BUFFER_OVERRUN = "BUFFER_OVERRUN",
        o.NUMERIC_FAULT = "NUMERIC_FAULT",
        o.MISSING_NEW = "MISSING_NEW",
        o.INVALID_ARGUMENT = "INVALID_ARGUMENT",
        o.MISSING_ARGUMENT = "MISSING_ARGUMENT",
        o.UNEXPECTED_ARGUMENT = "UNEXPECTED_ARGUMENT",
        o.CALL_EXCEPTION = "CALL_EXCEPTION",
        o.INSUFFICIENT_FUNDS = "INSUFFICIENT_FUNDS",
        o.NONCE_EXPIRED = "NONCE_EXPIRED",
        o.REPLACEMENT_UNDERPRICED = "REPLACEMENT_UNDERPRICED",
        o.UNPREDICTABLE_GAS_LIMIT = "UNPREDICTABLE_GAS_LIMIT",
        o.TRANSACTION_REPLACED = "TRANSACTION_REPLACED",
        o.ACTION_REJECTED = "ACTION_REJECTED";
        let f = "0123456789abcdef";
        class h {
            constructor(e) {
                Object.defineProperty(this, "version", {
                    enumerable: !0,
                    value: e,
                    writable: !1
                })
            }
            _log(e, t) {
                let n = e.toLowerCase();
                null == l[n] && this.throwArgumentError("invalid log level name", "logLevel", e),
                c > l[n] || console.log.apply(console, t)
            }
            debug(...e) {
                this._log(h.levels.DEBUG, e)
            }
            info(...e) {
                this._log(h.levels.INFO, e)
            }
            warn(...e) {
                this._log(h.levels.WARNING, e)
            }
            makeError(e, t, n) {
                if (u)
                    return this.makeError("censored error", t, {});
                t || (t = h.errors.UNKNOWN_ERROR),
                n || (n = {});
                let r = [];
                Object.keys(n).forEach(e=>{
                    let t = n[e];
                    try {
                        if (t instanceof Uint8Array) {
                            let n = "";
                            for (let e = 0; e < t.length; e++)
                                n += f[t[e] >> 4] + f[15 & t[e]];
                            r.push(e + "=Uint8Array(0x" + n + ")")
                        } else
                            r.push(e + "=" + JSON.stringify(t))
                    } catch (t) {
                        r.push(e + "=" + JSON.stringify(n[e].toString()))
                    }
                }
                ),
                r.push(`code=${t}`),
                r.push(`version=${this.version}`);
                let a = e
                  , o = "";
                switch (t) {
                case i.NUMERIC_FAULT:
                    {
                        o = "NUMERIC_FAULT";
                        let t = e;
                        switch (t) {
                        case "overflow":
                        case "underflow":
                        case "division-by-zero":
                            o += "-" + t;
                            break;
                        case "negative-power":
                        case "negative-width":
                            o += "-unsupported";
                            break;
                        case "unbound-bitwise-result":
                            o += "-unbound-result"
                        }
                        break
                    }
                case i.CALL_EXCEPTION:
                case i.INSUFFICIENT_FUNDS:
                case i.MISSING_NEW:
                case i.NONCE_EXPIRED:
                case i.REPLACEMENT_UNDERPRICED:
                case i.TRANSACTION_REPLACED:
                case i.UNPREDICTABLE_GAS_LIMIT:
                    o = t
                }
                o && (e += " [ See: https://links.ethers.org/v5-errors-" + o + " ]"),
                r.length && (e += " (" + r.join(", ") + ")");
                let s = Error(e);
                return s.reason = a,
                s.code = t,
                Object.keys(n).forEach(function(e) {
                    s[e] = n[e]
                }),
                s
            }
            throwError(e, t, n) {
                throw this.makeError(e, t, n)
            }
            throwArgumentError(e, t, n) {
                return this.throwError(e, h.errors.INVALID_ARGUMENT, {
                    argument: t,
                    value: n
                })
            }
            assert(e, t, n, r) {
                e || this.throwError(t, n, r)
            }
            assertArgument(e, t, n, r) {
                e || this.throwArgumentError(t, n, r)
            }
            checkNormalize(e) {
                null == e && (e = "platform missing String.prototype.normalize"),
                p && this.throwError("platform missing String.prototype.normalize", h.errors.UNSUPPORTED_OPERATION, {
                    operation: "String.prototype.normalize",
                    form: p
                })
            }
            checkSafeUint53(e, t) {
                "number" == typeof e && (null == t && (t = "value not safe"),
                (e < 0 || e >= 9007199254740991) && this.throwError(t, h.errors.NUMERIC_FAULT, {
                    operation: "checkSafeInteger",
                    fault: "out-of-safe-range",
                    value: e
                }),
                e % 1 && this.throwError(t, h.errors.NUMERIC_FAULT, {
                    operation: "checkSafeInteger",
                    fault: "non-integer",
                    value: e
                }))
            }
            checkArgumentCount(e, t, n) {
                n = n ? ": " + n : "",
                e < t && this.throwError("missing argument" + n, h.errors.MISSING_ARGUMENT, {
                    count: e,
                    expectedCount: t
                }),
                e > t && this.throwError("too many arguments" + n, h.errors.UNEXPECTED_ARGUMENT, {
                    count: e,
                    expectedCount: t
                })
            }
            checkNew(e, t) {
                (e === Object || null == e) && this.throwError("missing new", h.errors.MISSING_NEW, {
                    name: t.name
                })
            }
            checkAbstract(e, t) {
                e === t ? this.throwError("cannot instantiate abstract class " + JSON.stringify(t.name) + " directly; use a sub-class", h.errors.UNSUPPORTED_OPERATION, {
                    name: e.name,
                    operation: "new"
                }) : (e === Object || null == e) && this.throwError("missing new", h.errors.MISSING_NEW, {
                    name: t.name
                })
            }
            static globalLogger() {
                return d || (d = new h("logger/5.7.0")),
                d
            }
            static setCensorship(e, t) {
                if (!e && t && this.globalLogger().throwError("cannot permanently disable censorship", h.errors.UNSUPPORTED_OPERATION, {
                    operation: "setCensorship"
                }),
                s) {
                    if (!e)
                        return;
                    this.globalLogger().throwError("error censorship permanent", h.errors.UNSUPPORTED_OPERATION, {
                        operation: "setCensorship"
                    })
                }
                u = !!e,
                s = !!t
            }
            static setLogLevel(e) {
                let t = l[e.toLowerCase()];
                if (null == t) {
                    h.globalLogger().warn("invalid log level - " + e);
                    return
                }
                c = t
            }
            static from(e) {
                return new h(e)
            }
        }
        h.errors = i,
        h.levels = r
    },
    86090: function(e, t, n) {
        "use strict";
        n.d(t, {
            H: function() {
                return d
            }
        });
        var r = n(61941);
        let i = new r.Logger("networks/5.7.1");
        function a(e) {
            let t = function(t, n) {
                null == n && (n = {});
                let r = [];
                if (t.InfuraProvider && "-" !== n.infura)
                    try {
                        r.push(new t.InfuraProvider(e,n.infura))
                    } catch (e) {}
                if (t.EtherscanProvider && "-" !== n.etherscan)
                    try {
                        r.push(new t.EtherscanProvider(e,n.etherscan))
                    } catch (e) {}
                if (t.AlchemyProvider && "-" !== n.alchemy)
                    try {
                        r.push(new t.AlchemyProvider(e,n.alchemy))
                    } catch (e) {}
                if (t.PocketProvider && "-" !== n.pocket)
                    try {
                        let i = new t.PocketProvider(e,n.pocket);
                        i.network && -1 === ["goerli", "ropsten", "rinkeby", "sepolia"].indexOf(i.network.name) && r.push(i)
                    } catch (e) {}
                if (t.CloudflareProvider && "-" !== n.cloudflare)
                    try {
                        r.push(new t.CloudflareProvider(e))
                    } catch (e) {}
                if (t.AnkrProvider && "-" !== n.ankr)
                    try {
                        let i = new t.AnkrProvider(e,n.ankr);
                        i.network && -1 === ["ropsten"].indexOf(i.network.name) && r.push(i)
                    } catch (e) {}
                if (0 === r.length)
                    return null;
                if (t.FallbackProvider) {
                    let i = 1;
                    return null != n.quorum ? i = n.quorum : "homestead" === e && (i = 2),
                    new t.FallbackProvider(r,i)
                }
                return r[0]
            };
            return t.renetwork = function(e) {
                return a(e)
            }
            ,
            t
        }
        function o(e, t) {
            let n = function(n, r) {
                return n.JsonRpcProvider ? new n.JsonRpcProvider(e,t) : null
            };
            return n.renetwork = function(t) {
                return o(e, t)
            }
            ,
            n
        }
        let s = {
            chainId: 1,
            ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
            name: "homestead",
            _defaultProvider: a("homestead")
        }
          , u = {
            chainId: 3,
            ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
            name: "ropsten",
            _defaultProvider: a("ropsten")
        }
          , l = {
            chainId: 63,
            name: "classicMordor",
            _defaultProvider: o("https://www.ethercluster.com/mordor", "classicMordor")
        }
          , c = {
            unspecified: {
                chainId: 0,
                name: "unspecified"
            },
            homestead: s,
            mainnet: s,
            morden: {
                chainId: 2,
                name: "morden"
            },
            ropsten: u,
            testnet: u,
            rinkeby: {
                chainId: 4,
                ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
                name: "rinkeby",
                _defaultProvider: a("rinkeby")
            },
            kovan: {
                chainId: 42,
                name: "kovan",
                _defaultProvider: a("kovan")
            },
            goerli: {
                chainId: 5,
                ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
                name: "goerli",
                _defaultProvider: a("goerli")
            },
            kintsugi: {
                chainId: 1337702,
                name: "kintsugi"
            },
            sepolia: {
                chainId: 11155111,
                name: "sepolia",
                _defaultProvider: a("sepolia")
            },
            classic: {
                chainId: 61,
                name: "classic",
                _defaultProvider: o("https://www.ethercluster.com/etc", "classic")
            },
            classicMorden: {
                chainId: 62,
                name: "classicMorden"
            },
            classicMordor: l,
            classicTestnet: l,
            classicKotti: {
                chainId: 6,
                name: "classicKotti",
                _defaultProvider: o("https://www.ethercluster.com/kotti", "classicKotti")
            },
            xdai: {
                chainId: 100,
                name: "xdai"
            },
            matic: {
                chainId: 137,
                name: "matic",
                _defaultProvider: a("matic")
            },
            maticmum: {
                chainId: 80001,
                name: "maticmum"
            },
            optimism: {
                chainId: 10,
                name: "optimism",
                _defaultProvider: a("optimism")
            },
            "optimism-kovan": {
                chainId: 69,
                name: "optimism-kovan"
            },
            "optimism-goerli": {
                chainId: 420,
                name: "optimism-goerli"
            },
            arbitrum: {
                chainId: 42161,
                name: "arbitrum"
            },
            "arbitrum-rinkeby": {
                chainId: 421611,
                name: "arbitrum-rinkeby"
            },
            "arbitrum-goerli": {
                chainId: 421613,
                name: "arbitrum-goerli"
            },
            bnb: {
                chainId: 56,
                name: "bnb"
            },
            bnbt: {
                chainId: 97,
                name: "bnbt"
            }
        };
        function d(e) {
            if (null == e)
                return null;
            if ("number" == typeof e) {
                for (let t in c) {
                    let n = c[t];
                    if (n.chainId === e)
                        return {
                            name: n.name,
                            chainId: n.chainId,
                            ensAddress: n.ensAddress || null,
                            _defaultProvider: n._defaultProvider || null
                        }
                }
                return {
                    chainId: e,
                    name: "unknown"
                }
            }
            if ("string" == typeof e) {
                let t = c[e];
                return null == t ? null : {
                    name: t.name,
                    chainId: t.chainId,
                    ensAddress: t.ensAddress,
                    _defaultProvider: t._defaultProvider || null
                }
            }
            let t = c[e.name];
            if (!t)
                return "number" != typeof e.chainId && i.throwArgumentError("invalid network chainId", "network", e),
                e;
            0 !== e.chainId && e.chainId !== t.chainId && i.throwArgumentError("network chainId mismatch", "network", e);
            let n = e._defaultProvider || null;
            if (null == n && t._defaultProvider) {
                var r;
                n = (r = t._defaultProvider) && "function" == typeof r.renetwork ? t._defaultProvider.renetwork(e) : t._defaultProvider
            }
            return {
                name: e.name,
                chainId: t.chainId,
                ensAddress: e.ensAddress || t.ensAddress || null,
                _defaultProvider: n
            }
        }
    },
    11511: function(e, t, n) {
        "use strict";
        n.d(t, {
            n: function() {
                return a
            }
        });
        var r = n(70367)
          , i = n(15549);
        function a(e, t, n, a, o) {
            let s, u, l;
            e = (0,
            r.arrayify)(e),
            t = (0,
            r.arrayify)(t);
            let c = 1
              , d = new Uint8Array(a)
              , p = new Uint8Array(t.length + 4);
            p.set(t);
            for (let f = 1; f <= c; f++) {
                p[t.length] = f >> 24 & 255,
                p[t.length + 1] = f >> 16 & 255,
                p[t.length + 2] = f >> 8 & 255,
                p[t.length + 3] = 255 & f;
                let h = (0,
                r.arrayify)((0,
                i.Gy)(o, e, p));
                s || (s = h.length,
                l = new Uint8Array(s),
                c = Math.ceil(a / s),
                u = a - (c - 1) * s),
                l.set(h);
                for (let t = 1; t < n; t++) {
                    h = (0,
                    r.arrayify)((0,
                    i.Gy)(o, e, h));
                    for (let e = 0; e < s; e++)
                        l[e] ^= h[e]
                }
                let m = (f - 1) * s
                  , y = f === c ? u : s;
                d.set((0,
                r.arrayify)(l).slice(0, y), m)
            }
            return (0,
            r.hexlify)(d)
        }
    },
    28609: function(e, t, n) {
        "use strict";
        n.r(t),
        n.d(t, {
            Description: function() {
                return p
            },
            checkProperties: function() {
                return u
            },
            deepCopy: function() {
                return d
            },
            defineReadOnly: function() {
                return a
            },
            getStatic: function() {
                return o
            },
            resolveProperties: function() {
                return s
            },
            shallowCopy: function() {
                return l
            }
        });
        var r = n(61941);
        let i = new r.Logger("properties/5.7.0");
        function a(e, t, n) {
            Object.defineProperty(e, t, {
                enumerable: !0,
                value: n,
                writable: !1
            })
        }
        function o(e, t) {
            for (let n = 0; n < 32; n++) {
                if (e[t])
                    return e[t];
                if (!e.prototype || "object" != typeof e.prototype)
                    break;
                e = Object.getPrototypeOf(e.prototype).constructor
            }
            return null
        }
        function s(e) {
            var t, n, r, i;
            return t = this,
            n = void 0,
            r = void 0,
            i = function*() {
                let t = Object.keys(e).map(t=>{
                    let n = e[t];
                    return Promise.resolve(n).then(e=>({
                        key: t,
                        value: e
                    }))
                }
                )
                  , n = yield Promise.all(t);
                return n.reduce((e,t)=>(e[t.key] = t.value,
                e), {})
            }
            ,
            new (r || (r = Promise))(function(e, a) {
                function o(e) {
                    try {
                        u(i.next(e))
                    } catch (e) {
                        a(e)
                    }
                }
                function s(e) {
                    try {
                        u(i.throw(e))
                    } catch (e) {
                        a(e)
                    }
                }
                function u(t) {
                    var n;
                    t.done ? e(t.value) : ((n = t.value)instanceof r ? n : new r(function(e) {
                        e(n)
                    }
                    )).then(o, s)
                }
                u((i = i.apply(t, n || [])).next())
            }
            )
        }
        function u(e, t) {
            e && "object" == typeof e || i.throwArgumentError("invalid object", "object", e),
            Object.keys(e).forEach(n=>{
                t[n] || i.throwArgumentError("invalid object key - " + n, "transaction:" + n, e)
            }
            )
        }
        function l(e) {
            let t = {};
            for (let n in e)
                t[n] = e[n];
            return t
        }
        let c = {
            bigint: !0,
            boolean: !0,
            function: !0,
            number: !0,
            string: !0
        };
        function d(e) {
            return function(e) {
                if (function e(t) {
                    if (null == t || c[typeof t])
                        return !0;
                    if (Array.isArray(t) || "object" == typeof t) {
                        if (!Object.isFrozen(t))
                            return !1;
                        let n = Object.keys(t);
                        for (let r = 0; r < n.length; r++) {
                            let i = null;
                            try {
                                i = t[n[r]]
                            } catch (e) {
                                continue
                            }
                            if (!e(i))
                                return !1
                        }
                        return !0
                    }
                    return i.throwArgumentError(`Cannot deepCopy ${typeof t}`, "object", t)
                }(e))
                    return e;
                if (Array.isArray(e))
                    return Object.freeze(e.map(e=>d(e)));
                if ("object" == typeof e) {
                    let t = {};
                    for (let n in e) {
                        let r = e[n];
                        void 0 !== r && a(t, n, d(r))
                    }
                    return t
                }
                return i.throwArgumentError(`Cannot deepCopy ${typeof e}`, "object", e)
            }(e)
        }
        class p {
            constructor(e) {
                for (let t in e)
                    this[t] = d(e[t])
            }
        }
    },
    8280: function(e, t, n) {
        "use strict";
        n.d(t, {
            i: function() {
                return r
            }
        });
        let r = "providers/5.7.2"
    },
    52071: function(e, t, n) {
        "use strict";
        n.d(t, {
            H2: function() {
                return U
            },
            Zk: function() {
                return $
            }
        });
        var r = n(480)
          , i = n(73054)
          , a = n(23583)
          , o = n(13004)
          , s = n(70367)
          , u = n(64943)
          , l = n(84432)
          , c = n(86090)
          , d = n(28609)
          , p = n(15549)
          , f = n(4082)
          , h = n(187)
          , m = n(37092)
          , y = n.n(m)
          , g = n(61941)
          , b = n(8280)
          , v = n(20949)
          , w = function(e, t, n, r) {
            return new (n || (n = Promise))(function(i, a) {
                function o(e) {
                    try {
                        u(r.next(e))
                    } catch (e) {
                        a(e)
                    }
                }
                function s(e) {
                    try {
                        u(r.throw(e))
                    } catch (e) {
                        a(e)
                    }
                }
                function u(e) {
                    var t;
                    e.done ? i(e.value) : ((t = e.value)instanceof n ? t : new n(function(e) {
                        e(t)
                    }
                    )).then(o, s)
                }
                u((r = r.apply(e, t || [])).next())
            }
            )
        };
        let T = new g.Logger(b.i);
        function E(e) {
            return null == e ? "null" : (32 !== (0,
            s.hexDataLength)(e) && T.throwArgumentError("invalid topic", "topic", e),
            e.toLowerCase())
        }
        function A(e) {
            for (e = e.slice(); e.length > 0 && null == e[e.length - 1]; )
                e.pop();
            return e.map(e=>{
                if (!Array.isArray(e))
                    return E(e);
                {
                    let t = {};
                    e.forEach(e=>{
                        t[E(e)] = !0
                    }
                    );
                    let n = Object.keys(t);
                    return n.sort(),
                    n.join("|")
                }
            }
            ).join("&")
        }
        function x(e) {
            if ("string" == typeof e) {
                if (e = e.toLowerCase(),
                32 === (0,
                s.hexDataLength)(e))
                    return "tx:" + e;
                if (-1 === e.indexOf(":"))
                    return e
            } else if (Array.isArray(e))
                return "filter:*:" + A(e);
            else if (r.ForkEvent.isForkEvent(e))
                throw T.warn("not implemented"),
                Error("not implemented");
            else if (e && "object" == typeof e)
                return "filter:" + (e.address || "*") + ":" + A(e.topics || []);
            throw Error("invalid event - " + e)
        }
        function k() {
            return new Date().getTime()
        }
        function C(e) {
            return new Promise(t=>{
                setTimeout(t, e)
            }
            )
        }
        let _ = ["block", "network", "pending", "poll"];
        class S {
            constructor(e, t, n) {
                (0,
                d.defineReadOnly)(this, "tag", e),
                (0,
                d.defineReadOnly)(this, "listener", t),
                (0,
                d.defineReadOnly)(this, "once", n),
                this._lastBlockNumber = -2,
                this._inflight = !1
            }
            get event() {
                switch (this.type) {
                case "tx":
                    return this.hash;
                case "filter":
                    return this.filter
                }
                return this.tag
            }
            get type() {
                return this.tag.split(":")[0]
            }
            get hash() {
                let e = this.tag.split(":");
                return "tx" !== e[0] ? null : e[1]
            }
            get filter() {
                var e;
                let t = this.tag.split(":");
                if ("filter" !== t[0])
                    return null;
                let n = t[1]
                  , r = "" === (e = t[2]) ? [] : e.split(/&/g).map(e=>{
                    if ("" === e)
                        return [];
                    let t = e.split("|").map(e=>"null" === e ? null : e);
                    return 1 === t.length ? t[0] : t
                }
                )
                  , i = {};
                return r.length > 0 && (i.topics = r),
                n && "*" !== n && (i.address = n),
                i
            }
            pollable() {
                return this.tag.indexOf(":") >= 0 || _.indexOf(this.tag) >= 0
            }
        }
        let I = {
            0: {
                symbol: "btc",
                p2pkh: 0,
                p2sh: 5,
                prefix: "bc"
            },
            2: {
                symbol: "ltc",
                p2pkh: 48,
                p2sh: 50,
                prefix: "ltc"
            },
            3: {
                symbol: "doge",
                p2pkh: 30,
                p2sh: 22
            },
            60: {
                symbol: "eth",
                ilk: "eth"
            },
            61: {
                symbol: "etc",
                ilk: "eth"
            },
            700: {
                symbol: "xdai",
                ilk: "eth"
            }
        };
        function P(e) {
            return (0,
            s.hexZeroPad)(o.O$.from(e).toHexString(), 32)
        }
        function B(e) {
            return a.Base58.encode((0,
            s.concat)([e, (0,
            s.hexDataSlice)((0,
            p.JQ)((0,
            p.JQ)(e)), 0, 4)]))
        }
        let O = RegExp("^(ipfs)://(.*)$", "i")
          , N = [RegExp("^(https)://(.*)$", "i"), RegExp("^(data):(.*)$", "i"), O, RegExp("^eip155:[0-9]+/(erc[0-9]+):(.*)$", "i")];
        function R(e, t) {
            try {
                return (0,
                f.ZN)(F(e, t))
            } catch (e) {}
            return null
        }
        function F(e, t) {
            if ("0x" === e)
                return null;
            let n = o.O$.from((0,
            s.hexDataSlice)(e, t, t + 32)).toNumber()
              , r = o.O$.from((0,
            s.hexDataSlice)(e, n, n + 32)).toNumber();
            return (0,
            s.hexDataSlice)(e, n + 32, n + 32 + r)
        }
        function D(e) {
            return e.match(/^ipfs:\/\/ipfs\//i) ? e = e.substring(12) : e.match(/^ipfs:\/\//i) ? e = e.substring(7) : T.throwArgumentError("unsupported IPFS format", "link", e),
            `https://gateway.ipfs.io/ipfs/${e}`
        }
        function M(e) {
            let t = (0,
            s.arrayify)(e);
            if (t.length > 32)
                throw Error("internal; should not happen");
            let n = new Uint8Array(32);
            return n.set(t, 32 - t.length),
            n
        }
        function L(e) {
            let t = []
              , n = 0;
            for (let r = 0; r < e.length; r++)
                t.push(null),
                n += 32;
            for (let r = 0; r < e.length; r++) {
                let i = (0,
                s.arrayify)(e[r]);
                t[r] = M(n),
                t.push(M(i.length)),
                t.push(function(e) {
                    if (e.length % 32 == 0)
                        return e;
                    let t = new Uint8Array(32 * Math.ceil(e.length / 32));
                    return t.set(e),
                    t
                }(i)),
                n += 32 + 32 * Math.ceil(i.length / 32)
            }
            return (0,
            s.hexConcat)(t)
        }
        class U {
            constructor(e, t, n, r) {
                (0,
                d.defineReadOnly)(this, "provider", e),
                (0,
                d.defineReadOnly)(this, "name", n),
                (0,
                d.defineReadOnly)(this, "address", e.formatter.address(t)),
                (0,
                d.defineReadOnly)(this, "_resolvedAddress", r)
            }
            supportsWildcard() {
                return this._supportsEip2544 || (this._supportsEip2544 = this.provider.call({
                    to: this.address,
                    data: "0x01ffc9a79061b92300000000000000000000000000000000000000000000000000000000"
                }).then(e=>o.O$.from(e).eq(1)).catch(e=>{
                    if (e.code === g.Logger.errors.CALL_EXCEPTION)
                        return !1;
                    throw this._supportsEip2544 = null,
                    e
                }
                )),
                this._supportsEip2544
            }
            _fetch(e, t) {
                return w(this, void 0, void 0, function*() {
                    let n = {
                        to: this.address,
                        ccipReadEnabled: !0,
                        data: (0,
                        s.hexConcat)([e, (0,
                        l.VM)(this.name), t || "0x"])
                    }
                      , r = !1;
                    (yield this.supportsWildcard()) && (r = !0,
                    n.data = (0,
                    s.hexConcat)(["0x9061b923", L([(0,
                    l.Kn)(this.name), n.data])]));
                    try {
                        let e = yield this.provider.call(n);
                        return (0,
                        s.arrayify)(e).length % 32 == 4 && T.throwError("resolver threw error", g.Logger.errors.CALL_EXCEPTION, {
                            transaction: n,
                            data: e
                        }),
                        r && (e = F(e, 0)),
                        e
                    } catch (e) {
                        if (e.code === g.Logger.errors.CALL_EXCEPTION)
                            return null;
                        throw e
                    }
                })
            }
            _fetchBytes(e, t) {
                return w(this, void 0, void 0, function*() {
                    let n = yield this._fetch(e, t);
                    return null != n ? F(n, 0) : null
                })
            }
            _getAddress(e, t) {
                let n = I[String(e)];
                if (null == n && T.throwError(`unsupported coin type: ${e}`, g.Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: `getAddress(${e})`
                }),
                "eth" === n.ilk)
                    return this.provider.formatter.address(t);
                let r = (0,
                s.arrayify)(t);
                if (null != n.p2pkh) {
                    let e = t.match(/^0x76a9([0-9a-f][0-9a-f])([0-9a-f]*)88ac$/);
                    if (e) {
                        let t = parseInt(e[1], 16);
                        if (e[2].length === 2 * t && t >= 1 && t <= 75)
                            return B((0,
                            s.concat)([[n.p2pkh], "0x" + e[2]]))
                    }
                }
                if (null != n.p2sh) {
                    let e = t.match(/^0xa9([0-9a-f][0-9a-f])([0-9a-f]*)87$/);
                    if (e) {
                        let t = parseInt(e[1], 16);
                        if (e[2].length === 2 * t && t >= 1 && t <= 75)
                            return B((0,
                            s.concat)([[n.p2sh], "0x" + e[2]]))
                    }
                }
                if (null != n.prefix) {
                    let e = r[1]
                      , t = r[0];
                    if (0 === t ? 20 !== e && 32 !== e && (t = -1) : t = -1,
                    t >= 0 && r.length === 2 + e && e >= 1 && e <= 75) {
                        let e = y().toWords(r.slice(2));
                        return e.unshift(t),
                        y().encode(n.prefix, e)
                    }
                }
                return null
            }
            getAddress(e) {
                return w(this, void 0, void 0, function*() {
                    if (null == e && (e = 60),
                    60 === e)
                        try {
                            let e = yield this._fetch("0x3b3b57de");
                            if ("0x" === e || e === u.R)
                                return null;
                            return this.provider.formatter.callAddress(e)
                        } catch (e) {
                            if (e.code === g.Logger.errors.CALL_EXCEPTION)
                                return null;
                            throw e
                        }
                    let t = yield this._fetchBytes("0xf1cb7e06", P(e));
                    if (null == t || "0x" === t)
                        return null;
                    let n = this._getAddress(e, t);
                    return null == n && T.throwError("invalid or unsupported coin data", g.Logger.errors.UNSUPPORTED_OPERATION, {
                        operation: `getAddress(${e})`,
                        coinType: e,
                        data: t
                    }),
                    n
                })
            }
            getAvatar() {
                return w(this, void 0, void 0, function*() {
                    let e = [{
                        type: "name",
                        content: this.name
                    }];
                    try {
                        let t = yield this.getText("avatar");
                        if (null == t)
                            return null;
                        for (let n = 0; n < N.length; n++) {
                            let r = t.match(N[n]);
                            if (null == r)
                                continue;
                            let i = r[1].toLowerCase();
                            switch (i) {
                            case "https":
                                return e.push({
                                    type: "url",
                                    content: t
                                }),
                                {
                                    linkage: e,
                                    url: t
                                };
                            case "data":
                                return e.push({
                                    type: "data",
                                    content: t
                                }),
                                {
                                    linkage: e,
                                    url: t
                                };
                            case "ipfs":
                                return e.push({
                                    type: "ipfs",
                                    content: t
                                }),
                                {
                                    linkage: e,
                                    url: D(t)
                                };
                            case "erc721":
                            case "erc1155":
                                {
                                    let n = "erc721" === i ? "0xc87b56dd" : "0x0e89341c";
                                    e.push({
                                        type: i,
                                        content: t
                                    });
                                    let a = this._resolvedAddress || (yield this.getAddress())
                                      , u = (r[2] || "").split("/");
                                    if (2 !== u.length)
                                        return null;
                                    let l = yield this.provider.formatter.address(u[0])
                                      , c = (0,
                                    s.hexZeroPad)(o.O$.from(u[1]).toHexString(), 32);
                                    if ("erc721" === i) {
                                        let t = this.provider.formatter.callAddress((yield this.provider.call({
                                            to: l,
                                            data: (0,
                                            s.hexConcat)(["0x6352211e", c])
                                        })));
                                        if (a !== t)
                                            return null;
                                        e.push({
                                            type: "owner",
                                            content: t
                                        })
                                    } else if ("erc1155" === i) {
                                        let t = o.O$.from((yield this.provider.call({
                                            to: l,
                                            data: (0,
                                            s.hexConcat)(["0x00fdd58e", (0,
                                            s.hexZeroPad)(a, 32), c])
                                        })));
                                        if (t.isZero())
                                            return null;
                                        e.push({
                                            type: "balance",
                                            content: t.toString()
                                        })
                                    }
                                    let d = {
                                        to: this.provider.formatter.address(u[0]),
                                        data: (0,
                                        s.hexConcat)([n, c])
                                    }
                                      , p = R((yield this.provider.call(d)), 0);
                                    if (null == p)
                                        return null;
                                    e.push({
                                        type: "metadata-url-base",
                                        content: p
                                    }),
                                    "erc1155" === i && (p = p.replace("{id}", c.substring(2)),
                                    e.push({
                                        type: "metadata-url-expanded",
                                        content: p
                                    })),
                                    p.match(/^ipfs:/i) && (p = D(p)),
                                    e.push({
                                        type: "metadata-url",
                                        content: p
                                    });
                                    let f = yield(0,
                                    h.fetchJson)(p);
                                    if (!f)
                                        return null;
                                    e.push({
                                        type: "metadata",
                                        content: JSON.stringify(f)
                                    });
                                    let m = f.image;
                                    if ("string" != typeof m)
                                        return null;
                                    if (m.match(/^(https:\/\/|data:)/i))
                                        ;
                                    else {
                                        let t = m.match(O);
                                        if (null == t)
                                            return null;
                                        e.push({
                                            type: "url-ipfs",
                                            content: m
                                        }),
                                        m = D(m)
                                    }
                                    return e.push({
                                        type: "url",
                                        content: m
                                    }),
                                    {
                                        linkage: e,
                                        url: m
                                    }
                                }
                            }
                        }
                    } catch (e) {}
                    return null
                })
            }
            getContentHash() {
                return w(this, void 0, void 0, function*() {
                    let e = yield this._fetchBytes("0xbc1c58d1");
                    if (null == e || "0x" === e)
                        return null;
                    let t = e.match(/^0xe3010170(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);
                    if (t) {
                        let e = parseInt(t[3], 16);
                        if (t[4].length === 2 * e)
                            return "ipfs://" + a.Base58.encode("0x" + t[1])
                    }
                    let n = e.match(/^0xe5010172(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);
                    if (n) {
                        let e = parseInt(n[3], 16);
                        if (n[4].length === 2 * e)
                            return "ipns://" + a.Base58.encode("0x" + n[1])
                    }
                    let r = e.match(/^0xe40101fa011b20([0-9a-f]*)$/);
                    if (r && 64 === r[1].length)
                        return "bzz://" + r[1];
                    let o = e.match(/^0x90b2c605([0-9a-f]*)$/);
                    if (o && 68 === o[1].length) {
                        let e = {
                            "=": "",
                            "+": "-",
                            "/": "_"
                        }
                          , t = (0,
                        i.c)("0x" + o[1]).replace(/[=+\/]/g, t=>e[t]);
                        return "sia://" + t
                    }
                    return T.throwError("invalid or unsupported content hash data", g.Logger.errors.UNSUPPORTED_OPERATION, {
                        operation: "getContentHash()",
                        data: e
                    })
                })
            }
            getText(e) {
                return w(this, void 0, void 0, function*() {
                    let t = (0,
                    f.Y0)(e);
                    (t = (0,
                    s.concat)([P(64), P(t.length), t])).length % 32 != 0 && (t = (0,
                    s.concat)([t, (0,
                    s.hexZeroPad)("0x", 32 - e.length % 32)]));
                    let n = yield this._fetchBytes("0x59d1d43c", (0,
                    s.hexlify)(t));
                    return null == n || "0x" === n ? null : (0,
                    f.ZN)(n)
                })
            }
        }
        let q = null
          , j = 1;
        class $ extends r.Provider {
            constructor(e) {
                if (super(),
                this._events = [],
                this._emitted = {
                    block: -2
                },
                this.disableCcipRead = !1,
                this.formatter = new.target.getFormatter(),
                (0,
                d.defineReadOnly)(this, "anyNetwork", "any" === e),
                this.anyNetwork && (e = this.detectNetwork()),
                e instanceof Promise)
                    this._networkPromise = e,
                    e.catch(e=>{}
                    ),
                    this._ready().catch(e=>{}
                    );
                else {
                    let t = (0,
                    d.getStatic)(new.target, "getNetwork")(e);
                    t ? ((0,
                    d.defineReadOnly)(this, "_network", t),
                    this.emit("network", t, null)) : T.throwArgumentError("invalid network", "network", e)
                }
                this._maxInternalBlockNumber = -1024,
                this._lastBlockNumber = -2,
                this._maxFilterBlockRange = 10,
                this._pollingInterval = 4e3,
                this._fastQueryDate = 0
            }
            _ready() {
                return w(this, void 0, void 0, function*() {
                    if (null == this._network) {
                        let e = null;
                        if (this._networkPromise)
                            try {
                                e = yield this._networkPromise
                            } catch (e) {}
                        null == e && (e = yield this.detectNetwork()),
                        e || T.throwError("no network detected", g.Logger.errors.UNKNOWN_ERROR, {}),
                        null == this._network && (this.anyNetwork ? this._network = e : (0,
                        d.defineReadOnly)(this, "_network", e),
                        this.emit("network", e, null))
                    }
                    return this._network
                })
            }
            get ready() {
                return (0,
                h.poll)(()=>this._ready().then(e=>e, e=>{
                    if (e.code !== g.Logger.errors.NETWORK_ERROR || "noNetwork" !== e.event)
                        throw e
                }
                ))
            }
            static getFormatter() {
                return null == q && (q = new v.Mb),
                q
            }
            static getNetwork(e) {
                return (0,
                c.H)(null == e ? "homestead" : e)
            }
            ccipReadFetch(e, t, n) {
                return w(this, void 0, void 0, function*() {
                    if (this.disableCcipRead || 0 === n.length)
                        return null;
                    let r = e.to.toLowerCase()
                      , i = t.toLowerCase()
                      , a = [];
                    for (let e = 0; e < n.length; e++) {
                        let t = n[e]
                          , o = t.replace("{sender}", r).replace("{data}", i)
                          , s = t.indexOf("{data}") >= 0 ? null : JSON.stringify({
                            data: i,
                            sender: r
                        })
                          , u = yield(0,
                        h.fetchJson)({
                            url: o,
                            errorPassThrough: !0
                        }, s, (e,t)=>(e.status = t.statusCode,
                        e));
                        if (u.data)
                            return u.data;
                        let l = u.message || "unknown error";
                        if (u.status >= 400 && u.status < 500)
                            return T.throwError(`response not found during CCIP fetch: ${l}`, g.Logger.errors.SERVER_ERROR, {
                                url: t,
                                errorMessage: l
                            });
                        a.push(l)
                    }
                    return T.throwError(`error encountered during CCIP fetch: ${a.map(e=>JSON.stringify(e)).join(", ")}`, g.Logger.errors.SERVER_ERROR, {
                        urls: n,
                        errorMessages: a
                    })
                })
            }
            _getInternalBlockNumber(e) {
                return w(this, void 0, void 0, function*() {
                    if (yield this._ready(),
                    e > 0)
                        for (; this._internalBlockNumber; ) {
                            let t = this._internalBlockNumber;
                            try {
                                let n = yield t;
                                if (k() - n.respTime <= e)
                                    return n.blockNumber;
                                break
                            } catch (e) {
                                if (this._internalBlockNumber === t)
                                    break
                            }
                        }
                    let t = k()
                      , n = (0,
                    d.resolveProperties)({
                        blockNumber: this.perform("getBlockNumber", {}),
                        networkError: this.getNetwork().then(e=>null, e=>e)
                    }).then(({blockNumber: e, networkError: r})=>{
                        if (r)
                            throw this._internalBlockNumber === n && (this._internalBlockNumber = null),
                            r;
                        let i = k();
                        return (e = o.O$.from(e).toNumber()) < this._maxInternalBlockNumber && (e = this._maxInternalBlockNumber),
                        this._maxInternalBlockNumber = e,
                        this._setFastBlockNumber(e),
                        {
                            blockNumber: e,
                            reqTime: t,
                            respTime: i
                        }
                    }
                    );
                    return this._internalBlockNumber = n,
                    n.catch(e=>{
                        this._internalBlockNumber === n && (this._internalBlockNumber = null)
                    }
                    ),
                    (yield n).blockNumber
                })
            }
            poll() {
                return w(this, void 0, void 0, function*() {
                    let e = j++
                      , t = []
                      , n = null;
                    try {
                        n = yield this._getInternalBlockNumber(100 + this.pollingInterval / 2)
                    } catch (e) {
                        this.emit("error", e);
                        return
                    }
                    if (this._setFastBlockNumber(n),
                    this.emit("poll", e, n),
                    n === this._lastBlockNumber) {
                        this.emit("didPoll", e);
                        return
                    }
                    if (-2 === this._emitted.block && (this._emitted.block = n - 1),
                    Math.abs(this._emitted.block - n) > 1e3)
                        T.warn(`network block skew detected; skipping block events (emitted=${this._emitted.block} blockNumber ${n})`),
                        this.emit("error", T.makeError("network block skew detected", g.Logger.errors.NETWORK_ERROR, {
                            blockNumber: n,
                            event: "blockSkew",
                            previousBlockNumber: this._emitted.block
                        })),
                        this.emit("block", n);
                    else
                        for (let e = this._emitted.block + 1; e <= n; e++)
                            this.emit("block", e);
                    this._emitted.block !== n && (this._emitted.block = n,
                    Object.keys(this._emitted).forEach(e=>{
                        if ("block" === e)
                            return;
                        let t = this._emitted[e];
                        "pending" !== t && n - t > 12 && delete this._emitted[e]
                    }
                    )),
                    -2 === this._lastBlockNumber && (this._lastBlockNumber = n - 1),
                    this._events.forEach(e=>{
                        switch (e.type) {
                        case "tx":
                            {
                                let n = e.hash
                                  , r = this.getTransactionReceipt(n).then(e=>(e && null != e.blockNumber && (this._emitted["t:" + n] = e.blockNumber,
                                this.emit(n, e)),
                                null)).catch(e=>{
                                    this.emit("error", e)
                                }
                                );
                                t.push(r);
                                break
                            }
                        case "filter":
                            if (!e._inflight) {
                                e._inflight = !0,
                                -2 === e._lastBlockNumber && (e._lastBlockNumber = n - 1);
                                let r = e.filter;
                                r.fromBlock = e._lastBlockNumber + 1,
                                r.toBlock = n;
                                let i = r.toBlock - this._maxFilterBlockRange;
                                i > r.fromBlock && (r.fromBlock = i),
                                r.fromBlock < 0 && (r.fromBlock = 0);
                                let a = this.getLogs(r).then(t=>{
                                    e._inflight = !1,
                                    0 !== t.length && t.forEach(t=>{
                                        t.blockNumber > e._lastBlockNumber && (e._lastBlockNumber = t.blockNumber),
                                        this._emitted["b:" + t.blockHash] = t.blockNumber,
                                        this._emitted["t:" + t.transactionHash] = t.blockNumber,
                                        this.emit(r, t)
                                    }
                                    )
                                }
                                ).catch(t=>{
                                    this.emit("error", t),
                                    e._inflight = !1
                                }
                                );
                                t.push(a)
                            }
                        }
                    }
                    ),
                    this._lastBlockNumber = n,
                    Promise.all(t).then(()=>{
                        this.emit("didPoll", e)
                    }
                    ).catch(e=>{
                        this.emit("error", e)
                    }
                    )
                })
            }
            resetEventsBlock(e) {
                this._lastBlockNumber = e - 1,
                this.polling && this.poll()
            }
            get network() {
                return this._network
            }
            detectNetwork() {
                return w(this, void 0, void 0, function*() {
                    return T.throwError("provider does not support network detection", g.Logger.errors.UNSUPPORTED_OPERATION, {
                        operation: "provider.detectNetwork"
                    })
                })
            }
            getNetwork() {
                return w(this, void 0, void 0, function*() {
                    let e = yield this._ready()
                      , t = yield this.detectNetwork();
                    if (e.chainId !== t.chainId) {
                        if (this.anyNetwork)
                            return this._network = t,
                            this._lastBlockNumber = -2,
                            this._fastBlockNumber = null,
                            this._fastBlockNumberPromise = null,
                            this._fastQueryDate = 0,
                            this._emitted.block = -2,
                            this._maxInternalBlockNumber = -1024,
                            this._internalBlockNumber = null,
                            this.emit("network", t, e),
                            yield C(0),
                            this._network;
                        let n = T.makeError("underlying network changed", g.Logger.errors.NETWORK_ERROR, {
                            event: "changed",
                            network: e,
                            detectedNetwork: t
                        });
                        throw this.emit("error", n),
                        n
                    }
                    return e
                })
            }
            get blockNumber() {
                return this._getInternalBlockNumber(100 + this.pollingInterval / 2).then(e=>{
                    this._setFastBlockNumber(e)
                }
                , e=>{}
                ),
                null != this._fastBlockNumber ? this._fastBlockNumber : -1
            }
            get polling() {
                return null != this._poller
            }
            set polling(e) {
                e && !this._poller ? (this._poller = setInterval(()=>{
                    this.poll()
                }
                , this.pollingInterval),
                this._bootstrapPoll || (this._bootstrapPoll = setTimeout(()=>{
                    this.poll(),
                    this._bootstrapPoll = setTimeout(()=>{
                        this._poller || this.poll(),
                        this._bootstrapPoll = null
                    }
                    , this.pollingInterval)
                }
                , 0))) : !e && this._poller && (clearInterval(this._poller),
                this._poller = null)
            }
            get pollingInterval() {
                return this._pollingInterval
            }
            set pollingInterval(e) {
                if ("number" != typeof e || e <= 0 || parseInt(String(e)) != e)
                    throw Error("invalid polling interval");
                this._pollingInterval = e,
                this._poller && (clearInterval(this._poller),
                this._poller = setInterval(()=>{
                    this.poll()
                }
                , this._pollingInterval))
            }
            _getFastBlockNumber() {
                let e = k();
                return e - this._fastQueryDate > 2 * this._pollingInterval && (this._fastQueryDate = e,
                this._fastBlockNumberPromise = this.getBlockNumber().then(e=>((null == this._fastBlockNumber || e > this._fastBlockNumber) && (this._fastBlockNumber = e),
                this._fastBlockNumber))),
                this._fastBlockNumberPromise
            }
            _setFastBlockNumber(e) {
                (null == this._fastBlockNumber || !(e < this._fastBlockNumber)) && (this._fastQueryDate = k(),
                (null == this._fastBlockNumber || e > this._fastBlockNumber) && (this._fastBlockNumber = e,
                this._fastBlockNumberPromise = Promise.resolve(e)))
            }
            waitForTransaction(e, t, n) {
                return w(this, void 0, void 0, function*() {
                    return this._waitForTransaction(e, null == t ? 1 : t, n || 0, null)
                })
            }
            _waitForTransaction(e, t, n, r) {
                return w(this, void 0, void 0, function*() {
                    let i = yield this.getTransactionReceipt(e);
                    return (i ? i.confirmations : 0) >= t ? i : new Promise((i,a)=>{
                        let o = []
                          , s = !1
                          , u = function() {
                            return !!s || (s = !0,
                            o.forEach(e=>{
                                e()
                            }
                            ),
                            !1)
                        }
                          , l = e=>{
                            e.confirmations < t || u() || i(e)
                        }
                        ;
                        if (this.on(e, l),
                        o.push(()=>{
                            this.removeListener(e, l)
                        }
                        ),
                        r) {
                            let n = r.startBlock
                              , i = null
                              , l = o=>w(this, void 0, void 0, function*() {
                                s || (yield C(1e3),
                                this.getTransactionCount(r.from).then(c=>w(this, void 0, void 0, function*() {
                                    if (!s) {
                                        if (c <= r.nonce)
                                            n = o;
                                        else {
                                            {
                                                let t = yield this.getTransaction(e);
                                                if (t && null != t.blockNumber)
                                                    return
                                            }
                                            for (null == i && (i = n - 3) < r.startBlock && (i = r.startBlock); i <= o; ) {
                                                if (s)
                                                    return;
                                                let n = yield this.getBlockWithTransactions(i);
                                                for (let i = 0; i < n.transactions.length; i++) {
                                                    let o = n.transactions[i];
                                                    if (o.hash === e)
                                                        return;
                                                    if (o.from === r.from && o.nonce === r.nonce) {
                                                        if (s)
                                                            return;
                                                        let n = yield this.waitForTransaction(o.hash, t);
                                                        if (u())
                                                            return;
                                                        let i = "replaced";
                                                        o.data === r.data && o.to === r.to && o.value.eq(r.value) ? i = "repriced" : "0x" === o.data && o.from === o.to && o.value.isZero() && (i = "cancelled"),
                                                        a(T.makeError("transaction was replaced", g.Logger.errors.TRANSACTION_REPLACED, {
                                                            cancelled: "replaced" === i || "cancelled" === i,
                                                            reason: i,
                                                            replacement: this._wrapTransaction(o),
                                                            hash: e,
                                                            receipt: n
                                                        }));
                                                        return
                                                    }
                                                }
                                                i++
                                            }
                                        }
                                        s || this.once("block", l)
                                    }
                                }), e=>{
                                    s || this.once("block", l)
                                }
                                ))
                            });
                            if (s)
                                return;
                            this.once("block", l),
                            o.push(()=>{
                                this.removeListener("block", l)
                            }
                            )
                        }
                        if ("number" == typeof n && n > 0) {
                            let e = setTimeout(()=>{
                                u() || a(T.makeError("timeout exceeded", g.Logger.errors.TIMEOUT, {
                                    timeout: n
                                }))
                            }
                            , n);
                            e.unref && e.unref(),
                            o.push(()=>{
                                clearTimeout(e)
                            }
                            )
                        }
                    }
                    )
                })
            }
            getBlockNumber() {
                return w(this, void 0, void 0, function*() {
                    return this._getInternalBlockNumber(0)
                })
            }
            getGasPrice() {
                return w(this, void 0, void 0, function*() {
                    yield this.getNetwork();
                    let e = yield this.perform("getGasPrice", {});
                    try {
                        return o.O$.from(e)
                    } catch (t) {
                        return T.throwError("bad result from backend", g.Logger.errors.SERVER_ERROR, {
                            method: "getGasPrice",
                            result: e,
                            error: t
                        })
                    }
                })
            }
            getBalance(e, t) {
                return w(this, void 0, void 0, function*() {
                    yield this.getNetwork();
                    let n = yield(0,
                    d.resolveProperties)({
                        address: this._getAddress(e),
                        blockTag: this._getBlockTag(t)
                    })
                      , r = yield this.perform("getBalance", n);
                    try {
                        return o.O$.from(r)
                    } catch (e) {
                        return T.throwError("bad result from backend", g.Logger.errors.SERVER_ERROR, {
                            method: "getBalance",
                            params: n,
                            result: r,
                            error: e
                        })
                    }
                })
            }
            getTransactionCount(e, t) {
                return w(this, void 0, void 0, function*() {
                    yield this.getNetwork();
                    let n = yield(0,
                    d.resolveProperties)({
                        address: this._getAddress(e),
                        blockTag: this._getBlockTag(t)
                    })
                      , r = yield this.perform("getTransactionCount", n);
                    try {
                        return o.O$.from(r).toNumber()
                    } catch (e) {
                        return T.throwError("bad result from backend", g.Logger.errors.SERVER_ERROR, {
                            method: "getTransactionCount",
                            params: n,
                            result: r,
                            error: e
                        })
                    }
                })
            }
            getCode(e, t) {
                return w(this, void 0, void 0, function*() {
                    yield this.getNetwork();
                    let n = yield(0,
                    d.resolveProperties)({
                        address: this._getAddress(e),
                        blockTag: this._getBlockTag(t)
                    })
                      , r = yield this.perform("getCode", n);
                    try {
                        return (0,
                        s.hexlify)(r)
                    } catch (e) {
                        return T.throwError("bad result from backend", g.Logger.errors.SERVER_ERROR, {
                            method: "getCode",
                            params: n,
                            result: r,
                            error: e
                        })
                    }
                })
            }
            getStorageAt(e, t, n) {
                return w(this, void 0, void 0, function*() {
                    yield this.getNetwork();
                    let r = yield(0,
                    d.resolveProperties)({
                        address: this._getAddress(e),
                        blockTag: this._getBlockTag(n),
                        position: Promise.resolve(t).then(e=>(0,
                        s.hexValue)(e))
                    })
                      , i = yield this.perform("getStorageAt", r);
                    try {
                        return (0,
                        s.hexlify)(i)
                    } catch (e) {
                        return T.throwError("bad result from backend", g.Logger.errors.SERVER_ERROR, {
                            method: "getStorageAt",
                            params: r,
                            result: i,
                            error: e
                        })
                    }
                })
            }
            _wrapTransaction(e, t, n) {
                if (null != t && 32 !== (0,
                s.hexDataLength)(t))
                    throw Error("invalid response - sendTransaction");
                let r = e;
                return null != t && e.hash !== t && T.throwError("Transaction hash mismatch from Provider.sendTransaction.", g.Logger.errors.UNKNOWN_ERROR, {
                    expectedHash: e.hash,
                    returnedHash: t
                }),
                r.wait = (t,r)=>w(this, void 0, void 0, function*() {
                    let i;
                    null == t && (t = 1),
                    null == r && (r = 0),
                    0 !== t && null != n && (i = {
                        data: e.data,
                        from: e.from,
                        nonce: e.nonce,
                        to: e.to,
                        value: e.value,
                        startBlock: n
                    });
                    let a = yield this._waitForTransaction(e.hash, t, r, i);
                    return null == a && 0 === t ? null : (this._emitted["t:" + e.hash] = a.blockNumber,
                    0 === a.status && T.throwError("transaction failed", g.Logger.errors.CALL_EXCEPTION, {
                        transactionHash: e.hash,
                        transaction: e,
                        receipt: a
                    }),
                    a)
                }),
                r
            }
            sendTransaction(e) {
                return w(this, void 0, void 0, function*() {
                    yield this.getNetwork();
                    let t = yield Promise.resolve(e).then(e=>(0,
                    s.hexlify)(e))
                      , n = this.formatter.transaction(e);
                    null == n.confirmations && (n.confirmations = 0);
                    let r = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);
                    try {
                        let e = yield this.perform("sendTransaction", {
                            signedTransaction: t
                        });
                        return this._wrapTransaction(n, e, r)
                    } catch (e) {
                        throw e.transaction = n,
                        e.transactionHash = n.hash,
                        e
                    }
                })
            }
            _getTransactionRequest(e) {
                return w(this, void 0, void 0, function*() {
                    let t = yield e
                      , n = {};
                    return ["from", "to"].forEach(e=>{
                        null != t[e] && (n[e] = Promise.resolve(t[e]).then(e=>e ? this._getAddress(e) : null))
                    }
                    ),
                    ["gasLimit", "gasPrice", "maxFeePerGas", "maxPriorityFeePerGas", "value"].forEach(e=>{
                        null != t[e] && (n[e] = Promise.resolve(t[e]).then(e=>e ? o.O$.from(e) : null))
                    }
                    ),
                    ["type"].forEach(e=>{
                        null != t[e] && (n[e] = Promise.resolve(t[e]).then(e=>null != e ? e : null))
                    }
                    ),
                    t.accessList && (n.accessList = this.formatter.accessList(t.accessList)),
                    ["data"].forEach(e=>{
                        null != t[e] && (n[e] = Promise.resolve(t[e]).then(e=>e ? (0,
                        s.hexlify)(e) : null))
                    }
                    ),
                    this.formatter.transactionRequest((yield(0,
                    d.resolveProperties)(n)))
                })
            }
            _getFilter(e) {
                return w(this, void 0, void 0, function*() {
                    e = yield e;
                    let t = {};
                    return null != e.address && (t.address = this._getAddress(e.address)),
                    ["blockHash", "topics"].forEach(n=>{
                        null != e[n] && (t[n] = e[n])
                    }
                    ),
                    ["fromBlock", "toBlock"].forEach(n=>{
                        null != e[n] && (t[n] = this._getBlockTag(e[n]))
                    }
                    ),
                    this.formatter.filter((yield(0,
                    d.resolveProperties)(t)))
                })
            }
            _call(e, t, n) {
                return w(this, void 0, void 0, function*() {
                    n >= 10 && T.throwError("CCIP read exceeded maximum redirections", g.Logger.errors.SERVER_ERROR, {
                        redirects: n,
                        transaction: e
                    });
                    let r = e.to
                      , i = yield this.perform("call", {
                        transaction: e,
                        blockTag: t
                    });
                    if (n >= 0 && "latest" === t && null != r && "0x556f1830" === i.substring(0, 10) && (0,
                    s.hexDataLength)(i) % 32 == 4)
                        try {
                            let a = (0,
                            s.hexDataSlice)(i, 4)
                              , u = (0,
                            s.hexDataSlice)(a, 0, 32);
                            o.O$.from(u).eq(r) || T.throwError("CCIP Read sender did not match", g.Logger.errors.CALL_EXCEPTION, {
                                name: "OffchainLookup",
                                signature: "OffchainLookup(address,string[],bytes,bytes4,bytes)",
                                transaction: e,
                                data: i
                            });
                            let l = []
                              , c = o.O$.from((0,
                            s.hexDataSlice)(a, 32, 64)).toNumber()
                              , d = o.O$.from((0,
                            s.hexDataSlice)(a, c, c + 32)).toNumber()
                              , p = (0,
                            s.hexDataSlice)(a, c + 32);
                            for (let t = 0; t < d; t++) {
                                let n = R(p, 32 * t);
                                null == n && T.throwError("CCIP Read contained corrupt URL string", g.Logger.errors.CALL_EXCEPTION, {
                                    name: "OffchainLookup",
                                    signature: "OffchainLookup(address,string[],bytes,bytes4,bytes)",
                                    transaction: e,
                                    data: i
                                }),
                                l.push(n)
                            }
                            let f = F(a, 64);
                            o.O$.from((0,
                            s.hexDataSlice)(a, 100, 128)).isZero() || T.throwError("CCIP Read callback selector included junk", g.Logger.errors.CALL_EXCEPTION, {
                                name: "OffchainLookup",
                                signature: "OffchainLookup(address,string[],bytes,bytes4,bytes)",
                                transaction: e,
                                data: i
                            });
                            let h = (0,
                            s.hexDataSlice)(a, 96, 100)
                              , m = F(a, 128)
                              , y = yield this.ccipReadFetch(e, f, l);
                            null == y && T.throwError("CCIP Read disabled or provided no URLs", g.Logger.errors.CALL_EXCEPTION, {
                                name: "OffchainLookup",
                                signature: "OffchainLookup(address,string[],bytes,bytes4,bytes)",
                                transaction: e,
                                data: i
                            });
                            let b = {
                                to: r,
                                data: (0,
                                s.hexConcat)([h, L([y, m])])
                            };
                            return this._call(b, t, n + 1)
                        } catch (e) {
                            if (e.code === g.Logger.errors.SERVER_ERROR)
                                throw e
                        }
                    try {
                        return (0,
                        s.hexlify)(i)
                    } catch (n) {
                        return T.throwError("bad result from backend", g.Logger.errors.SERVER_ERROR, {
                            method: "call",
                            params: {
                                transaction: e,
                                blockTag: t
                            },
                            result: i,
                            error: n
                        })
                    }
                })
            }
            call(e, t) {
                return w(this, void 0, void 0, function*() {
                    yield this.getNetwork();
                    let n = yield(0,
                    d.resolveProperties)({
                        transaction: this._getTransactionRequest(e),
                        blockTag: this._getBlockTag(t),
                        ccipReadEnabled: Promise.resolve(e.ccipReadEnabled)
                    });
                    return this._call(n.transaction, n.blockTag, n.ccipReadEnabled ? 0 : -1)
                })
            }
            estimateGas(e) {
                return w(this, void 0, void 0, function*() {
                    yield this.getNetwork();
                    let t = yield(0,
                    d.resolveProperties)({
                        transaction: this._getTransactionRequest(e)
                    })
                      , n = yield this.perform("estimateGas", t);
                    try {
                        return o.O$.from(n)
                    } catch (e) {
                        return T.throwError("bad result from backend", g.Logger.errors.SERVER_ERROR, {
                            method: "estimateGas",
                            params: t,
                            result: n,
                            error: e
                        })
                    }
                })
            }
            _getAddress(e) {
                return w(this, void 0, void 0, function*() {
                    "string" != typeof (e = yield e) && T.throwArgumentError("invalid address or ENS name", "name", e);
                    let t = yield this.resolveName(e);
                    return null == t && T.throwError("ENS name not configured", g.Logger.errors.UNSUPPORTED_OPERATION, {
                        operation: `resolveName(${JSON.stringify(e)})`
                    }),
                    t
                })
            }
            _getBlock(e, t) {
                return w(this, void 0, void 0, function*() {
                    yield this.getNetwork(),
                    e = yield e;
                    let n = -128
                      , r = {
                        includeTransactions: !!t
                    };
                    if ((0,
                    s.isHexString)(e, 32))
                        r.blockHash = e;
                    else
                        try {
                            r.blockTag = yield this._getBlockTag(e),
                            (0,
                            s.isHexString)(r.blockTag) && (n = parseInt(r.blockTag.substring(2), 16))
                        } catch (t) {
                            T.throwArgumentError("invalid block hash or block tag", "blockHashOrBlockTag", e)
                        }
                    return (0,
                    h.poll)(()=>w(this, void 0, void 0, function*() {
                        let e = yield this.perform("getBlock", r);
                        if (null == e)
                            return null != r.blockHash && null == this._emitted["b:" + r.blockHash] || null != r.blockTag && n > this._emitted.block ? null : void 0;
                        if (t) {
                            let t = null;
                            for (let n = 0; n < e.transactions.length; n++) {
                                let r = e.transactions[n];
                                if (null == r.blockNumber)
                                    r.confirmations = 0;
                                else if (null == r.confirmations) {
                                    null == t && (t = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval));
                                    let e = t - r.blockNumber + 1;
                                    e <= 0 && (e = 1),
                                    r.confirmations = e
                                }
                            }
                            let n = this.formatter.blockWithTransactions(e);
                            return n.transactions = n.transactions.map(e=>this._wrapTransaction(e)),
                            n
                        }
                        return this.formatter.block(e)
                    }), {
                        oncePoll: this
                    })
                })
            }
            getBlock(e) {
                return this._getBlock(e, !1)
            }
            getBlockWithTransactions(e) {
                return this._getBlock(e, !0)
            }
            getTransaction(e) {
                return w(this, void 0, void 0, function*() {
                    yield this.getNetwork(),
                    e = yield e;
                    let t = {
                        transactionHash: this.formatter.hash(e, !0)
                    };
                    return (0,
                    h.poll)(()=>w(this, void 0, void 0, function*() {
                        let n = yield this.perform("getTransaction", t);
                        if (null == n)
                            return null == this._emitted["t:" + e] ? null : void 0;
                        let r = this.formatter.transactionResponse(n);
                        if (null == r.blockNumber)
                            r.confirmations = 0;
                        else if (null == r.confirmations) {
                            let e = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval)
                              , t = e - r.blockNumber + 1;
                            t <= 0 && (t = 1),
                            r.confirmations = t
                        }
                        return this._wrapTransaction(r)
                    }), {
                        oncePoll: this
                    })
                })
            }
            getTransactionReceipt(e) {
                return w(this, void 0, void 0, function*() {
                    yield this.getNetwork(),
                    e = yield e;
                    let t = {
                        transactionHash: this.formatter.hash(e, !0)
                    };
                    return (0,
                    h.poll)(()=>w(this, void 0, void 0, function*() {
                        let n = yield this.perform("getTransactionReceipt", t);
                        if (null == n)
                            return null == this._emitted["t:" + e] ? null : void 0;
                        if (null == n.blockHash)
                            return;
                        let r = this.formatter.receipt(n);
                        if (null == r.blockNumber)
                            r.confirmations = 0;
                        else if (null == r.confirmations) {
                            let e = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval)
                              , t = e - r.blockNumber + 1;
                            t <= 0 && (t = 1),
                            r.confirmations = t
                        }
                        return r
                    }), {
                        oncePoll: this
                    })
                })
            }
            getLogs(e) {
                return w(this, void 0, void 0, function*() {
                    yield this.getNetwork();
                    let t = yield(0,
                    d.resolveProperties)({
                        filter: this._getFilter(e)
                    })
                      , n = yield this.perform("getLogs", t);
                    return n.forEach(e=>{
                        null == e.removed && (e.removed = !1)
                    }
                    ),
                    v.Mb.arrayOf(this.formatter.filterLog.bind(this.formatter))(n)
                })
            }
            getEtherPrice() {
                return w(this, void 0, void 0, function*() {
                    return yield this.getNetwork(),
                    this.perform("getEtherPrice", {})
                })
            }
            _getBlockTag(e) {
                return w(this, void 0, void 0, function*() {
                    if ("number" == typeof (e = yield e) && e < 0) {
                        e % 1 && T.throwArgumentError("invalid BlockTag", "blockTag", e);
                        let t = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);
                        return (t += e) < 0 && (t = 0),
                        this.formatter.blockTag(t)
                    }
                    return this.formatter.blockTag(e)
                })
            }
            getResolver(e) {
                return w(this, void 0, void 0, function*() {
                    let t = e;
                    for (; ; ) {
                        if ("" === t || "." === t || "eth" !== e && "eth" === t)
                            return null;
                        let n = yield this._getResolver(t, "getResolver");
                        if (null != n) {
                            let r = new U(this,n,e);
                            if (t !== e && !(yield r.supportsWildcard()))
                                return null;
                            return r
                        }
                        t = t.split(".").slice(1).join(".")
                    }
                })
            }
            _getResolver(e, t) {
                return w(this, void 0, void 0, function*() {
                    null == t && (t = "ENS");
                    let n = yield this.getNetwork();
                    n.ensAddress || T.throwError("network does not support ENS", g.Logger.errors.UNSUPPORTED_OPERATION, {
                        operation: t,
                        network: n.name
                    });
                    try {
                        let t = yield this.call({
                            to: n.ensAddress,
                            data: "0x0178b8bf" + (0,
                            l.VM)(e).substring(2)
                        });
                        return this.formatter.callAddress(t)
                    } catch (e) {}
                    return null
                })
            }
            resolveName(e) {
                return w(this, void 0, void 0, function*() {
                    e = yield e;
                    try {
                        return Promise.resolve(this.formatter.address(e))
                    } catch (t) {
                        if ((0,
                        s.isHexString)(e))
                            throw t
                    }
                    "string" != typeof e && T.throwArgumentError("invalid ENS name", "name", e);
                    let t = yield this.getResolver(e);
                    return t ? yield t.getAddress() : null
                })
            }
            lookupAddress(e) {
                return w(this, void 0, void 0, function*() {
                    e = yield e,
                    e = this.formatter.address(e);
                    let t = e.substring(2).toLowerCase() + ".addr.reverse"
                      , n = yield this._getResolver(t, "lookupAddress");
                    if (null == n)
                        return null;
                    let r = R((yield this.call({
                        to: n,
                        data: "0x691f3431" + (0,
                        l.VM)(t).substring(2)
                    })), 0)
                      , i = yield this.resolveName(r);
                    return i != e ? null : r
                })
            }
            getAvatar(e) {
                return w(this, void 0, void 0, function*() {
                    let t = null;
                    if ((0,
                    s.isHexString)(e)) {
                        let n = this.formatter.address(e)
                          , r = n.substring(2).toLowerCase() + ".addr.reverse"
                          , i = yield this._getResolver(r, "getAvatar");
                        if (!i)
                            return null;
                        t = new U(this,i,r);
                        try {
                            let e = yield t.getAvatar();
                            if (e)
                                return e.url
                        } catch (e) {
                            if (e.code !== g.Logger.errors.CALL_EXCEPTION)
                                throw e
                        }
                        try {
                            let e = R((yield this.call({
                                to: i,
                                data: "0x691f3431" + (0,
                                l.VM)(r).substring(2)
                            })), 0);
                            t = yield this.getResolver(e)
                        } catch (e) {
                            if (e.code !== g.Logger.errors.CALL_EXCEPTION)
                                throw e;
                            return null
                        }
                    } else if (!(t = yield this.getResolver(e)))
                        return null;
                    let n = yield t.getAvatar();
                    return null == n ? null : n.url
                })
            }
            perform(e, t) {
                return T.throwError(e + " not implemented", g.Logger.errors.NOT_IMPLEMENTED, {
                    operation: e
                })
            }
            _startEvent(e) {
                this.polling = this._events.filter(e=>e.pollable()).length > 0
            }
            _stopEvent(e) {
                this.polling = this._events.filter(e=>e.pollable()).length > 0
            }
            _addEventListener(e, t, n) {
                let r = new S(x(e),t,n);
                return this._events.push(r),
                this._startEvent(r),
                this
            }
            on(e, t) {
                return this._addEventListener(e, t, !1)
            }
            once(e, t) {
                return this._addEventListener(e, t, !0)
            }
            emit(e, ...t) {
                let n = !1
                  , r = []
                  , i = x(e);
                return this._events = this._events.filter(e=>e.tag !== i || (setTimeout(()=>{
                    e.listener.apply(this, t)
                }
                , 0),
                n = !0,
                !e.once || (r.push(e),
                !1))),
                r.forEach(e=>{
                    this._stopEvent(e)
                }
                ),
                n
            }
            listenerCount(e) {
                if (!e)
                    return this._events.length;
                let t = x(e);
                return this._events.filter(e=>e.tag === t).length
            }
            listeners(e) {
                if (null == e)
                    return this._events.map(e=>e.listener);
                let t = x(e);
                return this._events.filter(e=>e.tag === t).map(e=>e.listener)
            }
            off(e, t) {
                if (null == t)
                    return this.removeAllListeners(e);
                let n = []
                  , r = !1
                  , i = x(e);
                return this._events = this._events.filter(e=>e.tag !== i || e.listener != t || !!r || (r = !0,
                n.push(e),
                !1)),
                n.forEach(e=>{
                    this._stopEvent(e)
                }
                ),
                this
            }
            removeAllListeners(e) {
                let t = [];
                if (null == e)
                    t = this._events,
                    this._events = [];
                else {
                    let n = x(e);
                    this._events = this._events.filter(e=>e.tag !== n || (t.push(e),
                    !1))
                }
                return t.forEach(e=>{
                    this._stopEvent(e)
                }
                ),
                this
            }
        }
    },
    84267: function(e, t, n) {
        "use strict";
        n.d(t, {
            H: function() {
                return k
            }
        });
        var r = n(480)
          , i = n(13004)
          , a = n(70367)
          , o = n(28609)
          , s = n(67960)
          , u = n(187)
          , l = n(52071)
          , c = n(20949)
          , d = n(61941)
          , p = n(8280)
          , f = function(e, t, n, r) {
            return new (n || (n = Promise))(function(i, a) {
                function o(e) {
                    try {
                        u(r.next(e))
                    } catch (e) {
                        a(e)
                    }
                }
                function s(e) {
                    try {
                        u(r.throw(e))
                    } catch (e) {
                        a(e)
                    }
                }
                function u(e) {
                    var t;
                    e.done ? i(e.value) : ((t = e.value)instanceof n ? t : new n(function(e) {
                        e(t)
                    }
                    )).then(o, s)
                }
                u((r = r.apply(e, t || [])).next())
            }
            )
        };
        let h = new d.Logger(p.i);
        function m() {
            return new Date().getTime()
        }
        function y(e) {
            let t = null;
            for (let n = 0; n < e.length; n++) {
                let r = e[n];
                if (null == r)
                    return null;
                t ? t.name === r.name && t.chainId === r.chainId && (t.ensAddress === r.ensAddress || null == t.ensAddress && null == r.ensAddress) || h.throwArgumentError("provider mismatch", "networks", e) : t = r
            }
            return t
        }
        function g(e, t) {
            e = e.slice().sort();
            let n = Math.floor(e.length / 2);
            if (e.length % 2)
                return e[n];
            let r = e[n - 1]
              , i = e[n];
            return null != t && Math.abs(r - i) > t ? null : (r + i) / 2
        }
        function b(e) {
            if (null === e)
                return "null";
            if ("number" == typeof e || "boolean" == typeof e)
                return JSON.stringify(e);
            if ("string" == typeof e)
                return e;
            if (i.O$.isBigNumber(e))
                return e.toString();
            if (Array.isArray(e))
                return JSON.stringify(e.map(e=>b(e)));
            if ("object" == typeof e) {
                let t = Object.keys(e);
                return t.sort(),
                "{" + t.map(t=>{
                    let n = e[t];
                    return n = "function" == typeof n ? "[function]" : b(n),
                    JSON.stringify(t) + ":" + n
                }
                ).join(",") + "}"
            }
            throw Error("unknown value type: " + typeof e)
        }
        let v = 1;
        function w(e) {
            let t = null
              , n = null
              , r = new Promise(r=>{
                n = setTimeout(t = function() {
                    n && (clearTimeout(n),
                    n = null),
                    r()
                }
                , e)
            }
            )
              , i = e=>r = r.then(e);
            return {
                cancel: t,
                getPromise: function() {
                    return r
                },
                wait: i
            }
        }
        let T = [d.Logger.errors.CALL_EXCEPTION, d.Logger.errors.INSUFFICIENT_FUNDS, d.Logger.errors.NONCE_EXPIRED, d.Logger.errors.REPLACEMENT_UNDERPRICED, d.Logger.errors.UNPREDICTABLE_GAS_LIMIT]
          , E = ["address", "args", "errorArgs", "errorSignature", "method", "transaction"];
        function A(e, t) {
            let n = {
                weight: e.weight
            };
            return Object.defineProperty(n, "provider", {
                get: ()=>e.provider
            }),
            e.start && (n.start = e.start),
            t && (n.duration = t - e.start),
            e.done && (e.error ? n.error = e.error : n.result = e.result || null),
            n
        }
        function x(e, t) {
            return f(this, void 0, void 0, function*() {
                let n = e.provider;
                return null != n.blockNumber && n.blockNumber >= t || -1 === t ? n : (0,
                u.poll)(()=>new Promise((r,i)=>{
                    setTimeout(function() {
                        return n.blockNumber >= t ? r(n) : e.cancelled ? r(null) : r(void 0)
                    }, 0)
                }
                ), {
                    oncePoll: n
                })
            })
        }
        class k extends l.Zk {
            constructor(e, t) {
                0 === e.length && h.throwArgumentError("missing providers", "providers", e);
                let n = e.map((e,t)=>{
                    if (r.Provider.isProvider(e)) {
                        let t = (0,
                        c.Gp)(e) ? 2e3 : 750;
                        return Object.freeze({
                            provider: e,
                            weight: 1,
                            stallTimeout: t,
                            priority: 1
                        })
                    }
                    let n = (0,
                    o.shallowCopy)(e);
                    null == n.priority && (n.priority = 1),
                    null == n.stallTimeout && (n.stallTimeout = (0,
                    c.Gp)(e) ? 2e3 : 750),
                    null == n.weight && (n.weight = 1);
                    let i = n.weight;
                    return (i % 1 || i > 512 || i < 1) && h.throwArgumentError("invalid weight; must be integer in [1, 512]", `providers[${t}].weight`, i),
                    Object.freeze(n)
                }
                )
                  , i = n.reduce((e,t)=>e + t.weight, 0);
                null == t ? t = i / 2 : t > i && h.throwArgumentError("quorum will always fail; larger than total weight", "quorum", t);
                let a = y(n.map(e=>e.provider.network));
                null == a && (a = new Promise((e,t)=>{
                    setTimeout(()=>{
                        this.detectNetwork().then(e, t)
                    }
                    , 0)
                }
                )),
                super(a),
                (0,
                o.defineReadOnly)(this, "providerConfigs", Object.freeze(n)),
                (0,
                o.defineReadOnly)(this, "quorum", t),
                this._highestBlockNumber = -1
            }
            detectNetwork() {
                return f(this, void 0, void 0, function*() {
                    let e = yield Promise.all(this.providerConfigs.map(e=>e.provider.getNetwork()));
                    return y(e)
                })
            }
            perform(e, t) {
                return f(this, void 0, void 0, function*() {
                    if ("sendTransaction" === e) {
                        let e = yield Promise.all(this.providerConfigs.map(e=>e.provider.sendTransaction(t.signedTransaction).then(e=>e.hash, e=>e)));
                        for (let t = 0; t < e.length; t++) {
                            let n = e[t];
                            if ("string" == typeof n)
                                return n
                        }
                        throw e[0]
                    }
                    -1 === this._highestBlockNumber && "getBlockNumber" !== e && (yield this.getBlockNumber());
                    let n = function(e, t, n) {
                        var r, i;
                        let a = b;
                        switch (t) {
                        case "getBlockNumber":
                            return function(t) {
                                let n = t.map(e=>e.result)
                                  , r = g(t.map(e=>e.result), 2);
                                if (null != r)
                                    return r = Math.ceil(r),
                                    n.indexOf(r + 1) >= 0 && r++,
                                    r >= e._highestBlockNumber && (e._highestBlockNumber = r),
                                    e._highestBlockNumber
                            }
                            ;
                        case "getGasPrice":
                            return function(e) {
                                let t = e.map(e=>e.result);
                                return t.sort(),
                                t[Math.floor(t.length / 2)]
                            }
                            ;
                        case "getEtherPrice":
                            return function(e) {
                                return g(e.map(e=>e.result))
                            }
                            ;
                        case "getBalance":
                        case "getTransactionCount":
                        case "getCode":
                        case "getStorageAt":
                        case "call":
                        case "estimateGas":
                        case "getLogs":
                            break;
                        case "getTransaction":
                        case "getTransactionReceipt":
                            a = function(e) {
                                return null == e ? null : ((e = (0,
                                o.shallowCopy)(e)).confirmations = -1,
                                b(e))
                            }
                            ;
                            break;
                        case "getBlock":
                            a = n.includeTransactions ? function(e) {
                                return null == e ? null : ((e = (0,
                                o.shallowCopy)(e)).transactions = e.transactions.map(e=>((e = (0,
                                o.shallowCopy)(e)).confirmations = -1,
                                e)),
                                b(e))
                            }
                            : function(e) {
                                return null == e ? null : b(e)
                            }
                            ;
                            break;
                        default:
                            throw Error("unknown method: " + t)
                        }
                        return r = a,
                        i = e.quorum,
                        function(e) {
                            let t = {};
                            e.forEach(e=>{
                                let n = r(e.result);
                                t[n] || (t[n] = {
                                    count: 0,
                                    result: e.result
                                }),
                                t[n].count++
                            }
                            );
                            let n = Object.keys(t);
                            for (let e = 0; e < n.length; e++) {
                                let r = t[n[e]];
                                if (r.count >= i)
                                    return r.result
                            }
                        }
                    }(this, e, t)
                      , r = (0,
                    s.y)(this.providerConfigs.map(o.shallowCopy));
                    r.sort((e,t)=>e.priority - t.priority);
                    let i = this._highestBlockNumber
                      , u = 0
                      , l = !0;
                    for (; ; ) {
                        let s = m()
                          , c = r.filter(e=>e.runner && s - e.start < e.stallTimeout).reduce((e,t)=>e + t.weight, 0);
                        for (; c < this.quorum && u < r.length; ) {
                            let n = r[u++]
                              , s = v++;
                            n.start = m(),
                            n.staller = w(n.stallTimeout),
                            n.staller.wait(()=>{
                                n.staller = null
                            }
                            ),
                            n.runner = (function(e, t, n, r) {
                                return f(this, void 0, void 0, function*() {
                                    let i = e.provider;
                                    switch (n) {
                                    case "getBlockNumber":
                                    case "getGasPrice":
                                        return i[n]();
                                    case "getEtherPrice":
                                        if (i.getEtherPrice)
                                            return i.getEtherPrice();
                                        break;
                                    case "getBalance":
                                    case "getTransactionCount":
                                    case "getCode":
                                        return r.blockTag && (0,
                                        a.isHexString)(r.blockTag) && (i = yield x(e, t)),
                                        i[n](r.address, r.blockTag || "latest");
                                    case "getStorageAt":
                                        return r.blockTag && (0,
                                        a.isHexString)(r.blockTag) && (i = yield x(e, t)),
                                        i.getStorageAt(r.address, r.position, r.blockTag || "latest");
                                    case "getBlock":
                                        return r.blockTag && (0,
                                        a.isHexString)(r.blockTag) && (i = yield x(e, t)),
                                        i[r.includeTransactions ? "getBlockWithTransactions" : "getBlock"](r.blockTag || r.blockHash);
                                    case "call":
                                    case "estimateGas":
                                        if (r.blockTag && (0,
                                        a.isHexString)(r.blockTag) && (i = yield x(e, t)),
                                        "call" === n && r.blockTag)
                                            return i[n](r.transaction, r.blockTag);
                                        return i[n](r.transaction);
                                    case "getTransaction":
                                    case "getTransactionReceipt":
                                        return i[n](r.transactionHash);
                                    case "getLogs":
                                        {
                                            let n = r.filter;
                                            return (n.fromBlock && (0,
                                            a.isHexString)(n.fromBlock) || n.toBlock && (0,
                                            a.isHexString)(n.toBlock)) && (i = yield x(e, t)),
                                            i.getLogs(n)
                                        }
                                    }
                                    return h.throwError("unknown method error", d.Logger.errors.UNKNOWN_ERROR, {
                                        method: n,
                                        params: r
                                    })
                                })
                            }
                            )(n, i, e, t).then(r=>{
                                n.done = !0,
                                n.result = r,
                                this.listenerCount("debug") && this.emit("debug", {
                                    action: "request",
                                    rid: s,
                                    backend: A(n, m()),
                                    request: {
                                        method: e,
                                        params: (0,
                                        o.deepCopy)(t)
                                    },
                                    provider: this
                                })
                            }
                            , r=>{
                                n.done = !0,
                                n.error = r,
                                this.listenerCount("debug") && this.emit("debug", {
                                    action: "request",
                                    rid: s,
                                    backend: A(n, m()),
                                    request: {
                                        method: e,
                                        params: (0,
                                        o.deepCopy)(t)
                                    },
                                    provider: this
                                })
                            }
                            ),
                            this.listenerCount("debug") && this.emit("debug", {
                                action: "request",
                                rid: s,
                                backend: A(n, null),
                                request: {
                                    method: e,
                                    params: (0,
                                    o.deepCopy)(t)
                                },
                                provider: this
                            }),
                            c += n.weight
                        }
                        let p = [];
                        r.forEach(e=>{
                            !e.done && e.runner && (p.push(e.runner),
                            e.staller && p.push(e.staller.getPromise()))
                        }
                        ),
                        p.length && (yield Promise.race(p));
                        let y = r.filter(e=>e.done && null == e.error);
                        if (y.length >= this.quorum) {
                            let e = n(y);
                            if (void 0 !== e)
                                return r.forEach(e=>{
                                    e.staller && e.staller.cancel(),
                                    e.cancelled = !0
                                }
                                ),
                                e;
                            l || (yield w(100).getPromise()),
                            l = !1
                        }
                        let g = r.reduce((e,t)=>{
                            if (!t.done || null == t.error)
                                return e;
                            let n = t.error.code;
                            return T.indexOf(n) >= 0 && (e[n] || (e[n] = {
                                error: t.error,
                                weight: 0
                            }),
                            e[n].weight += t.weight),
                            e
                        }
                        , {});
                        if (Object.keys(g).forEach(e=>{
                            let t = g[e];
                            if (t.weight < this.quorum)
                                return;
                            r.forEach(e=>{
                                e.staller && e.staller.cancel(),
                                e.cancelled = !0
                            }
                            );
                            let n = t.error
                              , i = {};
                            E.forEach(e=>{
                                null != n[e] && (i[e] = n[e])
                            }
                            ),
                            h.throwError(n.reason || n.message, e, i)
                        }
                        ),
                        0 === r.filter(e=>!e.done).length)
                            break
                    }
                    return r.forEach(e=>{
                        e.staller && e.staller.cancel(),
                        e.cancelled = !0
                    }
                    ),
                    h.throwError("failed to meet quorum", d.Logger.errors.SERVER_ERROR, {
                        method: e,
                        params: t,
                        results: r.map(e=>A(e)),
                        provider: this
                    })
                })
            }
        }
    },
    20949: function(e, t, n) {
        "use strict";
        n.d(t, {
            Ed: function() {
                return f
            },
            Gp: function() {
                return h
            },
            Mb: function() {
                return p
            },
            vh: function() {
                return y
            }
        });
        var r = n(60727)
          , i = n(13004)
          , a = n(70367)
          , o = n(14852)
          , s = n(28609)
          , u = n(38593)
          , l = n(61941)
          , c = n(8280);
        let d = new l.Logger(c.i);
        class p {
            constructor() {
                this.formats = this.getDefaultFormats()
            }
            getDefaultFormats() {
                let e = {}
                  , t = this.address.bind(this)
                  , n = this.bigNumber.bind(this)
                  , r = this.blockTag.bind(this)
                  , i = this.data.bind(this)
                  , a = this.hash.bind(this)
                  , o = this.hex.bind(this)
                  , u = this.number.bind(this)
                  , l = this.type.bind(this)
                  , c = e=>this.data(e, !0);
                return e.transaction = {
                    hash: a,
                    type: l,
                    accessList: p.allowNull(this.accessList.bind(this), null),
                    blockHash: p.allowNull(a, null),
                    blockNumber: p.allowNull(u, null),
                    transactionIndex: p.allowNull(u, null),
                    confirmations: p.allowNull(u, null),
                    from: t,
                    gasPrice: p.allowNull(n),
                    maxPriorityFeePerGas: p.allowNull(n),
                    maxFeePerGas: p.allowNull(n),
                    gasLimit: n,
                    to: p.allowNull(t, null),
                    value: n,
                    nonce: u,
                    data: i,
                    r: p.allowNull(this.uint256),
                    s: p.allowNull(this.uint256),
                    v: p.allowNull(u),
                    creates: p.allowNull(t, null),
                    raw: p.allowNull(i)
                },
                e.transactionRequest = {
                    from: p.allowNull(t),
                    nonce: p.allowNull(u),
                    gasLimit: p.allowNull(n),
                    gasPrice: p.allowNull(n),
                    maxPriorityFeePerGas: p.allowNull(n),
                    maxFeePerGas: p.allowNull(n),
                    to: p.allowNull(t),
                    value: p.allowNull(n),
                    data: p.allowNull(c),
                    type: p.allowNull(u),
                    accessList: p.allowNull(this.accessList.bind(this), null)
                },
                e.receiptLog = {
                    transactionIndex: u,
                    blockNumber: u,
                    transactionHash: a,
                    address: t,
                    topics: p.arrayOf(a),
                    data: i,
                    logIndex: u,
                    blockHash: a
                },
                e.receipt = {
                    to: p.allowNull(this.address, null),
                    from: p.allowNull(this.address, null),
                    contractAddress: p.allowNull(t, null),
                    transactionIndex: u,
                    root: p.allowNull(o),
                    gasUsed: n,
                    logsBloom: p.allowNull(i),
                    blockHash: a,
                    transactionHash: a,
                    logs: p.arrayOf(this.receiptLog.bind(this)),
                    blockNumber: u,
                    confirmations: p.allowNull(u, null),
                    cumulativeGasUsed: n,
                    effectiveGasPrice: p.allowNull(n),
                    status: p.allowNull(u),
                    type: l
                },
                e.block = {
                    hash: p.allowNull(a),
                    parentHash: a,
                    number: u,
                    timestamp: u,
                    nonce: p.allowNull(o),
                    difficulty: this.difficulty.bind(this),
                    gasLimit: n,
                    gasUsed: n,
                    miner: p.allowNull(t),
                    extraData: i,
                    transactions: p.allowNull(p.arrayOf(a)),
                    baseFeePerGas: p.allowNull(n)
                },
                e.blockWithTransactions = (0,
                s.shallowCopy)(e.block),
                e.blockWithTransactions.transactions = p.allowNull(p.arrayOf(this.transactionResponse.bind(this))),
                e.filter = {
                    fromBlock: p.allowNull(r, void 0),
                    toBlock: p.allowNull(r, void 0),
                    blockHash: p.allowNull(a, void 0),
                    address: p.allowNull(t, void 0),
                    topics: p.allowNull(this.topics.bind(this), void 0)
                },
                e.filterLog = {
                    blockNumber: p.allowNull(u),
                    blockHash: p.allowNull(a),
                    transactionIndex: u,
                    removed: p.allowNull(this.boolean.bind(this)),
                    address: t,
                    data: p.allowFalsish(i, "0x"),
                    topics: p.arrayOf(a),
                    transactionHash: a,
                    logIndex: u
                },
                e
            }
            accessList(e) {
                return (0,
                u.accessListify)(e || [])
            }
            number(e) {
                return "0x" === e ? 0 : i.O$.from(e).toNumber()
            }
            type(e) {
                return "0x" === e || null == e ? 0 : i.O$.from(e).toNumber()
            }
            bigNumber(e) {
                return i.O$.from(e)
            }
            boolean(e) {
                if ("boolean" == typeof e)
                    return e;
                if ("string" == typeof e) {
                    if ("true" === (e = e.toLowerCase()))
                        return !0;
                    if ("false" === e)
                        return !1
                }
                throw Error("invalid boolean - " + e)
            }
            hex(e, t) {
                return "string" == typeof e && (t || "0x" === e.substring(0, 2) || (e = "0x" + e),
                (0,
                a.isHexString)(e)) ? e.toLowerCase() : d.throwArgumentError("invalid hash", "value", e)
            }
            data(e, t) {
                let n = this.hex(e, t);
                if (n.length % 2 != 0)
                    throw Error("invalid data; odd-length - " + e);
                return n
            }
            address(e) {
                return (0,
                r.getAddress)(e)
            }
            callAddress(e) {
                if (!(0,
                a.isHexString)(e, 32))
                    return null;
                let t = (0,
                r.getAddress)((0,
                a.hexDataSlice)(e, 12));
                return t === o.d ? null : t
            }
            contractAddress(e) {
                return (0,
                r.getContractAddress)(e)
            }
            blockTag(e) {
                if (null == e)
                    return "latest";
                if ("earliest" === e)
                    return "0x0";
                switch (e) {
                case "earliest":
                    return "0x0";
                case "latest":
                case "pending":
                case "safe":
                case "finalized":
                    return e
                }
                if ("number" == typeof e || (0,
                a.isHexString)(e))
                    return (0,
                    a.hexValue)(e);
                throw Error("invalid blockTag")
            }
            hash(e, t) {
                let n = this.hex(e, t);
                return 32 !== (0,
                a.hexDataLength)(n) ? d.throwArgumentError("invalid hash", "value", e) : n
            }
            difficulty(e) {
                if (null == e)
                    return null;
                let t = i.O$.from(e);
                try {
                    return t.toNumber()
                } catch (e) {}
                return null
            }
            uint256(e) {
                if (!(0,
                a.isHexString)(e))
                    throw Error("invalid uint256");
                return (0,
                a.hexZeroPad)(e, 32)
            }
            _block(e, t) {
                null != e.author && null == e.miner && (e.miner = e.author);
                let n = null != e._difficulty ? e._difficulty : e.difficulty
                  , r = p.check(t, e);
                return r._difficulty = null == n ? null : i.O$.from(n),
                r
            }
            block(e) {
                return this._block(e, this.formats.block)
            }
            blockWithTransactions(e) {
                return this._block(e, this.formats.blockWithTransactions)
            }
            transactionRequest(e) {
                return p.check(this.formats.transactionRequest, e)
            }
            transactionResponse(e) {
                null != e.gas && null == e.gasLimit && (e.gasLimit = e.gas),
                e.to && i.O$.from(e.to).isZero() && (e.to = "0x0000000000000000000000000000000000000000"),
                null != e.input && null == e.data && (e.data = e.input),
                null == e.to && null == e.creates && (e.creates = this.contractAddress(e)),
                (1 === e.type || 2 === e.type) && null == e.accessList && (e.accessList = []);
                let t = p.check(this.formats.transaction, e);
                if (null != e.chainId) {
                    let n = e.chainId;
                    (0,
                    a.isHexString)(n) && (n = i.O$.from(n).toNumber()),
                    t.chainId = n
                } else {
                    let n = e.networkId;
                    null == n && null == t.v && (n = e.chainId),
                    (0,
                    a.isHexString)(n) && (n = i.O$.from(n).toNumber()),
                    "number" != typeof n && null != t.v && ((n = (t.v - 35) / 2) < 0 && (n = 0),
                    n = parseInt(n)),
                    "number" != typeof n && (n = 0),
                    t.chainId = n
                }
                return t.blockHash && "x" === t.blockHash.replace(/0/g, "") && (t.blockHash = null),
                t
            }
            transaction(e) {
                return (0,
                u.parse)(e)
            }
            receiptLog(e) {
                return p.check(this.formats.receiptLog, e)
            }
            receipt(e) {
                let t = p.check(this.formats.receipt, e);
                if (null != t.root) {
                    if (t.root.length <= 4) {
                        let e = i.O$.from(t.root).toNumber();
                        0 === e || 1 === e ? (null != t.status && t.status !== e && d.throwArgumentError("alt-root-status/status mismatch", "value", {
                            root: t.root,
                            status: t.status
                        }),
                        t.status = e,
                        delete t.root) : d.throwArgumentError("invalid alt-root-status", "value.root", t.root)
                    } else
                        66 !== t.root.length && d.throwArgumentError("invalid root hash", "value.root", t.root)
                }
                return null != t.status && (t.byzantium = !0),
                t
            }
            topics(e) {
                return Array.isArray(e) ? e.map(e=>this.topics(e)) : null != e ? this.hash(e, !0) : null
            }
            filter(e) {
                return p.check(this.formats.filter, e)
            }
            filterLog(e) {
                return p.check(this.formats.filterLog, e)
            }
            static check(e, t) {
                let n = {};
                for (let r in e)
                    try {
                        let i = e[r](t[r]);
                        void 0 !== i && (n[r] = i)
                    } catch (e) {
                        throw e.checkKey = r,
                        e.checkValue = t[r],
                        e
                    }
                return n
            }
            static allowNull(e, t) {
                return function(n) {
                    return null == n ? t : e(n)
                }
            }
            static allowFalsish(e, t) {
                return function(n) {
                    return n ? e(n) : t
                }
            }
            static arrayOf(e) {
                return function(t) {
                    if (!Array.isArray(t))
                        throw Error("not an array");
                    let n = [];
                    return t.forEach(function(t) {
                        n.push(e(t))
                    }),
                    n
                }
            }
        }
        function f(e) {
            return e && "function" == typeof e.isCommunityResource
        }
        function h(e) {
            return f(e) && e.isCommunityResource()
        }
        let m = !1;
        function y() {
            m || (m = !0,
            console.log("========= NOTICE ========="),
            console.log("Request-Rate Exceeded  (this message will not be repeated)"),
            console.log(""),
            console.log("The default API keys for each service are provided as a highly-throttled,"),
            console.log("community resource for low-traffic projects and early prototyping."),
            console.log(""),
            console.log("While your application will continue to function, we highly recommended"),
            console.log("signing up for your own API keys to improve performance, increase your"),
            console.log("request rate/limit and enable other perks, such as metrics and advanced APIs."),
            console.log(""),
            console.log("For more details: https://docs.ethers.io/api-keys/"),
            console.log("=========================="))
        }
    },
    65146: function(e, t, n) {
        "use strict";
        n.r(t),
        n.d(t, {
            AlchemyProvider: function() {
                return m
            },
            AlchemyWebSocketProvider: function() {
                return h
            },
            AnkrProvider: function() {
                return b
            },
            BaseProvider: function() {
                return a.Zk
            },
            CloudflareProvider: function() {
                return w
            },
            EtherscanProvider: function() {
                return B
            },
            FallbackProvider: function() {
                return O.H
            },
            Formatter: function() {
                return s.Mb
            },
            InfuraProvider: function() {
                return M
            },
            InfuraWebSocketProvider: function() {
                return D
            },
            IpcProvider: function() {
                return N
            },
            JsonRpcBatchProvider: function() {
                return U
            },
            JsonRpcProvider: function() {
                return L.r
            },
            JsonRpcSigner: function() {
                return L.C
            },
            NodesmithProvider: function() {
                return j
            },
            PocketProvider: function() {
                return H
            },
            Provider: function() {
                return r.Provider
            },
            Resolver: function() {
                return a.H2
            },
            StaticJsonRpcProvider: function() {
                return d.c
            },
            UrlJsonRpcProvider: function() {
                return d.l
            },
            Web3Provider: function() {
                return G.Q
            },
            WebSocketProvider: function() {
                return u.q
            },
            getDefaultProvider: function() {
                return V
            },
            getNetwork: function() {
                return i.H
            },
            isCommunityResourcable: function() {
                return s.Ed
            },
            isCommunityResource: function() {
                return s.Gp
            },
            showThrottleMessage: function() {
                return s.vh
            }
        });
        var r = n(480)
          , i = n(86090)
          , a = n(52071)
          , o = n(28609)
          , s = n(20949)
          , u = n(79663)
          , l = n(61941)
          , c = n(8280)
          , d = n(32006);
        let p = new l.Logger(c.i)
          , f = "_gg7wSSi0KMBsdKnGVfHDueq6xMB9EkC";
        class h extends u.q {
            constructor(e, t) {
                let n = new m(e,t)
                  , r = n.connection.url.replace(/^http/i, "ws").replace(".alchemyapi.", ".ws.alchemyapi.");
                super(r, n.network),
                (0,
                o.defineReadOnly)(this, "apiKey", n.apiKey)
            }
            isCommunityResource() {
                return this.apiKey === f
            }
        }
        class m extends d.l {
            static getWebSocketProvider(e, t) {
                return new h(e,t)
            }
            static getApiKey(e) {
                return null == e ? f : (e && "string" != typeof e && p.throwArgumentError("invalid apiKey", "apiKey", e),
                e)
            }
            static getUrl(e, t) {
                let n = null;
                switch (e.name) {
                case "homestead":
                    n = "eth-mainnet.alchemyapi.io/v2/";
                    break;
                case "goerli":
                    n = "eth-goerli.g.alchemy.com/v2/";
                    break;
                case "matic":
                    n = "polygon-mainnet.g.alchemy.com/v2/";
                    break;
                case "maticmum":
                    n = "polygon-mumbai.g.alchemy.com/v2/";
                    break;
                case "arbitrum":
                    n = "arb-mainnet.g.alchemy.com/v2/";
                    break;
                case "arbitrum-goerli":
                    n = "arb-goerli.g.alchemy.com/v2/";
                    break;
                case "optimism":
                    n = "opt-mainnet.g.alchemy.com/v2/";
                    break;
                case "optimism-goerli":
                    n = "opt-goerli.g.alchemy.com/v2/";
                    break;
                default:
                    p.throwArgumentError("unsupported network", "network", arguments[0])
                }
                return {
                    allowGzip: !0,
                    url: "https://" + n + t,
                    throttleCallback: (e,n)=>(t === f && (0,
                    s.vh)(),
                    Promise.resolve(!0))
                }
            }
            isCommunityResource() {
                return this.apiKey === f
            }
        }
        let y = new l.Logger(c.i)
          , g = "9f7d929b018cdffb338517efa06f58359e86ff1ffd350bc889738523659e7972";
        class b extends d.l {
            isCommunityResource() {
                return this.apiKey === g
            }
            static getApiKey(e) {
                return null == e ? g : e
            }
            static getUrl(e, t) {
                null == t && (t = g);
                let n = {
                    allowGzip: !0,
                    url: "https://" + function(e) {
                        switch (e) {
                        case "homestead":
                            return "rpc.ankr.com/eth/";
                        case "ropsten":
                            return "rpc.ankr.com/eth_ropsten/";
                        case "rinkeby":
                            return "rpc.ankr.com/eth_rinkeby/";
                        case "goerli":
                            return "rpc.ankr.com/eth_goerli/";
                        case "matic":
                            return "rpc.ankr.com/polygon/";
                        case "arbitrum":
                            return "rpc.ankr.com/arbitrum/"
                        }
                        return y.throwArgumentError("unsupported network", "name", e)
                    }(e.name) + t,
                    throttleCallback: (e,n)=>(t.apiKey === g && (0,
                    s.vh)(),
                    Promise.resolve(!0))
                };
                return null != t.projectSecret && (n.user = "",
                n.password = t.projectSecret),
                n
            }
        }
        let v = new l.Logger(c.i);
        class w extends d.l {
            static getApiKey(e) {
                return null != e && v.throwArgumentError("apiKey not supported for cloudflare", "apiKey", e),
                null
            }
            static getUrl(e, t) {
                let n = null;
                return "homestead" === e.name ? n = "https://cloudflare-eth.com/" : v.throwArgumentError("unsupported network", "network", arguments[0]),
                n
            }
            perform(e, t) {
                var n, r, i, a;
                let o = Object.create(null, {
                    perform: {
                        get: ()=>super.perform
                    }
                });
                return n = this,
                r = void 0,
                i = void 0,
                a = function*() {
                    if ("getBlockNumber" === e) {
                        let e = yield o.perform.call(this, "getBlock", {
                            blockTag: "latest"
                        });
                        return e.number
                    }
                    return o.perform.call(this, e, t)
                }
                ,
                new (i || (i = Promise))(function(e, t) {
                    function o(e) {
                        try {
                            u(a.next(e))
                        } catch (e) {
                            t(e)
                        }
                    }
                    function s(e) {
                        try {
                            u(a.throw(e))
                        } catch (e) {
                            t(e)
                        }
                    }
                    function u(t) {
                        var n;
                        t.done ? e(t.value) : ((n = t.value)instanceof i ? n : new i(function(e) {
                            e(n)
                        }
                        )).then(o, s)
                    }
                    u((a = a.apply(n, r || [])).next())
                }
                )
            }
        }
        var T = n(70367)
          , E = n(38593)
          , A = n(187)
          , x = function(e, t, n, r) {
            return new (n || (n = Promise))(function(i, a) {
                function o(e) {
                    try {
                        u(r.next(e))
                    } catch (e) {
                        a(e)
                    }
                }
                function s(e) {
                    try {
                        u(r.throw(e))
                    } catch (e) {
                        a(e)
                    }
                }
                function u(e) {
                    var t;
                    e.done ? i(e.value) : ((t = e.value)instanceof n ? t : new n(function(e) {
                        e(t)
                    }
                    )).then(o, s)
                }
                u((r = r.apply(e, t || [])).next())
            }
            )
        };
        let k = new l.Logger(c.i);
        function C(e) {
            let t = {};
            for (let n in e) {
                if (null == e[n])
                    continue;
                let r = e[n];
                ("type" !== n || 0 !== r) && (r = ({
                    type: !0,
                    gasLimit: !0,
                    gasPrice: !0,
                    maxFeePerGs: !0,
                    maxPriorityFeePerGas: !0,
                    nonce: !0,
                    value: !0
                })[n] ? (0,
                T.hexValue)((0,
                T.hexlify)(r)) : "accessList" === n ? "[" + (0,
                E.accessListify)(r).map(e=>`{address:"${e.address}",storageKeys:["${e.storageKeys.join('","')}"]}`).join(",") + "]" : (0,
                T.hexlify)(r),
                t[n] = r)
            }
            return t
        }
        function _(e) {
            if (0 == e.status && ("No records found" === e.message || "No transactions found" === e.message))
                return e.result;
            if (1 != e.status || "string" != typeof e.message || !e.message.match(/^OK/)) {
                let t = Error("invalid response");
                throw t.result = JSON.stringify(e),
                (e.result || "").toLowerCase().indexOf("rate limit") >= 0 && (t.throttleRetry = !0),
                t
            }
            return e.result
        }
        function S(e) {
            if (e && 0 == e.status && "NOTOK" == e.message && (e.result || "").toLowerCase().indexOf("rate limit") >= 0) {
                let t = Error("throttled response");
                throw t.result = JSON.stringify(e),
                t.throttleRetry = !0,
                t
            }
            if ("2.0" != e.jsonrpc) {
                let t = Error("invalid response");
                throw t.result = JSON.stringify(e),
                t
            }
            if (e.error) {
                let t = Error(e.error.message || "unknown error");
                throw e.error.code && (t.code = e.error.code),
                e.error.data && (t.data = e.error.data),
                t
            }
            return e.result
        }
        function I(e) {
            if ("pending" === e)
                throw Error("pending not supported");
            return "latest" === e ? e : parseInt(e.substring(2), 16)
        }
        function P(e, t, n) {
            if ("call" === e && t.code === l.Logger.errors.SERVER_ERROR) {
                let e = t.error;
                if (e && (e.message.match(/reverted/i) || e.message.match(/VM execution error/i))) {
                    let n = e.data;
                    if (n && (n = "0x" + n.replace(/^.*0x/i, "")),
                    (0,
                    T.isHexString)(n))
                        return n;
                    k.throwError("missing revert data in call exception", l.Logger.errors.CALL_EXCEPTION, {
                        error: t,
                        data: "0x"
                    })
                }
            }
            let r = t.message;
            throw t.code === l.Logger.errors.SERVER_ERROR && (t.error && "string" == typeof t.error.message ? r = t.error.message : "string" == typeof t.body ? r = t.body : "string" == typeof t.responseText && (r = t.responseText)),
            (r = (r || "").toLowerCase()).match(/insufficient funds/) && k.throwError("insufficient funds for intrinsic transaction cost", l.Logger.errors.INSUFFICIENT_FUNDS, {
                error: t,
                method: e,
                transaction: n
            }),
            r.match(/same hash was already imported|transaction nonce is too low|nonce too low/) && k.throwError("nonce has already been used", l.Logger.errors.NONCE_EXPIRED, {
                error: t,
                method: e,
                transaction: n
            }),
            r.match(/another transaction with same nonce/) && k.throwError("replacement fee too low", l.Logger.errors.REPLACEMENT_UNDERPRICED, {
                error: t,
                method: e,
                transaction: n
            }),
            r.match(/execution failed due to an exception|execution reverted/) && k.throwError("cannot estimate gas; transaction may fail or may require manual gas limit", l.Logger.errors.UNPREDICTABLE_GAS_LIMIT, {
                error: t,
                method: e,
                transaction: n
            }),
            t
        }
        class B extends a.Zk {
            constructor(e, t) {
                super(e),
                (0,
                o.defineReadOnly)(this, "baseUrl", this.getBaseUrl()),
                (0,
                o.defineReadOnly)(this, "apiKey", t || null)
            }
            getBaseUrl() {
                switch (this.network ? this.network.name : "invalid") {
                case "homestead":
                    return "https://api.etherscan.io";
                case "goerli":
                    return "https://api-goerli.etherscan.io";
                case "sepolia":
                    return "https://api-sepolia.etherscan.io";
                case "matic":
                    return "https://api.polygonscan.com";
                case "maticmum":
                    return "https://api-testnet.polygonscan.com";
                case "arbitrum":
                    return "https://api.arbiscan.io";
                case "arbitrum-goerli":
                    return "https://api-goerli.arbiscan.io";
                case "optimism":
                    return "https://api-optimistic.etherscan.io";
                case "optimism-goerli":
                    return "https://api-goerli-optimistic.etherscan.io"
                }
                return k.throwArgumentError("unsupported network", "network", this.network.name)
            }
            getUrl(e, t) {
                let n = Object.keys(t).reduce((e,n)=>{
                    let r = t[n];
                    return null != r && (e += `&${n}=${r}`),
                    e
                }
                , "")
                  , r = this.apiKey ? `&apikey=${this.apiKey}` : "";
                return `${this.baseUrl}/api?module=${e}${n}${r}`
            }
            getPostUrl() {
                return `${this.baseUrl}/api`
            }
            getPostData(e, t) {
                return t.module = e,
                t.apikey = this.apiKey,
                t
            }
            fetch(e, t, n) {
                return x(this, void 0, void 0, function*() {
                    let r = n ? this.getPostUrl() : this.getUrl(e, t)
                      , i = n ? this.getPostData(e, t) : null;
                    this.emit("debug", {
                        action: "request",
                        request: r,
                        provider: this
                    });
                    let a = {
                        url: r,
                        throttleSlotInterval: 1e3,
                        throttleCallback: (e,t)=>(this.isCommunityResource() && (0,
                        s.vh)(),
                        Promise.resolve(!0))
                    }
                      , u = null;
                    i && (a.headers = {
                        "content-type": "application/x-www-form-urlencoded; charset=UTF-8"
                    },
                    u = Object.keys(i).map(e=>`${e}=${i[e]}`).join("&"));
                    let l = yield(0,
                    A.fetchJson)(a, u, ("proxy" === e ? S : _) || S);
                    return this.emit("debug", {
                        action: "response",
                        request: r,
                        response: (0,
                        o.deepCopy)(l),
                        provider: this
                    }),
                    l
                })
            }
            detectNetwork() {
                return x(this, void 0, void 0, function*() {
                    return this.network
                })
            }
            perform(e, t) {
                let n = Object.create(null, {
                    perform: {
                        get: ()=>super.perform
                    }
                });
                return x(this, void 0, void 0, function*() {
                    switch (e) {
                    case "getBlockNumber":
                        return this.fetch("proxy", {
                            action: "eth_blockNumber"
                        });
                    case "getGasPrice":
                        return this.fetch("proxy", {
                            action: "eth_gasPrice"
                        });
                    case "getBalance":
                        return this.fetch("account", {
                            action: "balance",
                            address: t.address,
                            tag: t.blockTag
                        });
                    case "getTransactionCount":
                        return this.fetch("proxy", {
                            action: "eth_getTransactionCount",
                            address: t.address,
                            tag: t.blockTag
                        });
                    case "getCode":
                        return this.fetch("proxy", {
                            action: "eth_getCode",
                            address: t.address,
                            tag: t.blockTag
                        });
                    case "getStorageAt":
                        return this.fetch("proxy", {
                            action: "eth_getStorageAt",
                            address: t.address,
                            position: t.position,
                            tag: t.blockTag
                        });
                    case "sendTransaction":
                        return this.fetch("proxy", {
                            action: "eth_sendRawTransaction",
                            hex: t.signedTransaction
                        }, !0).catch(e=>P("sendTransaction", e, t.signedTransaction));
                    case "getBlock":
                        if (t.blockTag)
                            return this.fetch("proxy", {
                                action: "eth_getBlockByNumber",
                                tag: t.blockTag,
                                boolean: t.includeTransactions ? "true" : "false"
                            });
                        throw Error("getBlock by blockHash not implemented");
                    case "getTransaction":
                        return this.fetch("proxy", {
                            action: "eth_getTransactionByHash",
                            txhash: t.transactionHash
                        });
                    case "getTransactionReceipt":
                        return this.fetch("proxy", {
                            action: "eth_getTransactionReceipt",
                            txhash: t.transactionHash
                        });
                    case "call":
                        {
                            if ("latest" !== t.blockTag)
                                throw Error("EtherscanProvider does not support blockTag for call");
                            let e = C(t.transaction);
                            e.module = "proxy",
                            e.action = "eth_call";
                            try {
                                return yield this.fetch("proxy", e, !0)
                            } catch (e) {
                                return P("call", e, t.transaction)
                            }
                        }
                    case "estimateGas":
                        {
                            let e = C(t.transaction);
                            e.module = "proxy",
                            e.action = "eth_estimateGas";
                            try {
                                return yield this.fetch("proxy", e, !0)
                            } catch (e) {
                                return P("estimateGas", e, t.transaction)
                            }
                        }
                    case "getLogs":
                        {
                            let e = {
                                action: "getLogs"
                            };
                            if (t.filter.fromBlock && (e.fromBlock = I(t.filter.fromBlock)),
                            t.filter.toBlock && (e.toBlock = I(t.filter.toBlock)),
                            t.filter.address && (e.address = t.filter.address),
                            t.filter.topics && t.filter.topics.length > 0 && (t.filter.topics.length > 1 && k.throwError("unsupported topic count", l.Logger.errors.UNSUPPORTED_OPERATION, {
                                topics: t.filter.topics
                            }),
                            1 === t.filter.topics.length)) {
                                let n = t.filter.topics[0];
                                ("string" != typeof n || 66 !== n.length) && k.throwError("unsupported topic format", l.Logger.errors.UNSUPPORTED_OPERATION, {
                                    topic0: n
                                }),
                                e.topic0 = n
                            }
                            let n = yield this.fetch("logs", e)
                              , r = {};
                            for (let e = 0; e < n.length; e++) {
                                let t = n[e];
                                if (null == t.blockHash) {
                                    if (null == r[t.blockNumber]) {
                                        let e = yield this.getBlock(t.blockNumber);
                                        e && (r[t.blockNumber] = e.hash)
                                    }
                                    t.blockHash = r[t.blockNumber]
                                }
                            }
                            return n
                        }
                    case "getEtherPrice":
                        if ("homestead" !== this.network.name)
                            return 0;
                        return parseFloat((yield this.fetch("stats", {
                            action: "ethprice"
                        })).ethusd)
                    }
                    return n.perform.call(this, e, t)
                })
            }
            getHistory(e, t, n) {
                return x(this, void 0, void 0, function*() {
                    let r = {
                        action: "txlist",
                        address: yield this.resolveName(e),
                        startblock: null == t ? 0 : t,
                        endblock: null == n ? 99999999 : n,
                        sort: "asc"
                    }
                      , i = yield this.fetch("account", r);
                    return i.map(e=>{
                        ["contractAddress", "to"].forEach(function(t) {
                            "" == e[t] && delete e[t]
                        }),
                        null == e.creates && null != e.contractAddress && (e.creates = e.contractAddress);
                        let t = this.formatter.transactionResponse(e);
                        return e.timeStamp && (t.timestamp = parseInt(e.timeStamp)),
                        t
                    }
                    )
                })
            }
            isCommunityResource() {
                return null == this.apiKey
            }
        }
        var O = n(84267);
        let N = null
          , R = new l.Logger(c.i)
          , F = "84842078b09946638c03157f83405213";
        class D extends u.q {
            constructor(e, t) {
                let n = new M(e,t)
                  , r = n.connection;
                r.password && R.throwError("INFURA WebSocket project secrets unsupported", l.Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "InfuraProvider.getWebSocketProvider()"
                });
                let i = r.url.replace(/^http/i, "ws").replace("/v3/", "/ws/v3/");
                super(i, e),
                (0,
                o.defineReadOnly)(this, "apiKey", n.projectId),
                (0,
                o.defineReadOnly)(this, "projectId", n.projectId),
                (0,
                o.defineReadOnly)(this, "projectSecret", n.projectSecret)
            }
            isCommunityResource() {
                return this.projectId === F
            }
        }
        class M extends d.l {
            static getWebSocketProvider(e, t) {
                return new D(e,t)
            }
            static getApiKey(e) {
                let t = {
                    apiKey: F,
                    projectId: F,
                    projectSecret: null
                };
                return null == e || ("string" == typeof e ? t.projectId = e : null != e.projectSecret ? (R.assertArgument("string" == typeof e.projectId, "projectSecret requires a projectId", "projectId", e.projectId),
                R.assertArgument("string" == typeof e.projectSecret, "invalid projectSecret", "projectSecret", "[REDACTED]"),
                t.projectId = e.projectId,
                t.projectSecret = e.projectSecret) : e.projectId && (t.projectId = e.projectId),
                t.apiKey = t.projectId),
                t
            }
            static getUrl(e, t) {
                let n = null;
                switch (e ? e.name : "unknown") {
                case "homestead":
                    n = "mainnet.infura.io";
                    break;
                case "goerli":
                    n = "goerli.infura.io";
                    break;
                case "sepolia":
                    n = "sepolia.infura.io";
                    break;
                case "matic":
                    n = "polygon-mainnet.infura.io";
                    break;
                case "maticmum":
                    n = "polygon-mumbai.infura.io";
                    break;
                case "optimism":
                    n = "optimism-mainnet.infura.io";
                    break;
                case "optimism-goerli":
                    n = "optimism-goerli.infura.io";
                    break;
                case "arbitrum":
                    n = "arbitrum-mainnet.infura.io";
                    break;
                case "arbitrum-goerli":
                    n = "arbitrum-goerli.infura.io";
                    break;
                default:
                    R.throwError("unsupported network", l.Logger.errors.INVALID_ARGUMENT, {
                        argument: "network",
                        value: e
                    })
                }
                let r = {
                    allowGzip: !0,
                    url: "https://" + n + "/v3/" + t.projectId,
                    throttleCallback: (e,n)=>(t.projectId === F && (0,
                    s.vh)(),
                    Promise.resolve(!0))
                };
                return null != t.projectSecret && (r.user = "",
                r.password = t.projectSecret),
                r
            }
            isCommunityResource() {
                return this.projectId === F
            }
        }
        var L = n(30554);
        class U extends L.r {
            send(e, t) {
                let n = {
                    method: e,
                    params: t,
                    id: this._nextId++,
                    jsonrpc: "2.0"
                };
                null == this._pendingBatch && (this._pendingBatch = []);
                let r = {
                    request: n,
                    resolve: null,
                    reject: null
                }
                  , i = new Promise((e,t)=>{
                    r.resolve = e,
                    r.reject = t
                }
                );
                return this._pendingBatch.push(r),
                this._pendingBatchAggregator || (this._pendingBatchAggregator = setTimeout(()=>{
                    let e = this._pendingBatch;
                    this._pendingBatch = null,
                    this._pendingBatchAggregator = null;
                    let t = e.map(e=>e.request);
                    return this.emit("debug", {
                        action: "requestBatch",
                        request: (0,
                        o.deepCopy)(t),
                        provider: this
                    }),
                    (0,
                    A.fetchJson)(this.connection, JSON.stringify(t)).then(n=>{
                        this.emit("debug", {
                            action: "response",
                            request: t,
                            response: n,
                            provider: this
                        }),
                        e.forEach((e,t)=>{
                            let r = n[t];
                            if (r.error) {
                                let t = Error(r.error.message);
                                t.code = r.error.code,
                                t.data = r.error.data,
                                e.reject(t)
                            } else
                                e.resolve(r.result)
                        }
                        )
                    }
                    , n=>{
                        this.emit("debug", {
                            action: "response",
                            error: n,
                            request: t,
                            provider: this
                        }),
                        e.forEach(e=>{
                            e.reject(n)
                        }
                        )
                    }
                    )
                }
                , 10)),
                i
            }
        }
        let q = new l.Logger(c.i);
        class j extends d.l {
            static getApiKey(e) {
                return e && "string" != typeof e && q.throwArgumentError("invalid apiKey", "apiKey", e),
                e || "ETHERS_JS_SHARED"
            }
            static getUrl(e, t) {
                q.warn("NodeSmith will be discontinued on 2019-12-20; please migrate to another platform.");
                let n = null;
                switch (e.name) {
                case "homestead":
                    n = "https://ethereum.api.nodesmith.io/v1/mainnet/jsonrpc";
                    break;
                case "ropsten":
                    n = "https://ethereum.api.nodesmith.io/v1/ropsten/jsonrpc";
                    break;
                case "rinkeby":
                    n = "https://ethereum.api.nodesmith.io/v1/rinkeby/jsonrpc";
                    break;
                case "goerli":
                    n = "https://ethereum.api.nodesmith.io/v1/goerli/jsonrpc";
                    break;
                case "kovan":
                    n = "https://ethereum.api.nodesmith.io/v1/kovan/jsonrpc";
                    break;
                default:
                    q.throwArgumentError("unsupported network", "network", arguments[0])
                }
                return n + "?apiKey=" + t
            }
        }
        let $ = new l.Logger(c.i)
          , Z = "62e1ad51b37b8e00394bda3b";
        class H extends d.l {
            static getApiKey(e) {
                let t = {
                    applicationId: null,
                    loadBalancer: !0,
                    applicationSecretKey: null
                };
                return null == e ? t.applicationId = Z : "string" == typeof e ? t.applicationId = e : null != e.applicationSecretKey ? (t.applicationId = e.applicationId,
                t.applicationSecretKey = e.applicationSecretKey) : e.applicationId ? t.applicationId = e.applicationId : $.throwArgumentError("unsupported PocketProvider apiKey", "apiKey", e),
                t
            }
            static getUrl(e, t) {
                let n = null;
                switch (e ? e.name : "unknown") {
                case "goerli":
                    n = "eth-goerli.gateway.pokt.network";
                    break;
                case "homestead":
                    n = "eth-mainnet.gateway.pokt.network";
                    break;
                case "kovan":
                    n = "poa-kovan.gateway.pokt.network";
                    break;
                case "matic":
                    n = "poly-mainnet.gateway.pokt.network";
                    break;
                case "maticmum":
                    n = "polygon-mumbai-rpc.gateway.pokt.network";
                    break;
                case "rinkeby":
                    n = "eth-rinkeby.gateway.pokt.network";
                    break;
                case "ropsten":
                    n = "eth-ropsten.gateway.pokt.network";
                    break;
                default:
                    $.throwError("unsupported network", l.Logger.errors.INVALID_ARGUMENT, {
                        argument: "network",
                        value: e
                    })
                }
                let r = `https://${n}/v1/lb/${t.applicationId}`
                  , i = {
                    headers: {},
                    url: r
                };
                return null != t.applicationSecretKey && (i.user = "",
                i.password = t.applicationSecretKey),
                i
            }
            isCommunityResource() {
                return this.applicationId === Z
            }
        }
        var G = n(44369);
        let z = new l.Logger(c.i);
        function V(e, t) {
            if (null == e && (e = "homestead"),
            "string" == typeof e) {
                let t = e.match(/^(ws|http)s?:/i);
                if (t)
                    switch (t[1].toLowerCase()) {
                    case "http":
                    case "https":
                        return new L.r(e);
                    case "ws":
                    case "wss":
                        return new u.q(e);
                    default:
                        z.throwArgumentError("unsupported URL scheme", "network", e)
                    }
            }
            let n = (0,
            i.H)(e);
            return n && n._defaultProvider || z.throwError("unsupported getDefaultProvider network", l.Logger.errors.NETWORK_ERROR, {
                operation: "getDefaultProvider",
                network: e
            }),
            n._defaultProvider({
                FallbackProvider: O.H,
                AlchemyProvider: m,
                AnkrProvider: b,
                CloudflareProvider: w,
                EtherscanProvider: B,
                InfuraProvider: M,
                JsonRpcProvider: L.r,
                NodesmithProvider: j,
                PocketProvider: H,
                Web3Provider: G.Q,
                IpcProvider: N
            }, t)
        }
    },
    30554: function(e, t, n) {
        "use strict";
        n.d(t, {
            C: function() {
                return A
            },
            r: function() {
                return C
            }
        });
        var r = n(62563)
          , i = n(13004)
          , a = n(70367)
          , o = n(19794)
          , s = n(28609)
          , u = n(4082)
          , l = n(38593)
          , c = n(187)
          , d = n(61941)
          , p = n(8280)
          , f = n(52071)
          , h = function(e, t, n, r) {
            return new (n || (n = Promise))(function(i, a) {
                function o(e) {
                    try {
                        u(r.next(e))
                    } catch (e) {
                        a(e)
                    }
                }
                function s(e) {
                    try {
                        u(r.throw(e))
                    } catch (e) {
                        a(e)
                    }
                }
                function u(e) {
                    var t;
                    e.done ? i(e.value) : ((t = e.value)instanceof n ? t : new n(function(e) {
                        e(t)
                    }
                    )).then(o, s)
                }
                u((r = r.apply(e, t || [])).next())
            }
            )
        };
        let m = new d.Logger(p.i)
          , y = ["call", "estimateGas"];
        function g(e, t) {
            if (null == e)
                return null;
            if ("string" == typeof e.message && e.message.match("reverted")) {
                let n = (0,
                a.isHexString)(e.data) ? e.data : null;
                if (!t || n)
                    return {
                        message: e.message,
                        data: n
                    }
            }
            if ("object" == typeof e) {
                for (let n in e) {
                    let r = g(e[n], t);
                    if (r)
                        return r
                }
                return null
            }
            if ("string" == typeof e)
                try {
                    return g(JSON.parse(e), t)
                } catch (e) {}
            return null
        }
        function b(e, t, n) {
            let r = n.transaction || n.signedTransaction;
            if ("call" === e) {
                let e = g(t, !0);
                if (e)
                    return e.data;
                m.throwError("missing revert data in call exception; Transaction reverted without a reason string", d.Logger.errors.CALL_EXCEPTION, {
                    data: "0x",
                    transaction: r,
                    error: t
                })
            }
            if ("estimateGas" === e) {
                let n = g(t.body, !1);
                null == n && (n = g(t, !1)),
                n && m.throwError("cannot estimate gas; transaction may fail or may require manual gas limit", d.Logger.errors.UNPREDICTABLE_GAS_LIMIT, {
                    reason: n.message,
                    method: e,
                    transaction: r,
                    error: t
                })
            }
            let i = t.message;
            throw t.code === d.Logger.errors.SERVER_ERROR && t.error && "string" == typeof t.error.message ? i = t.error.message : "string" == typeof t.body ? i = t.body : "string" == typeof t.responseText && (i = t.responseText),
            (i = (i || "").toLowerCase()).match(/insufficient funds|base fee exceeds gas limit|InsufficientFunds/i) && m.throwError("insufficient funds for intrinsic transaction cost", d.Logger.errors.INSUFFICIENT_FUNDS, {
                error: t,
                method: e,
                transaction: r
            }),
            i.match(/nonce (is )?too low/i) && m.throwError("nonce has already been used", d.Logger.errors.NONCE_EXPIRED, {
                error: t,
                method: e,
                transaction: r
            }),
            i.match(/replacement transaction underpriced|transaction gas price.*too low/i) && m.throwError("replacement fee too low", d.Logger.errors.REPLACEMENT_UNDERPRICED, {
                error: t,
                method: e,
                transaction: r
            }),
            i.match(/only replay-protected/i) && m.throwError("legacy pre-eip-155 transactions not supported", d.Logger.errors.UNSUPPORTED_OPERATION, {
                error: t,
                method: e,
                transaction: r
            }),
            y.indexOf(e) >= 0 && i.match(/gas required exceeds allowance|always failing transaction|execution reverted|revert/) && m.throwError("cannot estimate gas; transaction may fail or may require manual gas limit", d.Logger.errors.UNPREDICTABLE_GAS_LIMIT, {
                error: t,
                method: e,
                transaction: r
            }),
            t
        }
        function v(e) {
            return new Promise(function(t) {
                setTimeout(t, e)
            }
            )
        }
        function w(e) {
            if (e.error) {
                let t = Error(e.error.message);
                throw t.code = e.error.code,
                t.data = e.error.data,
                t
            }
            return e.result
        }
        function T(e) {
            return e ? e.toLowerCase() : e
        }
        let E = {};
        class A extends r.Signer {
            constructor(e, t, n) {
                if (super(),
                e !== E)
                    throw Error("do not call the JsonRpcSigner constructor directly; use provider.getSigner");
                (0,
                s.defineReadOnly)(this, "provider", t),
                null == n && (n = 0),
                "string" == typeof n ? ((0,
                s.defineReadOnly)(this, "_address", this.provider.formatter.address(n)),
                (0,
                s.defineReadOnly)(this, "_index", null)) : "number" == typeof n ? ((0,
                s.defineReadOnly)(this, "_index", n),
                (0,
                s.defineReadOnly)(this, "_address", null)) : m.throwArgumentError("invalid address or index", "addressOrIndex", n)
            }
            connect(e) {
                return m.throwError("cannot alter JSON-RPC Signer connection", d.Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "connect"
                })
            }
            connectUnchecked() {
                return new x(E,this.provider,this._address || this._index)
            }
            getAddress() {
                return this._address ? Promise.resolve(this._address) : this.provider.send("eth_accounts", []).then(e=>(e.length <= this._index && m.throwError("unknown account #" + this._index, d.Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "getAddress"
                }),
                this.provider.formatter.address(e[this._index])))
            }
            sendUncheckedTransaction(e) {
                e = (0,
                s.shallowCopy)(e);
                let t = this.getAddress().then(e=>(e && (e = e.toLowerCase()),
                e));
                if (null == e.gasLimit) {
                    let n = (0,
                    s.shallowCopy)(e);
                    n.from = t,
                    e.gasLimit = this.provider.estimateGas(n)
                }
                return null != e.to && (e.to = Promise.resolve(e.to).then(e=>h(this, void 0, void 0, function*() {
                    if (null == e)
                        return null;
                    let t = yield this.provider.resolveName(e);
                    return null == t && m.throwArgumentError("provided ENS name resolves to null", "tx.to", e),
                    t
                }))),
                (0,
                s.resolveProperties)({
                    tx: (0,
                    s.resolveProperties)(e),
                    sender: t
                }).then(({tx: t, sender: n})=>{
                    null != t.from ? t.from.toLowerCase() !== n && m.throwArgumentError("from address mismatch", "transaction", e) : t.from = n;
                    let r = this.provider.constructor.hexlifyTransaction(t, {
                        from: !0
                    });
                    return this.provider.send("eth_sendTransaction", [r]).then(e=>e, e=>("string" == typeof e.message && e.message.match(/user denied/i) && m.throwError("user rejected transaction", d.Logger.errors.ACTION_REJECTED, {
                        action: "sendTransaction",
                        transaction: t
                    }),
                    b("sendTransaction", e, r)))
                }
                )
            }
            signTransaction(e) {
                return m.throwError("signing transactions is unsupported", d.Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "signTransaction"
                })
            }
            sendTransaction(e) {
                return h(this, void 0, void 0, function*() {
                    let t = yield this.provider._getInternalBlockNumber(100 + 2 * this.provider.pollingInterval)
                      , n = yield this.sendUncheckedTransaction(e);
                    try {
                        return yield(0,
                        c.poll)(()=>h(this, void 0, void 0, function*() {
                            let e = yield this.provider.getTransaction(n);
                            if (null !== e)
                                return this.provider._wrapTransaction(e, n, t)
                        }), {
                            oncePoll: this.provider
                        })
                    } catch (e) {
                        throw e.transactionHash = n,
                        e
                    }
                })
            }
            signMessage(e) {
                return h(this, void 0, void 0, function*() {
                    let t = "string" == typeof e ? (0,
                    u.Y0)(e) : e
                      , n = yield this.getAddress();
                    try {
                        return yield this.provider.send("personal_sign", [(0,
                        a.hexlify)(t), n.toLowerCase()])
                    } catch (t) {
                        throw "string" == typeof t.message && t.message.match(/user denied/i) && m.throwError("user rejected signing", d.Logger.errors.ACTION_REJECTED, {
                            action: "signMessage",
                            from: n,
                            messageData: e
                        }),
                        t
                    }
                })
            }
            _legacySignMessage(e) {
                return h(this, void 0, void 0, function*() {
                    let t = "string" == typeof e ? (0,
                    u.Y0)(e) : e
                      , n = yield this.getAddress();
                    try {
                        return yield this.provider.send("eth_sign", [n.toLowerCase(), (0,
                        a.hexlify)(t)])
                    } catch (t) {
                        throw "string" == typeof t.message && t.message.match(/user denied/i) && m.throwError("user rejected signing", d.Logger.errors.ACTION_REJECTED, {
                            action: "_legacySignMessage",
                            from: n,
                            messageData: e
                        }),
                        t
                    }
                })
            }
            _signTypedData(e, t, n) {
                return h(this, void 0, void 0, function*() {
                    let r = yield o.E.resolveNames(e, t, n, e=>this.provider.resolveName(e))
                      , i = yield this.getAddress();
                    try {
                        return yield this.provider.send("eth_signTypedData_v4", [i.toLowerCase(), JSON.stringify(o.E.getPayload(r.domain, t, r.value))])
                    } catch (e) {
                        throw "string" == typeof e.message && e.message.match(/user denied/i) && m.throwError("user rejected signing", d.Logger.errors.ACTION_REJECTED, {
                            action: "_signTypedData",
                            from: i,
                            messageData: {
                                domain: r.domain,
                                types: t,
                                value: r.value
                            }
                        }),
                        e
                    }
                })
            }
            unlock(e) {
                return h(this, void 0, void 0, function*() {
                    let t = this.provider
                      , n = yield this.getAddress();
                    return t.send("personal_unlockAccount", [n.toLowerCase(), e, null])
                })
            }
        }
        class x extends A {
            sendTransaction(e) {
                return this.sendUncheckedTransaction(e).then(e=>({
                    hash: e,
                    nonce: null,
                    gasLimit: null,
                    gasPrice: null,
                    data: null,
                    value: null,
                    chainId: null,
                    confirmations: 0,
                    from: null,
                    wait: t=>this.provider.waitForTransaction(e, t)
                }))
            }
        }
        let k = {
            chainId: !0,
            data: !0,
            gasLimit: !0,
            gasPrice: !0,
            nonce: !0,
            to: !0,
            value: !0,
            type: !0,
            accessList: !0,
            maxFeePerGas: !0,
            maxPriorityFeePerGas: !0
        };
        class C extends f.Zk {
            constructor(e, t) {
                let n = t;
                null == n && (n = new Promise((e,t)=>{
                    setTimeout(()=>{
                        this.detectNetwork().then(t=>{
                            e(t)
                        }
                        , e=>{
                            t(e)
                        }
                        )
                    }
                    , 0)
                }
                )),
                super(n),
                e || (e = (0,
                s.getStatic)(this.constructor, "defaultUrl")()),
                "string" == typeof e ? (0,
                s.defineReadOnly)(this, "connection", Object.freeze({
                    url: e
                })) : (0,
                s.defineReadOnly)(this, "connection", Object.freeze((0,
                s.shallowCopy)(e))),
                this._nextId = 42
            }
            get _cache() {
                return null == this._eventLoopCache && (this._eventLoopCache = {}),
                this._eventLoopCache
            }
            static defaultUrl() {
                return "http://localhost:8545"
            }
            detectNetwork() {
                return this._cache.detectNetwork || (this._cache.detectNetwork = this._uncachedDetectNetwork(),
                setTimeout(()=>{
                    this._cache.detectNetwork = null
                }
                , 0)),
                this._cache.detectNetwork
            }
            _uncachedDetectNetwork() {
                return h(this, void 0, void 0, function*() {
                    yield v(0);
                    let e = null;
                    try {
                        e = yield this.send("eth_chainId", [])
                    } catch (t) {
                        try {
                            e = yield this.send("net_version", [])
                        } catch (e) {}
                    }
                    if (null != e) {
                        let t = (0,
                        s.getStatic)(this.constructor, "getNetwork");
                        try {
                            return t(i.O$.from(e).toNumber())
                        } catch (t) {
                            return m.throwError("could not detect network", d.Logger.errors.NETWORK_ERROR, {
                                chainId: e,
                                event: "invalidNetwork",
                                serverError: t
                            })
                        }
                    }
                    return m.throwError("could not detect network", d.Logger.errors.NETWORK_ERROR, {
                        event: "noNetwork"
                    })
                })
            }
            getSigner(e) {
                return new A(E,this,e)
            }
            getUncheckedSigner(e) {
                return this.getSigner(e).connectUnchecked()
            }
            listAccounts() {
                return this.send("eth_accounts", []).then(e=>e.map(e=>this.formatter.address(e)))
            }
            send(e, t) {
                let n = {
                    method: e,
                    params: t,
                    id: this._nextId++,
                    jsonrpc: "2.0"
                };
                this.emit("debug", {
                    action: "request",
                    request: (0,
                    s.deepCopy)(n),
                    provider: this
                });
                let r = ["eth_chainId", "eth_blockNumber"].indexOf(e) >= 0;
                if (r && this._cache[e])
                    return this._cache[e];
                let i = (0,
                c.fetchJson)(this.connection, JSON.stringify(n), w).then(e=>(this.emit("debug", {
                    action: "response",
                    request: n,
                    response: e,
                    provider: this
                }),
                e), e=>{
                    throw this.emit("debug", {
                        action: "response",
                        error: e,
                        request: n,
                        provider: this
                    }),
                    e
                }
                );
                return r && (this._cache[e] = i,
                setTimeout(()=>{
                    this._cache[e] = null
                }
                , 0)),
                i
            }
            prepareRequest(e, t) {
                switch (e) {
                case "getBlockNumber":
                    return ["eth_blockNumber", []];
                case "getGasPrice":
                    return ["eth_gasPrice", []];
                case "getBalance":
                    return ["eth_getBalance", [T(t.address), t.blockTag]];
                case "getTransactionCount":
                    return ["eth_getTransactionCount", [T(t.address), t.blockTag]];
                case "getCode":
                    return ["eth_getCode", [T(t.address), t.blockTag]];
                case "getStorageAt":
                    return ["eth_getStorageAt", [T(t.address), (0,
                    a.hexZeroPad)(t.position, 32), t.blockTag]];
                case "sendTransaction":
                    return ["eth_sendRawTransaction", [t.signedTransaction]];
                case "getBlock":
                    if (t.blockTag)
                        return ["eth_getBlockByNumber", [t.blockTag, !!t.includeTransactions]];
                    if (t.blockHash)
                        return ["eth_getBlockByHash", [t.blockHash, !!t.includeTransactions]];
                    break;
                case "getTransaction":
                    return ["eth_getTransactionByHash", [t.transactionHash]];
                case "getTransactionReceipt":
                    return ["eth_getTransactionReceipt", [t.transactionHash]];
                case "call":
                    {
                        let e = (0,
                        s.getStatic)(this.constructor, "hexlifyTransaction");
                        return ["eth_call", [e(t.transaction, {
                            from: !0
                        }), t.blockTag]]
                    }
                case "estimateGas":
                    {
                        let e = (0,
                        s.getStatic)(this.constructor, "hexlifyTransaction");
                        return ["eth_estimateGas", [e(t.transaction, {
                            from: !0
                        })]]
                    }
                case "getLogs":
                    return t.filter && null != t.filter.address && (t.filter.address = T(t.filter.address)),
                    ["eth_getLogs", [t.filter]]
                }
                return null
            }
            perform(e, t) {
                return h(this, void 0, void 0, function*() {
                    if ("call" === e || "estimateGas" === e) {
                        let e = t.transaction;
                        if (e && null != e.type && i.O$.from(e.type).isZero() && null == e.maxFeePerGas && null == e.maxPriorityFeePerGas) {
                            let n = yield this.getFeeData();
                            null == n.maxFeePerGas && null == n.maxPriorityFeePerGas && ((t = (0,
                            s.shallowCopy)(t)).transaction = (0,
                            s.shallowCopy)(e),
                            delete t.transaction.type)
                        }
                    }
                    let n = this.prepareRequest(e, t);
                    null == n && m.throwError(e + " not implemented", d.Logger.errors.NOT_IMPLEMENTED, {
                        operation: e
                    });
                    try {
                        return yield this.send(n[0], n[1])
                    } catch (n) {
                        return b(e, n, t)
                    }
                })
            }
            _startEvent(e) {
                "pending" === e.tag && this._startPending(),
                super._startEvent(e)
            }
            _startPending() {
                if (null != this._pendingFilter)
                    return;
                let e = this
                  , t = this.send("eth_newPendingTransactionFilter", []);
                this._pendingFilter = t,
                t.then(function(n) {
                    return function r() {
                        e.send("eth_getFilterChanges", [n]).then(function(n) {
                            if (e._pendingFilter != t)
                                return null;
                            let r = Promise.resolve();
                            return n.forEach(function(t) {
                                e._emitted["t:" + t.toLowerCase()] = "pending",
                                r = r.then(function() {
                                    return e.getTransaction(t).then(function(t) {
                                        return e.emit("pending", t),
                                        null
                                    })
                                })
                            }),
                            r.then(function() {
                                return v(1e3)
                            })
                        }).then(function() {
                            if (e._pendingFilter != t) {
                                e.send("eth_uninstallFilter", [n]);
                                return
                            }
                            return setTimeout(function() {
                                r()
                            }, 0),
                            null
                        }).catch(e=>{}
                        )
                    }(),
                    n
                }).catch(e=>{}
                )
            }
            _stopEvent(e) {
                "pending" === e.tag && 0 === this.listenerCount("pending") && (this._pendingFilter = null),
                super._stopEvent(e)
            }
            static hexlifyTransaction(e, t) {
                let n = (0,
                s.shallowCopy)(k);
                if (t)
                    for (let e in t)
                        t[e] && (n[e] = !0);
                (0,
                s.checkProperties)(e, n);
                let r = {};
                return ["chainId", "gasLimit", "gasPrice", "type", "maxFeePerGas", "maxPriorityFeePerGas", "nonce", "value"].forEach(function(t) {
                    if (null == e[t])
                        return;
                    let n = (0,
                    a.hexValue)(i.O$.from(e[t]));
                    "gasLimit" === t && (t = "gas"),
                    r[t] = n
                }),
                ["from", "to", "data"].forEach(function(t) {
                    null != e[t] && (r[t] = (0,
                    a.hexlify)(e[t]))
                }),
                e.accessList && (r.accessList = (0,
                l.accessListify)(e.accessList)),
                r
            }
        }
    },
    32006: function(e, t, n) {
        "use strict";
        n.d(t, {
            c: function() {
                return u
            },
            l: function() {
                return l
            }
        });
        var r = n(28609)
          , i = n(61941)
          , a = n(8280)
          , o = n(30554);
        let s = new i.Logger(a.i);
        class u extends o.r {
            detectNetwork() {
                var e, t, n, a;
                let o = Object.create(null, {
                    detectNetwork: {
                        get: ()=>super.detectNetwork
                    }
                });
                return e = this,
                t = void 0,
                n = void 0,
                a = function*() {
                    let e = this.network;
                    return null == e && ((e = yield o.detectNetwork.call(this)) || s.throwError("no network detected", i.Logger.errors.UNKNOWN_ERROR, {}),
                    null == this._network && ((0,
                    r.defineReadOnly)(this, "_network", e),
                    this.emit("network", e, null))),
                    e
                }
                ,
                new (n || (n = Promise))(function(r, i) {
                    function o(e) {
                        try {
                            u(a.next(e))
                        } catch (e) {
                            i(e)
                        }
                    }
                    function s(e) {
                        try {
                            u(a.throw(e))
                        } catch (e) {
                            i(e)
                        }
                    }
                    function u(e) {
                        var t;
                        e.done ? r(e.value) : ((t = e.value)instanceof n ? t : new n(function(e) {
                            e(t)
                        }
                        )).then(o, s)
                    }
                    u((a = a.apply(e, t || [])).next())
                }
                )
            }
        }
        class l extends u {
            constructor(e, t) {
                s.checkAbstract(new.target, l),
                e = (0,
                r.getStatic)(new.target, "getNetwork")(e),
                t = (0,
                r.getStatic)(new.target, "getApiKey")(t);
                let n = (0,
                r.getStatic)(new.target, "getUrl")(e, t);
                super(n, e),
                "string" == typeof t ? (0,
                r.defineReadOnly)(this, "apiKey", t) : null != t && Object.keys(t).forEach(e=>{
                    (0,
                    r.defineReadOnly)(this, e, t[e])
                }
                )
            }
            _startPending() {
                s.warn("WARNING: API provider does not support pending filters")
            }
            isCommunityResource() {
                return !1
            }
            getSigner(e) {
                return s.throwError("API provider does not support signing", i.Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "getSigner"
                })
            }
            listAccounts() {
                return Promise.resolve([])
            }
            static getApiKey(e) {
                return e
            }
            static getUrl(e, t) {
                return s.throwError("not implemented; sub-classes must override getUrl", i.Logger.errors.NOT_IMPLEMENTED, {
                    operation: "getUrl"
                })
            }
        }
    },
    44369: function(e, t, n) {
        "use strict";
        n.d(t, {
            Q: function() {
                return c
            }
        });
        var r = n(28609)
          , i = n(61941)
          , a = n(8280)
          , o = n(30554);
        let s = new i.Logger(a.i)
          , u = 1;
        function l(e, t) {
            let n = "Web3LegacyFetcher";
            return function(e, i) {
                let a = {
                    method: e,
                    params: i,
                    id: u++,
                    jsonrpc: "2.0"
                };
                return new Promise((e,i)=>{
                    this.emit("debug", {
                        action: "request",
                        fetcher: n,
                        request: (0,
                        r.deepCopy)(a),
                        provider: this
                    }),
                    t(a, (t,r)=>{
                        if (t)
                            return this.emit("debug", {
                                action: "response",
                                fetcher: n,
                                error: t,
                                request: a,
                                provider: this
                            }),
                            i(t);
                        if (this.emit("debug", {
                            action: "response",
                            fetcher: n,
                            request: a,
                            response: r,
                            provider: this
                        }),
                        r.error) {
                            let e = Error(r.error.message);
                            return e.code = r.error.code,
                            e.data = r.error.data,
                            i(e)
                        }
                        e(r.result)
                    }
                    )
                }
                )
            }
        }
        class c extends o.r {
            constructor(e, t) {
                null == e && s.throwArgumentError("missing provider", "provider", e);
                let n = null
                  , i = null
                  , a = null;
                "function" == typeof e ? (n = "unknown:",
                i = e) : (((n = e.host || e.path || "") || !e.isMetaMask || (n = "metamask"),
                a = e,
                e.request) ? ("" === n && (n = "eip-1193:"),
                i = function(t, n) {
                    null == n && (n = []);
                    let i = {
                        method: t,
                        params: n
                    };
                    return this.emit("debug", {
                        action: "request",
                        fetcher: "Eip1193Fetcher",
                        request: (0,
                        r.deepCopy)(i),
                        provider: this
                    }),
                    e.request(i).then(e=>(this.emit("debug", {
                        action: "response",
                        fetcher: "Eip1193Fetcher",
                        request: i,
                        response: e,
                        provider: this
                    }),
                    e), e=>{
                        throw this.emit("debug", {
                            action: "response",
                            fetcher: "Eip1193Fetcher",
                            request: i,
                            error: e,
                            provider: this
                        }),
                        e
                    }
                    )
                }
                ) : e.sendAsync ? i = l(e, e.sendAsync.bind(e)) : e.send ? i = l(e, e.send.bind(e)) : s.throwArgumentError("unsupported provider", "provider", e),
                n || (n = "unknown:")),
                super(n, t),
                (0,
                r.defineReadOnly)(this, "jsonRpcFetchFunc", i),
                (0,
                r.defineReadOnly)(this, "provider", a)
            }
            send(e, t) {
                return this.jsonRpcFetchFunc(e, t)
            }
        }
    },
    79663: function(e, t, n) {
        "use strict";
        n.d(t, {
            q: function() {
                return p
            }
        });
        var r = n(13004)
          , i = n(28609)
          , a = n(30554)
          , o = n(61941)
          , s = n(8280);
        let u = null;
        try {
            if (u = WebSocket,
            null == u)
                throw Error("inject please")
        } catch (t) {
            let e = new o.Logger(s.i);
            u = function() {
                e.throwError("WebSockets not supported in this environment", o.Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "new WebSocket()"
                })
            }
        }
        var l = function(e, t, n, r) {
            return new (n || (n = Promise))(function(i, a) {
                function o(e) {
                    try {
                        u(r.next(e))
                    } catch (e) {
                        a(e)
                    }
                }
                function s(e) {
                    try {
                        u(r.throw(e))
                    } catch (e) {
                        a(e)
                    }
                }
                function u(e) {
                    var t;
                    e.done ? i(e.value) : ((t = e.value)instanceof n ? t : new n(function(e) {
                        e(t)
                    }
                    )).then(o, s)
                }
                u((r = r.apply(e, t || [])).next())
            }
            )
        };
        let c = new o.Logger(s.i)
          , d = 1;
        class p extends a.r {
            constructor(e, t) {
                "any" === t && c.throwError("WebSocketProvider does not support 'any' network yet", o.Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "network:any"
                }),
                "string" == typeof e ? super(e, t) : super("_websocket", t),
                this._pollingInterval = -1,
                this._wsReady = !1,
                "string" == typeof e ? (0,
                i.defineReadOnly)(this, "_websocket", new u(this.connection.url)) : (0,
                i.defineReadOnly)(this, "_websocket", e),
                (0,
                i.defineReadOnly)(this, "_requests", {}),
                (0,
                i.defineReadOnly)(this, "_subs", {}),
                (0,
                i.defineReadOnly)(this, "_subIds", {}),
                (0,
                i.defineReadOnly)(this, "_detectNetwork", super.detectNetwork()),
                this.websocket.onopen = ()=>{
                    this._wsReady = !0,
                    Object.keys(this._requests).forEach(e=>{
                        this.websocket.send(this._requests[e].payload)
                    }
                    )
                }
                ,
                this.websocket.onmessage = e=>{
                    let t = e.data
                      , n = JSON.parse(t);
                    if (null != n.id) {
                        let e = String(n.id)
                          , r = this._requests[e];
                        if (delete this._requests[e],
                        void 0 !== n.result)
                            r.callback(null, n.result),
                            this.emit("debug", {
                                action: "response",
                                request: JSON.parse(r.payload),
                                response: n.result,
                                provider: this
                            });
                        else {
                            let e = null;
                            n.error ? (e = Error(n.error.message || "unknown error"),
                            (0,
                            i.defineReadOnly)(e, "code", n.error.code || null),
                            (0,
                            i.defineReadOnly)(e, "response", t)) : e = Error("unknown error"),
                            r.callback(e, void 0),
                            this.emit("debug", {
                                action: "response",
                                error: e,
                                request: JSON.parse(r.payload),
                                provider: this
                            })
                        }
                    } else if ("eth_subscription" === n.method) {
                        let e = this._subs[n.params.subscription];
                        e && e.processFunc(n.params.result)
                    } else
                        console.warn("this should not happen")
                }
                ;
                let n = setInterval(()=>{
                    this.emit("poll")
                }
                , 1e3);
                n.unref && n.unref()
            }
            get websocket() {
                return this._websocket
            }
            detectNetwork() {
                return this._detectNetwork
            }
            get pollingInterval() {
                return 0
            }
            resetEventsBlock(e) {
                c.throwError("cannot reset events block on WebSocketProvider", o.Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "resetEventBlock"
                })
            }
            set pollingInterval(e) {
                c.throwError("cannot set polling interval on WebSocketProvider", o.Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "setPollingInterval"
                })
            }
            poll() {
                return l(this, void 0, void 0, function*() {
                    return null
                })
            }
            set polling(e) {
                e && c.throwError("cannot set polling on WebSocketProvider", o.Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "setPolling"
                })
            }
            send(e, t) {
                let n = d++;
                return new Promise((r,i)=>{
                    let a = JSON.stringify({
                        method: e,
                        params: t,
                        id: n,
                        jsonrpc: "2.0"
                    });
                    this.emit("debug", {
                        action: "request",
                        request: JSON.parse(a),
                        provider: this
                    }),
                    this._requests[String(n)] = {
                        callback: function(e, t) {
                            return e ? i(e) : r(t)
                        },
                        payload: a
                    },
                    this._wsReady && this.websocket.send(a)
                }
                )
            }
            static defaultUrl() {
                return "ws://localhost:8546"
            }
            _subscribe(e, t, n) {
                return l(this, void 0, void 0, function*() {
                    let r = this._subIds[e];
                    null == r && (r = Promise.all(t).then(e=>this.send("eth_subscribe", e)),
                    this._subIds[e] = r);
                    let i = yield r;
                    this._subs[i] = {
                        tag: e,
                        processFunc: n
                    }
                })
            }
            _startEvent(e) {
                switch (e.type) {
                case "block":
                    this._subscribe("block", ["newHeads"], e=>{
                        let t = r.O$.from(e.number).toNumber();
                        this._emitted.block = t,
                        this.emit("block", t)
                    }
                    );
                    break;
                case "pending":
                    this._subscribe("pending", ["newPendingTransactions"], e=>{
                        this.emit("pending", e)
                    }
                    );
                    break;
                case "filter":
                    this._subscribe(e.tag, ["logs", this._getFilter(e.filter)], t=>{
                        null == t.removed && (t.removed = !1),
                        this.emit(e.filter, this.formatter.filterLog(t))
                    }
                    );
                    break;
                case "tx":
                    {
                        let t = e=>{
                            let t = e.hash;
                            this.getTransactionReceipt(t).then(e=>{
                                e && this.emit(t, e)
                            }
                            )
                        }
                        ;
                        t(e),
                        this._subscribe("tx", ["newHeads"], e=>{
                            this._events.filter(e=>"tx" === e.type).forEach(t)
                        }
                        );
                        break
                    }
                case "debug":
                case "poll":
                case "willPoll":
                case "didPoll":
                case "error":
                    break;
                default:
                    console.log("unhandled:", e)
                }
            }
            _stopEvent(e) {
                let t = e.tag;
                if ("tx" === e.type) {
                    if (this._events.filter(e=>"tx" === e.type).length)
                        return;
                    t = "tx"
                } else if (this.listenerCount(e.event))
                    return;
                let n = this._subIds[t];
                n && (delete this._subIds[t],
                n.then(e=>{
                    this._subs[e] && (delete this._subs[e],
                    this.send("eth_unsubscribe", [e]))
                }
                ))
            }
            destroy() {
                return l(this, void 0, void 0, function*() {
                    this.websocket.readyState === u.CONNECTING && (yield new Promise(e=>{
                        this.websocket.onopen = function() {
                            e(!0)
                        }
                        ,
                        this.websocket.onerror = function() {
                            e(!1)
                        }
                    }
                    )),
                    this.websocket.close(1e3)
                })
            }
        }
    },
    48133: function(e, t, n) {
        "use strict";
        n.r(t),
        n.d(t, {
            randomBytes: function() {
                return r.O
            },
            shuffled: function() {
                return i.y
            }
        });
        var r = n(60264)
          , i = n(67960)
    },
    60264: function(e, t, n) {
        "use strict";
        n.d(t, {
            O: function() {
                return u
            }
        });
        var r = n(70367)
          , i = n(61941);
        let a = new i.Logger("random/5.7.0")
          , o = function() {
            if ("undefined" != typeof self)
                return self;
            if ("undefined" != typeof window)
                return window;
            if (void 0 !== n.g)
                return n.g;
            throw Error("unable to locate global object")
        }()
          , s = o.crypto || o.msCrypto;
        function u(e) {
            (e <= 0 || e > 1024 || e % 1 || e != e) && a.throwArgumentError("invalid length", "length", e);
            let t = new Uint8Array(e);
            return s.getRandomValues(t),
            (0,
            r.arrayify)(t)
        }
        s && s.getRandomValues || (a.warn("WARNING: Missing strong random number source"),
        s = {
            getRandomValues: function(e) {
                return a.throwError("no secure random source avaialble", i.Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "crypto.getRandomValues"
                })
            }
        })
    },
    67960: function(e, t, n) {
        "use strict";
        function r(e) {
            e = e.slice();
            for (let t = e.length - 1; t > 0; t--) {
                let n = Math.floor(Math.random() * (t + 1))
                  , r = e[t];
                e[t] = e[n],
                e[n] = r
            }
            return e
        }
        n.d(t, {
            y: function() {
                return r
            }
        })
    },
    90634: function(e, t, n) {
        "use strict";
        n.r(t),
        n.d(t, {
            decode: function() {
                return d
            },
            encode: function() {
                return u
            }
        });
        var r = n(70367)
          , i = n(61941);
        let a = new i.Logger("rlp/5.7.0");
        function o(e) {
            let t = [];
            for (; e; )
                t.unshift(255 & e),
                e >>= 8;
            return t
        }
        function s(e, t, n) {
            let r = 0;
            for (let i = 0; i < n; i++)
                r = 256 * r + e[t + i];
            return r
        }
        function u(e) {
            return (0,
            r.hexlify)(function e(t) {
                if (Array.isArray(t)) {
                    let n = [];
                    if (t.forEach(function(t) {
                        n = n.concat(e(t))
                    }),
                    n.length <= 55)
                        return n.unshift(192 + n.length),
                        n;
                    let r = o(n.length);
                    return r.unshift(247 + r.length),
                    r.concat(n)
                }
                (0,
                r.isBytesLike)(t) || a.throwArgumentError("RLP object must be BytesLike", "object", t);
                let n = Array.prototype.slice.call((0,
                r.arrayify)(t));
                if (1 === n.length && n[0] <= 127)
                    return n;
                if (n.length <= 55)
                    return n.unshift(128 + n.length),
                    n;
                let i = o(n.length);
                return i.unshift(183 + i.length),
                i.concat(n)
            }(e))
        }
        function l(e, t, n, r) {
            let o = [];
            for (; n < t + 1 + r; ) {
                let s = c(e, n);
                o.push(s.result),
                (n += s.consumed) > t + 1 + r && a.throwError("child data too short", i.Logger.errors.BUFFER_OVERRUN, {})
            }
            return {
                consumed: 1 + r,
                result: o
            }
        }
        function c(e, t) {
            if (0 === e.length && a.throwError("data too short", i.Logger.errors.BUFFER_OVERRUN, {}),
            e[t] >= 248) {
                let n = e[t] - 247;
                t + 1 + n > e.length && a.throwError("data short segment too short", i.Logger.errors.BUFFER_OVERRUN, {});
                let r = s(e, t + 1, n);
                return t + 1 + n + r > e.length && a.throwError("data long segment too short", i.Logger.errors.BUFFER_OVERRUN, {}),
                l(e, t, t + 1 + n, n + r)
            }
            if (e[t] >= 192) {
                let n = e[t] - 192;
                return t + 1 + n > e.length && a.throwError("data array too short", i.Logger.errors.BUFFER_OVERRUN, {}),
                l(e, t, t + 1, n)
            }
            if (e[t] >= 184) {
                let n = e[t] - 183;
                t + 1 + n > e.length && a.throwError("data array too short", i.Logger.errors.BUFFER_OVERRUN, {});
                let o = s(e, t + 1, n);
                t + 1 + n + o > e.length && a.throwError("data array too short", i.Logger.errors.BUFFER_OVERRUN, {});
                let u = (0,
                r.hexlify)(e.slice(t + 1 + n, t + 1 + n + o));
                return {
                    consumed: 1 + n + o,
                    result: u
                }
            }
            if (e[t] >= 128) {
                let n = e[t] - 128;
                t + 1 + n > e.length && a.throwError("data too short", i.Logger.errors.BUFFER_OVERRUN, {});
                let o = (0,
                r.hexlify)(e.slice(t + 1, t + 1 + n));
                return {
                    consumed: 1 + n,
                    result: o
                }
            }
            return {
                consumed: 1,
                result: (0,
                r.hexlify)(e[t])
            }
        }
        function d(e) {
            let t = (0,
            r.arrayify)(e)
              , n = c(t, 0);
            return n.consumed !== t.length && a.throwArgumentError("invalid rlp data", "data", e),
            n.result
        }
    },
    47224: function(e, t, n) {
        "use strict";
        n.r(t),
        n.d(t, {
            SupportedAlgorithm: function() {
                return i.p
            },
            computeHmac: function() {
                return r.Gy
            },
            ripemd160: function() {
                return r.bP
            },
            sha256: function() {
                return r.JQ
            },
            sha512: function() {
                return r.o
            }
        });
        var r = n(15549)
          , i = n(11187)
    },
    15549: function(e, t, n) {
        "use strict";
        n.d(t, {
            Gy: function() {
                return p
            },
            bP: function() {
                return l
            },
            JQ: function() {
                return c
            },
            o: function() {
                return d
            }
        });
        var r = n(45370)
          , i = n.n(r)
          , a = n(70367)
          , o = n(11187)
          , s = n(61941);
        let u = new s.Logger("sha2/5.7.0");
        function l(e) {
            return "0x" + i().ripemd160().update((0,
            a.arrayify)(e)).digest("hex")
        }
        function c(e) {
            return "0x" + i().sha256().update((0,
            a.arrayify)(e)).digest("hex")
        }
        function d(e) {
            return "0x" + i().sha512().update((0,
            a.arrayify)(e)).digest("hex")
        }
        function p(e, t, n) {
            return o.p[e] || u.throwError("unsupported algorithm " + e, s.Logger.errors.UNSUPPORTED_OPERATION, {
                operation: "hmac",
                algorithm: e
            }),
            "0x" + i().hmac(i()[e], (0,
            a.arrayify)(t)).update((0,
            a.arrayify)(n)).digest("hex")
        }
    },
    11187: function(e, t, n) {
        "use strict";
        var r, i;
        n.d(t, {
            p: function() {
                return r
            }
        }),
        (i = r || (r = {})).sha256 = "sha256",
        i.sha512 = "sha512"
    },
    47770: function(e, t, n) {
        "use strict";
        n.r(t),
        n.d(t, {
            SigningKey: function() {
                return Z
            },
            computePublicKey: function() {
                return G
            },
            recoverPublicKey: function() {
                return H
            }
        });
        var r = n(98394)
          , i = n.n(r)
          , a = n(45370)
          , o = n.n(a);
        function s(e, t, n) {
            return e(n = {
                path: t,
                exports: {},
                require: function(e, t) {
                    return function() {
                        throw Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs")
                    }(e, null == t ? n.path : t)
                }
            }, n.exports),
            n.exports
        }
        "undefined" != typeof globalThis ? globalThis : "undefined" != typeof window ? window : void 0 !== n.g ? n.g : "undefined" != typeof self && self;
        var u = l;
        function l(e, t) {
            if (!e)
                throw Error(t || "Assertion failed")
        }
        l.equal = function(e, t, n) {
            if (e != t)
                throw Error(n || "Assertion failed: " + e + " != " + t)
        }
        ;
        var c = s(function(e, t) {
            var n = t;
            function r(e) {
                return 1 === e.length ? "0" + e : e
            }
            function i(e) {
                for (var t = "", n = 0; n < e.length; n++)
                    t += r(e[n].toString(16));
                return t
            }
            n.toArray = function(e, t) {
                if (Array.isArray(e))
                    return e.slice();
                if (!e)
                    return [];
                var n = [];
                if ("string" != typeof e) {
                    for (var r = 0; r < e.length; r++)
                        n[r] = 0 | e[r];
                    return n
                }
                if ("hex" === t) {
                    (e = e.replace(/[^a-z0-9]+/ig, "")).length % 2 != 0 && (e = "0" + e);
                    for (var r = 0; r < e.length; r += 2)
                        n.push(parseInt(e[r] + e[r + 1], 16))
                } else
                    for (var r = 0; r < e.length; r++) {
                        var i = e.charCodeAt(r)
                          , a = i >> 8
                          , o = 255 & i;
                        a ? n.push(a, o) : n.push(o)
                    }
                return n
            }
            ,
            n.zero2 = r,
            n.toHex = i,
            n.encode = function(e, t) {
                return "hex" === t ? i(e) : e
            }
        })
          , d = s(function(e, t) {
            var n = t;
            n.assert = u,
            n.toArray = c.toArray,
            n.zero2 = c.zero2,
            n.toHex = c.toHex,
            n.encode = c.encode,
            n.getNAF = function(e, t, n) {
                var r = Array(Math.max(e.bitLength(), n) + 1);
                r.fill(0);
                for (var i = 1 << t + 1, a = e.clone(), o = 0; o < r.length; o++) {
                    var s, u = a.andln(i - 1);
                    a.isOdd() ? (s = u > (i >> 1) - 1 ? (i >> 1) - u : u,
                    a.isubn(s)) : s = 0,
                    r[o] = s,
                    a.iushrn(1)
                }
                return r
            }
            ,
            n.getJSF = function(e, t) {
                var n = [[], []];
                e = e.clone(),
                t = t.clone();
                for (var r = 0, i = 0; e.cmpn(-r) > 0 || t.cmpn(-i) > 0; ) {
                    var a, o, s, u = e.andln(3) + r & 3, l = t.andln(3) + i & 3;
                    3 === u && (u = -1),
                    3 === l && (l = -1),
                    o = (1 & u) == 0 ? 0 : (3 == (a = e.andln(7) + r & 7) || 5 === a) && 2 === l ? -u : u,
                    n[0].push(o),
                    s = (1 & l) == 0 ? 0 : (3 == (a = t.andln(7) + i & 7) || 5 === a) && 2 === u ? -l : l,
                    n[1].push(s),
                    2 * r === o + 1 && (r = 1 - r),
                    2 * i === s + 1 && (i = 1 - i),
                    e.iushrn(1),
                    t.iushrn(1)
                }
                return n
            }
            ,
            n.cachedProperty = function(e, t, n) {
                var r = "_" + t;
                e.prototype[t] = function() {
                    return void 0 !== this[r] ? this[r] : this[r] = n.call(this)
                }
            }
            ,
            n.parseBytes = function(e) {
                return "string" == typeof e ? n.toArray(e, "hex") : e
            }
            ,
            n.intFromLE = function(e) {
                return new (i())(e,"hex","le")
            }
        })
          , p = d.getNAF
          , f = d.getJSF
          , h = d.assert;
        function m(e, t) {
            this.type = e,
            this.p = new (i())(t.p,16),
            this.red = t.prime ? i().red(t.prime) : i().mont(this.p),
            this.zero = new (i())(0).toRed(this.red),
            this.one = new (i())(1).toRed(this.red),
            this.two = new (i())(2).toRed(this.red),
            this.n = t.n && new (i())(t.n,16),
            this.g = t.g && this.pointFromJSON(t.g, t.gRed),
            this._wnafT1 = [, , , , ],
            this._wnafT2 = [, , , , ],
            this._wnafT3 = [, , , , ],
            this._wnafT4 = [, , , , ],
            this._bitLength = this.n ? this.n.bitLength() : 0;
            var n = this.n && this.p.div(this.n);
            !n || n.cmpn(100) > 0 ? this.redN = null : (this._maxwellTrick = !0,
            this.redN = this.n.toRed(this.red))
        }
        function y(e, t) {
            this.curve = e,
            this.type = t,
            this.precomputed = null
        }
        m.prototype.point = function() {
            throw Error("Not implemented")
        }
        ,
        m.prototype.validate = function() {
            throw Error("Not implemented")
        }
        ,
        m.prototype._fixedNafMul = function(e, t) {
            h(e.precomputed);
            var n, r, i = e._getDoubles(), a = p(t, 1, this._bitLength), o = (1 << i.step + 1) - (i.step % 2 == 0 ? 2 : 1);
            o /= 3;
            var s = [];
            for (n = 0; n < a.length; n += i.step) {
                r = 0;
                for (var u = n + i.step - 1; u >= n; u--)
                    r = (r << 1) + a[u];
                s.push(r)
            }
            for (var l = this.jpoint(null, null, null), c = this.jpoint(null, null, null), d = o; d > 0; d--) {
                for (n = 0; n < s.length; n++)
                    (r = s[n]) === d ? c = c.mixedAdd(i.points[n]) : r === -d && (c = c.mixedAdd(i.points[n].neg()));
                l = l.add(c)
            }
            return l.toP()
        }
        ,
        m.prototype._wnafMul = function(e, t) {
            var n = 4
              , r = e._getNAFPoints(n);
            n = r.wnd;
            for (var i = r.points, a = p(t, n, this._bitLength), o = this.jpoint(null, null, null), s = a.length - 1; s >= 0; s--) {
                for (var u = 0; s >= 0 && 0 === a[s]; s--)
                    u++;
                if (s >= 0 && u++,
                o = o.dblp(u),
                s < 0)
                    break;
                var l = a[s];
                h(0 !== l),
                o = "affine" === e.type ? l > 0 ? o.mixedAdd(i[l - 1 >> 1]) : o.mixedAdd(i[-l - 1 >> 1].neg()) : l > 0 ? o.add(i[l - 1 >> 1]) : o.add(i[-l - 1 >> 1].neg())
            }
            return "affine" === e.type ? o.toP() : o
        }
        ,
        m.prototype._wnafMulAdd = function(e, t, n, r, i) {
            var a, o, s, u = this._wnafT1, l = this._wnafT2, c = this._wnafT3, d = 0;
            for (a = 0; a < r; a++) {
                var h = (s = t[a])._getNAFPoints(e);
                u[a] = h.wnd,
                l[a] = h.points
            }
            for (a = r - 1; a >= 1; a -= 2) {
                var m = a - 1
                  , y = a;
                if (1 !== u[m] || 1 !== u[y]) {
                    c[m] = p(n[m], u[m], this._bitLength),
                    c[y] = p(n[y], u[y], this._bitLength),
                    d = Math.max(c[m].length, d),
                    d = Math.max(c[y].length, d);
                    continue
                }
                var g = [t[m], null, null, t[y]];
                0 === t[m].y.cmp(t[y].y) ? (g[1] = t[m].add(t[y]),
                g[2] = t[m].toJ().mixedAdd(t[y].neg())) : 0 === t[m].y.cmp(t[y].y.redNeg()) ? (g[1] = t[m].toJ().mixedAdd(t[y]),
                g[2] = t[m].add(t[y].neg())) : (g[1] = t[m].toJ().mixedAdd(t[y]),
                g[2] = t[m].toJ().mixedAdd(t[y].neg()));
                var b = [-3, -1, -5, -7, 0, 7, 5, 1, 3]
                  , v = f(n[m], n[y]);
                for (o = 0,
                d = Math.max(v[0].length, d),
                c[m] = Array(d),
                c[y] = Array(d); o < d; o++) {
                    var w = 0 | v[0][o]
                      , T = 0 | v[1][o];
                    c[m][o] = b[(w + 1) * 3 + (T + 1)],
                    c[y][o] = 0,
                    l[m] = g
                }
            }
            var E = this.jpoint(null, null, null)
              , A = this._wnafT4;
            for (a = d; a >= 0; a--) {
                for (var x = 0; a >= 0; ) {
                    var k = !0;
                    for (o = 0; o < r; o++)
                        A[o] = 0 | c[o][a],
                        0 !== A[o] && (k = !1);
                    if (!k)
                        break;
                    x++,
                    a--
                }
                if (a >= 0 && x++,
                E = E.dblp(x),
                a < 0)
                    break;
                for (o = 0; o < r; o++) {
                    var C = A[o];
                    0 !== C && (C > 0 ? s = l[o][C - 1 >> 1] : C < 0 && (s = l[o][-C - 1 >> 1].neg()),
                    E = "affine" === s.type ? E.mixedAdd(s) : E.add(s))
                }
            }
            for (a = 0; a < r; a++)
                l[a] = null;
            return i ? E : E.toP()
        }
        ,
        m.BasePoint = y,
        y.prototype.eq = function() {
            throw Error("Not implemented")
        }
        ,
        y.prototype.validate = function() {
            return this.curve.validate(this)
        }
        ,
        m.prototype.decodePoint = function(e, t) {
            e = d.toArray(e, t);
            var n = this.p.byteLength();
            if ((4 === e[0] || 6 === e[0] || 7 === e[0]) && e.length - 1 == 2 * n)
                return 6 === e[0] ? h(e[e.length - 1] % 2 == 0) : 7 === e[0] && h(e[e.length - 1] % 2 == 1),
                this.point(e.slice(1, 1 + n), e.slice(1 + n, 1 + 2 * n));
            if ((2 === e[0] || 3 === e[0]) && e.length - 1 === n)
                return this.pointFromX(e.slice(1, 1 + n), 3 === e[0]);
            throw Error("Unknown point format")
        }
        ,
        y.prototype.encodeCompressed = function(e) {
            return this.encode(e, !0)
        }
        ,
        y.prototype._encode = function(e) {
            var t = this.curve.p.byteLength()
              , n = this.getX().toArray("be", t);
            return e ? [this.getY().isEven() ? 2 : 3].concat(n) : [4].concat(n, this.getY().toArray("be", t))
        }
        ,
        y.prototype.encode = function(e, t) {
            return d.encode(this._encode(t), e)
        }
        ,
        y.prototype.precompute = function(e) {
            if (this.precomputed)
                return this;
            var t = {
                doubles: null,
                naf: null,
                beta: null
            };
            return t.naf = this._getNAFPoints(8),
            t.doubles = this._getDoubles(4, e),
            t.beta = this._getBeta(),
            this.precomputed = t,
            this
        }
        ,
        y.prototype._hasDoubles = function(e) {
            if (!this.precomputed)
                return !1;
            var t = this.precomputed.doubles;
            return !!t && t.points.length >= Math.ceil((e.bitLength() + 1) / t.step)
        }
        ,
        y.prototype._getDoubles = function(e, t) {
            if (this.precomputed && this.precomputed.doubles)
                return this.precomputed.doubles;
            for (var n = [this], r = this, i = 0; i < t; i += e) {
                for (var a = 0; a < e; a++)
                    r = r.dbl();
                n.push(r)
            }
            return {
                step: e,
                points: n
            }
        }
        ,
        y.prototype._getNAFPoints = function(e) {
            if (this.precomputed && this.precomputed.naf)
                return this.precomputed.naf;
            for (var t = [this], n = (1 << e) - 1, r = 1 === n ? null : this.dbl(), i = 1; i < n; i++)
                t[i] = t[i - 1].add(r);
            return {
                wnd: e,
                points: t
            }
        }
        ,
        y.prototype._getBeta = function() {
            return null
        }
        ,
        y.prototype.dblp = function(e) {
            for (var t = this, n = 0; n < e; n++)
                t = t.dbl();
            return t
        }
        ;
        var g = s(function(e) {
            "function" == typeof Object.create ? e.exports = function(e, t) {
                t && (e.super_ = t,
                e.prototype = Object.create(t.prototype, {
                    constructor: {
                        value: e,
                        enumerable: !1,
                        writable: !0,
                        configurable: !0
                    }
                }))
            }
            : e.exports = function(e, t) {
                if (t) {
                    e.super_ = t;
                    var n = function() {};
                    n.prototype = t.prototype,
                    e.prototype = new n,
                    e.prototype.constructor = e
                }
            }
        })
          , b = d.assert;
        function v(e) {
            m.call(this, "short", e),
            this.a = new (i())(e.a,16).toRed(this.red),
            this.b = new (i())(e.b,16).toRed(this.red),
            this.tinv = this.two.redInvm(),
            this.zeroA = 0 === this.a.fromRed().cmpn(0),
            this.threeA = 0 === this.a.fromRed().sub(this.p).cmpn(-3),
            this.endo = this._getEndomorphism(e),
            this._endoWnafT1 = [, , , , ],
            this._endoWnafT2 = [, , , , ]
        }
        function w(e, t, n, r) {
            m.BasePoint.call(this, e, "affine"),
            null === t && null === n ? (this.x = null,
            this.y = null,
            this.inf = !0) : (this.x = new (i())(t,16),
            this.y = new (i())(n,16),
            r && (this.x.forceRed(this.curve.red),
            this.y.forceRed(this.curve.red)),
            this.x.red || (this.x = this.x.toRed(this.curve.red)),
            this.y.red || (this.y = this.y.toRed(this.curve.red)),
            this.inf = !1)
        }
        function T(e, t, n, r) {
            m.BasePoint.call(this, e, "jacobian"),
            null === t && null === n && null === r ? (this.x = this.curve.one,
            this.y = this.curve.one,
            this.z = new (i())(0)) : (this.x = new (i())(t,16),
            this.y = new (i())(n,16),
            this.z = new (i())(r,16)),
            this.x.red || (this.x = this.x.toRed(this.curve.red)),
            this.y.red || (this.y = this.y.toRed(this.curve.red)),
            this.z.red || (this.z = this.z.toRed(this.curve.red)),
            this.zOne = this.z === this.curve.one
        }
        g(v, m),
        v.prototype._getEndomorphism = function(e) {
            if (this.zeroA && this.g && this.n && 1 === this.p.modn(3)) {
                if (e.beta)
                    t = new (i())(e.beta,16).toRed(this.red);
                else {
                    var t, n, r, a = this._getEndoRoots(this.p);
                    t = (t = 0 > a[0].cmp(a[1]) ? a[0] : a[1]).toRed(this.red)
                }
                if (e.lambda)
                    n = new (i())(e.lambda,16);
                else {
                    var o = this._getEndoRoots(this.n);
                    0 === this.g.mul(o[0]).x.cmp(this.g.x.redMul(t)) ? n = o[0] : (n = o[1],
                    b(0 === this.g.mul(n).x.cmp(this.g.x.redMul(t))))
                }
                return r = e.basis ? e.basis.map(function(e) {
                    return {
                        a: new (i())(e.a,16),
                        b: new (i())(e.b,16)
                    }
                }) : this._getEndoBasis(n),
                {
                    beta: t,
                    lambda: n,
                    basis: r
                }
            }
        }
        ,
        v.prototype._getEndoRoots = function(e) {
            var t = e === this.p ? this.red : i().mont(e)
              , n = new (i())(2).toRed(t).redInvm()
              , r = n.redNeg()
              , a = new (i())(3).toRed(t).redNeg().redSqrt().redMul(n);
            return [r.redAdd(a).fromRed(), r.redSub(a).fromRed()]
        }
        ,
        v.prototype._getEndoBasis = function(e) {
            for (var t, n, r, a, o, s, u, l, c, d = this.n.ushrn(Math.floor(this.n.bitLength() / 2)), p = e, f = this.n.clone(), h = new (i())(1), m = new (i())(0), y = new (i())(0), g = new (i())(1), b = 0; 0 !== p.cmpn(0); ) {
                var v = f.div(p);
                l = f.sub(v.mul(p)),
                c = y.sub(v.mul(h));
                var w = g.sub(v.mul(m));
                if (!r && 0 > l.cmp(d))
                    t = u.neg(),
                    n = h,
                    r = l.neg(),
                    a = c;
                else if (r && 2 == ++b)
                    break;
                u = l,
                f = p,
                p = l,
                y = h,
                h = c,
                g = m,
                m = w
            }
            o = l.neg(),
            s = c;
            var T = r.sqr().add(a.sqr());
            return o.sqr().add(s.sqr()).cmp(T) >= 0 && (o = t,
            s = n),
            r.negative && (r = r.neg(),
            a = a.neg()),
            o.negative && (o = o.neg(),
            s = s.neg()),
            [{
                a: r,
                b: a
            }, {
                a: o,
                b: s
            }]
        }
        ,
        v.prototype._endoSplit = function(e) {
            var t = this.endo.basis
              , n = t[0]
              , r = t[1]
              , i = r.b.mul(e).divRound(this.n)
              , a = n.b.neg().mul(e).divRound(this.n)
              , o = i.mul(n.a)
              , s = a.mul(r.a)
              , u = i.mul(n.b)
              , l = a.mul(r.b);
            return {
                k1: e.sub(o).sub(s),
                k2: u.add(l).neg()
            }
        }
        ,
        v.prototype.pointFromX = function(e, t) {
            (e = new (i())(e,16)).red || (e = e.toRed(this.red));
            var n = e.redSqr().redMul(e).redIAdd(e.redMul(this.a)).redIAdd(this.b)
              , r = n.redSqrt();
            if (0 !== r.redSqr().redSub(n).cmp(this.zero))
                throw Error("invalid point");
            var a = r.fromRed().isOdd();
            return (t && !a || !t && a) && (r = r.redNeg()),
            this.point(e, r)
        }
        ,
        v.prototype.validate = function(e) {
            if (e.inf)
                return !0;
            var t = e.x
              , n = e.y
              , r = this.a.redMul(t)
              , i = t.redSqr().redMul(t).redIAdd(r).redIAdd(this.b);
            return 0 === n.redSqr().redISub(i).cmpn(0)
        }
        ,
        v.prototype._endoWnafMulAdd = function(e, t, n) {
            for (var r = this._endoWnafT1, i = this._endoWnafT2, a = 0; a < e.length; a++) {
                var o = this._endoSplit(t[a])
                  , s = e[a]
                  , u = s._getBeta();
                o.k1.negative && (o.k1.ineg(),
                s = s.neg(!0)),
                o.k2.negative && (o.k2.ineg(),
                u = u.neg(!0)),
                r[2 * a] = s,
                r[2 * a + 1] = u,
                i[2 * a] = o.k1,
                i[2 * a + 1] = o.k2
            }
            for (var l = this._wnafMulAdd(1, r, i, 2 * a, n), c = 0; c < 2 * a; c++)
                r[c] = null,
                i[c] = null;
            return l
        }
        ,
        g(w, m.BasePoint),
        v.prototype.point = function(e, t, n) {
            return new w(this,e,t,n)
        }
        ,
        v.prototype.pointFromJSON = function(e, t) {
            return w.fromJSON(this, e, t)
        }
        ,
        w.prototype._getBeta = function() {
            if (this.curve.endo) {
                var e = this.precomputed;
                if (e && e.beta)
                    return e.beta;
                var t = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
                if (e) {
                    var n = this.curve
                      , r = function(e) {
                        return n.point(e.x.redMul(n.endo.beta), e.y)
                    };
                    e.beta = t,
                    t.precomputed = {
                        beta: null,
                        naf: e.naf && {
                            wnd: e.naf.wnd,
                            points: e.naf.points.map(r)
                        },
                        doubles: e.doubles && {
                            step: e.doubles.step,
                            points: e.doubles.points.map(r)
                        }
                    }
                }
                return t
            }
        }
        ,
        w.prototype.toJSON = function() {
            return this.precomputed ? [this.x, this.y, this.precomputed && {
                doubles: this.precomputed.doubles && {
                    step: this.precomputed.doubles.step,
                    points: this.precomputed.doubles.points.slice(1)
                },
                naf: this.precomputed.naf && {
                    wnd: this.precomputed.naf.wnd,
                    points: this.precomputed.naf.points.slice(1)
                }
            }] : [this.x, this.y]
        }
        ,
        w.fromJSON = function(e, t, n) {
            "string" == typeof t && (t = JSON.parse(t));
            var r = e.point(t[0], t[1], n);
            if (!t[2])
                return r;
            function i(t) {
                return e.point(t[0], t[1], n)
            }
            var a = t[2];
            return r.precomputed = {
                beta: null,
                doubles: a.doubles && {
                    step: a.doubles.step,
                    points: [r].concat(a.doubles.points.map(i))
                },
                naf: a.naf && {
                    wnd: a.naf.wnd,
                    points: [r].concat(a.naf.points.map(i))
                }
            },
            r
        }
        ,
        w.prototype.inspect = function() {
            return this.isInfinity() ? "<EC Point Infinity>" : "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + ">"
        }
        ,
        w.prototype.isInfinity = function() {
            return this.inf
        }
        ,
        w.prototype.add = function(e) {
            if (this.inf)
                return e;
            if (e.inf)
                return this;
            if (this.eq(e))
                return this.dbl();
            if (this.neg().eq(e) || 0 === this.x.cmp(e.x))
                return this.curve.point(null, null);
            var t = this.y.redSub(e.y);
            0 !== t.cmpn(0) && (t = t.redMul(this.x.redSub(e.x).redInvm()));
            var n = t.redSqr().redISub(this.x).redISub(e.x)
              , r = t.redMul(this.x.redSub(n)).redISub(this.y);
            return this.curve.point(n, r)
        }
        ,
        w.prototype.dbl = function() {
            if (this.inf)
                return this;
            var e = this.y.redAdd(this.y);
            if (0 === e.cmpn(0))
                return this.curve.point(null, null);
            var t = this.curve.a
              , n = this.x.redSqr()
              , r = e.redInvm()
              , i = n.redAdd(n).redIAdd(n).redIAdd(t).redMul(r)
              , a = i.redSqr().redISub(this.x.redAdd(this.x))
              , o = i.redMul(this.x.redSub(a)).redISub(this.y);
            return this.curve.point(a, o)
        }
        ,
        w.prototype.getX = function() {
            return this.x.fromRed()
        }
        ,
        w.prototype.getY = function() {
            return this.y.fromRed()
        }
        ,
        w.prototype.mul = function(e) {
            return (e = new (i())(e,16),
            this.isInfinity()) ? this : this._hasDoubles(e) ? this.curve._fixedNafMul(this, e) : this.curve.endo ? this.curve._endoWnafMulAdd([this], [e]) : this.curve._wnafMul(this, e)
        }
        ,
        w.prototype.mulAdd = function(e, t, n) {
            var r = [this, t]
              , i = [e, n];
            return this.curve.endo ? this.curve._endoWnafMulAdd(r, i) : this.curve._wnafMulAdd(1, r, i, 2)
        }
        ,
        w.prototype.jmulAdd = function(e, t, n) {
            var r = [this, t]
              , i = [e, n];
            return this.curve.endo ? this.curve._endoWnafMulAdd(r, i, !0) : this.curve._wnafMulAdd(1, r, i, 2, !0)
        }
        ,
        w.prototype.eq = function(e) {
            return this === e || this.inf === e.inf && (this.inf || 0 === this.x.cmp(e.x) && 0 === this.y.cmp(e.y))
        }
        ,
        w.prototype.neg = function(e) {
            if (this.inf)
                return this;
            var t = this.curve.point(this.x, this.y.redNeg());
            if (e && this.precomputed) {
                var n = this.precomputed
                  , r = function(e) {
                    return e.neg()
                };
                t.precomputed = {
                    naf: n.naf && {
                        wnd: n.naf.wnd,
                        points: n.naf.points.map(r)
                    },
                    doubles: n.doubles && {
                        step: n.doubles.step,
                        points: n.doubles.points.map(r)
                    }
                }
            }
            return t
        }
        ,
        w.prototype.toJ = function() {
            return this.inf ? this.curve.jpoint(null, null, null) : this.curve.jpoint(this.x, this.y, this.curve.one)
        }
        ,
        g(T, m.BasePoint),
        v.prototype.jpoint = function(e, t, n) {
            return new T(this,e,t,n)
        }
        ,
        T.prototype.toP = function() {
            if (this.isInfinity())
                return this.curve.point(null, null);
            var e = this.z.redInvm()
              , t = e.redSqr()
              , n = this.x.redMul(t)
              , r = this.y.redMul(t).redMul(e);
            return this.curve.point(n, r)
        }
        ,
        T.prototype.neg = function() {
            return this.curve.jpoint(this.x, this.y.redNeg(), this.z)
        }
        ,
        T.prototype.add = function(e) {
            if (this.isInfinity())
                return e;
            if (e.isInfinity())
                return this;
            var t = e.z.redSqr()
              , n = this.z.redSqr()
              , r = this.x.redMul(t)
              , i = e.x.redMul(n)
              , a = this.y.redMul(t.redMul(e.z))
              , o = e.y.redMul(n.redMul(this.z))
              , s = r.redSub(i)
              , u = a.redSub(o);
            if (0 === s.cmpn(0))
                return 0 !== u.cmpn(0) ? this.curve.jpoint(null, null, null) : this.dbl();
            var l = s.redSqr()
              , c = l.redMul(s)
              , d = r.redMul(l)
              , p = u.redSqr().redIAdd(c).redISub(d).redISub(d)
              , f = u.redMul(d.redISub(p)).redISub(a.redMul(c))
              , h = this.z.redMul(e.z).redMul(s);
            return this.curve.jpoint(p, f, h)
        }
        ,
        T.prototype.mixedAdd = function(e) {
            if (this.isInfinity())
                return e.toJ();
            if (e.isInfinity())
                return this;
            var t = this.z.redSqr()
              , n = this.x
              , r = e.x.redMul(t)
              , i = this.y
              , a = e.y.redMul(t).redMul(this.z)
              , o = n.redSub(r)
              , s = i.redSub(a);
            if (0 === o.cmpn(0))
                return 0 !== s.cmpn(0) ? this.curve.jpoint(null, null, null) : this.dbl();
            var u = o.redSqr()
              , l = u.redMul(o)
              , c = n.redMul(u)
              , d = s.redSqr().redIAdd(l).redISub(c).redISub(c)
              , p = s.redMul(c.redISub(d)).redISub(i.redMul(l))
              , f = this.z.redMul(o);
            return this.curve.jpoint(d, p, f)
        }
        ,
        T.prototype.dblp = function(e) {
            if (0 === e || this.isInfinity())
                return this;
            if (!e)
                return this.dbl();
            if (this.curve.zeroA || this.curve.threeA) {
                var t, n = this;
                for (t = 0; t < e; t++)
                    n = n.dbl();
                return n
            }
            var r = this.curve.a
              , i = this.curve.tinv
              , a = this.x
              , o = this.y
              , s = this.z
              , u = s.redSqr().redSqr()
              , l = o.redAdd(o);
            for (t = 0; t < e; t++) {
                var c = a.redSqr()
                  , d = l.redSqr()
                  , p = d.redSqr()
                  , f = c.redAdd(c).redIAdd(c).redIAdd(r.redMul(u))
                  , h = a.redMul(d)
                  , m = f.redSqr().redISub(h.redAdd(h))
                  , y = h.redISub(m)
                  , g = f.redMul(y);
                g = g.redIAdd(g).redISub(p);
                var b = l.redMul(s);
                t + 1 < e && (u = u.redMul(p)),
                a = m,
                s = b,
                l = g
            }
            return this.curve.jpoint(a, l.redMul(i), s)
        }
        ,
        T.prototype.dbl = function() {
            return this.isInfinity() ? this : this.curve.zeroA ? this._zeroDbl() : this.curve.threeA ? this._threeDbl() : this._dbl()
        }
        ,
        T.prototype._zeroDbl = function() {
            if (this.zOne) {
                var e, t, n, r = this.x.redSqr(), i = this.y.redSqr(), a = i.redSqr(), o = this.x.redAdd(i).redSqr().redISub(r).redISub(a);
                o = o.redIAdd(o);
                var s = r.redAdd(r).redIAdd(r)
                  , u = s.redSqr().redISub(o).redISub(o)
                  , l = a.redIAdd(a);
                l = (l = l.redIAdd(l)).redIAdd(l),
                e = u,
                t = s.redMul(o.redISub(u)).redISub(l),
                n = this.y.redAdd(this.y)
            } else {
                var c = this.x.redSqr()
                  , d = this.y.redSqr()
                  , p = d.redSqr()
                  , f = this.x.redAdd(d).redSqr().redISub(c).redISub(p);
                f = f.redIAdd(f);
                var h = c.redAdd(c).redIAdd(c)
                  , m = h.redSqr()
                  , y = p.redIAdd(p);
                y = (y = y.redIAdd(y)).redIAdd(y),
                e = m.redISub(f).redISub(f),
                t = h.redMul(f.redISub(e)).redISub(y),
                n = (n = this.y.redMul(this.z)).redIAdd(n)
            }
            return this.curve.jpoint(e, t, n)
        }
        ,
        T.prototype._threeDbl = function() {
            if (this.zOne) {
                var e, t, n, r = this.x.redSqr(), i = this.y.redSqr(), a = i.redSqr(), o = this.x.redAdd(i).redSqr().redISub(r).redISub(a);
                o = o.redIAdd(o);
                var s = r.redAdd(r).redIAdd(r).redIAdd(this.curve.a)
                  , u = s.redSqr().redISub(o).redISub(o);
                e = u;
                var l = a.redIAdd(a);
                l = (l = l.redIAdd(l)).redIAdd(l),
                t = s.redMul(o.redISub(u)).redISub(l),
                n = this.y.redAdd(this.y)
            } else {
                var c = this.z.redSqr()
                  , d = this.y.redSqr()
                  , p = this.x.redMul(d)
                  , f = this.x.redSub(c).redMul(this.x.redAdd(c));
                f = f.redAdd(f).redIAdd(f);
                var h = p.redIAdd(p)
                  , m = (h = h.redIAdd(h)).redAdd(h);
                e = f.redSqr().redISub(m),
                n = this.y.redAdd(this.z).redSqr().redISub(d).redISub(c);
                var y = d.redSqr();
                y = (y = (y = y.redIAdd(y)).redIAdd(y)).redIAdd(y),
                t = f.redMul(h.redISub(e)).redISub(y)
            }
            return this.curve.jpoint(e, t, n)
        }
        ,
        T.prototype._dbl = function() {
            var e = this.curve.a
              , t = this.x
              , n = this.y
              , r = this.z
              , i = r.redSqr().redSqr()
              , a = t.redSqr()
              , o = n.redSqr()
              , s = a.redAdd(a).redIAdd(a).redIAdd(e.redMul(i))
              , u = t.redAdd(t)
              , l = (u = u.redIAdd(u)).redMul(o)
              , c = s.redSqr().redISub(l.redAdd(l))
              , d = l.redISub(c)
              , p = o.redSqr();
            p = (p = (p = p.redIAdd(p)).redIAdd(p)).redIAdd(p);
            var f = s.redMul(d).redISub(p)
              , h = n.redAdd(n).redMul(r);
            return this.curve.jpoint(c, f, h)
        }
        ,
        T.prototype.trpl = function() {
            if (!this.curve.zeroA)
                return this.dbl().add(this);
            var e = this.x.redSqr()
              , t = this.y.redSqr()
              , n = this.z.redSqr()
              , r = t.redSqr()
              , i = e.redAdd(e).redIAdd(e)
              , a = i.redSqr()
              , o = this.x.redAdd(t).redSqr().redISub(e).redISub(r)
              , s = (o = (o = (o = o.redIAdd(o)).redAdd(o).redIAdd(o)).redISub(a)).redSqr()
              , u = r.redIAdd(r);
            u = (u = (u = u.redIAdd(u)).redIAdd(u)).redIAdd(u);
            var l = i.redIAdd(o).redSqr().redISub(a).redISub(s).redISub(u)
              , c = t.redMul(l);
            c = (c = c.redIAdd(c)).redIAdd(c);
            var d = this.x.redMul(s).redISub(c);
            d = (d = d.redIAdd(d)).redIAdd(d);
            var p = this.y.redMul(l.redMul(u.redISub(l)).redISub(o.redMul(s)));
            p = (p = (p = p.redIAdd(p)).redIAdd(p)).redIAdd(p);
            var f = this.z.redAdd(o).redSqr().redISub(n).redISub(s);
            return this.curve.jpoint(d, p, f)
        }
        ,
        T.prototype.mul = function(e, t) {
            return e = new (i())(e,t),
            this.curve._wnafMul(this, e)
        }
        ,
        T.prototype.eq = function(e) {
            if ("affine" === e.type)
                return this.eq(e.toJ());
            if (this === e)
                return !0;
            var t = this.z.redSqr()
              , n = e.z.redSqr();
            if (0 !== this.x.redMul(n).redISub(e.x.redMul(t)).cmpn(0))
                return !1;
            var r = t.redMul(this.z)
              , i = n.redMul(e.z);
            return 0 === this.y.redMul(i).redISub(e.y.redMul(r)).cmpn(0)
        }
        ,
        T.prototype.eqXToP = function(e) {
            var t = this.z.redSqr()
              , n = e.toRed(this.curve.red).redMul(t);
            if (0 === this.x.cmp(n))
                return !0;
            for (var r = e.clone(), i = this.curve.redN.redMul(t); ; ) {
                if (r.iadd(this.curve.n),
                r.cmp(this.curve.p) >= 0)
                    return !1;
                if (n.redIAdd(i),
                0 === this.x.cmp(n))
                    return !0
            }
        }
        ,
        T.prototype.inspect = function() {
            return this.isInfinity() ? "<EC JPoint Infinity>" : "<EC JPoint x: " + this.x.toString(16, 2) + " y: " + this.y.toString(16, 2) + " z: " + this.z.toString(16, 2) + ">"
        }
        ,
        T.prototype.isInfinity = function() {
            return 0 === this.z.cmpn(0)
        }
        ;
        var E = s(function(e, t) {
            var n = t;
            n.base = m,
            n.short = v,
            n.mont = null,
            n.edwards = null
        })
          , A = s(function(e, t) {
            var n, r = t, i = d.assert;
            function a(e) {
                "short" === e.type ? this.curve = new E.short(e) : "edwards" === e.type ? this.curve = new E.edwards(e) : this.curve = new E.mont(e),
                this.g = this.curve.g,
                this.n = this.curve.n,
                this.hash = e.hash,
                i(this.g.validate(), "Invalid curve"),
                i(this.g.mul(this.n).isInfinity(), "Invalid curve, G*N != O")
            }
            function s(e, t) {
                Object.defineProperty(r, e, {
                    configurable: !0,
                    enumerable: !0,
                    get: function() {
                        var n = new a(t);
                        return Object.defineProperty(r, e, {
                            configurable: !0,
                            enumerable: !0,
                            value: n
                        }),
                        n
                    }
                })
            }
            r.PresetCurve = a,
            s("p192", {
                type: "short",
                prime: "p192",
                p: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff",
                a: "ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc",
                b: "64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1",
                n: "ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831",
                hash: o().sha256,
                gRed: !1,
                g: ["188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012", "07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811"]
            }),
            s("p224", {
                type: "short",
                prime: "p224",
                p: "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001",
                a: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe",
                b: "b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4",
                n: "ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d",
                hash: o().sha256,
                gRed: !1,
                g: ["b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21", "bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34"]
            }),
            s("p256", {
                type: "short",
                prime: null,
                p: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff",
                a: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc",
                b: "5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b",
                n: "ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551",
                hash: o().sha256,
                gRed: !1,
                g: ["6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296", "4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5"]
            }),
            s("p384", {
                type: "short",
                prime: null,
                p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 ffffffff",
                a: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 fffffffc",
                b: "b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f 5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef",
                n: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 f4372ddf 581a0db2 48b0a77a ecec196a ccc52973",
                hash: o().sha384,
                gRed: !1,
                g: ["aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 5502f25d bf55296c 3a545e38 72760ab7", "3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 0a60b1ce 1d7e819d 7a431d7c 90ea0e5f"]
            }),
            s("p521", {
                type: "short",
                prime: null,
                p: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff",
                a: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffc",
                b: "00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b 99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd 3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00",
                n: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409",
                hash: o().sha512,
                gRed: !1,
                g: ["000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66", "00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 3fad0761 353c7086 a272c240 88be9476 9fd16650"]
            }),
            s("curve25519", {
                type: "mont",
                prime: "p25519",
                p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
                a: "76d06",
                b: "1",
                n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
                hash: o().sha256,
                gRed: !1,
                g: ["9"]
            }),
            s("ed25519", {
                type: "edwards",
                prime: "p25519",
                p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
                a: "-1",
                c: "1",
                d: "52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3",
                n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
                hash: o().sha256,
                gRed: !1,
                g: ["216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a", "6666666666666666666666666666666666666666666666666666666666666658"]
            });
            try {
                n = null.crash()
            } catch (e) {
                n = void 0
            }
            s("secp256k1", {
                type: "short",
                prime: "k256",
                p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f",
                a: "0",
                b: "7",
                n: "ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141",
                h: "1",
                hash: o().sha256,
                beta: "7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee",
                lambda: "5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72",
                basis: [{
                    a: "3086d221a7d46bcde86c90e49284eb15",
                    b: "-e4437ed6010e88286f547fa90abfe4c3"
                }, {
                    a: "114ca50f7a8e2f3f657c1108d9d44cfd8",
                    b: "3086d221a7d46bcde86c90e49284eb15"
                }],
                gRed: !1,
                g: ["79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798", "483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8", n]
            })
        });
        function x(e) {
            if (!(this instanceof x))
                return new x(e);
            this.hash = e.hash,
            this.predResist = !!e.predResist,
            this.outLen = this.hash.outSize,
            this.minEntropy = e.minEntropy || this.hash.hmacStrength,
            this._reseed = null,
            this.reseedInterval = null,
            this.K = null,
            this.V = null;
            var t = c.toArray(e.entropy, e.entropyEnc || "hex")
              , n = c.toArray(e.nonce, e.nonceEnc || "hex")
              , r = c.toArray(e.pers, e.persEnc || "hex");
            u(t.length >= this.minEntropy / 8, "Not enough entropy. Minimum is: " + this.minEntropy + " bits"),
            this._init(t, n, r)
        }
        x.prototype._init = function(e, t, n) {
            var r = e.concat(t).concat(n);
            this.K = Array(this.outLen / 8),
            this.V = Array(this.outLen / 8);
            for (var i = 0; i < this.V.length; i++)
                this.K[i] = 0,
                this.V[i] = 1;
            this._update(r),
            this._reseed = 1,
            this.reseedInterval = 281474976710656
        }
        ,
        x.prototype._hmac = function() {
            return new (o()).hmac(this.hash,this.K)
        }
        ,
        x.prototype._update = function(e) {
            var t = this._hmac().update(this.V).update([0]);
            e && (t = t.update(e)),
            this.K = t.digest(),
            this.V = this._hmac().update(this.V).digest(),
            e && (this.K = this._hmac().update(this.V).update([1]).update(e).digest(),
            this.V = this._hmac().update(this.V).digest())
        }
        ,
        x.prototype.reseed = function(e, t, n, r) {
            "string" != typeof t && (r = n,
            n = t,
            t = null),
            e = c.toArray(e, t),
            n = c.toArray(n, r),
            u(e.length >= this.minEntropy / 8, "Not enough entropy. Minimum is: " + this.minEntropy + " bits"),
            this._update(e.concat(n || [])),
            this._reseed = 1
        }
        ,
        x.prototype.generate = function(e, t, n, r) {
            if (this._reseed > this.reseedInterval)
                throw Error("Reseed is required");
            "string" != typeof t && (r = n,
            n = t,
            t = null),
            n && (n = c.toArray(n, r || "hex"),
            this._update(n));
            for (var i = []; i.length < e; )
                this.V = this._hmac().update(this.V).digest(),
                i = i.concat(this.V);
            var a = i.slice(0, e);
            return this._update(n),
            this._reseed++,
            c.encode(a, t)
        }
        ;
        var k = d.assert;
        function C(e, t) {
            this.ec = e,
            this.priv = null,
            this.pub = null,
            t.priv && this._importPrivate(t.priv, t.privEnc),
            t.pub && this._importPublic(t.pub, t.pubEnc)
        }
        C.fromPublic = function(e, t, n) {
            return t instanceof C ? t : new C(e,{
                pub: t,
                pubEnc: n
            })
        }
        ,
        C.fromPrivate = function(e, t, n) {
            return t instanceof C ? t : new C(e,{
                priv: t,
                privEnc: n
            })
        }
        ,
        C.prototype.validate = function() {
            var e = this.getPublic();
            return e.isInfinity() ? {
                result: !1,
                reason: "Invalid public key"
            } : e.validate() ? e.mul(this.ec.curve.n).isInfinity() ? {
                result: !0,
                reason: null
            } : {
                result: !1,
                reason: "Public key * N != O"
            } : {
                result: !1,
                reason: "Public key is not a point"
            }
        }
        ,
        C.prototype.getPublic = function(e, t) {
            return ("string" == typeof e && (t = e,
            e = null),
            this.pub || (this.pub = this.ec.g.mul(this.priv)),
            t) ? this.pub.encode(t, e) : this.pub
        }
        ,
        C.prototype.getPrivate = function(e) {
            return "hex" === e ? this.priv.toString(16, 2) : this.priv
        }
        ,
        C.prototype._importPrivate = function(e, t) {
            this.priv = new (i())(e,t || 16),
            this.priv = this.priv.umod(this.ec.curve.n)
        }
        ,
        C.prototype._importPublic = function(e, t) {
            if (e.x || e.y) {
                "mont" === this.ec.curve.type ? k(e.x, "Need x coordinate") : ("short" === this.ec.curve.type || "edwards" === this.ec.curve.type) && k(e.x && e.y, "Need both x and y coordinate"),
                this.pub = this.ec.curve.point(e.x, e.y);
                return
            }
            this.pub = this.ec.curve.decodePoint(e, t)
        }
        ,
        C.prototype.derive = function(e) {
            return e.validate() || k(e.validate(), "public point not validated"),
            e.mul(this.priv).getX()
        }
        ,
        C.prototype.sign = function(e, t, n) {
            return this.ec.sign(e, this, t, n)
        }
        ,
        C.prototype.verify = function(e, t) {
            return this.ec.verify(e, t, this)
        }
        ,
        C.prototype.inspect = function() {
            return "<Key priv: " + (this.priv && this.priv.toString(16, 2)) + " pub: " + (this.pub && this.pub.inspect()) + " >"
        }
        ;
        var _ = d.assert;
        function S(e, t) {
            if (e instanceof S)
                return e;
            this._importDER(e, t) || (_(e.r && e.s, "Signature without r or s"),
            this.r = new (i())(e.r,16),
            this.s = new (i())(e.s,16),
            void 0 === e.recoveryParam ? this.recoveryParam = null : this.recoveryParam = e.recoveryParam)
        }
        function I() {
            this.place = 0
        }
        function P(e, t) {
            var n = e[t.place++];
            if (!(128 & n))
                return n;
            var r = 15 & n;
            if (0 === r || r > 4)
                return !1;
            for (var i = 0, a = 0, o = t.place; a < r; a++,
            o++)
                i <<= 8,
                i |= e[o],
                i >>>= 0;
            return !(i <= 127) && (t.place = o,
            i)
        }
        function B(e) {
            for (var t = 0, n = e.length - 1; !e[t] && !(128 & e[t + 1]) && t < n; )
                t++;
            return 0 === t ? e : e.slice(t)
        }
        function O(e, t) {
            if (t < 128) {
                e.push(t);
                return
            }
            var n = 1 + (Math.log(t) / Math.LN2 >>> 3);
            for (e.push(128 | n); --n; )
                e.push(t >>> (n << 3) & 255);
            e.push(t)
        }
        S.prototype._importDER = function(e, t) {
            e = d.toArray(e, t);
            var n = new I;
            if (48 !== e[n.place++])
                return !1;
            var r = P(e, n);
            if (!1 === r || r + n.place !== e.length || 2 !== e[n.place++])
                return !1;
            var a = P(e, n);
            if (!1 === a)
                return !1;
            var o = e.slice(n.place, a + n.place);
            if (n.place += a,
            2 !== e[n.place++])
                return !1;
            var s = P(e, n);
            if (!1 === s || e.length !== s + n.place)
                return !1;
            var u = e.slice(n.place, s + n.place);
            if (0 === o[0]) {
                if (!(128 & o[1]))
                    return !1;
                o = o.slice(1)
            }
            if (0 === u[0]) {
                if (!(128 & u[1]))
                    return !1;
                u = u.slice(1)
            }
            return this.r = new (i())(o),
            this.s = new (i())(u),
            this.recoveryParam = null,
            !0
        }
        ,
        S.prototype.toDER = function(e) {
            var t = this.r.toArray()
              , n = this.s.toArray();
            for (128 & t[0] && (t = [0].concat(t)),
            128 & n[0] && (n = [0].concat(n)),
            t = B(t),
            n = B(n); !n[0] && !(128 & n[1]); )
                n = n.slice(1);
            var r = [2];
            O(r, t.length),
            (r = r.concat(t)).push(2),
            O(r, n.length);
            var i = r.concat(n)
              , a = [48];
            return O(a, i.length),
            a = a.concat(i),
            d.encode(a, e)
        }
        ;
        var N = function() {
            throw Error("unsupported")
        }
          , R = d.assert;
        function F(e) {
            if (!(this instanceof F))
                return new F(e);
            "string" == typeof e && (R(Object.prototype.hasOwnProperty.call(A, e), "Unknown curve " + e),
            e = A[e]),
            e instanceof A.PresetCurve && (e = {
                curve: e
            }),
            this.curve = e.curve.curve,
            this.n = this.curve.n,
            this.nh = this.n.ushrn(1),
            this.g = this.curve.g,
            this.g = e.curve.g,
            this.g.precompute(e.curve.n.bitLength() + 1),
            this.hash = e.hash || e.curve.hash
        }
        F.prototype.keyPair = function(e) {
            return new C(this,e)
        }
        ,
        F.prototype.keyFromPrivate = function(e, t) {
            return C.fromPrivate(this, e, t)
        }
        ,
        F.prototype.keyFromPublic = function(e, t) {
            return C.fromPublic(this, e, t)
        }
        ,
        F.prototype.genKeyPair = function(e) {
            e || (e = {});
            for (var t = new x({
                hash: this.hash,
                pers: e.pers,
                persEnc: e.persEnc || "utf8",
                entropy: e.entropy || N(this.hash.hmacStrength),
                entropyEnc: e.entropy && e.entropyEnc || "utf8",
                nonce: this.n.toArray()
            }), n = this.n.byteLength(), r = this.n.sub(new (i())(2)); ; ) {
                var a = new (i())(t.generate(n));
                if (!(a.cmp(r) > 0))
                    return a.iaddn(1),
                    this.keyFromPrivate(a)
            }
        }
        ,
        F.prototype._truncateToN = function(e, t) {
            var n = 8 * e.byteLength() - this.n.bitLength();
            return (n > 0 && (e = e.ushrn(n)),
            !t && e.cmp(this.n) >= 0) ? e.sub(this.n) : e
        }
        ,
        F.prototype.sign = function(e, t, n, r) {
            "object" == typeof n && (r = n,
            n = null),
            r || (r = {}),
            t = this.keyFromPrivate(t, n),
            e = this._truncateToN(new (i())(e,16));
            for (var a = this.n.byteLength(), o = t.getPrivate().toArray("be", a), s = e.toArray("be", a), u = new x({
                hash: this.hash,
                entropy: o,
                nonce: s,
                pers: r.pers,
                persEnc: r.persEnc || "utf8"
            }), l = this.n.sub(new (i())(1)), c = 0; ; c++) {
                var d = r.k ? r.k(c) : new (i())(u.generate(this.n.byteLength()));
                if (!(0 >= (d = this._truncateToN(d, !0)).cmpn(1) || d.cmp(l) >= 0)) {
                    var p = this.g.mul(d);
                    if (!p.isInfinity()) {
                        var f = p.getX()
                          , h = f.umod(this.n);
                        if (0 !== h.cmpn(0)) {
                            var m = d.invm(this.n).mul(h.mul(t.getPrivate()).iadd(e));
                            if (0 !== (m = m.umod(this.n)).cmpn(0)) {
                                var y = (p.getY().isOdd() ? 1 : 0) | (0 !== f.cmp(h) ? 2 : 0);
                                return r.canonical && m.cmp(this.nh) > 0 && (m = this.n.sub(m),
                                y ^= 1),
                                new S({
                                    r: h,
                                    s: m,
                                    recoveryParam: y
                                })
                            }
                        }
                    }
                }
            }
        }
        ,
        F.prototype.verify = function(e, t, n, r) {
            e = this._truncateToN(new (i())(e,16)),
            n = this.keyFromPublic(n, r);
            var a, o = (t = new S(t,"hex")).r, s = t.s;
            if (0 > o.cmpn(1) || o.cmp(this.n) >= 0 || 0 > s.cmpn(1) || s.cmp(this.n) >= 0)
                return !1;
            var u = s.invm(this.n)
              , l = u.mul(e).umod(this.n)
              , c = u.mul(o).umod(this.n);
            return this.curve._maxwellTrick ? !(a = this.g.jmulAdd(l, n.getPublic(), c)).isInfinity() && a.eqXToP(o) : !(a = this.g.mulAdd(l, n.getPublic(), c)).isInfinity() && 0 === a.getX().umod(this.n).cmp(o)
        }
        ,
        F.prototype.recoverPubKey = function(e, t, n, r) {
            R((3 & n) === n, "The recovery param is more than two bits"),
            t = new S(t,r);
            var a = this.n
              , o = new (i())(e)
              , s = t.r
              , u = t.s
              , l = 1 & n
              , c = n >> 1;
            if (s.cmp(this.curve.p.umod(this.curve.n)) >= 0 && c)
                throw Error("Unable to find sencond key candinate");
            s = c ? this.curve.pointFromX(s.add(this.curve.n), l) : this.curve.pointFromX(s, l);
            var d = t.r.invm(a)
              , p = a.sub(o).mul(d).umod(a)
              , f = u.mul(d).umod(a);
            return this.g.mulAdd(p, s, f)
        }
        ,
        F.prototype.getKeyRecoveryParam = function(e, t, n, r) {
            if (null !== (t = new S(t,r)).recoveryParam)
                return t.recoveryParam;
            for (var i, a = 0; a < 4; a++) {
                try {
                    i = this.recoverPubKey(e, t, a)
                } catch (e) {
                    continue
                }
                if (i.eq(n))
                    return a
            }
            throw Error("Unable to find valid recovery factor")
        }
        ;
        var D = s(function(e, t) {
            var n = t;
            n.version = "6.5.4",
            n.utils = d,
            n.rand = function() {
                throw Error("unsupported")
            }
            ,
            n.curve = E,
            n.curves = A,
            n.ec = F,
            n.eddsa = null
        }).ec
          , M = n(70367)
          , L = n(28609)
          , U = n(61941);
        let q = new U.Logger("signing-key/5.7.0")
          , j = null;
        function $() {
            return j || (j = new D("secp256k1")),
            j
        }
        class Z {
            constructor(e) {
                (0,
                L.defineReadOnly)(this, "curve", "secp256k1"),
                (0,
                L.defineReadOnly)(this, "privateKey", (0,
                M.hexlify)(e)),
                32 !== (0,
                M.hexDataLength)(this.privateKey) && q.throwArgumentError("invalid private key", "privateKey", "[[ REDACTED ]]");
                let t = $().keyFromPrivate((0,
                M.arrayify)(this.privateKey));
                (0,
                L.defineReadOnly)(this, "publicKey", "0x" + t.getPublic(!1, "hex")),
                (0,
                L.defineReadOnly)(this, "compressedPublicKey", "0x" + t.getPublic(!0, "hex")),
                (0,
                L.defineReadOnly)(this, "_isSigningKey", !0)
            }
            _addPoint(e) {
                let t = $().keyFromPublic((0,
                M.arrayify)(this.publicKey))
                  , n = $().keyFromPublic((0,
                M.arrayify)(e));
                return "0x" + t.pub.add(n.pub).encodeCompressed("hex")
            }
            signDigest(e) {
                let t = $().keyFromPrivate((0,
                M.arrayify)(this.privateKey))
                  , n = (0,
                M.arrayify)(e);
                32 !== n.length && q.throwArgumentError("bad digest length", "digest", e);
                let r = t.sign(n, {
                    canonical: !0
                });
                return (0,
                M.splitSignature)({
                    recoveryParam: r.recoveryParam,
                    r: (0,
                    M.hexZeroPad)("0x" + r.r.toString(16), 32),
                    s: (0,
                    M.hexZeroPad)("0x" + r.s.toString(16), 32)
                })
            }
            computeSharedSecret(e) {
                let t = $().keyFromPrivate((0,
                M.arrayify)(this.privateKey))
                  , n = $().keyFromPublic((0,
                M.arrayify)(G(e)));
                return (0,
                M.hexZeroPad)("0x" + t.derive(n.getPublic()).toString(16), 32)
            }
            static isSigningKey(e) {
                return !!(e && e._isSigningKey)
            }
        }
        function H(e, t) {
            let n = (0,
            M.splitSignature)(t)
              , r = {
                r: (0,
                M.arrayify)(n.r),
                s: (0,
                M.arrayify)(n.s)
            };
            return "0x" + $().recoverPubKey((0,
            M.arrayify)(e), r, n.recoveryParam).encode("hex", !1)
        }
        function G(e, t) {
            let n = (0,
            M.arrayify)(e);
            if (32 === n.length) {
                let e = new Z(n);
                return t ? "0x" + $().keyFromPrivate(n).getPublic(!0, "hex") : e.publicKey
            }
            return 33 === n.length ? t ? (0,
            M.hexlify)(n) : "0x" + $().keyFromPublic(n).getPublic(!1, "hex") : 65 === n.length ? t ? "0x" + $().keyFromPublic(n).getPublic(!0, "hex") : (0,
            M.hexlify)(n) : q.throwArgumentError("invalid public or private key", "key", "[REDACTED]")
        }
    },
    3553: function(e, t, n) {
        "use strict";
        n.r(t),
        n.d(t, {
            keccak256: function() {
                return h
            },
            pack: function() {
                return f
            },
            sha256: function() {
                return m
            }
        });
        var r = n(13004)
          , i = n(70367)
          , a = n(92381)
          , o = n(15549)
          , s = n(4082)
          , u = n(61941);
        let l = RegExp("^bytes([0-9]+)$")
          , c = RegExp("^(u?int)([0-9]*)$")
          , d = RegExp("^(.*)\\[([0-9]*)\\]$")
          , p = new u.Logger("solidity/5.7.0");
        function f(e, t) {
            e.length != t.length && p.throwArgumentError("wrong number of values; expected ${ types.length }", "values", t);
            let n = [];
            return e.forEach(function(e, a) {
                n.push(function e(t, n, a) {
                    switch (t) {
                    case "address":
                        if (a)
                            return (0,
                            i.zeroPad)(n, 32);
                        return (0,
                        i.arrayify)(n);
                    case "string":
                        return (0,
                        s.Y0)(n);
                    case "bytes":
                        return (0,
                        i.arrayify)(n);
                    case "bool":
                        if (n = n ? "0x01" : "0x00",
                        a)
                            return (0,
                            i.zeroPad)(n, 32);
                        return (0,
                        i.arrayify)(n)
                    }
                    let o = t.match(c);
                    if (o) {
                        let e = parseInt(o[2] || "256");
                        return (o[2] && String(e) !== o[2] || e % 8 != 0 || 0 === e || e > 256) && p.throwArgumentError("invalid number type", "type", t),
                        a && (e = 256),
                        n = r.O$.from(n).toTwos(e),
                        (0,
                        i.zeroPad)(n, e / 8)
                    }
                    if (o = t.match(l)) {
                        let e = parseInt(o[1]);
                        return ((String(e) !== o[1] || 0 === e || e > 32) && p.throwArgumentError("invalid bytes type", "type", t),
                        (0,
                        i.arrayify)(n).byteLength !== e && p.throwArgumentError(`invalid value for ${t}`, "value", n),
                        a) ? (0,
                        i.arrayify)((n + "0000000000000000000000000000000000000000000000000000000000000000").substring(0, 66)) : n
                    }
                    if ((o = t.match(d)) && Array.isArray(n)) {
                        let r = o[1]
                          , a = parseInt(o[2] || String(n.length));
                        a != n.length && p.throwArgumentError(`invalid array length for ${t}`, "value", n);
                        let s = [];
                        return n.forEach(function(t) {
                            s.push(e(r, t, !0))
                        }),
                        (0,
                        i.concat)(s)
                    }
                    return p.throwArgumentError("invalid type", "type", t)
                }(e, t[a]))
            }),
            (0,
            i.hexlify)((0,
            i.concat)(n))
        }
        function h(e, t) {
            return (0,
            a.keccak256)(f(e, t))
        }
        function m(e, t) {
            return (0,
            o.JQ)(f(e, t))
        }
    },
    43490: function(e, t, n) {
        "use strict";
        n.d(t, {
            F: function() {
                return s
            },
            s: function() {
                return o
            }
        });
        var r = n(64943)
          , i = n(70367)
          , a = n(4082);
        function o(e) {
            let t = (0,
            a.Y0)(e);
            if (t.length > 31)
                throw Error("bytes32 string must be less than 32 bytes");
            return (0,
            i.hexlify)((0,
            i.concat)([t, r.R]).slice(0, 32))
        }
        function s(e) {
            let t = (0,
            i.arrayify)(e);
            if (32 !== t.length)
                throw Error("invalid bytes32 - not 32 bytes long");
            if (0 !== t[31])
                throw Error("invalid bytes32 string - no null terminator");
            let n = 31;
            for (; 0 === t[n - 1]; )
                n--;
            return (0,
            a.ZN)(t.slice(0, n))
        }
    },
    27688: function(e, t, n) {
        "use strict";
        n.d(t, {
            Ll: function() {
                return h
            }
        });
        var r = n(4082);
        function i(e, t) {
            t || (t = function(e) {
                return [parseInt(e, 16)]
            }
            );
            let n = 0
              , r = {};
            return e.split(",").forEach(e=>{
                let i = e.split(":");
                r[n += parseInt(i[0], 16)] = t(i[1])
            }
            ),
            r
        }
        function a(e) {
            let t = 0;
            return e.split(",").map(e=>{
                let n = e.split("-");
                return 1 === n.length ? n[1] = "0" : "" === n[1] && (n[1] = "1"),
                {
                    l: t + parseInt(n[0], 16),
                    h: t = parseInt(n[1], 16)
                }
            }
            )
        }
        function o(e, t) {
            let n = 0;
            for (let r = 0; r < t.length; r++) {
                let i = t[r];
                if (e >= (n += i.l) && e <= n + i.h && (e - n) % (i.d || 1) == 0) {
                    if (i.e && -1 !== i.e.indexOf(e - n))
                        continue;
                    return i
                }
            }
            return null
        }
        let s = a("221,13-1b,5f-,40-10,51-f,11-3,3-3,2-2,2-4,8,2,15,2d,28-8,88,48,27-,3-5,11-20,27-,8,28,3-5,12,18,b-a,1c-4,6-16,2-d,2-2,2,1b-4,17-9,8f-,10,f,1f-2,1c-34,33-14e,4,36-,13-,6-2,1a-f,4,9-,3-,17,8,2-2,5-,2,8-,3-,4-8,2-3,3,6-,16-6,2-,7-3,3-,17,8,3,3,3-,2,6-3,3-,4-a,5,2-6,10-b,4,8,2,4,17,8,3,6-,b,4,4-,2-e,2-4,b-10,4,9-,3-,17,8,3-,5-,9-2,3-,4-7,3-3,3,4-3,c-10,3,7-2,4,5-2,3,2,3-2,3-2,4-2,9,4-3,6-2,4,5-8,2-e,d-d,4,9,4,18,b,6-3,8,4,5-6,3-8,3-3,b-11,3,9,4,18,b,6-3,8,4,5-6,3-6,2,3-3,b-11,3,9,4,18,11-3,7-,4,5-8,2-7,3-3,b-11,3,13-2,19,a,2-,8-2,2-3,7,2,9-11,4-b,3b-3,1e-24,3,2-,3,2-,2-5,5,8,4,2,2-,3,e,4-,6,2,7-,b-,3-21,49,23-5,1c-3,9,25,10-,2-2f,23,6,3,8-2,5-5,1b-45,27-9,2a-,2-3,5b-4,45-4,53-5,8,40,2,5-,8,2,5-,28,2,5-,20,2,5-,8,2,5-,8,8,18,20,2,5-,8,28,14-5,1d-22,56-b,277-8,1e-2,52-e,e,8-a,18-8,15-b,e,4,3-b,5e-2,b-15,10,b-5,59-7,2b-555,9d-3,5b-5,17-,7-,27-,7-,9,2,2,2,20-,36,10,f-,7,14-,4,a,54-3,2-6,6-5,9-,1c-10,13-1d,1c-14,3c-,10-6,32-b,240-30,28-18,c-14,a0,115-,3,66-,b-76,5,5-,1d,24,2,5-2,2,8-,35-2,19,f-10,1d-3,311-37f,1b,5a-b,d7-19,d-3,41,57-,68-4,29-3,5f,29-37,2e-2,25-c,2c-2,4e-3,30,78-3,64-,20,19b7-49,51a7-59,48e-2,38-738,2ba5-5b,222f-,3c-94,8-b,6-4,1b,6,2,3,3,6d-20,16e-f,41-,37-7,2e-2,11-f,5-b,18-,b,14,5-3,6,88-,2,bf-2,7-,7-,7-,4-2,8,8-9,8-2ff,20,5-b,1c-b4,27-,27-cbb1,f7-9,28-2,b5-221,56,48,3-,2-,3-,5,d,2,5,3,42,5-,9,8,1d,5,6,2-2,8,153-3,123-3,33-27fd,a6da-5128,21f-5df,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3,2-1d,61-ff7d")
          , u = "ad,34f,1806,180b,180c,180d,200b,200c,200d,2060,feff".split(",").map(e=>parseInt(e, 16))
          , l = [{
            h: 25,
            s: 32,
            l: 65
        }, {
            h: 30,
            s: 32,
            e: [23],
            l: 127
        }, {
            h: 54,
            s: 1,
            e: [48],
            l: 64,
            d: 2
        }, {
            h: 14,
            s: 1,
            l: 57,
            d: 2
        }, {
            h: 44,
            s: 1,
            l: 17,
            d: 2
        }, {
            h: 10,
            s: 1,
            e: [2, 6, 8],
            l: 61,
            d: 2
        }, {
            h: 16,
            s: 1,
            l: 68,
            d: 2
        }, {
            h: 84,
            s: 1,
            e: [18, 24, 66],
            l: 19,
            d: 2
        }, {
            h: 26,
            s: 32,
            e: [17],
            l: 435
        }, {
            h: 22,
            s: 1,
            l: 71,
            d: 2
        }, {
            h: 15,
            s: 80,
            l: 40
        }, {
            h: 31,
            s: 32,
            l: 16
        }, {
            h: 32,
            s: 1,
            l: 80,
            d: 2
        }, {
            h: 52,
            s: 1,
            l: 42,
            d: 2
        }, {
            h: 12,
            s: 1,
            l: 55,
            d: 2
        }, {
            h: 40,
            s: 1,
            e: [38],
            l: 15,
            d: 2
        }, {
            h: 14,
            s: 1,
            l: 48,
            d: 2
        }, {
            h: 37,
            s: 48,
            l: 49
        }, {
            h: 148,
            s: 1,
            l: 6351,
            d: 2
        }, {
            h: 88,
            s: 1,
            l: 160,
            d: 2
        }, {
            h: 15,
            s: 16,
            l: 704
        }, {
            h: 25,
            s: 26,
            l: 854
        }, {
            h: 25,
            s: 32,
            l: 55915
        }, {
            h: 37,
            s: 40,
            l: 1247
        }, {
            h: 25,
            s: -119711,
            l: 53248
        }, {
            h: 25,
            s: -119763,
            l: 52
        }, {
            h: 25,
            s: -119815,
            l: 52
        }, {
            h: 25,
            s: -119867,
            e: [1, 4, 5, 7, 8, 11, 12, 17],
            l: 52
        }, {
            h: 25,
            s: -119919,
            l: 52
        }, {
            h: 24,
            s: -119971,
            e: [2, 7, 8, 17],
            l: 52
        }, {
            h: 24,
            s: -120023,
            e: [2, 7, 13, 15, 16, 17],
            l: 52
        }, {
            h: 25,
            s: -120075,
            l: 52
        }, {
            h: 25,
            s: -120127,
            l: 52
        }, {
            h: 25,
            s: -120179,
            l: 52
        }, {
            h: 25,
            s: -120231,
            l: 52
        }, {
            h: 25,
            s: -120283,
            l: 52
        }, {
            h: 25,
            s: -120335,
            l: 52
        }, {
            h: 24,
            s: -119543,
            e: [17],
            l: 56
        }, {
            h: 24,
            s: -119601,
            e: [17],
            l: 58
        }, {
            h: 24,
            s: -119659,
            e: [17],
            l: 58
        }, {
            h: 24,
            s: -119717,
            e: [17],
            l: 58
        }, {
            h: 24,
            s: -119775,
            e: [17],
            l: 58
        }]
          , c = i("b5:3bc,c3:ff,7:73,2:253,5:254,3:256,1:257,5:259,1:25b,3:260,1:263,2:269,1:268,5:26f,1:272,2:275,7:280,3:283,5:288,3:28a,1:28b,5:292,3f:195,1:1bf,29:19e,125:3b9,8b:3b2,1:3b8,1:3c5,3:3c6,1:3c0,1a:3ba,1:3c1,1:3c3,2:3b8,1:3b5,1bc9:3b9,1c:1f76,1:1f77,f:1f7a,1:1f7b,d:1f78,1:1f79,1:1f7c,1:1f7d,107:63,5:25b,4:68,1:68,1:68,3:69,1:69,1:6c,3:6e,4:70,1:71,1:72,1:72,1:72,7:7a,2:3c9,2:7a,2:6b,1:e5,1:62,1:63,3:65,1:66,2:6d,b:3b3,1:3c0,6:64,1b574:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3")
          , d = i("179:1,2:1,2:1,5:1,2:1,a:4f,a:1,8:1,2:1,2:1,3:1,5:1,3:1,4:1,2:1,3:1,4:1,8:2,1:1,2:2,1:1,2:2,27:2,195:26,2:25,1:25,1:25,2:40,2:3f,1:3f,33:1,11:-6,1:-9,1ac7:-3a,6d:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,b:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,c:-8,2:-8,2:-8,2:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,49:-8,1:-8,1:-4a,1:-4a,d:-56,1:-56,1:-56,1:-56,d:-8,1:-8,f:-8,1:-8,3:-7")
          , p = i("df:00730073,51:00690307,19:02BC006E,a7:006A030C,18a:002003B9,16:03B903080301,20:03C503080301,1d7:05650582,190f:00680331,1:00740308,1:0077030A,1:0079030A,1:006102BE,b6:03C50313,2:03C503130300,2:03C503130301,2:03C503130342,2a:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,3:1F7003B9,1:03B103B9,1:03AC03B9,2:03B10342,1:03B1034203B9,5:03B103B9,6:1F7403B9,1:03B703B9,1:03AE03B9,2:03B70342,1:03B7034203B9,5:03B703B9,6:03B903080300,1:03B903080301,3:03B90342,1:03B903080342,b:03C503080300,1:03C503080301,1:03C10313,2:03C50342,1:03C503080342,b:1F7C03B9,1:03C903B9,1:03CE03B9,2:03C90342,1:03C9034203B9,5:03C903B9,ac:00720073,5b:00B00063,6:00B00066,d:006E006F,a:0073006D,1:00740065006C,1:0074006D,124f:006800700061,2:00610075,2:006F0076,b:00700061,1:006E0061,1:03BC0061,1:006D0061,1:006B0061,1:006B0062,1:006D0062,1:00670062,3:00700066,1:006E0066,1:03BC0066,4:0068007A,1:006B0068007A,1:006D0068007A,1:00670068007A,1:00740068007A,15:00700061,1:006B00700061,1:006D00700061,1:006700700061,8:00700076,1:006E0076,1:03BC0076,1:006D0076,1:006B0076,1:006D0076,1:00700077,1:006E0077,1:03BC0077,1:006D0077,1:006B0077,1:006D0077,1:006B03C9,1:006D03C9,2:00620071,3:00632215006B0067,1:0063006F002E,1:00640062,1:00670079,2:00680070,2:006B006B,1:006B006D,9:00700068,2:00700070006D,1:00700072,2:00730076,1:00770062,c723:00660066,1:00660069,1:0066006C,1:006600660069,1:00660066006C,1:00730074,1:00730074,d:05740576,1:05740565,1:0574056B,1:057E0576,1:0574056D", function(e) {
            if (e.length % 4 != 0)
                throw Error("bad data");
            let t = [];
            for (let n = 0; n < e.length; n += 4)
                t.push(parseInt(e.substring(n, n + 4), 16));
            return t
        })
          , f = a("80-20,2a0-,39c,32,f71,18e,7f2-f,19-7,30-4,7-5,f81-b,5,a800-20ff,4d1-1f,110,fa-6,d174-7,2e84-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,2,1f-5f,ff7f-20001");
        function h(e) {
            if (e.match(/^[a-z0-9-]*$/i) && e.length <= 59)
                return e.toLowerCase();
            let t = (0,
            r.XL)(e);
            t = t.map(e=>u.indexOf(e) >= 0 || e >= 65024 && e <= 65039 ? [] : function(e) {
                let t = o(e, l);
                if (t)
                    return [e + t.s];
                let n = c[e];
                if (n)
                    return n;
                let r = d[e];
                return r ? [e + r[0]] : p[e] || null
            }(e) || [e]).reduce((e,t)=>(t.forEach(t=>{
                e.push(t)
            }
            ),
            e), []),
            (t = (0,
            r.XL)((0,
            r.uu)(t), r.Uj.NFKC)).forEach(e=>{
                if (o(e, f))
                    throw Error("STRINGPREP_CONTAINS_PROHIBITED")
            }
            ),
            t.forEach(e=>{
                if (o(e, s))
                    throw Error("STRINGPREP_CONTAINS_UNASSIGNED")
            }
            );
            let n = (0,
            r.uu)(t);
            if ("-" === n.substring(0, 1) || "--" === n.substring(2, 4) || "-" === n.substring(n.length - 1))
                throw Error("invalid hyphen");
            return n
        }
    },
    40165: function(e, t, n) {
        "use strict";
        n.r(t),
        n.d(t, {
            UnicodeNormalizationForm: function() {
                return a.Uj
            },
            Utf8ErrorFuncs: function() {
                return a.te
            },
            Utf8ErrorReason: function() {
                return a.Uw
            },
            _toEscapedUtf8String: function() {
                return a.U$
            },
            formatBytes32String: function() {
                return r.s
            },
            nameprep: function() {
                return i.Ll
            },
            parseBytes32String: function() {
                return r.F
            },
            toUtf8Bytes: function() {
                return a.Y0
            },
            toUtf8CodePoints: function() {
                return a.XL
            },
            toUtf8String: function() {
                return a.ZN
            }
        });
        var r = n(43490)
          , i = n(27688)
          , a = n(4082)
    },
    4082: function(e, t, n) {
        "use strict";
        n.d(t, {
            Uj: function() {
                return a
            },
            te: function() {
                return d
            },
            Uw: function() {
                return o
            },
            U$: function() {
                return m
            },
            uu: function() {
                return y
            },
            Y0: function() {
                return f
            },
            XL: function() {
                return b
            },
            ZN: function() {
                return g
            }
        });
        var r, i, a, o, s = n(70367), u = n(61941);
        let l = new u.Logger("strings/5.7.0");
        function c(e, t, n, r, i) {
            if (e === o.BAD_PREFIX || e === o.UNEXPECTED_CONTINUE) {
                let e = 0;
                for (let r = t + 1; r < n.length && n[r] >> 6 == 2; r++)
                    e++;
                return e
            }
            return e === o.OVERRUN ? n.length - t - 1 : 0
        }
        (r = a || (a = {})).current = "",
        r.NFC = "NFC",
        r.NFD = "NFD",
        r.NFKC = "NFKC",
        r.NFKD = "NFKD",
        (i = o || (o = {})).UNEXPECTED_CONTINUE = "unexpected continuation byte",
        i.BAD_PREFIX = "bad codepoint prefix",
        i.OVERRUN = "string overrun",
        i.MISSING_CONTINUE = "missing continuation byte",
        i.OUT_OF_RANGE = "out of UTF-8 range",
        i.UTF16_SURROGATE = "UTF-16 surrogate",
        i.OVERLONG = "overlong representation";
        let d = Object.freeze({
            error: function(e, t, n, r, i) {
                return l.throwArgumentError(`invalid codepoint at offset ${t}; ${e}`, "bytes", n)
            },
            ignore: c,
            replace: function(e, t, n, r, i) {
                return e === o.OVERLONG ? (r.push(i),
                0) : (r.push(65533),
                c(e, t, n, r, i))
            }
        });
        function p(e, t) {
            null == t && (t = d.error),
            e = (0,
            s.arrayify)(e);
            let n = []
              , r = 0;
            for (; r < e.length; ) {
                let i = e[r++];
                if (i >> 7 == 0) {
                    n.push(i);
                    continue
                }
                let a = null
                  , s = null;
                if ((224 & i) == 192)
                    a = 1,
                    s = 127;
                else if ((240 & i) == 224)
                    a = 2,
                    s = 2047;
                else if ((248 & i) == 240)
                    a = 3,
                    s = 65535;
                else {
                    (192 & i) == 128 ? r += t(o.UNEXPECTED_CONTINUE, r - 1, e, n) : r += t(o.BAD_PREFIX, r - 1, e, n);
                    continue
                }
                if (r - 1 + a >= e.length) {
                    r += t(o.OVERRUN, r - 1, e, n);
                    continue
                }
                let u = i & (1 << 8 - a - 1) - 1;
                for (let i = 0; i < a; i++) {
                    let i = e[r];
                    if ((192 & i) != 128) {
                        r += t(o.MISSING_CONTINUE, r, e, n),
                        u = null;
                        break
                    }
                    u = u << 6 | 63 & i,
                    r++
                }
                if (null !== u) {
                    if (u > 1114111) {
                        r += t(o.OUT_OF_RANGE, r - 1 - a, e, n, u);
                        continue
                    }
                    if (u >= 55296 && u <= 57343) {
                        r += t(o.UTF16_SURROGATE, r - 1 - a, e, n, u);
                        continue
                    }
                    if (u <= s) {
                        r += t(o.OVERLONG, r - 1 - a, e, n, u);
                        continue
                    }
                    n.push(u)
                }
            }
            return n
        }
        function f(e, t=a.current) {
            t != a.current && (l.checkNormalize(),
            e = e.normalize(t));
            let n = [];
            for (let t = 0; t < e.length; t++) {
                let r = e.charCodeAt(t);
                if (r < 128)
                    n.push(r);
                else if (r < 2048)
                    n.push(r >> 6 | 192),
                    n.push(63 & r | 128);
                else if ((64512 & r) == 55296) {
                    t++;
                    let i = e.charCodeAt(t);
                    if (t >= e.length || (64512 & i) != 56320)
                        throw Error("invalid utf-8 string");
                    let a = 65536 + ((1023 & r) << 10) + (1023 & i);
                    n.push(a >> 18 | 240),
                    n.push(a >> 12 & 63 | 128),
                    n.push(a >> 6 & 63 | 128),
                    n.push(63 & a | 128)
                } else
                    n.push(r >> 12 | 224),
                    n.push(r >> 6 & 63 | 128),
                    n.push(63 & r | 128)
            }
            return (0,
            s.arrayify)(n)
        }
        function h(e) {
            let t = "0000" + e.toString(16);
            return "\\u" + t.substring(t.length - 4)
        }
        function m(e, t) {
            return '"' + p(e, t).map(e=>{
                if (e < 256) {
                    switch (e) {
                    case 8:
                        return "\\b";
                    case 9:
                        return "\\t";
                    case 10:
                        return "\\n";
                    case 13:
                        return "\\r";
                    case 34:
                        return '\\"';
                    case 92:
                        return "\\\\"
                    }
                    if (e >= 32 && e < 127)
                        return String.fromCharCode(e)
                }
                return e <= 65535 ? h(e) : h(((e -= 65536) >> 10 & 1023) + 55296) + h((1023 & e) + 56320)
            }
            ).join("") + '"'
        }
        function y(e) {
            return e.map(e=>e <= 65535 ? String.fromCharCode(e) : String.fromCharCode(((e -= 65536) >> 10 & 1023) + 55296, (1023 & e) + 56320)).join("")
        }
        function g(e, t) {
            return y(p(e, t))
        }
        function b(e, t=a.current) {
            return p(f(e, t))
        }
    },
    38593: function(e, t, n) {
        "use strict";
        n.r(t),
        n.d(t, {
            TransactionTypes: function() {
                return i
            },
            accessListify: function() {
                return A
            },
            computeAddress: function() {
                return v
            },
            parse: function() {
                return I
            },
            recoverAddress: function() {
                return w
            },
            serialize: function() {
                return _
            }
        });
        var r, i, a = n(60727), o = n(13004), s = n(70367), u = n(84668), l = n(92381), c = n(28609), d = n(90634), p = n(47770), f = n(61941);
        let h = new f.Logger("transactions/5.7.0");
        function m(e) {
            return "0x" === e ? null : (0,
            a.getAddress)(e)
        }
        function y(e) {
            return "0x" === e ? u._Y : o.O$.from(e)
        }
        (r = i || (i = {}))[r.legacy = 0] = "legacy",
        r[r.eip2930 = 1] = "eip2930",
        r[r.eip1559 = 2] = "eip1559";
        let g = [{
            name: "nonce",
            maxLength: 32,
            numeric: !0
        }, {
            name: "gasPrice",
            maxLength: 32,
            numeric: !0
        }, {
            name: "gasLimit",
            maxLength: 32,
            numeric: !0
        }, {
            name: "to",
            length: 20
        }, {
            name: "value",
            maxLength: 32,
            numeric: !0
        }, {
            name: "data"
        }]
          , b = {
            chainId: !0,
            data: !0,
            gasLimit: !0,
            gasPrice: !0,
            nonce: !0,
            to: !0,
            type: !0,
            value: !0
        };
        function v(e) {
            let t = (0,
            p.computePublicKey)(e);
            return (0,
            a.getAddress)((0,
            s.hexDataSlice)((0,
            l.keccak256)((0,
            s.hexDataSlice)(t, 1)), 12))
        }
        function w(e, t) {
            return v((0,
            p.recoverPublicKey)((0,
            s.arrayify)(e), t))
        }
        function T(e, t) {
            let n = (0,
            s.stripZeros)(o.O$.from(e).toHexString());
            return n.length > 32 && h.throwArgumentError("invalid length for " + t, "transaction:" + t, e),
            n
        }
        function E(e, t) {
            return {
                address: (0,
                a.getAddress)(e),
                storageKeys: (t || []).map((t,n)=>(32 !== (0,
                s.hexDataLength)(t) && h.throwArgumentError("invalid access list storageKey", `accessList[${e}:${n}]`, t),
                t.toLowerCase()))
            }
        }
        function A(e) {
            if (Array.isArray(e))
                return e.map((e,t)=>Array.isArray(e) ? (e.length > 2 && h.throwArgumentError("access list expected to be [ address, storageKeys[] ]", `value[${t}]`, e),
                E(e[0], e[1])) : E(e.address, e.storageKeys));
            let t = Object.keys(e).map(t=>{
                let n = e[t].reduce((e,t)=>(e[t] = !0,
                e), {});
                return E(t, Object.keys(n).sort())
            }
            );
            return t.sort((e,t)=>e.address.localeCompare(t.address)),
            t
        }
        function x(e) {
            return A(e).map(e=>[e.address, e.storageKeys])
        }
        function k(e, t) {
            if (null != e.gasPrice) {
                let t = o.O$.from(e.gasPrice)
                  , n = o.O$.from(e.maxFeePerGas || 0);
                t.eq(n) || h.throwArgumentError("mismatch EIP-1559 gasPrice != maxFeePerGas", "tx", {
                    gasPrice: t,
                    maxFeePerGas: n
                })
            }
            let n = [T(e.chainId || 0, "chainId"), T(e.nonce || 0, "nonce"), T(e.maxPriorityFeePerGas || 0, "maxPriorityFeePerGas"), T(e.maxFeePerGas || 0, "maxFeePerGas"), T(e.gasLimit || 0, "gasLimit"), null != e.to ? (0,
            a.getAddress)(e.to) : "0x", T(e.value || 0, "value"), e.data || "0x", x(e.accessList || [])];
            if (t) {
                let e = (0,
                s.splitSignature)(t);
                n.push(T(e.recoveryParam, "recoveryParam")),
                n.push((0,
                s.stripZeros)(e.r)),
                n.push((0,
                s.stripZeros)(e.s))
            }
            return (0,
            s.hexConcat)(["0x02", d.encode(n)])
        }
        function C(e, t) {
            let n = [T(e.chainId || 0, "chainId"), T(e.nonce || 0, "nonce"), T(e.gasPrice || 0, "gasPrice"), T(e.gasLimit || 0, "gasLimit"), null != e.to ? (0,
            a.getAddress)(e.to) : "0x", T(e.value || 0, "value"), e.data || "0x", x(e.accessList || [])];
            if (t) {
                let e = (0,
                s.splitSignature)(t);
                n.push(T(e.recoveryParam, "recoveryParam")),
                n.push((0,
                s.stripZeros)(e.r)),
                n.push((0,
                s.stripZeros)(e.s))
            }
            return (0,
            s.hexConcat)(["0x01", d.encode(n)])
        }
        function _(e, t) {
            if (null == e.type || 0 === e.type)
                return null != e.accessList && h.throwArgumentError("untyped transactions do not support accessList; include type: 1", "transaction", e),
                function(e, t) {
                    (0,
                    c.checkProperties)(e, b);
                    let n = [];
                    g.forEach(function(t) {
                        let r = e[t.name] || []
                          , i = {};
                        t.numeric && (i.hexPad = "left"),
                        r = (0,
                        s.arrayify)((0,
                        s.hexlify)(r, i)),
                        t.length && r.length !== t.length && r.length > 0 && h.throwArgumentError("invalid length for " + t.name, "transaction:" + t.name, r),
                        t.maxLength && (r = (0,
                        s.stripZeros)(r)).length > t.maxLength && h.throwArgumentError("invalid length for " + t.name, "transaction:" + t.name, r),
                        n.push((0,
                        s.hexlify)(r))
                    });
                    let r = 0;
                    if (null != e.chainId ? "number" != typeof (r = e.chainId) && h.throwArgumentError("invalid transaction.chainId", "transaction", e) : t && !(0,
                    s.isBytesLike)(t) && t.v > 28 && (r = Math.floor((t.v - 35) / 2)),
                    0 !== r && (n.push((0,
                    s.hexlify)(r)),
                    n.push("0x"),
                    n.push("0x")),
                    !t)
                        return d.encode(n);
                    let i = (0,
                    s.splitSignature)(t)
                      , a = 27 + i.recoveryParam;
                    return 0 !== r ? (n.pop(),
                    n.pop(),
                    n.pop(),
                    a += 2 * r + 8,
                    i.v > 28 && i.v !== a && h.throwArgumentError("transaction.chainId/signature.v mismatch", "signature", t)) : i.v !== a && h.throwArgumentError("transaction.chainId/signature.v mismatch", "signature", t),
                    n.push((0,
                    s.hexlify)(a)),
                    n.push((0,
                    s.stripZeros)((0,
                    s.arrayify)(i.r))),
                    n.push((0,
                    s.stripZeros)((0,
                    s.arrayify)(i.s))),
                    d.encode(n)
                }(e, t);
            switch (e.type) {
            case 1:
                return C(e, t);
            case 2:
                return k(e, t)
            }
            return h.throwError(`unsupported transaction type: ${e.type}`, f.Logger.errors.UNSUPPORTED_OPERATION, {
                operation: "serializeTransaction",
                transactionType: e.type
            })
        }
        function S(e, t, n) {
            try {
                let n = y(t[0]).toNumber();
                if (0 !== n && 1 !== n)
                    throw Error("bad recid");
                e.v = n
            } catch (e) {
                h.throwArgumentError("invalid v for transaction type: 1", "v", t[0])
            }
            e.r = (0,
            s.hexZeroPad)(t[1], 32),
            e.s = (0,
            s.hexZeroPad)(t[2], 32);
            try {
                let t = (0,
                l.keccak256)(n(e));
                e.from = w(t, {
                    r: e.r,
                    s: e.s,
                    recoveryParam: e.v
                })
            } catch (e) {}
        }
        function I(e) {
            let t = (0,
            s.arrayify)(e);
            if (t[0] > 127)
                return function(e) {
                    let t = d.decode(e);
                    9 !== t.length && 6 !== t.length && h.throwArgumentError("invalid raw transaction", "rawTransaction", e);
                    let n = {
                        nonce: y(t[0]).toNumber(),
                        gasPrice: y(t[1]),
                        gasLimit: y(t[2]),
                        to: m(t[3]),
                        value: y(t[4]),
                        data: t[5],
                        chainId: 0
                    };
                    if (6 === t.length)
                        return n;
                    try {
                        n.v = o.O$.from(t[6]).toNumber()
                    } catch (e) {
                        return n
                    }
                    if (n.r = (0,
                    s.hexZeroPad)(t[7], 32),
                    n.s = (0,
                    s.hexZeroPad)(t[8], 32),
                    o.O$.from(n.r).isZero() && o.O$.from(n.s).isZero())
                        n.chainId = n.v,
                        n.v = 0;
                    else {
                        n.chainId = Math.floor((n.v - 35) / 2),
                        n.chainId < 0 && (n.chainId = 0);
                        let r = n.v - 27
                          , i = t.slice(0, 6);
                        0 !== n.chainId && (i.push((0,
                        s.hexlify)(n.chainId)),
                        i.push("0x"),
                        i.push("0x"),
                        r -= 2 * n.chainId + 8);
                        let a = (0,
                        l.keccak256)(d.encode(i));
                        try {
                            n.from = w(a, {
                                r: (0,
                                s.hexlify)(n.r),
                                s: (0,
                                s.hexlify)(n.s),
                                recoveryParam: r
                            })
                        } catch (e) {}
                        n.hash = (0,
                        l.keccak256)(e)
                    }
                    return n.type = null,
                    n
                }(t);
            switch (t[0]) {
            case 1:
                return function(e) {
                    let t = d.decode(e.slice(1));
                    8 !== t.length && 11 !== t.length && h.throwArgumentError("invalid component count for transaction type: 1", "payload", (0,
                    s.hexlify)(e));
                    let n = {
                        type: 1,
                        chainId: y(t[0]).toNumber(),
                        nonce: y(t[1]).toNumber(),
                        gasPrice: y(t[2]),
                        gasLimit: y(t[3]),
                        to: m(t[4]),
                        value: y(t[5]),
                        data: t[6],
                        accessList: A(t[7])
                    };
                    return 8 === t.length || (n.hash = (0,
                    l.keccak256)(e),
                    S(n, t.slice(8), C)),
                    n
                }(t);
            case 2:
                return function(e) {
                    let t = d.decode(e.slice(1));
                    9 !== t.length && 12 !== t.length && h.throwArgumentError("invalid component count for transaction type: 2", "payload", (0,
                    s.hexlify)(e));
                    let n = y(t[2])
                      , r = y(t[3])
                      , i = {
                        type: 2,
                        chainId: y(t[0]).toNumber(),
                        nonce: y(t[1]).toNumber(),
                        maxPriorityFeePerGas: n,
                        maxFeePerGas: r,
                        gasPrice: null,
                        gasLimit: y(t[4]),
                        to: m(t[5]),
                        value: y(t[6]),
                        data: t[7],
                        accessList: A(t[8])
                    };
                    return 9 === t.length || (i.hash = (0,
                    l.keccak256)(e),
                    S(i, t.slice(9), k)),
                    i
                }(t)
            }
            return h.throwError(`unsupported transaction type: ${t[0]}`, f.Logger.errors.UNSUPPORTED_OPERATION, {
                operation: "parseTransaction",
                transactionType: t[0]
            })
        }
    },
    78442: function(e, t, n) {
        "use strict";
        n.r(t),
        n.d(t, {
            commify: function() {
                return s
            },
            formatEther: function() {
                return c
            },
            formatUnits: function() {
                return u
            },
            parseEther: function() {
                return d
            },
            parseUnits: function() {
                return l
            }
        });
        var r = n(81358)
          , i = n(61941);
        let a = new i.Logger("units/5.7.0")
          , o = ["wei", "kwei", "mwei", "gwei", "szabo", "finney", "ether"];
        function s(e) {
            let t = String(e).split(".");
            (t.length > 2 || !t[0].match(/^-?[0-9]*$/) || t[1] && !t[1].match(/^[0-9]*$/) || "." === e || "-." === e) && a.throwArgumentError("invalid value", "value", e);
            let n = t[0]
              , r = "";
            for ("-" === n.substring(0, 1) && (r = "-",
            n = n.substring(1)); "0" === n.substring(0, 1); )
                n = n.substring(1);
            "" === n && (n = "0");
            let i = "";
            for (2 === t.length && (i = "." + (t[1] || "0")); i.length > 2 && "0" === i[i.length - 1]; )
                i = i.substring(0, i.length - 1);
            let o = [];
            for (; n.length; ) {
                if (n.length <= 3) {
                    o.unshift(n);
                    break
                }
                {
                    let e = n.length - 3;
                    o.unshift(n.substring(e)),
                    n = n.substring(0, e)
                }
            }
            return r + o.join(",") + i
        }
        function u(e, t) {
            if ("string" == typeof t) {
                let e = o.indexOf(t);
                -1 !== e && (t = 3 * e)
            }
            return (0,
            r.S5)(e, null != t ? t : 18)
        }
        function l(e, t) {
            if ("string" != typeof e && a.throwArgumentError("value must be a string", "value", e),
            "string" == typeof t) {
                let e = o.indexOf(t);
                -1 !== e && (t = 3 * e)
            }
            return (0,
            r.Ox)(e, null != t ? t : 18)
        }
        function c(e) {
            return u(e, 18)
        }
        function d(e) {
            return l(e, 18)
        }
    },
    57925: function(e, t, n) {
        "use strict";
        n.r(t),
        n.d(t, {
            Wallet: function() {
                return w
            },
            verifyMessage: function() {
                return T
            },
            verifyTypedData: function() {
                return E
            }
        });
        var r = n(60727)
          , i = n(480)
          , a = n(62563)
          , o = n(70367)
          , s = n(36869)
          , u = n(19794)
          , l = n(54897)
          , c = n(92381)
          , d = n(28609)
          , p = n(60264)
          , f = n(47770)
          , h = n(88071)
          , m = n(65306)
          , y = n(38593)
          , g = n(61941)
          , b = function(e, t, n, r) {
            return new (n || (n = Promise))(function(i, a) {
                function o(e) {
                    try {
                        u(r.next(e))
                    } catch (e) {
                        a(e)
                    }
                }
                function s(e) {
                    try {
                        u(r.throw(e))
                    } catch (e) {
                        a(e)
                    }
                }
                function u(e) {
                    var t;
                    e.done ? i(e.value) : ((t = e.value)instanceof n ? t : new n(function(e) {
                        e(t)
                    }
                    )).then(o, s)
                }
                u((r = r.apply(e, t || [])).next())
            }
            )
        };
        let v = new g.Logger("wallet/5.7.0");
        class w extends a.Signer {
            constructor(e, t) {
                var n;
                if (super(),
                null != (n = e) && (0,
                o.isHexString)(n.privateKey, 32) && null != n.address) {
                    let t = new f.SigningKey(e.privateKey);
                    if ((0,
                    d.defineReadOnly)(this, "_signingKey", ()=>t),
                    (0,
                    d.defineReadOnly)(this, "address", (0,
                    y.computeAddress)(this.publicKey)),
                    this.address !== (0,
                    r.getAddress)(e.address) && v.throwArgumentError("privateKey/address mismatch", "privateKey", "[REDACTED]"),
                    function(e) {
                        let t = e.mnemonic;
                        return t && t.phrase
                    }(e)) {
                        let t = e.mnemonic;
                        (0,
                        d.defineReadOnly)(this, "_mnemonic", ()=>({
                            phrase: t.phrase,
                            path: t.path || l.defaultPath,
                            locale: t.locale || "en"
                        }));
                        let n = this.mnemonic
                          , r = l.HDNode.fromMnemonic(n.phrase, null, n.locale).derivePath(n.path);
                        (0,
                        y.computeAddress)(r.privateKey) !== this.address && v.throwArgumentError("mnemonic/address mismatch", "privateKey", "[REDACTED]")
                    } else
                        (0,
                        d.defineReadOnly)(this, "_mnemonic", ()=>null)
                } else {
                    if (f.SigningKey.isSigningKey(e))
                        "secp256k1" !== e.curve && v.throwArgumentError("unsupported curve; must be secp256k1", "privateKey", "[REDACTED]"),
                        (0,
                        d.defineReadOnly)(this, "_signingKey", ()=>e);
                    else {
                        "string" == typeof e && e.match(/^[0-9a-f]*$/i) && 64 === e.length && (e = "0x" + e);
                        let t = new f.SigningKey(e);
                        (0,
                        d.defineReadOnly)(this, "_signingKey", ()=>t)
                    }
                    (0,
                    d.defineReadOnly)(this, "_mnemonic", ()=>null),
                    (0,
                    d.defineReadOnly)(this, "address", (0,
                    y.computeAddress)(this.publicKey))
                }
                t && !i.Provider.isProvider(t) && v.throwArgumentError("invalid provider", "provider", t),
                (0,
                d.defineReadOnly)(this, "provider", t || null)
            }
            get mnemonic() {
                return this._mnemonic()
            }
            get privateKey() {
                return this._signingKey().privateKey
            }
            get publicKey() {
                return this._signingKey().publicKey
            }
            getAddress() {
                return Promise.resolve(this.address)
            }
            connect(e) {
                return new w(this,e)
            }
            signTransaction(e) {
                return (0,
                d.resolveProperties)(e).then(t=>{
                    null != t.from && ((0,
                    r.getAddress)(t.from) !== this.address && v.throwArgumentError("transaction from address mismatch", "transaction.from", e.from),
                    delete t.from);
                    let n = this._signingKey().signDigest((0,
                    c.keccak256)((0,
                    y.serialize)(t)));
                    return (0,
                    y.serialize)(t, n)
                }
                )
            }
            signMessage(e) {
                return b(this, void 0, void 0, function*() {
                    return (0,
                    o.joinSignature)(this._signingKey().signDigest((0,
                    s.r)(e)))
                })
            }
            _signTypedData(e, t, n) {
                return b(this, void 0, void 0, function*() {
                    let r = yield u.E.resolveNames(e, t, n, e=>(null == this.provider && v.throwError("cannot resolve ENS names without a provider", g.Logger.errors.UNSUPPORTED_OPERATION, {
                        operation: "resolveName",
                        value: e
                    }),
                    this.provider.resolveName(e)));
                    return (0,
                    o.joinSignature)(this._signingKey().signDigest(u.E.hash(r.domain, t, r.value)))
                })
            }
            encrypt(e, t, n) {
                if ("function" != typeof t || n || (n = t,
                t = {}),
                n && "function" != typeof n)
                    throw Error("invalid callback");
                return t || (t = {}),
                (0,
                h.HI)(this, e, t, n)
            }
            static createRandom(e) {
                let t = (0,
                p.O)(16);
                e || (e = {}),
                e.extraEntropy && (t = (0,
                o.arrayify)((0,
                o.hexDataSlice)((0,
                c.keccak256)((0,
                o.concat)([t, e.extraEntropy])), 0, 16)));
                let n = (0,
                l.entropyToMnemonic)(t, e.locale);
                return w.fromMnemonic(n, e.path, e.locale)
            }
            static fromEncryptedJson(e, t, n) {
                return (0,
                m.decryptJsonWallet)(e, t, n).then(e=>new w(e))
            }
            static fromEncryptedJsonSync(e, t) {
                return new w((0,
                m.decryptJsonWalletSync)(e, t))
            }
            static fromMnemonic(e, t, n) {
                return t || (t = l.defaultPath),
                new w(l.HDNode.fromMnemonic(e, null, n).derivePath(t))
            }
        }
        function T(e, t) {
            return (0,
            y.recoverAddress)((0,
            s.r)(e), t)
        }
        function E(e, t, n, r) {
            return (0,
            y.recoverAddress)(u.E.hash(e, t, n), r)
        }
    },
    187: function(e, t, n) {
        "use strict";
        n.r(t),
        n.d(t, {
            _fetchData: function() {
                return d
            },
            fetchJson: function() {
                return p
            },
            poll: function() {
                return f
            }
        });
        var r = n(73054)
          , i = n(70367)
          , a = n(28609)
          , o = n(4082)
          , s = n(61941);
        let u = new s.Logger("web/5.7.1");
        function l(e) {
            return new Promise(t=>{
                setTimeout(t, e)
            }
            )
        }
        function c(e, t) {
            if (null == e)
                return null;
            if ("string" == typeof e)
                return e;
            if ((0,
            i.isBytesLike)(e)) {
                if (t && ("text" === t.split("/")[0] || "application/json" === t.split(";")[0].trim()))
                    try {
                        return (0,
                        o.ZN)(e)
                    } catch (e) {}
                return (0,
                i.hexlify)(e)
            }
            return e
        }
        function d(e, t, n) {
            let d = "object" == typeof e && null != e.throttleLimit ? e.throttleLimit : 12;
            u.assertArgument(d > 0 && d % 1 == 0, "invalid connection throttle limit", "connection.throttleLimit", d);
            let p = "object" == typeof e ? e.throttleCallback : null
              , f = "object" == typeof e && "number" == typeof e.throttleSlotInterval ? e.throttleSlotInterval : 100;
            u.assertArgument(f > 0 && f % 1 == 0, "invalid connection throttle slot interval", "connection.throttleSlotInterval", f);
            let h = "object" == typeof e && !!e.errorPassThrough
              , m = {}
              , y = null
              , g = {
                method: "GET"
            }
              , b = !1
              , v = 12e4;
            if ("string" == typeof e)
                y = e;
            else if ("object" == typeof e) {
                if ((null == e || null == e.url) && u.throwArgumentError("missing URL", "connection.url", e),
                y = e.url,
                "number" == typeof e.timeout && e.timeout > 0 && (v = e.timeout),
                e.headers)
                    for (let t in e.headers)
                        m[t.toLowerCase()] = {
                            key: t,
                            value: String(e.headers[t])
                        },
                        ["if-none-match", "if-modified-since"].indexOf(t.toLowerCase()) >= 0 && (b = !0);
                if (g.allowGzip = !!e.allowGzip,
                null != e.user && null != e.password) {
                    "https:" !== y.substring(0, 6) && !0 !== e.allowInsecureAuthentication && u.throwError("basic authentication requires a secure https url", s.Logger.errors.INVALID_ARGUMENT, {
                        argument: "url",
                        url: y,
                        user: e.user,
                        password: "[REDACTED]"
                    });
                    let t = e.user + ":" + e.password;
                    m.authorization = {
                        key: "Authorization",
                        value: "Basic " + (0,
                        r.c)((0,
                        o.Y0)(t))
                    }
                }
                null != e.skipFetchSetup && (g.skipFetchSetup = !!e.skipFetchSetup),
                null != e.fetchOptions && (g.fetchOptions = (0,
                a.shallowCopy)(e.fetchOptions))
            }
            let w = RegExp("^data:([^;:]*)?(;base64)?,(.*)$", "i")
              , T = y ? y.match(w) : null;
            if (T)
                try {
                    var E;
                    let e = {
                        statusCode: 200,
                        statusMessage: "OK",
                        headers: {
                            "content-type": T[1] || "text/plain"
                        },
                        body: T[2] ? (0,
                        r.J)(T[3]) : (E = T[3],
                        (0,
                        o.Y0)(E.replace(/%([0-9a-f][0-9a-f])/gi, (e,t)=>String.fromCharCode(parseInt(t, 16)))))
                    }
                      , t = e.body;
                    return n && (t = n(e.body, e)),
                    Promise.resolve(t)
                } catch (e) {
                    u.throwError("processing response error", s.Logger.errors.SERVER_ERROR, {
                        body: c(T[1], T[2]),
                        error: e,
                        requestBody: null,
                        requestMethod: "GET",
                        url: y
                    })
                }
            t && (g.method = "POST",
            g.body = t,
            null == m["content-type"] && (m["content-type"] = {
                key: "Content-Type",
                value: "application/octet-stream"
            }),
            null == m["content-length"] && (m["content-length"] = {
                key: "Content-Length",
                value: String(t.length)
            }));
            let A = {};
            Object.keys(m).forEach(e=>{
                let t = m[e];
                A[t.key] = t.value
            }
            ),
            g.headers = A;
            let x = function() {
                let e = null
                  , t = new Promise(function(t, n) {
                    v && (e = setTimeout(()=>{
                        null != e && (e = null,
                        n(u.makeError("timeout", s.Logger.errors.TIMEOUT, {
                            requestBody: c(g.body, A["content-type"]),
                            requestMethod: g.method,
                            timeout: v,
                            url: y
                        })))
                    }
                    , v))
                }
                );
                return {
                    promise: t,
                    cancel: function() {
                        null != e && (clearTimeout(e),
                        e = null)
                    }
                }
            }()
              , k = function() {
                var e, t, r, a;
                return e = this,
                t = void 0,
                r = void 0,
                a = function*() {
                    for (let e = 0; e < d; e++) {
                        let t = null;
                        try {
                            if (t = yield function(e, t) {
                                var n, r, a, o;
                                return n = this,
                                r = void 0,
                                a = void 0,
                                o = function*() {
                                    null == t && (t = {});
                                    let n = {
                                        method: t.method || "GET",
                                        headers: t.headers || {},
                                        body: t.body || void 0
                                    };
                                    if (!0 !== t.skipFetchSetup && (n.mode = "cors",
                                    n.cache = "no-cache",
                                    n.credentials = "same-origin",
                                    n.redirect = "follow",
                                    n.referrer = "client"),
                                    null != t.fetchOptions) {
                                        let e = t.fetchOptions;
                                        e.mode && (n.mode = e.mode),
                                        e.cache && (n.cache = e.cache),
                                        e.credentials && (n.credentials = e.credentials),
                                        e.redirect && (n.redirect = e.redirect),
                                        e.referrer && (n.referrer = e.referrer)
                                    }
                                    let r = yield fetch(e, n)
                                      , a = yield r.arrayBuffer()
                                      , o = {};
                                    return r.headers.forEach ? r.headers.forEach((e,t)=>{
                                        o[t.toLowerCase()] = e
                                    }
                                    ) : r.headers.keys().forEach(e=>{
                                        o[e.toLowerCase()] = r.headers.get(e)
                                    }
                                    ),
                                    {
                                        headers: o,
                                        statusCode: r.status,
                                        statusMessage: r.statusText,
                                        body: (0,
                                        i.arrayify)(new Uint8Array(a))
                                    }
                                }
                                ,
                                new (a || (a = Promise))(function(e, t) {
                                    function i(e) {
                                        try {
                                            u(o.next(e))
                                        } catch (e) {
                                            t(e)
                                        }
                                    }
                                    function s(e) {
                                        try {
                                            u(o.throw(e))
                                        } catch (e) {
                                            t(e)
                                        }
                                    }
                                    function u(t) {
                                        var n;
                                        t.done ? e(t.value) : ((n = t.value)instanceof a ? n : new a(function(e) {
                                            e(n)
                                        }
                                        )).then(i, s)
                                    }
                                    u((o = o.apply(n, r || [])).next())
                                }
                                )
                            }(y, g),
                            e < d) {
                                if (301 === t.statusCode || 302 === t.statusCode) {
                                    let e = t.headers.location || "";
                                    if ("GET" === g.method && e.match(/^https:/)) {
                                        y = t.headers.location;
                                        continue
                                    }
                                } else if (429 === t.statusCode) {
                                    let n = !0;
                                    if (p && (n = yield p(e, y)),
                                    n) {
                                        let n = 0
                                          , r = t.headers["retry-after"];
                                        n = "string" == typeof r && r.match(/^[1-9][0-9]*$/) ? 1e3 * parseInt(r) : f * parseInt(String(Math.random() * Math.pow(2, e))),
                                        yield l(n);
                                        continue
                                    }
                                }
                            }
                        } catch (e) {
                            null == (t = e.response) && (x.cancel(),
                            u.throwError("missing response", s.Logger.errors.SERVER_ERROR, {
                                requestBody: c(g.body, A["content-type"]),
                                requestMethod: g.method,
                                serverError: e,
                                url: y
                            }))
                        }
                        let r = t.body;
                        if (b && 304 === t.statusCode ? r = null : !h && (t.statusCode < 200 || t.statusCode >= 300) && (x.cancel(),
                        u.throwError("bad response", s.Logger.errors.SERVER_ERROR, {
                            status: t.statusCode,
                            headers: t.headers,
                            body: c(r, t.headers ? t.headers["content-type"] : null),
                            requestBody: c(g.body, A["content-type"]),
                            requestMethod: g.method,
                            url: y
                        })),
                        n)
                            try {
                                let e = yield n(r, t);
                                return x.cancel(),
                                e
                            } catch (n) {
                                if (n.throttleRetry && e < d) {
                                    let t = !0;
                                    if (p && (t = yield p(e, y)),
                                    t) {
                                        let t = f * parseInt(String(Math.random() * Math.pow(2, e)));
                                        yield l(t);
                                        continue
                                    }
                                }
                                x.cancel(),
                                u.throwError("processing response error", s.Logger.errors.SERVER_ERROR, {
                                    body: c(r, t.headers ? t.headers["content-type"] : null),
                                    error: n,
                                    requestBody: c(g.body, A["content-type"]),
                                    requestMethod: g.method,
                                    url: y
                                })
                            }
                        return x.cancel(),
                        r
                    }
                    return u.throwError("failed response", s.Logger.errors.SERVER_ERROR, {
                        requestBody: c(g.body, A["content-type"]),
                        requestMethod: g.method,
                        url: y
                    })
                }
                ,
                new (r || (r = Promise))(function(n, i) {
                    function o(e) {
                        try {
                            u(a.next(e))
                        } catch (e) {
                            i(e)
                        }
                    }
                    function s(e) {
                        try {
                            u(a.throw(e))
                        } catch (e) {
                            i(e)
                        }
                    }
                    function u(e) {
                        var t;
                        e.done ? n(e.value) : ((t = e.value)instanceof r ? t : new r(function(e) {
                            e(t)
                        }
                        )).then(o, s)
                    }
                    u((a = a.apply(e, t || [])).next())
                }
                )
            }();
            return Promise.race([x.promise, k])
        }
        function p(e, t, n) {
            let r = (e,t)=>{
                let r = null;
                if (null != e)
                    try {
                        r = JSON.parse((0,
                        o.ZN)(e))
                    } catch (t) {
                        u.throwError("invalid JSON", s.Logger.errors.SERVER_ERROR, {
                            body: e,
                            error: t
                        })
                    }
                return n && (r = n(r, t)),
                r
            }
              , i = null;
            if (null != t) {
                i = (0,
                o.Y0)(t);
                let n = "string" == typeof e ? {
                    url: e
                } : (0,
                a.shallowCopy)(e);
                if (n.headers) {
                    let e = 0 !== Object.keys(n.headers).filter(e=>"content-type" === e.toLowerCase()).length;
                    e || (n.headers = (0,
                    a.shallowCopy)(n.headers),
                    n.headers["content-type"] = "application/json")
                } else
                    n.headers = {
                        "content-type": "application/json"
                    };
                e = n
            }
            return d(e, i, r)
        }
        function f(e, t) {
            return t || (t = {}),
            null == (t = (0,
            a.shallowCopy)(t)).floor && (t.floor = 0),
            null == t.ceiling && (t.ceiling = 1e4),
            null == t.interval && (t.interval = 250),
            new Promise(function(n, r) {
                let i = null
                  , a = !1
                  , o = ()=>!a && (a = !0,
                i && clearTimeout(i),
                !0);
                t.timeout && (i = setTimeout(()=>{
                    o() && r(Error("timeout"))
                }
                , t.timeout));
                let s = t.retryLimit
                  , u = 0;
                !function i() {
                    return e().then(function(e) {
                        if (void 0 !== e)
                            o() && n(e);
                        else if (t.oncePoll)
                            t.oncePoll.once("poll", i);
                        else if (t.onceBlock)
                            t.onceBlock.once("block", i);
                        else if (!a) {
                            if (++u > s) {
                                o() && r(Error("retry limit reached"));
                                return
                            }
                            let e = t.interval * parseInt(String(Math.random() * Math.pow(2, u)));
                            e < t.floor && (e = t.floor),
                            e > t.ceiling && (e = t.ceiling),
                            setTimeout(i, e)
                        }
                        return null
                    }, function(e) {
                        o() && r(e)
                    })
                }()
            }
            )
        }
    },
    16692: function(e, t, n) {
        "use strict";
        n.d(t, {
            D: function() {
                return s
            }
        });
        var r = n(58853)
          , i = n(28609)
          , a = n(61941);
        let o = new a.Logger("wordlists/5.7.0");
        class s {
            constructor(e) {
                o.checkAbstract(new.target, s),
                (0,
                i.defineReadOnly)(this, "locale", e)
            }
            split(e) {
                return e.toLowerCase().split(/ +/g)
            }
            join(e) {
                return e.join(" ")
            }
            static check(e) {
                let t = [];
                for (let n = 0; n < 2048; n++) {
                    let r = e.getWord(n);
                    if (n !== e.getWordIndex(r))
                        return "0x";
                    t.push(r)
                }
                return (0,
                r.id)(t.join("\n") + "\n")
            }
            static register(e, t) {
                t || (t = e.locale)
            }
        }
    },
    4153: function(e, t, n) {
        "use strict";
        n.d(t, {
            E: function() {
                return u
            }
        });
        var r = n(16692);
        let i = null;
        function a(e) {
            if (null == i && (i = "AbandonAbilityAbleAboutAboveAbsentAbsorbAbstractAbsurdAbuseAccessAccidentAccountAccuseAchieveAcidAcousticAcquireAcrossActActionActorActressActualAdaptAddAddictAddressAdjustAdmitAdultAdvanceAdviceAerobicAffairAffordAfraidAgainAgeAgentAgreeAheadAimAirAirportAisleAlarmAlbumAlcoholAlertAlienAllAlleyAllowAlmostAloneAlphaAlreadyAlsoAlterAlwaysAmateurAmazingAmongAmountAmusedAnalystAnchorAncientAngerAngleAngryAnimalAnkleAnnounceAnnualAnotherAnswerAntennaAntiqueAnxietyAnyApartApologyAppearAppleApproveAprilArchArcticAreaArenaArgueArmArmedArmorArmyAroundArrangeArrestArriveArrowArtArtefactArtistArtworkAskAspectAssaultAssetAssistAssumeAsthmaAthleteAtomAttackAttendAttitudeAttractAuctionAuditAugustAuntAuthorAutoAutumnAverageAvocadoAvoidAwakeAwareAwayAwesomeAwfulAwkwardAxisBabyBachelorBaconBadgeBagBalanceBalconyBallBambooBananaBannerBarBarelyBargainBarrelBaseBasicBasketBattleBeachBeanBeautyBecauseBecomeBeefBeforeBeginBehaveBehindBelieveBelowBeltBenchBenefitBestBetrayBetterBetweenBeyondBicycleBidBikeBindBiologyBirdBirthBitterBlackBladeBlameBlanketBlastBleakBlessBlindBloodBlossomBlouseBlueBlurBlushBoardBoatBodyBoilBombBoneBonusBookBoostBorderBoringBorrowBossBottomBounceBoxBoyBracketBrainBrandBrassBraveBreadBreezeBrickBridgeBriefBrightBringBriskBroccoliBrokenBronzeBroomBrotherBrownBrushBubbleBuddyBudgetBuffaloBuildBulbBulkBulletBundleBunkerBurdenBurgerBurstBusBusinessBusyButterBuyerBuzzCabbageCabinCableCactusCageCakeCallCalmCameraCampCanCanalCancelCandyCannonCanoeCanvasCanyonCapableCapitalCaptainCarCarbonCardCargoCarpetCarryCartCaseCashCasinoCastleCasualCatCatalogCatchCategoryCattleCaughtCauseCautionCaveCeilingCeleryCementCensusCenturyCerealCertainChairChalkChampionChangeChaosChapterChargeChaseChatCheapCheckCheeseChefCherryChestChickenChiefChildChimneyChoiceChooseChronicChuckleChunkChurnCigarCinnamonCircleCitizenCityCivilClaimClapClarifyClawClayCleanClerkCleverClickClientCliffClimbClinicClipClockClogCloseClothCloudClownClubClumpClusterClutchCoachCoastCoconutCodeCoffeeCoilCoinCollectColorColumnCombineComeComfortComicCommonCompanyConcertConductConfirmCongressConnectConsiderControlConvinceCookCoolCopperCopyCoralCoreCornCorrectCostCottonCouchCountryCoupleCourseCousinCoverCoyoteCrackCradleCraftCramCraneCrashCraterCrawlCrazyCreamCreditCreekCrewCricketCrimeCrispCriticCropCrossCrouchCrowdCrucialCruelCruiseCrumbleCrunchCrushCryCrystalCubeCultureCupCupboardCuriousCurrentCurtainCurveCushionCustomCuteCycleDadDamageDampDanceDangerDaringDashDaughterDawnDayDealDebateDebrisDecadeDecemberDecideDeclineDecorateDecreaseDeerDefenseDefineDefyDegreeDelayDeliverDemandDemiseDenialDentistDenyDepartDependDepositDepthDeputyDeriveDescribeDesertDesignDeskDespairDestroyDetailDetectDevelopDeviceDevoteDiagramDialDiamondDiaryDiceDieselDietDifferDigitalDignityDilemmaDinnerDinosaurDirectDirtDisagreeDiscoverDiseaseDishDismissDisorderDisplayDistanceDivertDivideDivorceDizzyDoctorDocumentDogDollDolphinDomainDonateDonkeyDonorDoorDoseDoubleDoveDraftDragonDramaDrasticDrawDreamDressDriftDrillDrinkDripDriveDropDrumDryDuckDumbDuneDuringDustDutchDutyDwarfDynamicEagerEagleEarlyEarnEarthEasilyEastEasyEchoEcologyEconomyEdgeEditEducateEffortEggEightEitherElbowElderElectricElegantElementElephantElevatorEliteElseEmbarkEmbodyEmbraceEmergeEmotionEmployEmpowerEmptyEnableEnactEndEndlessEndorseEnemyEnergyEnforceEngageEngineEnhanceEnjoyEnlistEnoughEnrichEnrollEnsureEnterEntireEntryEnvelopeEpisodeEqualEquipEraEraseErodeErosionErrorEruptEscapeEssayEssenceEstateEternalEthicsEvidenceEvilEvokeEvolveExactExampleExcessExchangeExciteExcludeExcuseExecuteExerciseExhaustExhibitExileExistExitExoticExpandExpectExpireExplainExposeExpressExtendExtraEyeEyebrowFabricFaceFacultyFadeFaintFaithFallFalseFameFamilyFamousFanFancyFantasyFarmFashionFatFatalFatherFatigueFaultFavoriteFeatureFebruaryFederalFeeFeedFeelFemaleFenceFestivalFetchFeverFewFiberFictionFieldFigureFileFilmFilterFinalFindFineFingerFinishFireFirmFirstFiscalFishFitFitnessFixFlagFlameFlashFlatFlavorFleeFlightFlipFloatFlockFloorFlowerFluidFlushFlyFoamFocusFogFoilFoldFollowFoodFootForceForestForgetForkFortuneForumForwardFossilFosterFoundFoxFragileFrameFrequentFreshFriendFringeFrogFrontFrostFrownFrozenFruitFuelFunFunnyFurnaceFuryFutureGadgetGainGalaxyGalleryGameGapGarageGarbageGardenGarlicGarmentGasGaspGateGatherGaugeGazeGeneralGeniusGenreGentleGenuineGestureGhostGiantGiftGiggleGingerGiraffeGirlGiveGladGlanceGlareGlassGlideGlimpseGlobeGloomGloryGloveGlowGlueGoatGoddessGoldGoodGooseGorillaGospelGossipGovernGownGrabGraceGrainGrantGrapeGrassGravityGreatGreenGridGriefGritGroceryGroupGrowGruntGuardGuessGuideGuiltGuitarGunGymHabitHairHalfHammerHamsterHandHappyHarborHardHarshHarvestHatHaveHawkHazardHeadHealthHeartHeavyHedgehogHeightHelloHelmetHelpHenHeroHiddenHighHillHintHipHireHistoryHobbyHockeyHoldHoleHolidayHollowHomeHoneyHoodHopeHornHorrorHorseHospitalHostHotelHourHoverHubHugeHumanHumbleHumorHundredHungryHuntHurdleHurryHurtHusbandHybridIceIconIdeaIdentifyIdleIgnoreIllIllegalIllnessImageImitateImmenseImmuneImpactImposeImproveImpulseInchIncludeIncomeIncreaseIndexIndicateIndoorIndustryInfantInflictInformInhaleInheritInitialInjectInjuryInmateInnerInnocentInputInquiryInsaneInsectInsideInspireInstallIntactInterestIntoInvestInviteInvolveIronIslandIsolateIssueItemIvoryJacketJaguarJarJazzJealousJeansJellyJewelJobJoinJokeJourneyJoyJudgeJuiceJumpJungleJuniorJunkJustKangarooKeenKeepKetchupKeyKickKidKidneyKindKingdomKissKitKitchenKiteKittenKiwiKneeKnifeKnockKnowLabLabelLaborLadderLadyLakeLampLanguageLaptopLargeLaterLatinLaughLaundryLavaLawLawnLawsuitLayerLazyLeaderLeafLearnLeaveLectureLeftLegLegalLegendLeisureLemonLendLengthLensLeopardLessonLetterLevelLiarLibertyLibraryLicenseLifeLiftLightLikeLimbLimitLinkLionLiquidListLittleLiveLizardLoadLoanLobsterLocalLockLogicLonelyLongLoopLotteryLoudLoungeLoveLoyalLuckyLuggageLumberLunarLunchLuxuryLyricsMachineMadMagicMagnetMaidMailMainMajorMakeMammalManManageMandateMangoMansionManualMapleMarbleMarchMarginMarineMarketMarriageMaskMassMasterMatchMaterialMathMatrixMatterMaximumMazeMeadowMeanMeasureMeatMechanicMedalMediaMelodyMeltMemberMemoryMentionMenuMercyMergeMeritMerryMeshMessageMetalMethodMiddleMidnightMilkMillionMimicMindMinimumMinorMinuteMiracleMirrorMiseryMissMistakeMixMixedMixtureMobileModelModifyMomMomentMonitorMonkeyMonsterMonthMoonMoralMoreMorningMosquitoMotherMotionMotorMountainMouseMoveMovieMuchMuffinMuleMultiplyMuscleMuseumMushroomMusicMustMutualMyselfMysteryMythNaiveNameNapkinNarrowNastyNationNatureNearNeckNeedNegativeNeglectNeitherNephewNerveNestNetNetworkNeutralNeverNewsNextNiceNightNobleNoiseNomineeNoodleNormalNorthNoseNotableNoteNothingNoticeNovelNowNuclearNumberNurseNutOakObeyObjectObligeObscureObserveObtainObviousOccurOceanOctoberOdorOffOfferOfficeOftenOilOkayOldOliveOlympicOmitOnceOneOnionOnlineOnlyOpenOperaOpinionOpposeOptionOrangeOrbitOrchardOrderOrdinaryOrganOrientOriginalOrphanOstrichOtherOutdoorOuterOutputOutsideOvalOvenOverOwnOwnerOxygenOysterOzonePactPaddlePagePairPalacePalmPandaPanelPanicPantherPaperParadeParentParkParrotPartyPassPatchPathPatientPatrolPatternPausePavePaymentPeacePeanutPearPeasantPelicanPenPenaltyPencilPeoplePepperPerfectPermitPersonPetPhonePhotoPhrasePhysicalPianoPicnicPicturePiecePigPigeonPillPilotPinkPioneerPipePistolPitchPizzaPlacePlanetPlasticPlatePlayPleasePledgePluckPlugPlungePoemPoetPointPolarPolePolicePondPonyPoolPopularPortionPositionPossiblePostPotatoPotteryPovertyPowderPowerPracticePraisePredictPreferPreparePresentPrettyPreventPricePridePrimaryPrintPriorityPrisonPrivatePrizeProblemProcessProduceProfitProgramProjectPromoteProofPropertyProsperProtectProudProvidePublicPuddingPullPulpPulsePumpkinPunchPupilPuppyPurchasePurityPurposePursePushPutPuzzlePyramidQualityQuantumQuarterQuestionQuickQuitQuizQuoteRabbitRaccoonRaceRackRadarRadioRailRainRaiseRallyRampRanchRandomRangeRapidRareRateRatherRavenRawRazorReadyRealReasonRebelRebuildRecallReceiveRecipeRecordRecycleReduceReflectReformRefuseRegionRegretRegularRejectRelaxReleaseReliefRelyRemainRememberRemindRemoveRenderRenewRentReopenRepairRepeatReplaceReportRequireRescueResembleResistResourceResponseResultRetireRetreatReturnReunionRevealReviewRewardRhythmRibRibbonRiceRichRideRidgeRifleRightRigidRingRiotRippleRiskRitualRivalRiverRoadRoastRobotRobustRocketRomanceRoofRookieRoomRoseRotateRoughRoundRouteRoyalRubberRudeRugRuleRunRunwayRuralSadSaddleSadnessSafeSailSaladSalmonSalonSaltSaluteSameSampleSandSatisfySatoshiSauceSausageSaveSayScaleScanScareScatterSceneSchemeSchoolScienceScissorsScorpionScoutScrapScreenScriptScrubSeaSearchSeasonSeatSecondSecretSectionSecuritySeedSeekSegmentSelectSellSeminarSeniorSenseSentenceSeriesServiceSessionSettleSetupSevenShadowShaftShallowShareShedShellSheriffShieldShiftShineShipShiverShockShoeShootShopShortShoulderShoveShrimpShrugShuffleShySiblingSickSideSiegeSightSignSilentSilkSillySilverSimilarSimpleSinceSingSirenSisterSituateSixSizeSkateSketchSkiSkillSkinSkirtSkullSlabSlamSleepSlenderSliceSlideSlightSlimSloganSlotSlowSlushSmallSmartSmileSmokeSmoothSnackSnakeSnapSniffSnowSoapSoccerSocialSockSodaSoftSolarSoldierSolidSolutionSolveSomeoneSongSoonSorrySortSoulSoundSoupSourceSouthSpaceSpareSpatialSpawnSpeakSpecialSpeedSpellSpendSphereSpiceSpiderSpikeSpinSpiritSplitSpoilSponsorSpoonSportSpotSpraySpreadSpringSpySquareSqueezeSquirrelStableStadiumStaffStageStairsStampStandStartStateStaySteakSteelStemStepStereoStickStillStingStockStomachStoneStoolStoryStoveStrategyStreetStrikeStrongStruggleStudentStuffStumbleStyleSubjectSubmitSubwaySuccessSuchSuddenSufferSugarSuggestSuitSummerSunSunnySunsetSuperSupplySupremeSureSurfaceSurgeSurpriseSurroundSurveySuspectSustainSwallowSwampSwapSwarmSwearSweetSwiftSwimSwingSwitchSwordSymbolSymptomSyrupSystemTableTackleTagTailTalentTalkTankTapeTargetTaskTasteTattooTaxiTeachTeamTellTenTenantTennisTentTermTestTextThankThatThemeThenTheoryThereTheyThingThisThoughtThreeThriveThrowThumbThunderTicketTideTigerTiltTimberTimeTinyTipTiredTissueTitleToastTobaccoTodayToddlerToeTogetherToiletTokenTomatoTomorrowToneTongueTonightToolToothTopTopicToppleTorchTornadoTortoiseTossTotalTouristTowardTowerTownToyTrackTradeTrafficTragicTrainTransferTrapTrashTravelTrayTreatTreeTrendTrialTribeTrickTriggerTrimTripTrophyTroubleTruckTrueTrulyTrumpetTrustTruthTryTubeTuitionTumbleTunaTunnelTurkeyTurnTurtleTwelveTwentyTwiceTwinTwistTwoTypeTypicalUglyUmbrellaUnableUnawareUncleUncoverUnderUndoUnfairUnfoldUnhappyUniformUniqueUnitUniverseUnknownUnlockUntilUnusualUnveilUpdateUpgradeUpholdUponUpperUpsetUrbanUrgeUsageUseUsedUsefulUselessUsualUtilityVacantVacuumVagueValidValleyValveVanVanishVaporVariousVastVaultVehicleVelvetVendorVentureVenueVerbVerifyVersionVeryVesselVeteranViableVibrantViciousVictoryVideoViewVillageVintageViolinVirtualVirusVisaVisitVisualVitalVividVocalVoiceVoidVolcanoVolumeVoteVoyageWageWagonWaitWalkWallWalnutWantWarfareWarmWarriorWashWaspWasteWaterWaveWayWealthWeaponWearWeaselWeatherWebWeddingWeekendWeirdWelcomeWestWetWhaleWhatWheatWheelWhenWhereWhipWhisperWideWidthWifeWildWillWinWindowWineWingWinkWinnerWinterWireWisdomWiseWishWitnessWolfWomanWonderWoodWoolWordWorkWorldWorryWorthWrapWreckWrestleWristWriteWrongYardYearYellowYouYoungYouthZebraZeroZoneZoo".replace(/([A-Z])/g, " $1").toLowerCase().substring(1).split(" "),
            "0x3c8acc1e7b08d8e76f9fda015ef48dc8c710a73cb7e0f77b2c18a9b5a7adde60" !== r.D.check(e)))
                throw i = null,
                Error("BIP39 Wordlist for en (English) FAILED")
        }
        class o extends r.D {
            constructor() {
                super("en")
            }
            getWord(e) {
                return a(this),
                i[e]
            }
            getWordIndex(e) {
                return a(this),
                i.indexOf(e)
            }
        }
        let s = new o;
        r.D.register(s);
        let u = {
            en: s
        }
    },
    84098: function(e, t, n) {
        var r = n(83490);
        e.exports = function(e, t) {
            return new Promise(function(n, i) {
                var a, o = t || {};
                function s(e) {
                    i(e || Error("Aborted"))
                }
                function u(e, t) {
                    if (e.bail) {
                        s(e);
                        return
                    }
                    a.retry(e) ? o.onRetry && o.onRetry(e, t) : i(a.mainError())
                }
                "randomize"in o || (o.randomize = !0),
                (a = r.operation(o)).attempt(function(t) {
                    var r;
                    try {
                        r = e(s, t)
                    } catch (e) {
                        u(e, t);
                        return
                    }
                    Promise.resolve(r).then(n).catch(function(e) {
                        u(e, t)
                    })
                })
            }
            )
        }
    },
    18874: function(e, t, n) {
        let r;
        var i = n(73656);
        t.formatArgs = function(t) {
            if (t[0] = (this.useColors ? "%c" : "") + this.namespace + (this.useColors ? " %c" : " ") + t[0] + (this.useColors ? "%c " : " ") + "+" + e.exports.humanize(this.diff),
            !this.useColors)
                return;
            let n = "color: " + this.color;
            t.splice(1, 0, n, "color: inherit");
            let r = 0
              , i = 0;
            t[0].replace(/%[a-zA-Z%]/g, e=>{
                "%%" !== e && (r++,
                "%c" === e && (i = r))
            }
            ),
            t.splice(i, 0, n)
        }
        ,
        t.save = function(e) {
            try {
                e ? t.storage.setItem("debug", e) : t.storage.removeItem("debug")
            } catch (e) {}
        }
        ,
        t.load = function() {
            let e;
            try {
                e = t.storage.getItem("debug")
            } catch (e) {}
            return !e && void 0 !== i && "env"in i && (e = i.env.DEBUG),
            e
        }
        ,
        t.useColors = function() {
            return "undefined" != typeof window && !!window.process && ("renderer" === window.process.type || !!window.process.__nwjs) || !("undefined" != typeof navigator && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) && ("undefined" != typeof document && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || "undefined" != typeof window && window.console && (window.console.firebug || window.console.exception && window.console.table) || "undefined" != typeof navigator && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || "undefined" != typeof navigator && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/))
        }
        ,
        t.storage = function() {
            try {
                return localStorage
            } catch (e) {}
        }(),
        t.destroy = (r = !1,
        ()=>{
            r || (r = !0,
            console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."))
        }
        ),
        t.colors = ["#0000CC", "#0000FF", "#0033CC", "#0033FF", "#0066CC", "#0066FF", "#0099CC", "#0099FF", "#00CC00", "#00CC33", "#00CC66", "#00CC99", "#00CCCC", "#00CCFF", "#3300CC", "#3300FF", "#3333CC", "#3333FF", "#3366CC", "#3366FF", "#3399CC", "#3399FF", "#33CC00", "#33CC33", "#33CC66", "#33CC99", "#33CCCC", "#33CCFF", "#6600CC", "#6600FF", "#6633CC", "#6633FF", "#66CC00", "#66CC33", "#9900CC", "#9900FF", "#9933CC", "#9933FF", "#99CC00", "#99CC33", "#CC0000", "#CC0033", "#CC0066", "#CC0099", "#CC00CC", "#CC00FF", "#CC3300", "#CC3333", "#CC3366", "#CC3399", "#CC33CC", "#CC33FF", "#CC6600", "#CC6633", "#CC9900", "#CC9933", "#CCCC00", "#CCCC33", "#FF0000", "#FF0033", "#FF0066", "#FF0099", "#FF00CC", "#FF00FF", "#FF3300", "#FF3333", "#FF3366", "#FF3399", "#FF33CC", "#FF33FF", "#FF6600", "#FF6633", "#FF9900", "#FF9933", "#FFCC00", "#FFCC33"],
        t.log = console.debug || console.log || (()=>{}
        ),
        e.exports = n(74575)(t);
        let {formatters: a} = e.exports;
        a.j = function(e) {
            try {
                return JSON.stringify(e)
            } catch (e) {
                return "[UnexpectedJSONParseError]: " + e.message
            }
        }
    },
    74575: function(e, t, n) {
        e.exports = function(e) {
            function t(e) {
                let n, i, a;
                let o = null;
                function s(...e) {
                    if (!s.enabled)
                        return;
                    let r = s
                      , i = Number(new Date)
                      , a = i - (n || i);
                    r.diff = a,
                    r.prev = n,
                    r.curr = i,
                    n = i,
                    e[0] = t.coerce(e[0]),
                    "string" != typeof e[0] && e.unshift("%O");
                    let o = 0;
                    e[0] = e[0].replace(/%([a-zA-Z%])/g, (n,i)=>{
                        if ("%%" === n)
                            return "%";
                        o++;
                        let a = t.formatters[i];
                        if ("function" == typeof a) {
                            let t = e[o];
                            n = a.call(r, t),
                            e.splice(o, 1),
                            o--
                        }
                        return n
                    }
                    ),
                    t.formatArgs.call(r, e);
                    let u = r.log || t.log;
                    u.apply(r, e)
                }
                return s.namespace = e,
                s.useColors = t.useColors(),
                s.color = t.selectColor(e),
                s.extend = r,
                s.destroy = t.destroy,
                Object.defineProperty(s, "enabled", {
                    enumerable: !0,
                    configurable: !1,
                    get: ()=>null !== o ? o : (i !== t.namespaces && (i = t.namespaces,
                    a = t.enabled(e)),
                    a),
                    set: e=>{
                        o = e
                    }
                }),
                "function" == typeof t.init && t.init(s),
                s
            }
            function r(e, n) {
                let r = t(this.namespace + (void 0 === n ? ":" : n) + e);
                return r.log = this.log,
                r
            }
            function i(e) {
                return e.toString().substring(2, e.toString().length - 2).replace(/\.\*\?$/, "*")
            }
            return t.debug = t,
            t.default = t,
            t.coerce = function(e) {
                return e instanceof Error ? e.stack || e.message : e
            }
            ,
            t.disable = function() {
                let e = [...t.names.map(i), ...t.skips.map(i).map(e=>"-" + e)].join(",");
                return t.enable(""),
                e
            }
            ,
            t.enable = function(e) {
                let n;
                t.save(e),
                t.namespaces = e,
                t.names = [],
                t.skips = [];
                let r = ("string" == typeof e ? e : "").split(/[\s,]+/)
                  , i = r.length;
                for (n = 0; n < i; n++)
                    r[n] && ("-" === (e = r[n].replace(/\*/g, ".*?"))[0] ? t.skips.push(RegExp("^" + e.slice(1) + "$")) : t.names.push(RegExp("^" + e + "$")))
            }
            ,
            t.enabled = function(e) {
                let n, r;
                if ("*" === e[e.length - 1])
                    return !0;
                for (n = 0,
                r = t.skips.length; n < r; n++)
                    if (t.skips[n].test(e))
                        return !1;
                for (n = 0,
                r = t.names.length; n < r; n++)
                    if (t.names[n].test(e))
                        return !0;
                return !1
            }
            ,
            t.humanize = n(44247),
            t.destroy = function() {
                console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.")
            }
            ,
            Object.keys(e).forEach(n=>{
                t[n] = e[n]
            }
            ),
            t.names = [],
            t.skips = [],
            t.formatters = {},
            t.selectColor = function(e) {
                let n = 0;
                for (let t = 0; t < e.length; t++)
                    n = (n << 5) - n + e.charCodeAt(t) | 0;
                return t.colors[Math.abs(n) % t.colors.length]
            }
            ,
            t.enable(t.load()),
            t
        }
    },
    49168: function(e, t, n) {
        "use strict";
        n.d(t, {
            i: function() {
                return r
            }
        });
        let r = "ethers/5.7.2"
    },
    49569: function(e, t, n) {
        "use strict";
        n.r(t),
        n.d(t, {
            BaseContract: function() {
                return i.VZ
            },
            BigNumber: function() {
                return a.O$
            },
            Contract: function() {
                return i.CH
            },
            ContractFactory: function() {
                return i.lV
            },
            FixedNumber: function() {
                return o.xs
            },
            Signer: function() {
                return s.Signer
            },
            VoidSigner: function() {
                return s.VoidSigner
            },
            Wallet: function() {
                return u.Wallet
            },
            Wordlist: function() {
                return p.D
            },
            constants: function() {
                return l
            },
            errors: function() {
                return h.ErrorCode
            },
            ethers: function() {
                return r
            },
            getDefaultProvider: function() {
                return c.getDefaultProvider
            },
            logger: function() {
                return y
            },
            providers: function() {
                return c
            },
            utils: function() {
                return f
            },
            version: function() {
                return m.i
            },
            wordlists: function() {
                return d.E
            }
        });
        var r = {};
        n.r(r),
        n.d(r, {
            BaseContract: function() {
                return i.VZ
            },
            BigNumber: function() {
                return a.O$
            },
            Contract: function() {
                return i.CH
            },
            ContractFactory: function() {
                return i.lV
            },
            FixedNumber: function() {
                return o.xs
            },
            Signer: function() {
                return s.Signer
            },
            VoidSigner: function() {
                return s.VoidSigner
            },
            Wallet: function() {
                return u.Wallet
            },
            Wordlist: function() {
                return p.D
            },
            constants: function() {
                return l
            },
            errors: function() {
                return h.ErrorCode
            },
            getDefaultProvider: function() {
                return c.getDefaultProvider
            },
            logger: function() {
                return y
            },
            providers: function() {
                return c
            },
            utils: function() {
                return f
            },
            version: function() {
                return m.i
            },
            wordlists: function() {
                return d.E
            }
        });
        var i = n(4817)
          , a = n(13004)
          , o = n(81358)
          , s = n(62563)
          , u = n(57925)
          , l = n(2714)
          , c = n(65146)
          , d = n(4153)
          , p = n(16692)
          , f = n(23891)
          , h = n(61941)
          , m = n(49168);
        let y = new h.Logger(m.i);
        try {
            let e = window;
            null == e._ethers && (e._ethers = r)
        } catch (e) {}
    },
    23891: function(e, t, n) {
        "use strict";
        if (n.r(t),
        n.d(t, {
            AbiCoder: function() {
                return r.R
            },
            ConstructorFragment: function() {
                return i.Xg
            },
            ErrorFragment: function() {
                return i.IC
            },
            EventFragment: function() {
                return i.QV
            },
            FormatTypes: function() {
                return i.pc
            },
            Fragment: function() {
                return i.HY
            },
            FunctionFragment: function() {
                return i.YW
            },
            HDNode: function() {
                return m.HDNode
            },
            Indexed: function() {
                return o.Hk
            },
            Interface: function() {
                return o.vU
            },
            LogDescription: function() {
                return o.CC
            },
            Logger: function() {
                return b.Logger
            },
            ParamType: function() {
                return i._R
            },
            RLP: function() {
                return x
            },
            SigningKey: function() {
                return k.SigningKey
            },
            SupportedAlgorithm: function() {
                return N.p
            },
            TransactionDescription: function() {
                return o.vk
            },
            TransactionTypes: function() {
                return I.TransactionTypes
            },
            UnicodeNormalizationForm: function() {
                return _.Uj
            },
            Utf8ErrorFuncs: function() {
                return _.te
            },
            Utf8ErrorReason: function() {
                return _.Uw
            },
            _TypedDataEncoder: function() {
                return h.E
            },
            _fetchData: function() {
                return O._fetchData
            },
            _toEscapedUtf8String: function() {
                return _.U$
            },
            accessListify: function() {
                return I.accessListify
            },
            arrayify: function() {
                return c.arrayify
            },
            base58: function() {
                return l.Base58
            },
            base64: function() {
                return u
            },
            checkProperties: function() {
                return A.checkProperties
            },
            checkResultErrors: function() {
                return a.BR
            },
            commify: function() {
                return P.commify
            },
            computeAddress: function() {
                return I.computeAddress
            },
            computeHmac: function() {
                return v.Gy
            },
            computePublicKey: function() {
                return k.computePublicKey
            },
            concat: function() {
                return c.concat
            },
            deepCopy: function() {
                return A.deepCopy
            },
            defaultAbiCoder: function() {
                return r.$
            },
            defaultPath: function() {
                return m.defaultPath
            },
            defineReadOnly: function() {
                return A.defineReadOnly
            },
            dnsEncode: function() {
                return d.Kn
            },
            entropyToMnemonic: function() {
                return m.entropyToMnemonic
            },
            fetchJson: function() {
                return O.fetchJson
            },
            formatBytes32String: function() {
                return S.s
            },
            formatEther: function() {
                return P.formatEther
            },
            formatUnits: function() {
                return P.formatUnits
            },
            getAccountPath: function() {
                return m.getAccountPath
            },
            getAddress: function() {
                return s.getAddress
            },
            getContractAddress: function() {
                return s.getContractAddress
            },
            getCreate2Address: function() {
                return s.getCreate2Address
            },
            getIcapAddress: function() {
                return s.getIcapAddress
            },
            getJsonWalletAddress: function() {
                return y.Rb
            },
            getStatic: function() {
                return A.getStatic
            },
            hashMessage: function() {
                return p.r
            },
            hexConcat: function() {
                return c.hexConcat
            },
            hexDataLength: function() {
                return c.hexDataLength
            },
            hexDataSlice: function() {
                return c.hexDataSlice
            },
            hexStripZeros: function() {
                return c.hexStripZeros
            },
            hexValue: function() {
                return c.hexValue
            },
            hexZeroPad: function() {
                return c.hexZeroPad
            },
            hexlify: function() {
                return c.hexlify
            },
            id: function() {
                return f.id
            },
            isAddress: function() {
                return s.isAddress
            },
            isBytes: function() {
                return c.isBytes
            },
            isBytesLike: function() {
                return c.isBytesLike
            },
            isHexString: function() {
                return c.isHexString
            },
            isValidMnemonic: function() {
                return m.isValidMnemonic
            },
            isValidName: function() {
                return d.r1
            },
            joinSignature: function() {
                return c.joinSignature
            },
            keccak256: function() {
                return g.keccak256
            },
            mnemonicToEntropy: function() {
                return m.mnemonicToEntropy
            },
            mnemonicToSeed: function() {
                return m.mnemonicToSeed
            },
            namehash: function() {
                return d.VM
            },
            nameprep: function() {
                return C.Ll
            },
            parseBytes32String: function() {
                return S.F
            },
            parseEther: function() {
                return P.parseEther
            },
            parseTransaction: function() {
                return I.parse
            },
            parseUnits: function() {
                return P.parseUnits
            },
            poll: function() {
                return O.poll
            },
            randomBytes: function() {
                return T.O
            },
            recoverAddress: function() {
                return I.recoverAddress
            },
            recoverPublicKey: function() {
                return k.recoverPublicKey
            },
            resolveProperties: function() {
                return A.resolveProperties
            },
            ripemd160: function() {
                return v.bP
            },
            serializeTransaction: function() {
                return I.serialize
            },
            sha256: function() {
                return v.JQ
            },
            sha512: function() {
                return v.o
            },
            shallowCopy: function() {
                return A.shallowCopy
            },
            shuffled: function() {
                return E.y
            },
            solidityKeccak256: function() {
                return w.keccak256
            },
            solidityPack: function() {
                return w.pack
            },
            soliditySha256: function() {
                return w.sha256
            },
            splitSignature: function() {
                return c.splitSignature
            },
            stripZeros: function() {
                return c.stripZeros
            },
            toUtf8Bytes: function() {
                return _.Y0
            },
            toUtf8CodePoints: function() {
                return _.XL
            },
            toUtf8String: function() {
                return _.ZN
            },
            verifyMessage: function() {
                return B.verifyMessage
            },
            verifyTypedData: function() {
                return B.verifyTypedData
            },
            zeroPad: function() {
                return c.zeroPad
            }
        }),
        2272 == n.j)
            var r = n(33244);
        if (2272 == n.j)
            var i = n(4356);
        if (2272 == n.j)
            var a = n(53082);
        if (2272 == n.j)
            var o = n(36284);
        if (2272 == n.j)
            var s = n(60727);
        if (2272 == n.j)
            var u = n(9182);
        if (2272 == n.j)
            var l = n(23583);
        if (2272 == n.j)
            var c = n(70367);
        if (2272 == n.j)
            var d = n(84432);
        if (2272 == n.j)
            var p = n(36869);
        if (2272 == n.j)
            var f = n(58853);
        if (2272 == n.j)
            var h = n(19794);
        if (2272 == n.j)
            var m = n(54897);
        if (2272 == n.j)
            var y = n(1842);
        if (2272 == n.j)
            var g = n(92381);
        if (2272 == n.j)
            var b = n(61941);
        if (2272 == n.j)
            var v = n(15549);
        if (2272 == n.j)
            var w = n(3553);
        if (2272 == n.j)
            var T = n(60264);
        if (2272 == n.j)
            var E = n(67960);
        if (2272 == n.j)
            var A = n(28609);
        if (2272 == n.j)
            var x = n(90634);
        if (2272 == n.j)
            var k = n(47770);
        if (2272 == n.j)
            var C = n(27688);
        if (2272 == n.j)
            var _ = n(4082);
        if (2272 == n.j)
            var S = n(43490);
        if (2272 == n.j)
            var I = n(38593);
        if (2272 == n.j)
            var P = n(78442);
        if (2272 == n.j)
            var B = n(57925);
        if (2272 == n.j)
            var O = n(187);
        if (2272 == n.j)
            var N = n(11187)
    },
    34130: function(e, t, n) {
        "use strict";
        var r = this && this.__createBinding || (Object.create ? function(e, t, n, r) {
            void 0 === r && (r = n),
            Object.defineProperty(e, r, {
                enumerable: !0,
                get: function() {
                    return t[n]
                }
            })
        }
        : function(e, t, n, r) {
            void 0 === r && (r = n),
            e[r] = t[n]
        }
        )
          , i = this && this.__setModuleDefault || (Object.create ? function(e, t) {
            Object.defineProperty(e, "default", {
                enumerable: !0,
                value: t
            })
        }
        : function(e, t) {
            e.default = t
        }
        )
          , a = this && this.__importStar || function(e) {
            if (e && e.__esModule)
                return e;
            var t = {};
            if (null != e)
                for (var n in e)
                    "default" !== n && Object.prototype.hasOwnProperty.call(e, n) && r(t, e, n);
            return i(t, e),
            t
        }
        ;
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.formatBytes32String = t.Utf8ErrorFuncs = t.toUtf8String = t.toUtf8CodePoints = t.toUtf8Bytes = t._toEscapedUtf8String = t.nameprep = t.hexDataSlice = t.hexDataLength = t.hexZeroPad = t.hexValue = t.hexStripZeros = t.hexConcat = t.isHexString = t.hexlify = t.base64 = t.base58 = t.TransactionDescription = t.LogDescription = t.Interface = t.SigningKey = t.HDNode = t.defaultPath = t.isBytesLike = t.isBytes = t.zeroPad = t.stripZeros = t.concat = t.arrayify = t.shallowCopy = t.resolveProperties = t.getStatic = t.defineReadOnly = t.deepCopy = t.checkProperties = t.poll = t.fetchJson = t._fetchData = t.RLP = t.Logger = t.checkResultErrors = t.FormatTypes = t.ParamType = t.FunctionFragment = t.EventFragment = t.ErrorFragment = t.ConstructorFragment = t.Fragment = t.defaultAbiCoder = t.AbiCoder = void 0,
        t.Indexed = t.Utf8ErrorReason = t.UnicodeNormalizationForm = t.SupportedAlgorithm = t.mnemonicToSeed = t.isValidMnemonic = t.entropyToMnemonic = t.mnemonicToEntropy = t.getAccountPath = t.verifyTypedData = t.verifyMessage = t.recoverPublicKey = t.computePublicKey = t.recoverAddress = t.computeAddress = t.getJsonWalletAddress = t.TransactionTypes = t.serializeTransaction = t.parseTransaction = t.accessListify = t.joinSignature = t.splitSignature = t.soliditySha256 = t.solidityKeccak256 = t.solidityPack = t.shuffled = t.randomBytes = t.sha512 = t.sha256 = t.ripemd160 = t.keccak256 = t.computeHmac = t.commify = t.parseUnits = t.formatUnits = t.parseEther = t.formatEther = t.isAddress = t.getCreate2Address = t.getContractAddress = t.getIcapAddress = t.getAddress = t._TypedDataEncoder = t.id = t.isValidName = t.namehash = t.hashMessage = t.dnsEncode = t.parseBytes32String = void 0;
        var o = n(73617);
        Object.defineProperty(t, "AbiCoder", {
            enumerable: !0,
            get: function() {
                return o.AbiCoder
            }
        }),
        Object.defineProperty(t, "checkResultErrors", {
            enumerable: !0,
            get: function() {
                return o.checkResultErrors
            }
        }),
        Object.defineProperty(t, "ConstructorFragment", {
            enumerable: !0,
            get: function() {
                return o.ConstructorFragment
            }
        }),
        Object.defineProperty(t, "defaultAbiCoder", {
            enumerable: !0,
            get: function() {
                return o.defaultAbiCoder
            }
        }),
        Object.defineProperty(t, "ErrorFragment", {
            enumerable: !0,
            get: function() {
                return o.ErrorFragment
            }
        }),
        Object.defineProperty(t, "EventFragment", {
            enumerable: !0,
            get: function() {
                return o.EventFragment
            }
        }),
        Object.defineProperty(t, "FormatTypes", {
            enumerable: !0,
            get: function() {
                return o.FormatTypes
            }
        }),
        Object.defineProperty(t, "Fragment", {
            enumerable: !0,
            get: function() {
                return o.Fragment
            }
        }),
        Object.defineProperty(t, "FunctionFragment", {
            enumerable: !0,
            get: function() {
                return o.FunctionFragment
            }
        }),
        Object.defineProperty(t, "Indexed", {
            enumerable: !0,
            get: function() {
                return o.Indexed
            }
        }),
        Object.defineProperty(t, "Interface", {
            enumerable: !0,
            get: function() {
                return o.Interface
            }
        }),
        Object.defineProperty(t, "LogDescription", {
            enumerable: !0,
            get: function() {
                return o.LogDescription
            }
        }),
        Object.defineProperty(t, "ParamType", {
            enumerable: !0,
            get: function() {
                return o.ParamType
            }
        }),
        Object.defineProperty(t, "TransactionDescription", {
            enumerable: !0,
            get: function() {
                return o.TransactionDescription
            }
        });
        var s = n(60727);
        Object.defineProperty(t, "getAddress", {
            enumerable: !0,
            get: function() {
                return s.getAddress
            }
        }),
        Object.defineProperty(t, "getCreate2Address", {
            enumerable: !0,
            get: function() {
                return s.getCreate2Address
            }
        }),
        Object.defineProperty(t, "getContractAddress", {
            enumerable: !0,
            get: function() {
                return s.getContractAddress
            }
        }),
        Object.defineProperty(t, "getIcapAddress", {
            enumerable: !0,
            get: function() {
                return s.getIcapAddress
            }
        }),
        Object.defineProperty(t, "isAddress", {
            enumerable: !0,
            get: function() {
                return s.isAddress
            }
        });
        var u = a(n(9182));
        t.base64 = u;
        var l = n(23583);
        Object.defineProperty(t, "base58", {
            enumerable: !0,
            get: function() {
                return l.Base58
            }
        });
        var c = n(70367);
        Object.defineProperty(t, "arrayify", {
            enumerable: !0,
            get: function() {
                return c.arrayify
            }
        }),
        Object.defineProperty(t, "concat", {
            enumerable: !0,
            get: function() {
                return c.concat
            }
        }),
        Object.defineProperty(t, "hexConcat", {
            enumerable: !0,
            get: function() {
                return c.hexConcat
            }
        }),
        Object.defineProperty(t, "hexDataSlice", {
            enumerable: !0,
            get: function() {
                return c.hexDataSlice
            }
        }),
        Object.defineProperty(t, "hexDataLength", {
            enumerable: !0,
            get: function() {
                return c.hexDataLength
            }
        }),
        Object.defineProperty(t, "hexlify", {
            enumerable: !0,
            get: function() {
                return c.hexlify
            }
        }),
        Object.defineProperty(t, "hexStripZeros", {
            enumerable: !0,
            get: function() {
                return c.hexStripZeros
            }
        }),
        Object.defineProperty(t, "hexValue", {
            enumerable: !0,
            get: function() {
                return c.hexValue
            }
        }),
        Object.defineProperty(t, "hexZeroPad", {
            enumerable: !0,
            get: function() {
                return c.hexZeroPad
            }
        }),
        Object.defineProperty(t, "isBytes", {
            enumerable: !0,
            get: function() {
                return c.isBytes
            }
        }),
        Object.defineProperty(t, "isBytesLike", {
            enumerable: !0,
            get: function() {
                return c.isBytesLike
            }
        }),
        Object.defineProperty(t, "isHexString", {
            enumerable: !0,
            get: function() {
                return c.isHexString
            }
        }),
        Object.defineProperty(t, "joinSignature", {
            enumerable: !0,
            get: function() {
                return c.joinSignature
            }
        }),
        Object.defineProperty(t, "zeroPad", {
            enumerable: !0,
            get: function() {
                return c.zeroPad
            }
        }),
        Object.defineProperty(t, "splitSignature", {
            enumerable: !0,
            get: function() {
                return c.splitSignature
            }
        }),
        Object.defineProperty(t, "stripZeros", {
            enumerable: !0,
            get: function() {
                return c.stripZeros
            }
        });
        var d = n(43284);
        Object.defineProperty(t, "_TypedDataEncoder", {
            enumerable: !0,
            get: function() {
                return d._TypedDataEncoder
            }
        }),
        Object.defineProperty(t, "dnsEncode", {
            enumerable: !0,
            get: function() {
                return d.dnsEncode
            }
        }),
        Object.defineProperty(t, "hashMessage", {
            enumerable: !0,
            get: function() {
                return d.hashMessage
            }
        }),
        Object.defineProperty(t, "id", {
            enumerable: !0,
            get: function() {
                return d.id
            }
        }),
        Object.defineProperty(t, "isValidName", {
            enumerable: !0,
            get: function() {
                return d.isValidName
            }
        }),
        Object.defineProperty(t, "namehash", {
            enumerable: !0,
            get: function() {
                return d.namehash
            }
        });
        var p = n(54897);
        Object.defineProperty(t, "defaultPath", {
            enumerable: !0,
            get: function() {
                return p.defaultPath
            }
        }),
        Object.defineProperty(t, "entropyToMnemonic", {
            enumerable: !0,
            get: function() {
                return p.entropyToMnemonic
            }
        }),
        Object.defineProperty(t, "getAccountPath", {
            enumerable: !0,
            get: function() {
                return p.getAccountPath
            }
        }),
        Object.defineProperty(t, "HDNode", {
            enumerable: !0,
            get: function() {
                return p.HDNode
            }
        }),
        Object.defineProperty(t, "isValidMnemonic", {
            enumerable: !0,
            get: function() {
                return p.isValidMnemonic
            }
        }),
        Object.defineProperty(t, "mnemonicToEntropy", {
            enumerable: !0,
            get: function() {
                return p.mnemonicToEntropy
            }
        }),
        Object.defineProperty(t, "mnemonicToSeed", {
            enumerable: !0,
            get: function() {
                return p.mnemonicToSeed
            }
        });
        var f = n(65306);
        Object.defineProperty(t, "getJsonWalletAddress", {
            enumerable: !0,
            get: function() {
                return f.getJsonWalletAddress
            }
        });
        var h = n(92381);
        Object.defineProperty(t, "keccak256", {
            enumerable: !0,
            get: function() {
                return h.keccak256
            }
        });
        var m = n(61941);
        Object.defineProperty(t, "Logger", {
            enumerable: !0,
            get: function() {
                return m.Logger
            }
        });
        var y = n(47224);
        Object.defineProperty(t, "computeHmac", {
            enumerable: !0,
            get: function() {
                return y.computeHmac
            }
        }),
        Object.defineProperty(t, "ripemd160", {
            enumerable: !0,
            get: function() {
                return y.ripemd160
            }
        }),
        Object.defineProperty(t, "sha256", {
            enumerable: !0,
            get: function() {
                return y.sha256
            }
        }),
        Object.defineProperty(t, "sha512", {
            enumerable: !0,
            get: function() {
                return y.sha512
            }
        });
        var g = n(3553);
        Object.defineProperty(t, "solidityKeccak256", {
            enumerable: !0,
            get: function() {
                return g.keccak256
            }
        }),
        Object.defineProperty(t, "solidityPack", {
            enumerable: !0,
            get: function() {
                return g.pack
            }
        }),
        Object.defineProperty(t, "soliditySha256", {
            enumerable: !0,
            get: function() {
                return g.sha256
            }
        });
        var b = n(48133);
        Object.defineProperty(t, "randomBytes", {
            enumerable: !0,
            get: function() {
                return b.randomBytes
            }
        }),
        Object.defineProperty(t, "shuffled", {
            enumerable: !0,
            get: function() {
                return b.shuffled
            }
        });
        var v = n(28609);
        Object.defineProperty(t, "checkProperties", {
            enumerable: !0,
            get: function() {
                return v.checkProperties
            }
        }),
        Object.defineProperty(t, "deepCopy", {
            enumerable: !0,
            get: function() {
                return v.deepCopy
            }
        }),
        Object.defineProperty(t, "defineReadOnly", {
            enumerable: !0,
            get: function() {
                return v.defineReadOnly
            }
        }),
        Object.defineProperty(t, "getStatic", {
            enumerable: !0,
            get: function() {
                return v.getStatic
            }
        }),
        Object.defineProperty(t, "resolveProperties", {
            enumerable: !0,
            get: function() {
                return v.resolveProperties
            }
        }),
        Object.defineProperty(t, "shallowCopy", {
            enumerable: !0,
            get: function() {
                return v.shallowCopy
            }
        });
        var w = a(n(90634));
        t.RLP = w;
        var T = n(47770);
        Object.defineProperty(t, "computePublicKey", {
            enumerable: !0,
            get: function() {
                return T.computePublicKey
            }
        }),
        Object.defineProperty(t, "recoverPublicKey", {
            enumerable: !0,
            get: function() {
                return T.recoverPublicKey
            }
        }),
        Object.defineProperty(t, "SigningKey", {
            enumerable: !0,
            get: function() {
                return T.SigningKey
            }
        });
        var E = n(40165);
        Object.defineProperty(t, "formatBytes32String", {
            enumerable: !0,
            get: function() {
                return E.formatBytes32String
            }
        }),
        Object.defineProperty(t, "nameprep", {
            enumerable: !0,
            get: function() {
                return E.nameprep
            }
        }),
        Object.defineProperty(t, "parseBytes32String", {
            enumerable: !0,
            get: function() {
                return E.parseBytes32String
            }
        }),
        Object.defineProperty(t, "_toEscapedUtf8String", {
            enumerable: !0,
            get: function() {
                return E._toEscapedUtf8String
            }
        }),
        Object.defineProperty(t, "toUtf8Bytes", {
            enumerable: !0,
            get: function() {
                return E.toUtf8Bytes
            }
        }),
        Object.defineProperty(t, "toUtf8CodePoints", {
            enumerable: !0,
            get: function() {
                return E.toUtf8CodePoints
            }
        }),
        Object.defineProperty(t, "toUtf8String", {
            enumerable: !0,
            get: function() {
                return E.toUtf8String
            }
        }),
        Object.defineProperty(t, "Utf8ErrorFuncs", {
            enumerable: !0,
            get: function() {
                return E.Utf8ErrorFuncs
            }
        });
        var A = n(38593);
        Object.defineProperty(t, "accessListify", {
            enumerable: !0,
            get: function() {
                return A.accessListify
            }
        }),
        Object.defineProperty(t, "computeAddress", {
            enumerable: !0,
            get: function() {
                return A.computeAddress
            }
        }),
        Object.defineProperty(t, "parseTransaction", {
            enumerable: !0,
            get: function() {
                return A.parse
            }
        }),
        Object.defineProperty(t, "recoverAddress", {
            enumerable: !0,
            get: function() {
                return A.recoverAddress
            }
        }),
        Object.defineProperty(t, "serializeTransaction", {
            enumerable: !0,
            get: function() {
                return A.serialize
            }
        }),
        Object.defineProperty(t, "TransactionTypes", {
            enumerable: !0,
            get: function() {
                return A.TransactionTypes
            }
        });
        var x = n(78442);
        Object.defineProperty(t, "commify", {
            enumerable: !0,
            get: function() {
                return x.commify
            }
        }),
        Object.defineProperty(t, "formatEther", {
            enumerable: !0,
            get: function() {
                return x.formatEther
            }
        }),
        Object.defineProperty(t, "parseEther", {
            enumerable: !0,
            get: function() {
                return x.parseEther
            }
        }),
        Object.defineProperty(t, "formatUnits", {
            enumerable: !0,
            get: function() {
                return x.formatUnits
            }
        }),
        Object.defineProperty(t, "parseUnits", {
            enumerable: !0,
            get: function() {
                return x.parseUnits
            }
        });
        var k = n(57925);
        Object.defineProperty(t, "verifyMessage", {
            enumerable: !0,
            get: function() {
                return k.verifyMessage
            }
        }),
        Object.defineProperty(t, "verifyTypedData", {
            enumerable: !0,
            get: function() {
                return k.verifyTypedData
            }
        });
        var C = n(187);
        Object.defineProperty(t, "_fetchData", {
            enumerable: !0,
            get: function() {
                return C._fetchData
            }
        }),
        Object.defineProperty(t, "fetchJson", {
            enumerable: !0,
            get: function() {
                return C.fetchJson
            }
        }),
        Object.defineProperty(t, "poll", {
            enumerable: !0,
            get: function() {
                return C.poll
            }
        });
        var _ = n(47224);
        Object.defineProperty(t, "SupportedAlgorithm", {
            enumerable: !0,
            get: function() {
                return _.SupportedAlgorithm
            }
        });
        var S = n(40165);
        Object.defineProperty(t, "UnicodeNormalizationForm", {
            enumerable: !0,
            get: function() {
                return S.UnicodeNormalizationForm
            }
        }),
        Object.defineProperty(t, "Utf8ErrorReason", {
            enumerable: !0,
            get: function() {
                return S.Utf8ErrorReason
            }
        })
    },
    13454: function(e, t, n) {
        "use strict";
        var r = this && this.__importDefault || function(e) {
            return e && e.__esModule ? e : {
                default: e
            }
        }
        ;
        Object.defineProperty(t, "__esModule", {
            value: !0
        });
        var i = n(89473)
          , a = r(n(47141))
          , o = function(e) {
            return i.isExtractableFile(e) || null !== e && "object" == typeof e && "function" == typeof e.pipe
        };
        t.default = function(e, t, n) {
            var r = i.extractFiles({
                query: e,
                variables: t,
                operationName: n
            }, "", o)
              , s = r.clone
              , u = r.files;
            if (0 === u.size) {
                if (!Array.isArray(e))
                    return JSON.stringify(s);
                if (void 0 !== t && !Array.isArray(t))
                    throw Error("Cannot create request body with given variable type, array expected");
                return JSON.stringify(e.reduce(function(e, n, r) {
                    return e.push({
                        query: n,
                        variables: t ? t[r] : void 0
                    }),
                    e
                }, []))
            }
            var l = new ("undefined" == typeof FormData ? a.default : FormData);
            l.append("operations", JSON.stringify(s));
            var c = {}
              , d = 0;
            return u.forEach(function(e) {
                c[++d] = e
            }),
            l.append("map", JSON.stringify(c)),
            d = 0,
            u.forEach(function(e, t) {
                l.append("" + ++d, t)
            }),
            l
        }
    },
    14322: function(e, t, n) {
        "use strict";
        var r = this && this.__assign || function() {
            return (r = Object.assign || function(e) {
                for (var t, n = 1, r = arguments.length; n < r; n++)
                    for (var i in t = arguments[n])
                        Object.prototype.hasOwnProperty.call(t, i) && (e[i] = t[i]);
                return e
            }
            ).apply(this, arguments)
        }
          , i = this && this.__createBinding || (Object.create ? function(e, t, n, r) {
            void 0 === r && (r = n),
            Object.defineProperty(e, r, {
                enumerable: !0,
                get: function() {
                    return t[n]
                }
            })
        }
        : function(e, t, n, r) {
            void 0 === r && (r = n),
            e[r] = t[n]
        }
        )
          , a = this && this.__setModuleDefault || (Object.create ? function(e, t) {
            Object.defineProperty(e, "default", {
                enumerable: !0,
                value: t
            })
        }
        : function(e, t) {
            e.default = t
        }
        )
          , o = this && this.__importStar || function(e) {
            if (e && e.__esModule)
                return e;
            var t = {};
            if (null != e)
                for (var n in e)
                    "default" !== n && Object.prototype.hasOwnProperty.call(e, n) && i(t, e, n);
            return a(t, e),
            t
        }
          , s = this && this.__awaiter || function(e, t, n, r) {
            return new (n || (n = Promise))(function(i, a) {
                function o(e) {
                    try {
                        u(r.next(e))
                    } catch (e) {
                        a(e)
                    }
                }
                function s(e) {
                    try {
                        u(r.throw(e))
                    } catch (e) {
                        a(e)
                    }
                }
                function u(e) {
                    var t;
                    e.done ? i(e.value) : ((t = e.value)instanceof n ? t : new n(function(e) {
                        e(t)
                    }
                    )).then(o, s)
                }
                u((r = r.apply(e, t || [])).next())
            }
            )
        }
          , u = this && this.__generator || function(e, t) {
            var n, r, i, a, o = {
                label: 0,
                sent: function() {
                    if (1 & i[0])
                        throw i[1];
                    return i[1]
                },
                trys: [],
                ops: []
            };
            return a = {
                next: s(0),
                throw: s(1),
                return: s(2)
            },
            "function" == typeof Symbol && (a[Symbol.iterator] = function() {
                return this
            }
            ),
            a;
            function s(a) {
                return function(s) {
                    return function(a) {
                        if (n)
                            throw TypeError("Generator is already executing.");
                        for (; o; )
                            try {
                                if (n = 1,
                                r && (i = 2 & a[0] ? r.return : a[0] ? r.throw || ((i = r.return) && i.call(r),
                                0) : r.next) && !(i = i.call(r, a[1])).done)
                                    return i;
                                switch (r = 0,
                                i && (a = [2 & a[0], i.value]),
                                a[0]) {
                                case 0:
                                case 1:
                                    i = a;
                                    break;
                                case 4:
                                    return o.label++,
                                    {
                                        value: a[1],
                                        done: !1
                                    };
                                case 5:
                                    o.label++,
                                    r = a[1],
                                    a = [0];
                                    continue;
                                case 7:
                                    a = o.ops.pop(),
                                    o.trys.pop();
                                    continue;
                                default:
                                    if (!(i = (i = o.trys).length > 0 && i[i.length - 1]) && (6 === a[0] || 2 === a[0])) {
                                        o = 0;
                                        continue
                                    }
                                    if (3 === a[0] && (!i || a[1] > i[0] && a[1] < i[3])) {
                                        o.label = a[1];
                                        break
                                    }
                                    if (6 === a[0] && o.label < i[1]) {
                                        o.label = i[1],
                                        i = a;
                                        break
                                    }
                                    if (i && o.label < i[2]) {
                                        o.label = i[2],
                                        o.ops.push(a);
                                        break
                                    }
                                    i[2] && o.ops.pop(),
                                    o.trys.pop();
                                    continue
                                }
                                a = t.call(e, o)
                            } catch (e) {
                                a = [6, e],
                                r = 0
                            } finally {
                                n = i = 0
                            }
                        if (5 & a[0])
                            throw a[1];
                        return {
                            value: a[0] ? a[1] : void 0,
                            done: !0
                        }
                    }([a, s])
                }
            }
        }
          , l = this && this.__rest || function(e, t) {
            var n = {};
            for (var r in e)
                Object.prototype.hasOwnProperty.call(e, r) && 0 > t.indexOf(r) && (n[r] = e[r]);
            if (null != e && "function" == typeof Object.getOwnPropertySymbols)
                for (var i = 0, r = Object.getOwnPropertySymbols(e); i < r.length; i++)
                    0 > t.indexOf(r[i]) && Object.prototype.propertyIsEnumerable.call(e, r[i]) && (n[r[i]] = e[r[i]]);
            return n
        }
          , c = this && this.__importDefault || function(e) {
            return e && e.__esModule ? e : {
                default: e
            }
        }
        ;
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.gql = t.batchRequests = t.request = t.rawRequest = t.GraphQLClient = t.ClientError = void 0;
        var d = o(n(67230))
          , p = n(36430)
          , f = c(n(13454))
          , h = n(23158);
        Object.defineProperty(t, "ClientError", {
            enumerable: !0,
            get: function() {
                return h.ClientError
            }
        });
        var m = function(e) {
            var t, n = {};
            return e && ("undefined" != typeof Headers && e instanceof Headers || e instanceof d.Headers ? (t = {},
            e.forEach(function(e, n) {
                t[n] = e
            }),
            n = t) : Array.isArray(e) ? e.forEach(function(e) {
                var t = e[0]
                  , r = e[1];
                n[t] = r
            }) : n = e),
            n
        }
          , y = function(e) {
            return e.replace(/([\s,]|#[^\n\r]+)+/g, " ").trim()
        }
          , g = function(e) {
            var t = e.query
              , n = e.variables
              , r = e.operationName;
            if (!Array.isArray(t)) {
                var i = ["query=" + encodeURIComponent(y(t))];
                return n && i.push("variables=" + encodeURIComponent(JSON.stringify(n))),
                r && i.push("operationName=" + encodeURIComponent(r)),
                i.join("&")
            }
            if (void 0 !== n && !Array.isArray(n))
                throw Error("Cannot create query with given variable type, array expected");
            return "query=" + encodeURIComponent(JSON.stringify(t.reduce(function(e, t, r) {
                return e.push({
                    query: y(t),
                    variables: n ? JSON.stringify(n[r]) : void 0
                }),
                e
            }, [])))
        }
          , b = function(e) {
            var t = e.url
              , n = e.query
              , i = e.variables
              , a = e.operationName
              , o = e.headers
              , l = e.fetch
              , c = e.fetchOptions;
            return s(void 0, void 0, void 0, function() {
                var e;
                return u(this, function(s) {
                    switch (s.label) {
                    case 0:
                        return [4, l(t, r({
                            method: "POST",
                            headers: r(r({}, "string" == typeof (e = f.default(n, i, a)) ? {
                                "Content-Type": "application/json"
                            } : {}), o),
                            body: e
                        }, c))];
                    case 1:
                        return [2, s.sent()]
                    }
                })
            })
        }
          , v = function(e) {
            var t = e.url
              , n = e.query
              , i = e.variables
              , a = e.operationName
              , o = e.headers
              , l = e.fetch
              , c = e.fetchOptions;
            return s(void 0, void 0, void 0, function() {
                return u(this, function(e) {
                    switch (e.label) {
                    case 0:
                        return [4, l(t + "?" + g({
                            query: n,
                            variables: i,
                            operationName: a
                        }), r({
                            method: "GET",
                            headers: o
                        }, c))];
                    case 1:
                        return [2, e.sent()]
                    }
                })
            })
        }
          , w = function() {
            function e(e, t) {
                this.url = e,
                this.options = t || {}
            }
            return e.prototype.rawRequest = function(e, t, n) {
                var i = this.options
                  , a = i.headers
                  , o = i.fetch
                  , s = void 0 === o ? d.default : o
                  , u = i.method
                  , c = l(i, ["headers", "fetch", "method"]);
                return T({
                    url: this.url,
                    query: e,
                    variables: t,
                    headers: r(r({}, m(a)), m(n)),
                    operationName: void 0,
                    fetch: s,
                    method: void 0 === u ? "POST" : u,
                    fetchOptions: c
                })
            }
            ,
            e.prototype.request = function(e, t, n) {
                return s(this, void 0, void 0, function() {
                    var i, a, o, s, c, p, f, h, y, g, b;
                    return u(this, function(u) {
                        switch (u.label) {
                        case 0:
                            return a = (i = this.options).headers,
                            s = void 0 === (o = i.fetch) ? d.default : o,
                            p = void 0 === (c = i.method) ? "POST" : c,
                            f = l(i, ["headers", "fetch", "method"]),
                            h = this.url,
                            g = (y = A(e)).query,
                            b = y.operationName,
                            [4, T({
                                url: h,
                                query: g,
                                variables: t,
                                headers: r(r({}, m(a)), m(n)),
                                operationName: b,
                                fetch: s,
                                method: p,
                                fetchOptions: f
                            })];
                        case 1:
                            return [2, u.sent().data]
                        }
                    })
                })
            }
            ,
            e.prototype.batchRequests = function(e, t) {
                return s(this, void 0, void 0, function() {
                    var n, i, a, o, s, c, p;
                    return u(this, function(u) {
                        switch (u.label) {
                        case 0:
                            return i = (n = this.options).headers,
                            o = void 0 === (a = n.fetch) ? d.default : a,
                            c = void 0 === (s = n.method) ? "POST" : s,
                            p = l(n, ["headers", "fetch", "method"]),
                            [4, T({
                                url: this.url,
                                query: e.map(function(e) {
                                    return A(e.document).query
                                }),
                                variables: e.map(function(e) {
                                    return e.variables
                                }),
                                headers: r(r({}, m(i)), m(t)),
                                operationName: void 0,
                                fetch: o,
                                method: c,
                                fetchOptions: p
                            })];
                        case 1:
                            return [2, u.sent().data]
                        }
                    })
                })
            }
            ,
            e.prototype.setHeaders = function(e) {
                return this.options.headers = e,
                this
            }
            ,
            e.prototype.setHeader = function(e, t) {
                var n, r = this.options.headers;
                return r ? r[e] = t : this.options.headers = ((n = {})[e] = t,
                n),
                this
            }
            ,
            e.prototype.setEndpoint = function(e) {
                return this.url = e,
                this
            }
            ,
            e
        }();
        function T(e) {
            var t = e.url
              , n = e.query
              , i = e.variables
              , a = e.headers
              , o = e.operationName
              , l = e.fetch
              , c = e.method
              , d = void 0 === c ? "POST" : c
              , p = e.fetchOptions;
            return s(this, void 0, void 0, function() {
                var e, s, c, f, m, y, g, w;
                return u(this, function(u) {
                    switch (u.label) {
                    case 0:
                        return e = "POST" === d.toUpperCase() ? b : v,
                        s = Array.isArray(n),
                        [4, e({
                            url: t,
                            query: n,
                            variables: i,
                            operationName: o,
                            headers: a,
                            fetch: l,
                            fetchOptions: p
                        })];
                    case 1:
                        var T, E;
                        return [4, (E = (T = c = u.sent()).headers.get("Content-Type")) && E.startsWith("application/json") ? T.json() : T.text()];
                    case 2:
                        if (f = u.sent(),
                        m = s && Array.isArray(f) ? !f.some(function(e) {
                            return !e.data
                        }) : !!f.data,
                        c.ok && !f.errors && m)
                            return y = c.headers,
                            g = c.status,
                            [2, r(r({}, s ? {
                                data: f
                            } : f), {
                                headers: y,
                                status: g
                            })];
                        throw w = "string" == typeof f ? {
                            error: f
                        } : f,
                        new h.ClientError(r(r({}, w), {
                            status: c.status,
                            headers: c.headers
                        }),{
                            query: n,
                            variables: i
                        })
                    }
                })
            })
        }
        function E(e, t, n, r) {
            return s(this, void 0, void 0, function() {
                return u(this, function(i) {
                    return [2, new w(e).request(t, n, r)]
                })
            })
        }
        function A(e) {
            if ("string" == typeof e)
                return {
                    query: e
                };
            var t, n = void 0, r = e.definitions.filter(function(e) {
                return "OperationDefinition" === e.kind
            });
            return 1 === r.length && (n = null === (t = r[0].name) || void 0 === t ? void 0 : t.value),
            {
                query: p.print(e),
                operationName: n
            }
        }
        t.GraphQLClient = w,
        t.rawRequest = function(e, t, n, r) {
            return s(this, void 0, void 0, function() {
                return u(this, function(i) {
                    return [2, new w(e).rawRequest(t, n, r)]
                })
            })
        }
        ,
        t.request = E,
        t.batchRequests = function(e, t, n) {
            return s(this, void 0, void 0, function() {
                return u(this, function(r) {
                    return [2, new w(e).batchRequests(t, n)]
                })
            })
        }
        ,
        t.default = E,
        t.gql = function(e) {
            for (var t = [], n = 1; n < arguments.length; n++)
                t[n - 1] = arguments[n];
            return e.reduce(function(e, n, r) {
                return "" + e + n + (r in t ? t[r] : "")
            }, "")
        }
    },
    23158: function(e, t) {
        "use strict";
        var n, r = this && this.__extends || (n = function(e, t) {
            return (n = Object.setPrototypeOf || ({
                __proto__: []
            })instanceof Array && function(e, t) {
                e.__proto__ = t
            }
            || function(e, t) {
                for (var n in t)
                    Object.prototype.hasOwnProperty.call(t, n) && (e[n] = t[n])
            }
            )(e, t)
        }
        ,
        function(e, t) {
            if ("function" != typeof t && null !== t)
                throw TypeError("Class extends value " + String(t) + " is not a constructor or null");
            function r() {
                this.constructor = e
            }
            n(e, t),
            e.prototype = null === t ? Object.create(t) : (r.prototype = t.prototype,
            new r)
        }
        );
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.ClientError = void 0;
        var i = function(e) {
            function t(n, r) {
                var i = this
                  , a = t.extractMessage(n) + ": " + JSON.stringify({
                    response: n,
                    request: r
                });
                return Object.setPrototypeOf(i = e.call(this, a) || this, t.prototype),
                i.response = n,
                i.request = r,
                "function" == typeof Error.captureStackTrace && Error.captureStackTrace(i, t),
                i
            }
            return r(t, e),
            t.extractMessage = function(e) {
                try {
                    return e.errors[0].message
                } catch (t) {
                    return "GraphQL Error (Code: " + e.status + ")"
                }
            }
            ,
            t
        }(Error);
        t.ClientError = i
    },
    8312: function(e, t, n) {
        "use strict";
        var r = this && this.__importDefault || function(e) {
            return e && e.__esModule ? e : {
                default: e
            }
        }
        ;
        Object.defineProperty(t, "__esModule", {
            value: !0
        });
        var i = n(89473)
          , a = r(n(47141))
          , o = n(85892)
          , s = function(e) {
            return i.isExtractableFile(e) || null !== e && "object" == typeof e && "function" == typeof e.pipe
        };
        t.default = function(e, t, n, r) {
            void 0 === r && (r = o.defaultJsonSerializer);
            var u = i.extractFiles({
                query: e,
                variables: t,
                operationName: n
            }, "", s)
              , l = u.clone
              , c = u.files;
            if (0 === c.size) {
                if (!Array.isArray(e))
                    return r.stringify(l);
                if (void 0 !== t && !Array.isArray(t))
                    throw Error("Cannot create request body with given variable type, array expected");
                var d = e.reduce(function(e, n, r) {
                    return e.push({
                        query: n,
                        variables: t ? t[r] : void 0
                    }),
                    e
                }, []);
                return r.stringify(d)
            }
            var p = new ("undefined" == typeof FormData ? a.default : FormData);
            p.append("operations", r.stringify(l));
            var f = {}
              , h = 0;
            return c.forEach(function(e) {
                f[++h] = e
            }),
            p.append("map", r.stringify(f)),
            h = 0,
            c.forEach(function(e, t) {
                p.append("" + ++h, t)
            }),
            p
        }
    },
    85892: function(e, t) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.defaultJsonSerializer = void 0,
        t.defaultJsonSerializer = {
            parse: JSON.parse,
            stringify: JSON.stringify
        }
    },
    36410: function(e, t, n) {
        "use strict";
        var r = this && this.__assign || function() {
            return (r = Object.assign || function(e) {
                for (var t, n = 1, r = arguments.length; n < r; n++)
                    for (var i in t = arguments[n])
                        Object.prototype.hasOwnProperty.call(t, i) && (e[i] = t[i]);
                return e
            }
            ).apply(this, arguments)
        }
          , i = this && this.__awaiter || function(e, t, n, r) {
            return new (n || (n = Promise))(function(i, a) {
                function o(e) {
                    try {
                        u(r.next(e))
                    } catch (e) {
                        a(e)
                    }
                }
                function s(e) {
                    try {
                        u(r.throw(e))
                    } catch (e) {
                        a(e)
                    }
                }
                function u(e) {
                    var t;
                    e.done ? i(e.value) : ((t = e.value)instanceof n ? t : new n(function(e) {
                        e(t)
                    }
                    )).then(o, s)
                }
                u((r = r.apply(e, t || [])).next())
            }
            )
        }
          , a = this && this.__generator || function(e, t) {
            var n, r, i, a, o = {
                label: 0,
                sent: function() {
                    if (1 & i[0])
                        throw i[1];
                    return i[1]
                },
                trys: [],
                ops: []
            };
            return a = {
                next: s(0),
                throw: s(1),
                return: s(2)
            },
            "function" == typeof Symbol && (a[Symbol.iterator] = function() {
                return this
            }
            ),
            a;
            function s(a) {
                return function(s) {
                    return function(a) {
                        if (n)
                            throw TypeError("Generator is already executing.");
                        for (; o; )
                            try {
                                if (n = 1,
                                r && (i = 2 & a[0] ? r.return : a[0] ? r.throw || ((i = r.return) && i.call(r),
                                0) : r.next) && !(i = i.call(r, a[1])).done)
                                    return i;
                                switch (r = 0,
                                i && (a = [2 & a[0], i.value]),
                                a[0]) {
                                case 0:
                                case 1:
                                    i = a;
                                    break;
                                case 4:
                                    return o.label++,
                                    {
                                        value: a[1],
                                        done: !1
                                    };
                                case 5:
                                    o.label++,
                                    r = a[1],
                                    a = [0];
                                    continue;
                                case 7:
                                    a = o.ops.pop(),
                                    o.trys.pop();
                                    continue;
                                default:
                                    if (!(i = (i = o.trys).length > 0 && i[i.length - 1]) && (6 === a[0] || 2 === a[0])) {
                                        o = 0;
                                        continue
                                    }
                                    if (3 === a[0] && (!i || a[1] > i[0] && a[1] < i[3])) {
                                        o.label = a[1];
                                        break
                                    }
                                    if (6 === a[0] && o.label < i[1]) {
                                        o.label = i[1],
                                        i = a;
                                        break
                                    }
                                    if (i && o.label < i[2]) {
                                        o.label = i[2],
                                        o.ops.push(a);
                                        break
                                    }
                                    i[2] && o.ops.pop(),
                                    o.trys.pop();
                                    continue
                                }
                                a = t.call(e, o)
                            } catch (e) {
                                a = [6, e],
                                r = 0
                            } finally {
                                n = i = 0
                            }
                        if (5 & a[0])
                            throw a[1];
                        return {
                            value: a[0] ? a[1] : void 0,
                            done: !0
                        }
                    }([a, s])
                }
            }
        }
        ;
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.GraphQLWebSocketClient = void 0;
        var o = n(35463)
          , s = n(22321)
          , u = "ping"
          , l = "pong"
          , c = "complete"
          , d = function() {
            function e(e, t, n) {
                this._type = e,
                this._payload = t,
                this._id = n
            }
            return Object.defineProperty(e.prototype, "type", {
                get: function() {
                    return this._type
                },
                enumerable: !1,
                configurable: !0
            }),
            Object.defineProperty(e.prototype, "id", {
                get: function() {
                    return this._id
                },
                enumerable: !1,
                configurable: !0
            }),
            Object.defineProperty(e.prototype, "payload", {
                get: function() {
                    return this._payload
                },
                enumerable: !1,
                configurable: !0
            }),
            Object.defineProperty(e.prototype, "text", {
                get: function() {
                    var e = {
                        type: this.type
                    };
                    return null != this.id && void 0 != this.id && (e.id = this.id),
                    null != this.payload && void 0 != this.payload && (e.payload = this.payload),
                    JSON.stringify(e)
                },
                enumerable: !1,
                configurable: !0
            }),
            e.parse = function(t, n) {
                var r = JSON.parse(t)
                  , i = r.type
                  , a = r.payload
                  , o = r.id;
                return new e(i,n(a),o)
            }
            ,
            e
        }()
          , p = function() {
            function e(e, t) {
                var n = this
                  , s = t.onInit
                  , p = t.onAcknowledged
                  , m = t.onPing
                  , y = t.onPong;
                this.socketState = {
                    acknowledged: !1,
                    lastRequestId: 0,
                    subscriptions: {}
                },
                this.socket = e,
                e.onopen = function(t) {
                    return i(n, void 0, void 0, function() {
                        var t, n, r, i;
                        return a(this, function(a) {
                            switch (a.label) {
                            case 0:
                                if (this.socketState.acknowledged = !1,
                                this.socketState.subscriptions = {},
                                n = (t = e).send,
                                r = f,
                                !s)
                                    return [3, 2];
                                return [4, s()];
                            case 1:
                                return i = a.sent(),
                                [3, 3];
                            case 2:
                                i = null,
                                a.label = 3;
                            case 3:
                                return n.apply(t, [r.apply(void 0, [i]).text]),
                                [2]
                            }
                        })
                    })
                }
                ,
                e.onclose = function(e) {
                    n.socketState.acknowledged = !1,
                    n.socketState.subscriptions = {}
                }
                ,
                e.onerror = function(e) {
                    console.error(e)
                }
                ,
                e.onmessage = function(t) {
                    try {
                        var i, a, s = (i = t.data,
                        void 0 === a && (a = function(e) {
                            return e
                        }
                        ),
                        d.parse(i, a));
                        switch (s.type) {
                        case "connection_ack":
                            n.socketState.acknowledged ? console.warn("Duplicate CONNECTION_ACK message ignored") : (n.socketState.acknowledged = !0,
                            p && p(s.payload));
                            return;
                        case u:
                            m ? m(s.payload).then(function(t) {
                                return e.send(h(t).text)
                            }) : e.send(h(null).text);
                            return;
                        case l:
                            y && y(s.payload);
                            return
                        }
                        if (!n.socketState.acknowledged || void 0 === s.id || null === s.id || !n.socketState.subscriptions[s.id])
                            return;
                        var f = n.socketState.subscriptions[s.id]
                          , g = f.query
                          , b = f.variables
                          , v = f.subscriber;
                        switch (s.type) {
                        case "next":
                            !s.payload.errors && s.payload.data && v.next && v.next(s.payload.data),
                            s.payload.errors && v.error && v.error(new o.ClientError(r(r({}, s.payload), {
                                status: 200
                            }),{
                                query: g,
                                variables: b
                            }));
                            return;
                        case "error":
                            v.error && v.error(new o.ClientError({
                                errors: s.payload,
                                status: 200
                            },{
                                query: g,
                                variables: b
                            }));
                            return;
                        case c:
                            v.complete && v.complete(),
                            delete n.socketState.subscriptions[s.id];
                            return
                        }
                    } catch (t) {
                        console.error(t),
                        e.close(1006)
                    }
                    e.close(4400, "Unknown graphql-ws message.")
                }
            }
            return e.prototype.makeSubscribe = function(e, t, n, r) {
                var i = this
                  , a = (this.socketState.lastRequestId++).toString();
                return this.socketState.subscriptions[a] = {
                    query: e,
                    variables: n,
                    subscriber: r
                },
                this.socket.send(new d("subscribe",{
                    query: e,
                    operationName: t,
                    variables: n
                },a).text),
                function() {
                    i.socket.send(new d(c,void 0,a).text),
                    delete i.socketState.subscriptions[a]
                }
            }
            ,
            e.prototype.rawRequest = function(e, t) {
                var n = this;
                return new Promise(function(r, i) {
                    var a;
                    n.rawSubscribe(e, {
                        next: function(e, t) {
                            return a = {
                                data: e,
                                extensions: t
                            }
                        },
                        error: i,
                        complete: function() {
                            return r(a)
                        }
                    }, t)
                }
                )
            }
            ,
            e.prototype.request = function(e, t) {
                var n = this;
                return new Promise(function(r, i) {
                    var a;
                    n.subscribe(e, {
                        next: function(e) {
                            return a = e
                        },
                        error: i,
                        complete: function() {
                            return r(a)
                        }
                    }, t)
                }
                )
            }
            ,
            e.prototype.subscribe = function(e, t, n) {
                var r = s.resolveRequestDocument(e)
                  , i = r.query
                  , a = r.operationName;
                return this.makeSubscribe(i, a, n, t)
            }
            ,
            e.prototype.rawSubscribe = function(e, t, n) {
                return this.makeSubscribe(e, void 0, n, t)
            }
            ,
            e.prototype.ping = function(e) {
                this.socket.send(new d(u,e,void 0).text)
            }
            ,
            e.prototype.close = function() {
                this.socket.close(1e3)
            }
            ,
            e.PROTOCOL = "graphql-transport-ws",
            e
        }();
        function f(e) {
            return new d("connection_init",e)
        }
        function h(e) {
            return new d(l,e,void 0)
        }
        t.GraphQLWebSocketClient = p
    },
    22321: function(e, t, n) {
        "use strict";
        var r = this && this.__assign || function() {
            return (r = Object.assign || function(e) {
                for (var t, n = 1, r = arguments.length; n < r; n++)
                    for (var i in t = arguments[n])
                        Object.prototype.hasOwnProperty.call(t, i) && (e[i] = t[i]);
                return e
            }
            ).apply(this, arguments)
        }
          , i = this && this.__createBinding || (Object.create ? function(e, t, n, r) {
            void 0 === r && (r = n),
            Object.defineProperty(e, r, {
                enumerable: !0,
                get: function() {
                    return t[n]
                }
            })
        }
        : function(e, t, n, r) {
            void 0 === r && (r = n),
            e[r] = t[n]
        }
        )
          , a = this && this.__setModuleDefault || (Object.create ? function(e, t) {
            Object.defineProperty(e, "default", {
                enumerable: !0,
                value: t
            })
        }
        : function(e, t) {
            e.default = t
        }
        )
          , o = this && this.__importStar || function(e) {
            if (e && e.__esModule)
                return e;
            var t = {};
            if (null != e)
                for (var n in e)
                    "default" !== n && Object.prototype.hasOwnProperty.call(e, n) && i(t, e, n);
            return a(t, e),
            t
        }
          , s = this && this.__awaiter || function(e, t, n, r) {
            return new (n || (n = Promise))(function(i, a) {
                function o(e) {
                    try {
                        u(r.next(e))
                    } catch (e) {
                        a(e)
                    }
                }
                function s(e) {
                    try {
                        u(r.throw(e))
                    } catch (e) {
                        a(e)
                    }
                }
                function u(e) {
                    var t;
                    e.done ? i(e.value) : ((t = e.value)instanceof n ? t : new n(function(e) {
                        e(t)
                    }
                    )).then(o, s)
                }
                u((r = r.apply(e, t || [])).next())
            }
            )
        }
          , u = this && this.__generator || function(e, t) {
            var n, r, i, a, o = {
                label: 0,
                sent: function() {
                    if (1 & i[0])
                        throw i[1];
                    return i[1]
                },
                trys: [],
                ops: []
            };
            return a = {
                next: s(0),
                throw: s(1),
                return: s(2)
            },
            "function" == typeof Symbol && (a[Symbol.iterator] = function() {
                return this
            }
            ),
            a;
            function s(a) {
                return function(s) {
                    return function(a) {
                        if (n)
                            throw TypeError("Generator is already executing.");
                        for (; o; )
                            try {
                                if (n = 1,
                                r && (i = 2 & a[0] ? r.return : a[0] ? r.throw || ((i = r.return) && i.call(r),
                                0) : r.next) && !(i = i.call(r, a[1])).done)
                                    return i;
                                switch (r = 0,
                                i && (a = [2 & a[0], i.value]),
                                a[0]) {
                                case 0:
                                case 1:
                                    i = a;
                                    break;
                                case 4:
                                    return o.label++,
                                    {
                                        value: a[1],
                                        done: !1
                                    };
                                case 5:
                                    o.label++,
                                    r = a[1],
                                    a = [0];
                                    continue;
                                case 7:
                                    a = o.ops.pop(),
                                    o.trys.pop();
                                    continue;
                                default:
                                    if (!(i = (i = o.trys).length > 0 && i[i.length - 1]) && (6 === a[0] || 2 === a[0])) {
                                        o = 0;
                                        continue
                                    }
                                    if (3 === a[0] && (!i || a[1] > i[0] && a[1] < i[3])) {
                                        o.label = a[1];
                                        break
                                    }
                                    if (6 === a[0] && o.label < i[1]) {
                                        o.label = i[1],
                                        i = a;
                                        break
                                    }
                                    if (i && o.label < i[2]) {
                                        o.label = i[2],
                                        o.ops.push(a);
                                        break
                                    }
                                    i[2] && o.ops.pop(),
                                    o.trys.pop();
                                    continue
                                }
                                a = t.call(e, o)
                            } catch (e) {
                                a = [6, e],
                                r = 0
                            } finally {
                                n = i = 0
                            }
                        if (5 & a[0])
                            throw a[1];
                        return {
                            value: a[0] ? a[1] : void 0,
                            done: !0
                        }
                    }([a, s])
                }
            }
        }
          , l = this && this.__rest || function(e, t) {
            var n = {};
            for (var r in e)
                Object.prototype.hasOwnProperty.call(e, r) && 0 > t.indexOf(r) && (n[r] = e[r]);
            if (null != e && "function" == typeof Object.getOwnPropertySymbols)
                for (var i = 0, r = Object.getOwnPropertySymbols(e); i < r.length; i++)
                    0 > t.indexOf(r[i]) && Object.prototype.propertyIsEnumerable.call(e, r[i]) && (n[r[i]] = e[r[i]]);
            return n
        }
          , c = this && this.__importDefault || function(e) {
            return e && e.__esModule ? e : {
                default: e
            }
        }
        ;
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.GraphQLWebSocketClient = t.gql = t.resolveRequestDocument = t.batchRequests = t.request = t.rawRequest = t.GraphQLClient = t.ClientError = void 0;
        var d = o(n(67230))
          , p = n(13372)
          , f = n(24308)
          , h = c(n(8312))
          , m = n(85892)
          , y = n(91187)
          , g = n(35463);
        Object.defineProperty(t, "ClientError", {
            enumerable: !0,
            get: function() {
                return g.ClientError
            }
        });
        var b = function(e) {
            var t, n = {};
            return e && ("undefined" != typeof Headers && e instanceof Headers || d && d.Headers && e instanceof d.Headers ? (t = {},
            e.forEach(function(e, n) {
                t[n] = e
            }),
            n = t) : Array.isArray(e) ? e.forEach(function(e) {
                var t = e[0]
                  , r = e[1];
                n[t] = r
            }) : n = e),
            n
        }
          , v = function(e) {
            return e.replace(/([\s,]|#[^\n\r]+)+/g, " ").trim()
        }
          , w = function(e) {
            var t = e.query
              , n = e.variables
              , r = e.operationName
              , i = e.jsonSerializer;
            if (!Array.isArray(t)) {
                var a = ["query=" + encodeURIComponent(v(t))];
                return n && a.push("variables=" + encodeURIComponent(i.stringify(n))),
                r && a.push("operationName=" + encodeURIComponent(r)),
                a.join("&")
            }
            if (void 0 !== n && !Array.isArray(n))
                throw Error("Cannot create query with given variable type, array expected");
            var o = t.reduce(function(e, t, r) {
                return e.push({
                    query: v(t),
                    variables: n ? i.stringify(n[r]) : void 0
                }),
                e
            }, []);
            return "query=" + encodeURIComponent(i.stringify(o))
        }
          , T = function(e) {
            var t = e.url
              , n = e.query
              , i = e.variables
              , a = e.operationName
              , o = e.headers
              , l = e.fetch
              , c = e.fetchOptions
              , d = e.middleware;
            return s(void 0, void 0, void 0, function() {
                var e, s;
                return u(this, function(u) {
                    switch (u.label) {
                    case 0:
                        if (s = r({
                            method: "POST",
                            headers: r(r({}, "string" == typeof (e = h.default(n, i, a, c.jsonSerializer)) ? {
                                "Content-Type": "application/json"
                            } : {}), o),
                            body: e
                        }, c),
                        !d)
                            return [3, 2];
                        return [4, Promise.resolve(d(s))];
                    case 1:
                        s = u.sent(),
                        u.label = 2;
                    case 2:
                        return [4, l(t, s)];
                    case 3:
                        return [2, u.sent()]
                    }
                })
            })
        }
          , E = function(e) {
            var t = e.url
              , n = e.query
              , i = e.variables
              , a = e.operationName
              , o = e.headers
              , l = e.fetch
              , c = e.fetchOptions
              , d = e.middleware;
            return s(void 0, void 0, void 0, function() {
                var e, s;
                return u(this, function(u) {
                    switch (u.label) {
                    case 0:
                        if (e = w({
                            query: n,
                            variables: i,
                            operationName: a,
                            jsonSerializer: c.jsonSerializer
                        }),
                        s = r({
                            method: "GET",
                            headers: o
                        }, c),
                        !d)
                            return [3, 2];
                        return [4, Promise.resolve(d(s))];
                    case 1:
                        s = u.sent(),
                        u.label = 2;
                    case 2:
                        return [4, l(t + "?" + e, s)];
                    case 3:
                        return [2, u.sent()]
                    }
                })
            })
        }
          , A = function() {
            function e(e, t) {
                void 0 === t && (t = {}),
                this.url = e,
                this.options = t
            }
            return e.prototype.rawRequest = function(e, t, n) {
                return s(this, void 0, void 0, function() {
                    var i, a, o, s, c, p, f, h, m, g, v, w;
                    return u(this, function(u) {
                        return i = y.parseRawRequestArgs(e, t, n),
                        o = (a = this.options).headers,
                        c = void 0 === (s = a.fetch) ? d.default : s,
                        f = void 0 === (p = a.method) ? "POST" : p,
                        h = a.requestMiddleware,
                        m = a.responseMiddleware,
                        g = l(a, ["headers", "fetch", "method", "requestMiddleware", "responseMiddleware"]),
                        v = this.url,
                        void 0 !== i.signal && (g.signal = i.signal),
                        w = _(i.query).operationName,
                        [2, x({
                            url: v,
                            query: i.query,
                            variables: i.variables,
                            headers: r(r({}, b(S(o))), b(i.requestHeaders)),
                            operationName: w,
                            fetch: c,
                            method: f,
                            fetchOptions: g,
                            middleware: h
                        }).then(function(e) {
                            return m && m(e),
                            e
                        }).catch(function(e) {
                            throw m && m(e),
                            e
                        })]
                    })
                })
            }
            ,
            e.prototype.request = function(e) {
                for (var t = [], n = 1; n < arguments.length; n++)
                    t[n - 1] = arguments[n];
                var i = t[0]
                  , a = t[1]
                  , o = y.parseRequestArgs(e, i, a)
                  , s = this.options
                  , u = s.headers
                  , c = s.fetch
                  , p = void 0 === c ? d.default : c
                  , f = s.method
                  , h = s.requestMiddleware
                  , m = s.responseMiddleware
                  , g = l(s, ["headers", "fetch", "method", "requestMiddleware", "responseMiddleware"])
                  , v = this.url;
                void 0 !== o.signal && (g.signal = o.signal);
                var w = _(o.document)
                  , T = w.query
                  , E = w.operationName;
                return x({
                    url: v,
                    query: T,
                    variables: o.variables,
                    headers: r(r({}, b(S(u))), b(o.requestHeaders)),
                    operationName: E,
                    fetch: p,
                    method: void 0 === f ? "POST" : f,
                    fetchOptions: g,
                    middleware: h
                }).then(function(e) {
                    return m && m(e),
                    e.data
                }).catch(function(e) {
                    throw m && m(e),
                    e
                })
            }
            ,
            e.prototype.batchRequests = function(e, t) {
                var n = y.parseBatchRequestArgs(e, t)
                  , i = this.options
                  , a = i.headers
                  , o = i.fetch
                  , s = void 0 === o ? d.default : o
                  , u = i.method
                  , c = i.requestMiddleware
                  , p = i.responseMiddleware
                  , f = l(i, ["headers", "fetch", "method", "requestMiddleware", "responseMiddleware"])
                  , h = this.url;
                return void 0 !== n.signal && (f.signal = n.signal),
                x({
                    url: h,
                    query: n.documents.map(function(e) {
                        return _(e.document).query
                    }),
                    variables: n.documents.map(function(e) {
                        return e.variables
                    }),
                    headers: r(r({}, b(S(a))), b(n.requestHeaders)),
                    operationName: void 0,
                    fetch: s,
                    method: void 0 === u ? "POST" : u,
                    fetchOptions: f,
                    middleware: c
                }).then(function(e) {
                    return p && p(e),
                    e.data
                }).catch(function(e) {
                    throw p && p(e),
                    e
                })
            }
            ,
            e.prototype.setHeaders = function(e) {
                return this.options.headers = e,
                this
            }
            ,
            e.prototype.setHeader = function(e, t) {
                var n, r = this.options.headers;
                return r ? r[e] = t : this.options.headers = ((n = {})[e] = t,
                n),
                this
            }
            ,
            e.prototype.setEndpoint = function(e) {
                return this.url = e,
                this
            }
            ,
            e
        }();
        function x(e) {
            var t = e.url
              , n = e.query
              , i = e.variables
              , a = e.headers
              , o = e.operationName
              , c = e.fetch
              , d = e.method
              , p = void 0 === d ? "POST" : d
              , f = e.fetchOptions
              , h = e.middleware;
            return s(this, void 0, void 0, function() {
                var e, d, y, b, v, w, A, x, k, C, _;
                return u(this, function(S) {
                    switch (S.label) {
                    case 0:
                        return e = "POST" === p.toUpperCase() ? T : E,
                        d = Array.isArray(n),
                        [4, e({
                            url: t,
                            query: n,
                            variables: i,
                            operationName: o,
                            headers: a,
                            fetch: c,
                            fetchOptions: f,
                            middleware: h
                        })];
                    case 1:
                        return [4, function(e, t) {
                            return void 0 === t && (t = m.defaultJsonSerializer),
                            s(this, void 0, void 0, function() {
                                var n, r, i;
                                return u(this, function(a) {
                                    switch (a.label) {
                                    case 0:
                                        if (e.headers.forEach(function(e, t) {
                                            "content-type" === t.toLowerCase() && (n = e)
                                        }),
                                        !(n && n.toLowerCase().startsWith("application/json")))
                                            return [3, 2];
                                        return i = (r = t).parse,
                                        [4, e.text()];
                                    case 1:
                                        return [2, i.apply(r, [a.sent()])];
                                    case 2:
                                        return [2, e.text()]
                                    }
                                })
                            })
                        }(y = S.sent(), f.jsonSerializer)];
                    case 2:
                        if (b = S.sent(),
                        v = d && Array.isArray(b) ? !b.some(function(e) {
                            return !e.data
                        }) : !!b.data,
                        w = !b.errors || "all" === f.errorPolicy || "ignore" === f.errorPolicy,
                        y.ok && w && v)
                            return A = y.headers,
                            x = y.status,
                            b.errors,
                            k = l(b, ["errors"]),
                            C = "ignore" === f.errorPolicy ? k : b,
                            [2, r(r({}, d ? {
                                data: C
                            } : C), {
                                headers: A,
                                status: x
                            })];
                        throw _ = "string" == typeof b ? {
                            error: b
                        } : b,
                        new g.ClientError(r(r({}, _), {
                            status: y.status,
                            headers: y.headers
                        }),{
                            query: n,
                            variables: i
                        })
                    }
                })
            })
        }
        function k(e, t) {
            for (var n = [], i = 2; i < arguments.length; i++)
                n[i - 2] = arguments[i];
            return s(this, void 0, void 0, function() {
                var i, a, o;
                return u(this, function(s) {
                    return i = n[0],
                    a = n[1],
                    o = y.parseRequestExtendedArgs(e, t, i, a),
                    [2, new A(o.url).request(r({}, o))]
                })
            })
        }
        function C(e) {
            var t, n = void 0, r = e.definitions.filter(function(e) {
                return "OperationDefinition" === e.kind
            });
            return 1 === r.length && (n = null === (t = r[0].name) || void 0 === t ? void 0 : t.value),
            n
        }
        function _(e) {
            if ("string" == typeof e) {
                var t = void 0;
                try {
                    var n = p.parse(e);
                    t = C(n)
                } catch (e) {}
                return {
                    query: e,
                    operationName: t
                }
            }
            var r = C(e);
            return {
                query: f.print(e),
                operationName: r
            }
        }
        function S(e) {
            return "function" == typeof e ? e() : e
        }
        t.GraphQLClient = A,
        t.rawRequest = function(e, t, n, i) {
            return s(this, void 0, void 0, function() {
                var a;
                return u(this, function(o) {
                    return a = y.parseRawRequestExtendedArgs(e, t, n, i),
                    [2, new A(a.url).rawRequest(r({}, a))]
                })
            })
        }
        ,
        t.request = k,
        t.batchRequests = function(e, t, n) {
            return s(this, void 0, void 0, function() {
                var i;
                return u(this, function(a) {
                    return i = y.parseBatchRequestsExtendedArgs(e, t, n),
                    [2, new A(i.url).batchRequests(r({}, i))]
                })
            })
        }
        ,
        t.default = k,
        t.resolveRequestDocument = _,
        t.gql = function(e) {
            for (var t = [], n = 1; n < arguments.length; n++)
                t[n - 1] = arguments[n];
            return e.reduce(function(e, n, r) {
                return "" + e + n + (r in t ? t[r] : "")
            }, "")
        }
        ;
        var I = n(36410);
        Object.defineProperty(t, "GraphQLWebSocketClient", {
            enumerable: !0,
            get: function() {
                return I.GraphQLWebSocketClient
            }
        })
    },
    91187: function(e, t) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.parseBatchRequestsExtendedArgs = t.parseRawRequestExtendedArgs = t.parseRequestExtendedArgs = t.parseBatchRequestArgs = t.parseRawRequestArgs = t.parseRequestArgs = void 0,
        t.parseRequestArgs = function(e, t, n) {
            return e.document ? e : {
                document: e,
                variables: t,
                requestHeaders: n,
                signal: void 0
            }
        }
        ,
        t.parseRawRequestArgs = function(e, t, n) {
            return e.query ? e : {
                query: e,
                variables: t,
                requestHeaders: n,
                signal: void 0
            }
        }
        ,
        t.parseBatchRequestArgs = function(e, t) {
            return e.documents ? e : {
                documents: e,
                requestHeaders: t,
                signal: void 0
            }
        }
        ,
        t.parseRequestExtendedArgs = function(e, t, n, r) {
            return e.document ? e : {
                url: e,
                document: t,
                variables: n,
                requestHeaders: r,
                signal: void 0
            }
        }
        ,
        t.parseRawRequestExtendedArgs = function(e, t, n, r) {
            return e.query ? e : {
                url: e,
                query: t,
                variables: n,
                requestHeaders: r,
                signal: void 0
            }
        }
        ,
        t.parseBatchRequestsExtendedArgs = function(e, t, n) {
            return e.documents ? e : {
                url: e,
                documents: t,
                requestHeaders: n,
                signal: void 0
            }
        }
    },
    35463: function(e, t) {
        "use strict";
        var n, r = this && this.__extends || (n = function(e, t) {
            return (n = Object.setPrototypeOf || ({
                __proto__: []
            })instanceof Array && function(e, t) {
                e.__proto__ = t
            }
            || function(e, t) {
                for (var n in t)
                    Object.prototype.hasOwnProperty.call(t, n) && (e[n] = t[n])
            }
            )(e, t)
        }
        ,
        function(e, t) {
            if ("function" != typeof t && null !== t)
                throw TypeError("Class extends value " + String(t) + " is not a constructor or null");
            function r() {
                this.constructor = e
            }
            n(e, t),
            e.prototype = null === t ? Object.create(t) : (r.prototype = t.prototype,
            new r)
        }
        );
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.ClientError = void 0;
        var i = function(e) {
            function t(n, r) {
                var i = this
                  , a = t.extractMessage(n) + ": " + JSON.stringify({
                    response: n,
                    request: r
                });
                return Object.setPrototypeOf(i = e.call(this, a) || this, t.prototype),
                i.response = n,
                i.request = r,
                "function" == typeof Error.captureStackTrace && Error.captureStackTrace(i, t),
                i
            }
            return r(t, e),
            t.extractMessage = function(e) {
                try {
                    return e.errors[0].message
                } catch (t) {
                    return "GraphQL Error (Code: " + e.status + ")"
                }
            }
            ,
            t
        }(Error);
        t.ClientError = i
    },
    94466: function(e, t, n) {
        var r = n(65234)(n(83250), "DataView");
        e.exports = r
    },
    85208: function(e, t, n) {
        var r = n(34440)
          , i = n(84108)
          , a = n(61085)
          , o = n(77706)
          , s = n(8636);
        function u(e) {
            var t = -1
              , n = null == e ? 0 : e.length;
            for (this.clear(); ++t < n; ) {
                var r = e[t];
                this.set(r[0], r[1])
            }
        }
        u.prototype.clear = r,
        u.prototype.delete = i,
        u.prototype.get = a,
        u.prototype.has = o,
        u.prototype.set = s,
        e.exports = u
    },
    81998: function(e, t, n) {
        var r = n(90266)
          , i = n(42875)
          , a = n(45828)
          , o = n(24115)
          , s = n(67690);
        function u(e) {
            var t = -1
              , n = null == e ? 0 : e.length;
            for (this.clear(); ++t < n; ) {
                var r = e[t];
                this.set(r[0], r[1])
            }
        }
        u.prototype.clear = r,
        u.prototype.delete = i,
        u.prototype.get = a,
        u.prototype.has = o,
        u.prototype.set = s,
        e.exports = u
    },
    72887: function(e, t, n) {
        var r = n(65234)(n(83250), "Map");
        e.exports = r
    },
    95678: function(e, t, n) {
        var r = n(39016)
          , i = n(62363)
          , a = n(64348)
          , o = n(53062)
          , s = n(30262);
        function u(e) {
            var t = -1
              , n = null == e ? 0 : e.length;
            for (this.clear(); ++t < n; ) {
                var r = e[t];
                this.set(r[0], r[1])
            }
        }
        u.prototype.clear = r,
        u.prototype.delete = i,
        u.prototype.get = a,
        u.prototype.has = o,
        u.prototype.set = s,
        e.exports = u
    },
    95747: function(e, t, n) {
        var r = n(65234)(n(83250), "Promise");
        e.exports = r
    },
    56616: function(e, t, n) {
        var r = n(65234)(n(83250), "Set");
        e.exports = r
    },
    84546: function(e, t, n) {
        var r = n(95678)
          , i = n(83937)
          , a = n(15009);
        function o(e) {
            var t = -1
              , n = null == e ? 0 : e.length;
            for (this.__data__ = new r; ++t < n; )
                this.add(e[t])
        }
        o.prototype.add = o.prototype.push = i,
        o.prototype.has = a,
        e.exports = o
    },
    19549: function(e, t, n) {
        var r = n(81998)
          , i = n(93210)
          , a = n(48603)
          , o = n(38947)
          , s = n(70885)
          , u = n(98938);
        function l(e) {
            var t = this.__data__ = new r(e);
            this.size = t.size
        }
        l.prototype.clear = i,
        l.prototype.delete = a,
        l.prototype.get = o,
        l.prototype.has = s,
        l.prototype.set = u,
        e.exports = l
    },
    70861: function(e, t, n) {
        var r = n(83250).Symbol;
        e.exports = r
    },
    3526: function(e, t, n) {
        var r = n(83250).Uint8Array;
        e.exports = r
    },
    98001: function(e, t, n) {
        var r = n(65234)(n(83250), "WeakMap");
        e.exports = r
    },
    82274: function(e) {
        e.exports = function(e, t, n) {
            switch (n.length) {
            case 0:
                return e.call(t);
            case 1:
                return e.call(t, n[0]);
            case 2:
                return e.call(t, n[0], n[1]);
            case 3:
                return e.call(t, n[0], n[1], n[2])
            }
            return e.apply(t, n)
        }
    },
    8660: function(e) {
        e.exports = function(e, t, n, r) {
            for (var i = -1, a = null == e ? 0 : e.length; ++i < a; ) {
                var o = e[i];
                t(r, o, n(o), e)
            }
            return r
        }
    },
    84004: function(e) {
        e.exports = function(e, t) {
            for (var n = -1, r = null == e ? 0 : e.length; ++n < r && !1 !== t(e[n], n, e); )
                ;
            return e
        }
    },
    69865: function(e) {
        e.exports = function(e, t) {
            for (var n = -1, r = null == e ? 0 : e.length; ++n < r; )
                if (!t(e[n], n, e))
                    return !1;
            return !0
        }
    },
    82493: function(e) {
        e.exports = function(e, t) {
            for (var n = -1, r = null == e ? 0 : e.length, i = 0, a = []; ++n < r; ) {
                var o = e[n];
                t(o, n, e) && (a[i++] = o)
            }
            return a
        }
    },
    45436: function(e, t, n) {
        var r = n(94365);
        e.exports = function(e, t) {
            return !!(null == e ? 0 : e.length) && r(e, t, 0) > -1
        }
    },
    99105: function(e) {
        e.exports = function(e, t, n) {
            for (var r = -1, i = null == e ? 0 : e.length; ++r < i; )
                if (n(t, e[r]))
                    return !0;
            return !1
        }
    },
    75825: function(e, t, n) {
        var r = n(18509)
          , i = n(79312)
          , a = n(55589)
          , o = n(85778)
          , s = n(5023)
          , u = n(50922)
          , l = Object.prototype.hasOwnProperty;
        e.exports = function(e, t) {
            var n = a(e)
              , c = !n && i(e)
              , d = !n && !c && o(e)
              , p = !n && !c && !d && u(e)
              , f = n || c || d || p
              , h = f ? r(e.length, String) : []
              , m = h.length;
            for (var y in e)
                (t || l.call(e, y)) && !(f && ("length" == y || d && ("offset" == y || "parent" == y) || p && ("buffer" == y || "byteLength" == y || "byteOffset" == y) || s(y, m))) && h.push(y);
            return h
        }
    },
    29233: function(e) {
        e.exports = function(e, t) {
            for (var n = -1, r = null == e ? 0 : e.length, i = Array(r); ++n < r; )
                i[n] = t(e[n], n, e);
            return i
        }
    },
    10111: function(e) {
        e.exports = function(e, t) {
            for (var n = -1, r = t.length, i = e.length; ++n < r; )
                e[i + n] = t[n];
            return e
        }
    },
    85115: function(e) {
        e.exports = function(e, t, n, r) {
            var i = -1
              , a = null == e ? 0 : e.length;
            for (r && a && (n = e[++i]); ++i < a; )
                n = t(n, e[i], i, e);
            return n
        }
    },
    73455: function(e, t, n) {
        var r = n(32166)
          , i = n(8469);
        e.exports = function(e) {
            return i(r(e))
        }
    },
    1831: function(e) {
        e.exports = function(e, t) {
            for (var n = -1, r = null == e ? 0 : e.length; ++n < r; )
                if (t(e[n], n, e))
                    return !0;
            return !1
        }
    },
    97088: function(e, t, n) {
        var r = n(86174)("length");
        e.exports = r
    },
    59512: function(e) {
        e.exports = function(e) {
            return e.split("")
        }
    },
    96026: function(e) {
        var t = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
        e.exports = function(e) {
            return e.match(t) || []
        }
    },
    73532: function(e, t, n) {
        var r = n(87500)
          , i = n(58260);
        e.exports = function(e, t, n) {
            (void 0 === n || i(e[t], n)) && (void 0 !== n || t in e) || r(e, t, n)
        }
    },
    93192: function(e, t, n) {
        var r = n(87500)
          , i = n(58260)
          , a = Object.prototype.hasOwnProperty;
        e.exports = function(e, t, n) {
            var o = e[t];
            a.call(e, t) && i(o, n) && (void 0 !== n || t in e) || r(e, t, n)
        }
    },
    18498: function(e, t, n) {
        var r = n(58260);
        e.exports = function(e, t) {
            for (var n = e.length; n--; )
                if (r(e[n][0], t))
                    return n;
            return -1
        }
    },
    3792: function(e, t, n) {
        var r = n(61701);
        e.exports = function(e, t, n, i) {
            return r(e, function(e, r, a) {
                t(i, e, n(e), a)
            }),
            i
        }
    },
    44265: function(e, t, n) {
        var r = n(78618)
          , i = n(62096);
        e.exports = function(e, t) {
            return e && r(t, i(t), e)
        }
    },
    31629: function(e, t, n) {
        var r = n(78618)
          , i = n(9882);
        e.exports = function(e, t) {
            return e && r(t, i(t), e)
        }
    },
    87500: function(e, t, n) {
        var r = n(25595);
        e.exports = function(e, t, n) {
            "__proto__" == t && r ? r(e, t, {
                configurable: !0,
                enumerable: !0,
                value: n,
                writable: !0
            }) : e[t] = n
        }
    },
    18361: function(e, t, n) {
        var r = n(19549)
          , i = n(84004)
          , a = n(93192)
          , o = n(44265)
          , s = n(31629)
          , u = n(46502)
          , l = n(32166)
          , c = n(67272)
          , d = n(52066)
          , p = n(54357)
          , f = n(55713)
          , h = n(87493)
          , m = n(82865)
          , y = n(11908)
          , g = n(84046)
          , b = n(55589)
          , v = n(85778)
          , w = n(37613)
          , T = n(93702)
          , E = n(60693)
          , A = n(62096)
          , x = n(9882)
          , k = "[object Arguments]"
          , C = "[object Function]"
          , _ = "[object Object]"
          , S = {};
        S[k] = S["[object Array]"] = S["[object ArrayBuffer]"] = S["[object DataView]"] = S["[object Boolean]"] = S["[object Date]"] = S["[object Float32Array]"] = S["[object Float64Array]"] = S["[object Int8Array]"] = S["[object Int16Array]"] = S["[object Int32Array]"] = S["[object Map]"] = S["[object Number]"] = S[_] = S["[object RegExp]"] = S["[object Set]"] = S["[object String]"] = S["[object Symbol]"] = S["[object Uint8Array]"] = S["[object Uint8ClampedArray]"] = S["[object Uint16Array]"] = S["[object Uint32Array]"] = !0,
        S["[object Error]"] = S[C] = S["[object WeakMap]"] = !1,
        e.exports = function e(t, n, I, P, B, O) {
            var N, R = 1 & n, F = 2 & n;
            if (I && (N = B ? I(t, P, B, O) : I(t)),
            void 0 !== N)
                return N;
            if (!T(t))
                return t;
            var D = b(t);
            if (D) {
                if (N = m(t),
                !R)
                    return l(t, N)
            } else {
                var M = h(t)
                  , L = M == C || "[object GeneratorFunction]" == M;
                if (v(t))
                    return u(t, R);
                if (M == _ || M == k || L && !B) {
                    if (N = F || L ? {} : g(t),
                    !R)
                        return F ? d(t, s(N, t)) : c(t, o(N, t))
                } else {
                    if (!S[M])
                        return B ? t : {};
                    N = y(t, M, R)
                }
            }
            O || (O = new r);
            var U = O.get(t);
            if (U)
                return U;
            O.set(t, N),
            E(t) ? t.forEach(function(r) {
                N.add(e(r, n, I, r, t, O))
            }) : w(t) && t.forEach(function(r, i) {
                N.set(i, e(r, n, I, i, t, O))
            });
            var q = D ? void 0 : (4 & n ? F ? f : p : F ? x : A)(t);
            return i(q || t, function(r, i) {
                q && (r = t[i = r]),
                a(N, i, e(r, n, I, i, t, O))
            }),
            N
        }
    },
    57890: function(e, t, n) {
        var r = n(93702)
          , i = Object.create
          , a = function() {
            function e() {}
            return function(t) {
                if (!r(t))
                    return {};
                if (i)
                    return i(t);
                e.prototype = t;
                var n = new e;
                return e.prototype = void 0,
                n
            }
        }();
        e.exports = a
    },
    83399: function(e) {
        e.exports = function(e, t, n) {
            if ("function" != typeof e)
                throw TypeError("Expected a function");
            return setTimeout(function() {
                e.apply(void 0, n)
            }, t)
        }
    },
    61701: function(e, t, n) {
        var r = n(44003)
          , i = n(96313)(r);
        e.exports = i
    },
    5869: function(e, t, n) {
        var r = n(61701);
        e.exports = function(e, t) {
            var n = !0;
            return r(e, function(e, r, i) {
                return n = !!t(e, r, i)
            }),
            n
        }
    },
    85117: function(e, t, n) {
        var r = n(52624);
        e.exports = function(e, t, n) {
            for (var i = -1, a = e.length; ++i < a; ) {
                var o = e[i]
                  , s = t(o);
                if (null != s && (void 0 === u ? s == s && !r(s) : n(s, u)))
                    var u = s
                      , l = o
            }
            return l
        }
    },
    44770: function(e) {
        e.exports = function(e, t, n, r) {
            for (var i = e.length, a = n + (r ? 1 : -1); r ? a-- : ++a < i; )
                if (t(e[a], a, e))
                    return a;
            return -1
        }
    },
    22825: function(e, t, n) {
        var r = n(10111)
          , i = n(67123);
        e.exports = function e(t, n, a, o, s) {
            var u = -1
              , l = t.length;
            for (a || (a = i),
            s || (s = []); ++u < l; ) {
                var c = t[u];
                n > 0 && a(c) ? n > 1 ? e(c, n - 1, a, o, s) : r(s, c) : o || (s[s.length] = c)
            }
            return s
        }
    },
    39943: function(e, t, n) {
        var r = n(72545)();
        e.exports = r
    },
    44003: function(e, t, n) {
        var r = n(39943)
          , i = n(62096);
        e.exports = function(e, t) {
            return e && r(e, t, i)
        }
    },
    40548: function(e, t, n) {
        var r = n(24007)
          , i = n(86040);
        e.exports = function(e, t) {
            t = r(t, e);
            for (var n = 0, a = t.length; null != e && n < a; )
                e = e[i(t[n++])];
            return n && n == a ? e : void 0
        }
    },
    4468: function(e, t, n) {
        var r = n(10111)
          , i = n(55589);
        e.exports = function(e, t, n) {
            var a = t(e);
            return i(e) ? a : r(a, n(e))
        }
    },
    69823: function(e, t, n) {
        var r = n(70861)
          , i = n(91339)
          , a = n(25151)
          , o = r ? r.toStringTag : void 0;
        e.exports = function(e) {
            return null == e ? void 0 === e ? "[object Undefined]" : "[object Null]" : o && o in Object(e) ? i(e) : a(e)
        }
    },
    51669: function(e) {
        e.exports = function(e, t) {
            return e > t
        }
    },
    62902: function(e) {
        e.exports = function(e, t) {
            return null != e && t in Object(e)
        }
    },
    94365: function(e, t, n) {
        var r = n(44770)
          , i = n(56963)
          , a = n(45898);
        e.exports = function(e, t, n) {
            return t == t ? a(e, t, n) : r(e, i, n)
        }
    },
    33625: function(e, t, n) {
        var r = n(44003);
        e.exports = function(e, t, n, i) {
            return r(e, function(e, r, a) {
                t(i, n(e), r, a)
            }),
            i
        }
    },
    33016: function(e, t, n) {
        var r = n(69823)
          , i = n(50440);
        e.exports = function(e) {
            return i(e) && "[object Arguments]" == r(e)
        }
    },
    34662: function(e, t, n) {
        var r = n(88968)
          , i = n(50440);
        e.exports = function e(t, n, a, o, s) {
            return t === n || (null != t && null != n && (i(t) || i(n)) ? r(t, n, a, o, e, s) : t != t && n != n)
        }
    },
    88968: function(e, t, n) {
        var r = n(19549)
          , i = n(14952)
          , a = n(21080)
          , o = n(86524)
          , s = n(87493)
          , u = n(55589)
          , l = n(85778)
          , c = n(50922)
          , d = "[object Arguments]"
          , p = "[object Array]"
          , f = "[object Object]"
          , h = Object.prototype.hasOwnProperty;
        e.exports = function(e, t, n, m, y, g) {
            var b = u(e)
              , v = u(t)
              , w = b ? p : s(e)
              , T = v ? p : s(t);
            w = w == d ? f : w,
            T = T == d ? f : T;
            var E = w == f
              , A = T == f
              , x = w == T;
            if (x && l(e)) {
                if (!l(t))
                    return !1;
                b = !0,
                E = !1
            }
            if (x && !E)
                return g || (g = new r),
                b || c(e) ? i(e, t, n, m, y, g) : a(e, t, w, n, m, y, g);
            if (!(1 & n)) {
                var k = E && h.call(e, "__wrapped__")
                  , C = A && h.call(t, "__wrapped__");
                if (k || C) {
                    var _ = k ? e.value() : e
                      , S = C ? t.value() : t;
                    return g || (g = new r),
                    y(_, S, n, m, g)
                }
            }
            return !!x && (g || (g = new r),
            o(e, t, n, m, y, g))
        }
    },
    52275: function(e, t, n) {
        var r = n(87493)
          , i = n(50440);
        e.exports = function(e) {
            return i(e) && "[object Map]" == r(e)
        }
    },
    2972: function(e, t, n) {
        var r = n(19549)
          , i = n(34662);
        e.exports = function(e, t, n, a) {
            var o = n.length
              , s = o
              , u = !a;
            if (null == e)
                return !s;
            for (e = Object(e); o--; ) {
                var l = n[o];
                if (u && l[2] ? l[1] !== e[l[0]] : !(l[0]in e))
                    return !1
            }
            for (; ++o < s; ) {
                var c = (l = n[o])[0]
                  , d = e[c]
                  , p = l[1];
                if (u && l[2]) {
                    if (void 0 === d && !(c in e))
                        return !1
                } else {
                    var f = new r;
                    if (a)
                        var h = a(d, p, c, e, t, f);
                    if (!(void 0 === h ? i(p, d, 3, a, f) : h))
                        return !1
                }
            }
            return !0
        }
    },
    56963: function(e) {
        e.exports = function(e) {
            return e != e
        }
    },
    99817: function(e, t, n) {
        var r = n(45563)
          , i = n(28597)
          , a = n(93702)
          , o = n(55784)
          , s = /^\[object .+?Constructor\]$/
          , u = Object.prototype
          , l = Function.prototype.toString
          , c = u.hasOwnProperty
          , d = RegExp("^" + l.call(c).replace(/[\\^$.*+?()[\]{}|]/g, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");
        e.exports = function(e) {
            return !(!a(e) || i(e)) && (r(e) ? d : s).test(o(e))
        }
    },
    7170: function(e, t, n) {
        var r = n(87493)
          , i = n(50440);
        e.exports = function(e) {
            return i(e) && "[object Set]" == r(e)
        }
    },
    42448: function(e, t, n) {
        var r = n(69823)
          , i = n(66052)
          , a = n(50440)
          , o = {};
        o["[object Float32Array]"] = o["[object Float64Array]"] = o["[object Int8Array]"] = o["[object Int16Array]"] = o["[object Int32Array]"] = o["[object Uint8Array]"] = o["[object Uint8ClampedArray]"] = o["[object Uint16Array]"] = o["[object Uint32Array]"] = !0,
        o["[object Arguments]"] = o["[object Array]"] = o["[object ArrayBuffer]"] = o["[object Boolean]"] = o["[object DataView]"] = o["[object Date]"] = o["[object Error]"] = o["[object Function]"] = o["[object Map]"] = o["[object Number]"] = o["[object Object]"] = o["[object RegExp]"] = o["[object Set]"] = o["[object String]"] = o["[object WeakMap]"] = !1,
        e.exports = function(e) {
            return a(e) && i(e.length) && !!o[r(e)]
        }
    },
    55833: function(e, t, n) {
        var r = n(15640)
          , i = n(9906)
          , a = n(80229)
          , o = n(55589)
          , s = n(94437);
        e.exports = function(e) {
            return "function" == typeof e ? e : null == e ? a : "object" == typeof e ? o(e) ? i(e[0], e[1]) : r(e) : s(e)
        }
    },
    41351: function(e, t, n) {
        var r = n(32840)
          , i = n(82825)
          , a = Object.prototype.hasOwnProperty;
        e.exports = function(e) {
            if (!r(e))
                return i(e);
            var t = [];
            for (var n in Object(e))
                a.call(e, n) && "constructor" != n && t.push(n);
            return t
        }
    },
    71309: function(e, t, n) {
        var r = n(93702)
          , i = n(32840)
          , a = n(84866)
          , o = Object.prototype.hasOwnProperty;
        e.exports = function(e) {
            if (!r(e))
                return a(e);
            var t = i(e)
              , n = [];
            for (var s in e)
                "constructor" == s && (t || !o.call(e, s)) || n.push(s);
            return n
        }
    },
    46718: function(e) {
        e.exports = function(e, t) {
            return e < t
        }
    },
    78068: function(e, t, n) {
        var r = n(61701)
          , i = n(30568);
        e.exports = function(e, t) {
            var n = -1
              , a = i(e) ? Array(e.length) : [];
            return r(e, function(e, r, i) {
                a[++n] = t(e, r, i)
            }),
            a
        }
    },
    15640: function(e, t, n) {
        var r = n(2972)
          , i = n(72198)
          , a = n(94656);
        e.exports = function(e) {
            var t = i(e);
            return 1 == t.length && t[0][2] ? a(t[0][0], t[0][1]) : function(n) {
                return n === e || r(n, e, t)
            }
        }
    },
    9906: function(e, t, n) {
        var r = n(34662)
          , i = n(13546)
          , a = n(56708)
          , o = n(5130)
          , s = n(18802)
          , u = n(94656)
          , l = n(86040);
        e.exports = function(e, t) {
            return o(e) && s(t) ? u(l(e), t) : function(n) {
                var o = i(n, e);
                return void 0 === o && o === t ? a(n, e) : r(t, o, 3)
            }
        }
    },
    92133: function(e, t, n) {
        var r = n(19549)
          , i = n(73532)
          , a = n(39943)
          , o = n(21241)
          , s = n(93702)
          , u = n(9882)
          , l = n(11933);
        e.exports = function e(t, n, c, d, p) {
            t !== n && a(n, function(a, u) {
                if (p || (p = new r),
                s(a))
                    o(t, n, u, c, e, d, p);
                else {
                    var f = d ? d(l(t, u), a, u + "", t, n, p) : void 0;
                    void 0 === f && (f = a),
                    i(t, u, f)
                }
            }, u)
        }
    },
    21241: function(e, t, n) {
        var r = n(73532)
          , i = n(46502)
          , a = n(21327)
          , o = n(32166)
          , s = n(84046)
          , u = n(79312)
          , l = n(55589)
          , c = n(18268)
          , d = n(85778)
          , p = n(45563)
          , f = n(93702)
          , h = n(54256)
          , m = n(50922)
          , y = n(11933)
          , g = n(36222);
        e.exports = function(e, t, n, b, v, w, T) {
            var E = y(e, n)
              , A = y(t, n)
              , x = T.get(A);
            if (x) {
                r(e, n, x);
                return
            }
            var k = w ? w(E, A, n + "", e, t, T) : void 0
              , C = void 0 === k;
            if (C) {
                var _ = l(A)
                  , S = !_ && d(A)
                  , I = !_ && !S && m(A);
                k = A,
                _ || S || I ? l(E) ? k = E : c(E) ? k = o(E) : S ? (C = !1,
                k = i(A, !0)) : I ? (C = !1,
                k = a(A, !0)) : k = [] : h(A) || u(A) ? (k = E,
                u(E) ? k = g(E) : (!f(E) || p(E)) && (k = s(A))) : C = !1
            }
            C && (T.set(A, k),
            v(k, A, b, w, T),
            T.delete(A)),
            r(e, n, k)
        }
    },
    54466: function(e, t, n) {
        var r = n(29233)
          , i = n(40548)
          , a = n(55833)
          , o = n(78068)
          , s = n(53340)
          , u = n(31525)
          , l = n(20315)
          , c = n(80229)
          , d = n(55589);
        e.exports = function(e, t, n) {
            t = t.length ? r(t, function(e) {
                return d(e) ? function(t) {
                    return i(t, 1 === e.length ? e[0] : e)
                }
                : e
            }) : [c];
            var p = -1;
            return t = r(t, u(a)),
            s(o(e, function(e, n, i) {
                return {
                    criteria: r(t, function(t) {
                        return t(e)
                    }),
                    index: ++p,
                    value: e
                }
            }), function(e, t) {
                return l(e, t, n)
            })
        }
    },
    57121: function(e, t, n) {
        var r = n(40548)
          , i = n(32619)
          , a = n(24007);
        e.exports = function(e, t, n) {
            for (var o = -1, s = t.length, u = {}; ++o < s; ) {
                var l = t[o]
                  , c = r(e, l);
                n(c, l) && i(u, a(l, e), c)
            }
            return u
        }
    },
    86174: function(e) {
        e.exports = function(e) {
            return function(t) {
                return null == t ? void 0 : t[e]
            }
        }
    },
    3293: function(e, t, n) {
        var r = n(40548);
        e.exports = function(e) {
            return function(t) {
                return r(t, e)
            }
        }
    },
    61642: function(e) {
        e.exports = function(e) {
            return function(t) {
                return null == e ? void 0 : e[t]
            }
        }
    },
    3372: function(e, t, n) {
        var r = n(11928)
          , i = n(5023)
          , a = Array.prototype.splice;
        e.exports = function(e, t) {
            for (var n = e ? t.length : 0, o = n - 1; n--; ) {
                var s = t[n];
                if (n == o || s !== u) {
                    var u = s;
                    i(s) ? a.call(e, s, 1) : r(e, s)
                }
            }
            return e
        }
    },
    54616: function(e) {
        var t = Math.floor
          , n = Math.random;
        e.exports = function(e, r) {
            return e + t(n() * (r - e + 1))
        }
    },
    24930: function(e) {
        var t = Math.ceil
          , n = Math.max;
        e.exports = function(e, r, i, a) {
            for (var o = -1, s = n(t((r - e) / (i || 1)), 0), u = Array(s); s--; )
                u[a ? s : ++o] = e,
                e += i;
            return u
        }
    },
    34306: function(e) {
        e.exports = function(e, t, n, r, i) {
            return i(e, function(e, i, a) {
                n = r ? (r = !1,
                e) : t(n, e, i, a)
            }),
            n
        }
    },
    29735: function(e, t, n) {
        var r = n(80229)
          , i = n(20340)
          , a = n(4173);
        e.exports = function(e, t) {
            return a(i(e, t, r), e + "")
        }
    },
    32619: function(e, t, n) {
        var r = n(93192)
          , i = n(24007)
          , a = n(5023)
          , o = n(93702)
          , s = n(86040);
        e.exports = function(e, t, n, u) {
            if (!o(e))
                return e;
            t = i(t, e);
            for (var l = -1, c = t.length, d = c - 1, p = e; null != p && ++l < c; ) {
                var f = s(t[l])
                  , h = n;
                if ("__proto__" === f || "constructor" === f || "prototype" === f)
                    break;
                if (l != d) {
                    var m = p[f];
                    void 0 === (h = u ? u(m, f, p) : void 0) && (h = o(m) ? m : a(t[l + 1]) ? [] : {})
                }
                r(p, f, h),
                p = p[f]
            }
            return e
        }
    },
    46739: function(e, t, n) {
        var r = n(89203)
          , i = n(25595)
          , a = n(80229);
        e.exports = i ? function(e, t) {
            return i(e, "toString", {
                configurable: !0,
                enumerable: !1,
                value: r(t),
                writable: !0
            })
        }
        : a
    },
    81860: function(e, t, n) {
        var r = n(8469)
          , i = n(31682);
        e.exports = function(e) {
            return r(i(e))
        }
    },
    77379: function(e) {
        e.exports = function(e, t, n) {
            var r = -1
              , i = e.length;
            t < 0 && (t = -t > i ? 0 : i + t),
            (n = n > i ? i : n) < 0 && (n += i),
            i = t > n ? 0 : n - t >>> 0,
            t >>>= 0;
            for (var a = Array(i); ++r < i; )
                a[r] = e[r + t];
            return a
        }
    },
    30854: function(e, t, n) {
        var r = n(61701);
        e.exports = function(e, t) {
            var n;
            return r(e, function(e, r, i) {
                return !(n = t(e, r, i))
            }),
            !!n
        }
    },
    53340: function(e) {
        e.exports = function(e, t) {
            var n = e.length;
            for (e.sort(t); n--; )
                e[n] = e[n].value;
            return e
        }
    },
    23055: function(e) {
        e.exports = function(e, t) {
            for (var n, r = -1, i = e.length; ++r < i; ) {
                var a = t(e[r]);
                void 0 !== a && (n = void 0 === n ? a : n + a)
            }
            return n
        }
    },
    18509: function(e) {
        e.exports = function(e, t) {
            for (var n = -1, r = Array(e); ++n < e; )
                r[n] = t(n);
            return r
        }
    },
    86245: function(e, t, n) {
        var r = n(70861)
          , i = n(29233)
          , a = n(55589)
          , o = n(52624)
          , s = 1 / 0
          , u = r ? r.prototype : void 0
          , l = u ? u.toString : void 0;
        e.exports = function e(t) {
            if ("string" == typeof t)
                return t;
            if (a(t))
                return i(t, e) + "";
            if (o(t))
                return l ? l.call(t) : "";
            var n = t + "";
            return "0" == n && 1 / t == -s ? "-0" : n
        }
    },
    21656: function(e, t, n) {
        var r = n(62438)
          , i = /^\s+/;
        e.exports = function(e) {
            return e ? e.slice(0, r(e) + 1).replace(i, "") : e
        }
    },
    31525: function(e) {
        e.exports = function(e) {
            return function(t) {
                return e(t)
            }
        }
    },
    80135: function(e, t, n) {
        var r = n(84546)
          , i = n(45436)
          , a = n(99105)
          , o = n(77026)
          , s = n(86262)
          , u = n(77969);
        e.exports = function(e, t, n) {
            var l = -1
              , c = i
              , d = e.length
              , p = !0
              , f = []
              , h = f;
            if (n)
                p = !1,
                c = a;
            else if (d >= 200) {
                var m = t ? null : s(e);
                if (m)
                    return u(m);
                p = !1,
                c = o,
                h = new r
            } else
                h = t ? [] : f;
            e: for (; ++l < d; ) {
                var y = e[l]
                  , g = t ? t(y) : y;
                if (y = n || 0 !== y ? y : 0,
                p && g == g) {
                    for (var b = h.length; b--; )
                        if (h[b] === g)
                            continue e;
                    t && h.push(g),
                    f.push(y)
                } else
                    c(h, g, n) || (h !== f && h.push(g),
                    f.push(y))
            }
            return f
        }
    },
    11928: function(e, t, n) {
        var r = n(24007)
          , i = n(77875)
          , a = n(83744)
          , o = n(86040);
        e.exports = function(e, t) {
            return t = r(t, e),
            null == (e = a(e, t)) || delete e[o(i(t))]
        }
    },
    20071: function(e, t, n) {
        var r = n(29233);
        e.exports = function(e, t) {
            return r(t, function(t) {
                return e[t]
            })
        }
    },
    77026: function(e) {
        e.exports = function(e, t) {
            return e.has(t)
        }
    },
    84781: function(e, t, n) {
        var r = n(80229);
        e.exports = function(e) {
            return "function" == typeof e ? e : r
        }
    },
    24007: function(e, t, n) {
        var r = n(55589)
          , i = n(5130)
          , a = n(44041)
          , o = n(99835);
        e.exports = function(e, t) {
            return r(e) ? e : i(e, t) ? [e] : a(o(e))
        }
    },
    3237: function(e, t, n) {
        var r = n(77379);
        e.exports = function(e, t, n) {
            var i = e.length;
            return n = void 0 === n ? i : n,
            !t && n >= i ? e : r(e, t, n)
        }
    },
    28559: function(e, t, n) {
        var r = n(94365);
        e.exports = function(e, t) {
            for (var n = e.length; n-- && r(t, e[n], 0) > -1; )
                ;
            return n
        }
    },
    72962: function(e, t, n) {
        var r = n(3526);
        e.exports = function(e) {
            var t = new e.constructor(e.byteLength);
            return new r(t).set(new r(e)),
            t
        }
    },
    46502: function(e, t, n) {
        e = n.nmd(e);
        var r = n(83250)
          , i = t && !t.nodeType && t
          , a = i && e && !e.nodeType && e
          , o = a && a.exports === i ? r.Buffer : void 0
          , s = o ? o.allocUnsafe : void 0;
        e.exports = function(e, t) {
            if (t)
                return e.slice();
            var n = e.length
              , r = s ? s(n) : new e.constructor(n);
            return e.copy(r),
            r
        }
    },
    97037: function(e, t, n) {
        var r = n(72962);
        e.exports = function(e, t) {
            var n = t ? r(e.buffer) : e.buffer;
            return new e.constructor(n,e.byteOffset,e.byteLength)
        }
    },
    3429: function(e) {
        var t = /\w*$/;
        e.exports = function(e) {
            var n = new e.constructor(e.source,t.exec(e));
            return n.lastIndex = e.lastIndex,
            n
        }
    },
    99349: function(e, t, n) {
        var r = n(70861)
          , i = r ? r.prototype : void 0
          , a = i ? i.valueOf : void 0;
        e.exports = function(e) {
            return a ? Object(a.call(e)) : {}
        }
    },
    21327: function(e, t, n) {
        var r = n(72962);
        e.exports = function(e, t) {
            var n = t ? r(e.buffer) : e.buffer;
            return new e.constructor(n,e.byteOffset,e.length)
        }
    },
    88899: function(e, t, n) {
        var r = n(52624);
        e.exports = function(e, t) {
            if (e !== t) {
                var n = void 0 !== e
                  , i = null === e
                  , a = e == e
                  , o = r(e)
                  , s = void 0 !== t
                  , u = null === t
                  , l = t == t
                  , c = r(t);
                if (!u && !c && !o && e > t || o && s && l && !u && !c || i && s && l || !n && l || !a)
                    return 1;
                if (!i && !o && !c && e < t || c && n && a && !i && !o || u && n && a || !s && a || !l)
                    return -1
            }
            return 0
        }
    },
    20315: function(e, t, n) {
        var r = n(88899);
        e.exports = function(e, t, n) {
            for (var i = -1, a = e.criteria, o = t.criteria, s = a.length, u = n.length; ++i < s; ) {
                var l = r(a[i], o[i]);
                if (l) {
                    if (i >= u)
                        return l;
                    return l * ("desc" == n[i] ? -1 : 1)
                }
            }
            return e.index - t.index
        }
    },
    32166: function(e) {
        e.exports = function(e, t) {
            var n = -1
              , r = e.length;
            for (t || (t = Array(r)); ++n < r; )
                t[n] = e[n];
            return t
        }
    },
    78618: function(e, t, n) {
        var r = n(93192)
          , i = n(87500);
        e.exports = function(e, t, n, a) {
            var o = !n;
            n || (n = {});
            for (var s = -1, u = t.length; ++s < u; ) {
                var l = t[s]
                  , c = a ? a(n[l], e[l], l, n, e) : void 0;
                void 0 === c && (c = e[l]),
                o ? i(n, l, c) : r(n, l, c)
            }
            return n
        }
    },
    67272: function(e, t, n) {
        var r = n(78618)
          , i = n(44450);
        e.exports = function(e, t) {
            return r(e, i(e), t)
        }
    },
    52066: function(e, t, n) {
        var r = n(78618)
          , i = n(94969);
        e.exports = function(e, t) {
            return r(e, i(e), t)
        }
    },
    1622: function(e, t, n) {
        var r = n(83250)["__core-js_shared__"];
        e.exports = r
    },
    17325: function(e, t, n) {
        var r = n(8660)
          , i = n(3792)
          , a = n(55833)
          , o = n(55589);
        e.exports = function(e, t) {
            return function(n, s) {
                var u = o(n) ? r : i
                  , l = t ? t() : {};
                return u(n, e, a(s, 2), l)
            }
        }
    },
    66948: function(e, t, n) {
        var r = n(29735)
          , i = n(98132);
        e.exports = function(e) {
            return r(function(t, n) {
                var r = -1
                  , a = n.length
                  , o = a > 1 ? n[a - 1] : void 0
                  , s = a > 2 ? n[2] : void 0;
                for (o = e.length > 3 && "function" == typeof o ? (a--,
                o) : void 0,
                s && i(n[0], n[1], s) && (o = a < 3 ? void 0 : o,
                a = 1),
                t = Object(t); ++r < a; ) {
                    var u = n[r];
                    u && e(t, u, r, o)
                }
                return t
            })
        }
    },
    96313: function(e, t, n) {
        var r = n(30568);
        e.exports = function(e, t) {
            return function(n, i) {
                if (null == n)
                    return n;
                if (!r(n))
                    return e(n, i);
                for (var a = n.length, o = t ? a : -1, s = Object(n); (t ? o-- : ++o < a) && !1 !== i(s[o], o, s); )
                    ;
                return n
            }
        }
    },
    72545: function(e) {
        e.exports = function(e) {
            return function(t, n, r) {
                for (var i = -1, a = Object(t), o = r(t), s = o.length; s--; ) {
                    var u = o[e ? s : ++i];
                    if (!1 === n(a[u], u, a))
                        break
                }
                return t
            }
        }
    },
    41254: function(e, t, n) {
        var r = n(3237)
          , i = n(63932)
          , a = n(15233)
          , o = n(99835);
        e.exports = function(e) {
            return function(t) {
                var n = i(t = o(t)) ? a(t) : void 0
                  , s = n ? n[0] : t.charAt(0)
                  , u = n ? r(n, 1).join("") : t.slice(1);
                return s[e]() + u
            }
        }
    },
    25048: function(e, t, n) {
        var r = n(85115)
          , i = n(8820)
          , a = n(12170)
          , o = RegExp("['’]", "g");
        e.exports = function(e) {
            return function(t) {
                return r(a(i(t).replace(o, "")), e, "")
            }
        }
    },
    29301: function(e, t, n) {
        var r = n(55833)
          , i = n(30568)
          , a = n(62096);
        e.exports = function(e) {
            return function(t, n, o) {
                var s = Object(t);
                if (!i(t)) {
                    var u = r(n, 3);
                    t = a(t),
                    n = function(e) {
                        return u(s[e], e, s)
                    }
                }
                var l = e(t, n, o);
                return l > -1 ? s[u ? t[l] : l] : void 0
            }
        }
    },
    80103: function(e, t, n) {
        var r = n(33625);
        e.exports = function(e, t) {
            return function(n, i) {
                return r(n, e, t(i), {})
            }
        }
    },
    51523: function(e, t, n) {
        var r = n(24930)
          , i = n(98132)
          , a = n(99558);
        e.exports = function(e) {
            return function(t, n, o) {
                return o && "number" != typeof o && i(t, n, o) && (n = o = void 0),
                t = a(t),
                void 0 === n ? (n = t,
                t = 0) : n = a(n),
                o = void 0 === o ? t < n ? 1 : -1 : a(o),
                r(t, n, o, e)
            }
        }
    },
    23628: function(e, t, n) {
        var r = n(83250)
          , i = n(96843)
          , a = n(29153)
          , o = n(99835)
          , s = r.isFinite
          , u = Math.min;
        e.exports = function(e) {
            var t = Math[e];
            return function(e, n) {
                if (e = a(e),
                (n = null == n ? 0 : u(i(n), 292)) && s(e)) {
                    var r = (o(e) + "e").split("e");
                    return +((r = (o(t(r[0] + "e" + (+r[1] + n))) + "e").split("e"))[0] + "e" + (+r[1] - n))
                }
                return t(e)
            }
        }
    },
    86262: function(e, t, n) {
        var r = n(56616)
          , i = n(71607)
          , a = n(77969)
          , o = r && 1 / a(new r([, -0]))[1] == 1 / 0 ? function(e) {
            return new r(e)
        }
        : i;
        e.exports = o
    },
    33729: function(e, t, n) {
        var r = n(61642)({
            À: "A",
            Á: "A",
            Â: "A",
            Ã: "A",
            Ä: "A",
            Å: "A",
            à: "a",
            á: "a",
            â: "a",
            ã: "a",
            ä: "a",
            å: "a",
            Ç: "C",
            ç: "c",
            Ð: "D",
            ð: "d",
            È: "E",
            É: "E",
            Ê: "E",
            Ë: "E",
            è: "e",
            é: "e",
            ê: "e",
            ë: "e",
            Ì: "I",
            Í: "I",
            Î: "I",
            Ï: "I",
            ì: "i",
            í: "i",
            î: "i",
            ï: "i",
            Ñ: "N",
            ñ: "n",
            Ò: "O",
            Ó: "O",
            Ô: "O",
            Õ: "O",
            Ö: "O",
            Ø: "O",
            ò: "o",
            ó: "o",
            ô: "o",
            õ: "o",
            ö: "o",
            ø: "o",
            Ù: "U",
            Ú: "U",
            Û: "U",
            Ü: "U",
            ù: "u",
            ú: "u",
            û: "u",
            ü: "u",
            Ý: "Y",
            ý: "y",
            ÿ: "y",
            Æ: "Ae",
            æ: "ae",
            Þ: "Th",
            þ: "th",
            ß: "ss",
            Ā: "A",
            Ă: "A",
            Ą: "A",
            ā: "a",
            ă: "a",
            ą: "a",
            Ć: "C",
            Ĉ: "C",
            Ċ: "C",
            Č: "C",
            ć: "c",
            ĉ: "c",
            ċ: "c",
            č: "c",
            Ď: "D",
            Đ: "D",
            ď: "d",
            đ: "d",
            Ē: "E",
            Ĕ: "E",
            Ė: "E",
            Ę: "E",
            Ě: "E",
            ē: "e",
            ĕ: "e",
            ė: "e",
            ę: "e",
            ě: "e",
            Ĝ: "G",
            Ğ: "G",
            Ġ: "G",
            Ģ: "G",
            ĝ: "g",
            ğ: "g",
            ġ: "g",
            ģ: "g",
            Ĥ: "H",
            Ħ: "H",
            ĥ: "h",
            ħ: "h",
            Ĩ: "I",
            Ī: "I",
            Ĭ: "I",
            Į: "I",
            İ: "I",
            ĩ: "i",
            ī: "i",
            ĭ: "i",
            į: "i",
            ı: "i",
            Ĵ: "J",
            ĵ: "j",
            Ķ: "K",
            ķ: "k",
            ĸ: "k",
            Ĺ: "L",
            Ļ: "L",
            Ľ: "L",
            Ŀ: "L",
            Ł: "L",
            ĺ: "l",
            ļ: "l",
            ľ: "l",
            ŀ: "l",
            ł: "l",
            Ń: "N",
            Ņ: "N",
            Ň: "N",
            Ŋ: "N",
            ń: "n",
            ņ: "n",
            ň: "n",
            ŋ: "n",
            Ō: "O",
            Ŏ: "O",
            Ő: "O",
            ō: "o",
            ŏ: "o",
            ő: "o",
            Ŕ: "R",
            Ŗ: "R",
            Ř: "R",
            ŕ: "r",
            ŗ: "r",
            ř: "r",
            Ś: "S",
            Ŝ: "S",
            Ş: "S",
            Š: "S",
            ś: "s",
            ŝ: "s",
            ş: "s",
            š: "s",
            Ţ: "T",
            Ť: "T",
            Ŧ: "T",
            ţ: "t",
            ť: "t",
            ŧ: "t",
            Ũ: "U",
            Ū: "U",
            Ŭ: "U",
            Ů: "U",
            Ű: "U",
            Ų: "U",
            ũ: "u",
            ū: "u",
            ŭ: "u",
            ů: "u",
            ű: "u",
            ų: "u",
            Ŵ: "W",
            ŵ: "w",
            Ŷ: "Y",
            ŷ: "y",
            Ÿ: "Y",
            Ź: "Z",
            Ż: "Z",
            Ž: "Z",
            ź: "z",
            ż: "z",
            ž: "z",
            Ĳ: "IJ",
            ĳ: "ij",
            Œ: "Oe",
            œ: "oe",
            ŉ: "'n",
            ſ: "s"
        });
        e.exports = r
    },
    25595: function(e, t, n) {
        var r = n(65234)
          , i = function() {
            try {
                var e = r(Object, "defineProperty");
                return e({}, "", {}),
                e
            } catch (e) {}
        }();
        e.exports = i
    },
    14952: function(e, t, n) {
        var r = n(84546)
          , i = n(1831)
          , a = n(77026);
        e.exports = function(e, t, n, o, s, u) {
            var l = 1 & n
              , c = e.length
              , d = t.length;
            if (c != d && !(l && d > c))
                return !1;
            var p = u.get(e)
              , f = u.get(t);
            if (p && f)
                return p == t && f == e;
            var h = -1
              , m = !0
              , y = 2 & n ? new r : void 0;
            for (u.set(e, t),
            u.set(t, e); ++h < c; ) {
                var g = e[h]
                  , b = t[h];
                if (o)
                    var v = l ? o(b, g, h, t, e, u) : o(g, b, h, e, t, u);
                if (void 0 !== v) {
                    if (v)
                        continue;
                    m = !1;
                    break
                }
                if (y) {
                    if (!i(t, function(e, t) {
                        if (!a(y, t) && (g === e || s(g, e, n, o, u)))
                            return y.push(t)
                    })) {
                        m = !1;
                        break
                    }
                } else if (!(g === b || s(g, b, n, o, u))) {
                    m = !1;
                    break
                }
            }
            return u.delete(e),
            u.delete(t),
            m
        }
    },
    21080: function(e, t, n) {
        var r = n(70861)
          , i = n(3526)
          , a = n(58260)
          , o = n(14952)
          , s = n(81140)
          , u = n(77969)
          , l = r ? r.prototype : void 0
          , c = l ? l.valueOf : void 0;
        e.exports = function(e, t, n, r, l, d, p) {
            switch (n) {
            case "[object DataView]":
                if (e.byteLength != t.byteLength || e.byteOffset != t.byteOffset)
                    break;
                e = e.buffer,
                t = t.buffer;
            case "[object ArrayBuffer]":
                if (e.byteLength != t.byteLength || !d(new i(e), new i(t)))
                    break;
                return !0;
            case "[object Boolean]":
            case "[object Date]":
            case "[object Number]":
                return a(+e, +t);
            case "[object Error]":
                return e.name == t.name && e.message == t.message;
            case "[object RegExp]":
            case "[object String]":
                return e == t + "";
            case "[object Map]":
                var f = s;
            case "[object Set]":
                var h = 1 & r;
                if (f || (f = u),
                e.size != t.size && !h)
                    break;
                var m = p.get(e);
                if (m)
                    return m == t;
                r |= 2,
                p.set(e, t);
                var y = o(f(e), f(t), r, l, d, p);
                return p.delete(e),
                y;
            case "[object Symbol]":
                if (c)
                    return c.call(e) == c.call(t)
            }
            return !1
        }
    },
    86524: function(e, t, n) {
        var r = n(54357)
          , i = Object.prototype.hasOwnProperty;
        e.exports = function(e, t, n, a, o, s) {
            var u = 1 & n
              , l = r(e)
              , c = l.length;
            if (c != r(t).length && !u)
                return !1;
            for (var d = c; d--; ) {
                var p = l[d];
                if (!(u ? p in t : i.call(t, p)))
                    return !1
            }
            var f = s.get(e)
              , h = s.get(t);
            if (f && h)
                return f == t && h == e;
            var m = !0;
            s.set(e, t),
            s.set(t, e);
            for (var y = u; ++d < c; ) {
                var g = e[p = l[d]]
                  , b = t[p];
                if (a)
                    var v = u ? a(b, g, p, t, e, s) : a(g, b, p, e, t, s);
                if (!(void 0 === v ? g === b || o(g, b, n, a, s) : v)) {
                    m = !1;
                    break
                }
                y || (y = "constructor" == p)
            }
            if (m && !y) {
                var w = e.constructor
                  , T = t.constructor;
                w != T && "constructor"in e && "constructor"in t && !("function" == typeof w && w instanceof w && "function" == typeof T && T instanceof T) && (m = !1)
            }
            return s.delete(e),
            s.delete(t),
            m
        }
    },
    20302: function(e, t, n) {
        var r = "object" == typeof n.g && n.g && n.g.Object === Object && n.g;
        e.exports = r
    },
    54357: function(e, t, n) {
        var r = n(4468)
          , i = n(44450)
          , a = n(62096);
        e.exports = function(e) {
            return r(e, a, i)
        }
    },
    55713: function(e, t, n) {
        var r = n(4468)
          , i = n(94969)
          , a = n(9882);
        e.exports = function(e) {
            return r(e, a, i)
        }
    },
    77570: function(e, t, n) {
        var r = n(58949);
        e.exports = function(e, t) {
            var n = e.__data__;
            return r(t) ? n["string" == typeof t ? "string" : "hash"] : n.map
        }
    },
    72198: function(e, t, n) {
        var r = n(18802)
          , i = n(62096);
        e.exports = function(e) {
            for (var t = i(e), n = t.length; n--; ) {
                var a = t[n]
                  , o = e[a];
                t[n] = [a, o, r(o)]
            }
            return t
        }
    },
    65234: function(e, t, n) {
        var r = n(99817)
          , i = n(67736);
        e.exports = function(e, t) {
            var n = i(e, t);
            return r(n) ? n : void 0
        }
    },
    18490: function(e, t, n) {
        var r = n(33540)(Object.getPrototypeOf, Object);
        e.exports = r
    },
    91339: function(e, t, n) {
        var r = n(70861)
          , i = Object.prototype
          , a = i.hasOwnProperty
          , o = i.toString
          , s = r ? r.toStringTag : void 0;
        e.exports = function(e) {
            var t = a.call(e, s)
              , n = e[s];
            try {
                e[s] = void 0;
                var r = !0
            } catch (e) {}
            var i = o.call(e);
            return r && (t ? e[s] = n : delete e[s]),
            i
        }
    },
    44450: function(e, t, n) {
        var r = n(82493)
          , i = n(84506)
          , a = Object.prototype.propertyIsEnumerable
          , o = Object.getOwnPropertySymbols
          , s = o ? function(e) {
            return null == e ? [] : r(o(e = Object(e)), function(t) {
                return a.call(e, t)
            })
        }
        : i;
        e.exports = s
    },
    94969: function(e, t, n) {
        var r = n(10111)
          , i = n(18490)
          , a = n(44450)
          , o = n(84506)
          , s = Object.getOwnPropertySymbols ? function(e) {
            for (var t = []; e; )
                r(t, a(e)),
                e = i(e);
            return t
        }
        : o;
        e.exports = s
    },
    87493: function(e, t, n) {
        var r = n(94466)
          , i = n(72887)
          , a = n(95747)
          , o = n(56616)
          , s = n(98001)
          , u = n(69823)
          , l = n(55784)
          , c = "[object Map]"
          , d = "[object Promise]"
          , p = "[object Set]"
          , f = "[object WeakMap]"
          , h = "[object DataView]"
          , m = l(r)
          , y = l(i)
          , g = l(a)
          , b = l(o)
          , v = l(s)
          , w = u;
        (r && w(new r(new ArrayBuffer(1))) != h || i && w(new i) != c || a && w(a.resolve()) != d || o && w(new o) != p || s && w(new s) != f) && (w = function(e) {
            var t = u(e)
              , n = "[object Object]" == t ? e.constructor : void 0
              , r = n ? l(n) : "";
            if (r)
                switch (r) {
                case m:
                    return h;
                case y:
                    return c;
                case g:
                    return d;
                case b:
                    return p;
                case v:
                    return f
                }
            return t
        }
        ),
        e.exports = w
    },
    67736: function(e) {
        e.exports = function(e, t) {
            return null == e ? void 0 : e[t]
        }
    },
    13544: function(e, t, n) {
        var r = n(24007)
          , i = n(79312)
          , a = n(55589)
          , o = n(5023)
          , s = n(66052)
          , u = n(86040);
        e.exports = function(e, t, n) {
            t = r(t, e);
            for (var l = -1, c = t.length, d = !1; ++l < c; ) {
                var p = u(t[l]);
                if (!(d = null != e && n(e, p)))
                    break;
                e = e[p]
            }
            return d || ++l != c ? d : !!(c = null == e ? 0 : e.length) && s(c) && o(p, c) && (a(e) || i(e))
        }
    },
    63932: function(e) {
        var t = RegExp("[\\u200d\ud800-\udfff\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff\\ufe0e\\ufe0f]");
        e.exports = function(e) {
            return t.test(e)
        }
    },
    70605: function(e) {
        var t = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
        e.exports = function(e) {
            return t.test(e)
        }
    },
    34440: function(e, t, n) {
        var r = n(24545);
        e.exports = function() {
            this.__data__ = r ? r(null) : {},
            this.size = 0
        }
    },
    84108: function(e) {
        e.exports = function(e) {
            var t = this.has(e) && delete this.__data__[e];
            return this.size -= t ? 1 : 0,
            t
        }
    },
    61085: function(e, t, n) {
        var r = n(24545)
          , i = Object.prototype.hasOwnProperty;
        e.exports = function(e) {
            var t = this.__data__;
            if (r) {
                var n = t[e];
                return "__lodash_hash_undefined__" === n ? void 0 : n
            }
            return i.call(t, e) ? t[e] : void 0
        }
    },
    77706: function(e, t, n) {
        var r = n(24545)
          , i = Object.prototype.hasOwnProperty;
        e.exports = function(e) {
            var t = this.__data__;
            return r ? void 0 !== t[e] : i.call(t, e)
        }
    },
    8636: function(e, t, n) {
        var r = n(24545);
        e.exports = function(e, t) {
            var n = this.__data__;
            return this.size += this.has(e) ? 0 : 1,
            n[e] = r && void 0 === t ? "__lodash_hash_undefined__" : t,
            this
        }
    },
    82865: function(e) {
        var t = Object.prototype.hasOwnProperty;
        e.exports = function(e) {
            var n = e.length
              , r = new e.constructor(n);
            return n && "string" == typeof e[0] && t.call(e, "index") && (r.index = e.index,
            r.input = e.input),
            r
        }
    },
    11908: function(e, t, n) {
        var r = n(72962)
          , i = n(97037)
          , a = n(3429)
          , o = n(99349)
          , s = n(21327);
        e.exports = function(e, t, n) {
            var u = e.constructor;
            switch (t) {
            case "[object ArrayBuffer]":
                return r(e);
            case "[object Boolean]":
            case "[object Date]":
                return new u(+e);
            case "[object DataView]":
                return i(e, n);
            case "[object Float32Array]":
            case "[object Float64Array]":
            case "[object Int8Array]":
            case "[object Int16Array]":
            case "[object Int32Array]":
            case "[object Uint8Array]":
            case "[object Uint8ClampedArray]":
            case "[object Uint16Array]":
            case "[object Uint32Array]":
                return s(e, n);
            case "[object Map]":
            case "[object Set]":
                return new u;
            case "[object Number]":
            case "[object String]":
                return new u(e);
            case "[object RegExp]":
                return a(e);
            case "[object Symbol]":
                return o(e)
            }
        }
    },
    84046: function(e, t, n) {
        var r = n(57890)
          , i = n(18490)
          , a = n(32840);
        e.exports = function(e) {
            return "function" != typeof e.constructor || a(e) ? {} : r(i(e))
        }
    },
    67123: function(e, t, n) {
        var r = n(70861)
          , i = n(79312)
          , a = n(55589)
          , o = r ? r.isConcatSpreadable : void 0;
        e.exports = function(e) {
            return a(e) || i(e) || !!(o && e && e[o])
        }
    },
    5023: function(e) {
        var t = /^(?:0|[1-9]\d*)$/;
        e.exports = function(e, n) {
            var r = typeof e;
            return !!(n = null == n ? 9007199254740991 : n) && ("number" == r || "symbol" != r && t.test(e)) && e > -1 && e % 1 == 0 && e < n
        }
    },
    98132: function(e, t, n) {
        var r = n(58260)
          , i = n(30568)
          , a = n(5023)
          , o = n(93702);
        e.exports = function(e, t, n) {
            if (!o(n))
                return !1;
            var s = typeof t;
            return ("number" == s ? !!(i(n) && a(t, n.length)) : "string" == s && t in n) && r(n[t], e)
        }
    },
    5130: function(e, t, n) {
        var r = n(55589)
          , i = n(52624)
          , a = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/
          , o = /^\w*$/;
        e.exports = function(e, t) {
            if (r(e))
                return !1;
            var n = typeof e;
            return !!("number" == n || "symbol" == n || "boolean" == n || null == e || i(e)) || o.test(e) || !a.test(e) || null != t && e in Object(t)
        }
    },
    58949: function(e) {
        e.exports = function(e) {
            var t = typeof e;
            return "string" == t || "number" == t || "symbol" == t || "boolean" == t ? "__proto__" !== e : null === e
        }
    },
    28597: function(e, t, n) {
        var r, i = n(1622), a = (r = /[^.]+$/.exec(i && i.keys && i.keys.IE_PROTO || "")) ? "Symbol(src)_1." + r : "";
        e.exports = function(e) {
            return !!a && a in e
        }
    },
    32840: function(e) {
        var t = Object.prototype;
        e.exports = function(e) {
            var n = e && e.constructor
              , r = "function" == typeof n && n.prototype || t;
            return e === r
        }
    },
    18802: function(e, t, n) {
        var r = n(93702);
        e.exports = function(e) {
            return e == e && !r(e)
        }
    },
    90266: function(e) {
        e.exports = function() {
            this.__data__ = [],
            this.size = 0
        }
    },
    42875: function(e, t, n) {
        var r = n(18498)
          , i = Array.prototype.splice;
        e.exports = function(e) {
            var t = this.__data__
              , n = r(t, e);
            return !(n < 0) && (n == t.length - 1 ? t.pop() : i.call(t, n, 1),
            --this.size,
            !0)
        }
    },
    45828: function(e, t, n) {
        var r = n(18498);
        e.exports = function(e) {
            var t = this.__data__
              , n = r(t, e);
            return n < 0 ? void 0 : t[n][1]
        }
    },
    24115: function(e, t, n) {
        var r = n(18498);
        e.exports = function(e) {
            return r(this.__data__, e) > -1
        }
    },
    67690: function(e, t, n) {
        var r = n(18498);
        e.exports = function(e, t) {
            var n = this.__data__
              , i = r(n, e);
            return i < 0 ? (++this.size,
            n.push([e, t])) : n[i][1] = t,
            this
        }
    },
    39016: function(e, t, n) {
        var r = n(85208)
          , i = n(81998)
          , a = n(72887);
        e.exports = function() {
            this.size = 0,
            this.__data__ = {
                hash: new r,
                map: new (a || i),
                string: new r
            }
        }
    },
    62363: function(e, t, n) {
        var r = n(77570);
        e.exports = function(e) {
            var t = r(this, e).delete(e);
            return this.size -= t ? 1 : 0,
            t
        }
    },
    64348: function(e, t, n) {
        var r = n(77570);
        e.exports = function(e) {
            return r(this, e).get(e)
        }
    },
    53062: function(e, t, n) {
        var r = n(77570);
        e.exports = function(e) {
            return r(this, e).has(e)
        }
    },
    30262: function(e, t, n) {
        var r = n(77570);
        e.exports = function(e, t) {
            var n = r(this, e)
              , i = n.size;
            return n.set(e, t),
            this.size += n.size == i ? 0 : 1,
            this
        }
    },
    81140: function(e) {
        e.exports = function(e) {
            var t = -1
              , n = Array(e.size);
            return e.forEach(function(e, r) {
                n[++t] = [r, e]
            }),
            n
        }
    },
    94656: function(e) {
        e.exports = function(e, t) {
            return function(n) {
                return null != n && n[e] === t && (void 0 !== t || e in Object(n))
            }
        }
    },
    32924: function(e, t, n) {
        var r = n(67997);
        e.exports = function(e) {
            var t = r(e, function(e) {
                return 500 === n.size && n.clear(),
                e
            })
              , n = t.cache;
            return t
        }
    },
    24545: function(e, t, n) {
        var r = n(65234)(Object, "create");
        e.exports = r
    },
    82825: function(e, t, n) {
        var r = n(33540)(Object.keys, Object);
        e.exports = r
    },
    84866: function(e) {
        e.exports = function(e) {
            var t = [];
            if (null != e)
                for (var n in Object(e))
                    t.push(n);
            return t
        }
    },
    8690: function(e, t, n) {
        e = n.nmd(e);
        var r = n(20302)
          , i = t && !t.nodeType && t
          , a = i && e && !e.nodeType && e
          , o = a && a.exports === i && r.process
          , s = function() {
            try {
                var e = a && a.require && a.require("util").types;
                if (e)
                    return e;
                return o && o.binding && o.binding("util")
            } catch (e) {}
        }();
        e.exports = s
    },
    25151: function(e) {
        var t = Object.prototype.toString;
        e.exports = function(e) {
            return t.call(e)
        }
    },
    33540: function(e) {
        e.exports = function(e, t) {
            return function(n) {
                return e(t(n))
            }
        }
    },
    20340: function(e, t, n) {
        var r = n(82274)
          , i = Math.max;
        e.exports = function(e, t, n) {
            return t = i(void 0 === t ? e.length - 1 : t, 0),
            function() {
                for (var a = arguments, o = -1, s = i(a.length - t, 0), u = Array(s); ++o < s; )
                    u[o] = a[t + o];
                o = -1;
                for (var l = Array(t + 1); ++o < t; )
                    l[o] = a[o];
                return l[t] = n(u),
                r(e, this, l)
            }
        }
    },
    83744: function(e, t, n) {
        var r = n(40548)
          , i = n(77379);
        e.exports = function(e, t) {
            return t.length < 2 ? e : r(e, i(t, 0, -1))
        }
    },
    83250: function(e, t, n) {
        var r = n(20302)
          , i = "object" == typeof self && self && self.Object === Object && self
          , a = r || i || Function("return this")();
        e.exports = a
    },
    11933: function(e) {
        e.exports = function(e, t) {
            if (("constructor" !== t || "function" != typeof e[t]) && "__proto__" != t)
                return e[t]
        }
    },
    83937: function(e) {
        e.exports = function(e) {
            return this.__data__.set(e, "__lodash_hash_undefined__"),
            this
        }
    },
    15009: function(e) {
        e.exports = function(e) {
            return this.__data__.has(e)
        }
    },
    77969: function(e) {
        e.exports = function(e) {
            var t = -1
              , n = Array(e.size);
            return e.forEach(function(e) {
                n[++t] = e
            }),
            n
        }
    },
    4173: function(e, t, n) {
        var r = n(46739)
          , i = n(37357)(r);
        e.exports = i
    },
    37357: function(e) {
        var t = Date.now;
        e.exports = function(e) {
            var n = 0
              , r = 0;
            return function() {
                var i = t()
                  , a = 16 - (i - r);
                if (r = i,
                a > 0) {
                    if (++n >= 800)
                        return arguments[0]
                } else
                    n = 0;
                return e.apply(void 0, arguments)
            }
        }
    },
    8469: function(e, t, n) {
        var r = n(54616);
        e.exports = function(e, t) {
            var n = -1
              , i = e.length
              , a = i - 1;
            for (t = void 0 === t ? i : t; ++n < t; ) {
                var o = r(n, a)
                  , s = e[o];
                e[o] = e[n],
                e[n] = s
            }
            return e.length = t,
            e
        }
    },
    93210: function(e, t, n) {
        var r = n(81998);
        e.exports = function() {
            this.__data__ = new r,
            this.size = 0
        }
    },
    48603: function(e) {
        e.exports = function(e) {
            var t = this.__data__
              , n = t.delete(e);
            return this.size = t.size,
            n
        }
    },
    38947: function(e) {
        e.exports = function(e) {
            return this.__data__.get(e)
        }
    },
    70885: function(e) {
        e.exports = function(e) {
            return this.__data__.has(e)
        }
    },
    98938: function(e, t, n) {
        var r = n(81998)
          , i = n(72887)
          , a = n(95678);
        e.exports = function(e, t) {
            var n = this.__data__;
            if (n instanceof r) {
                var o = n.__data__;
                if (!i || o.length < 199)
                    return o.push([e, t]),
                    this.size = ++n.size,
                    this;
                n = this.__data__ = new a(o)
            }
            return n.set(e, t),
            this.size = n.size,
            this
        }
    },
    45898: function(e) {
        e.exports = function(e, t, n) {
            for (var r = n - 1, i = e.length; ++r < i; )
                if (e[r] === t)
                    return r;
            return -1
        }
    },
    11324: function(e, t, n) {
        var r = n(97088)
          , i = n(63932)
          , a = n(60445);
        e.exports = function(e) {
            return i(e) ? a(e) : r(e)
        }
    },
    15233: function(e, t, n) {
        var r = n(59512)
          , i = n(63932)
          , a = n(32205);
        e.exports = function(e) {
            return i(e) ? a(e) : r(e)
        }
    },
    44041: function(e, t, n) {
        var r = n(32924)
          , i = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g
          , a = /\\(\\)?/g
          , o = r(function(e) {
            var t = [];
            return 46 === e.charCodeAt(0) && t.push(""),
            e.replace(i, function(e, n, r, i) {
                t.push(r ? i.replace(a, "$1") : n || e)
            }),
            t
        });
        e.exports = o
    },
    86040: function(e, t, n) {
        var r = n(52624)
          , i = 1 / 0;
        e.exports = function(e) {
            if ("string" == typeof e || r(e))
                return e;
            var t = e + "";
            return "0" == t && 1 / e == -i ? "-0" : t
        }
    },
    55784: function(e) {
        var t = Function.prototype.toString;
        e.exports = function(e) {
            if (null != e) {
                try {
                    return t.call(e)
                } catch (e) {}
                try {
                    return e + ""
                } catch (e) {}
            }
            return ""
        }
    },
    62438: function(e) {
        var t = /\s/;
        e.exports = function(e) {
            for (var n = e.length; n-- && t.test(e.charAt(n)); )
                ;
            return n
        }
    },
    60445: function(e) {
        var t = "\ud800-\udfff"
          , n = "[\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff]"
          , r = "\ud83c[\udffb-\udfff]"
          , i = "[^" + t + "]"
          , a = "(?:\ud83c[\udde6-\uddff]){2}"
          , o = "[\ud800-\udbff][\udc00-\udfff]"
          , s = "(?:" + n + "|" + r + ")?"
          , u = "[\\ufe0e\\ufe0f]?"
          , l = "(?:\\u200d(?:" + [i, a, o].join("|") + ")" + u + s + ")*"
          , c = RegExp(r + "(?=" + r + ")|(?:" + [i + n + "?", n, a, o, "[" + t + "]"].join("|") + ")" + (u + s + l), "g");
        e.exports = function(e) {
            for (var t = c.lastIndex = 0; c.test(e); )
                ++t;
            return t
        }
    },
    32205: function(e) {
        var t = "\ud800-\udfff"
          , n = "[\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff]"
          , r = "\ud83c[\udffb-\udfff]"
          , i = "[^" + t + "]"
          , a = "(?:\ud83c[\udde6-\uddff]){2}"
          , o = "[\ud800-\udbff][\udc00-\udfff]"
          , s = "(?:" + n + "|" + r + ")?"
          , u = "[\\ufe0e\\ufe0f]?"
          , l = "(?:\\u200d(?:" + [i, a, o].join("|") + ")" + u + s + ")*"
          , c = RegExp(r + "(?=" + r + ")|(?:" + [i + n + "?", n, a, o, "[" + t + "]"].join("|") + ")" + (u + s + l), "g");
        e.exports = function(e) {
            return e.match(c) || []
        }
    },
    76061: function(e) {
        var t = "\ud800-\udfff"
          , n = "\\u2700-\\u27bf"
          , r = "a-z\\xdf-\\xf6\\xf8-\\xff"
          , i = "A-Z\\xc0-\\xd6\\xd8-\\xde"
          , a = "\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000"
          , o = "['’]"
          , s = "[" + a + "]"
          , u = "[" + r + "]"
          , l = "[^" + t + a + "\\d+" + n + r + i + "]"
          , c = "(?:\ud83c[\udde6-\uddff]){2}"
          , d = "[\ud800-\udbff][\udc00-\udfff]"
          , p = "[" + i + "]"
          , f = "(?:" + u + "|" + l + ")"
          , h = "(?:" + o + "(?:d|ll|m|re|s|t|ve))?"
          , m = "(?:" + o + "(?:D|LL|M|RE|S|T|VE))?"
          , y = "(?:[\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff]|\ud83c[\udffb-\udfff])?"
          , g = "[\\ufe0e\\ufe0f]?"
          , b = "(?:\\u200d(?:" + ["[^" + t + "]", c, d].join("|") + ")" + g + y + ")*"
          , v = "(?:" + ["[" + n + "]", c, d].join("|") + ")" + (g + y + b)
          , w = RegExp([p + "?" + u + "+" + h + "(?=" + [s, p, "$"].join("|") + ")", "(?:" + p + "|" + l + ")+" + m + "(?=" + [s, p + f, "$"].join("|") + ")", p + "?" + f + "+" + h, p + "+" + m, "\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])", "\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])", "\\d+", v].join("|"), "g");
        e.exports = function(e) {
            return e.match(w) || []
        }
    },
    60844: function(e, t, n) {
        var r = n(99835)
          , i = n(51309);
        e.exports = function(e) {
            return i(r(e).toLowerCase())
        }
    },
    11286: function(e, t, n) {
        var r = n(77379)
          , i = n(98132)
          , a = n(96843)
          , o = Math.ceil
          , s = Math.max;
        e.exports = function(e, t, n) {
            t = (n ? i(e, t, n) : void 0 === t) ? 1 : s(a(t), 0);
            var u = null == e ? 0 : e.length;
            if (!u || t < 1)
                return [];
            for (var l = 0, c = 0, d = Array(o(u / t)); l < u; )
                d[c++] = r(e, l, l += t);
            return d
        }
    },
    77179: function(e, t, n) {
        var r = n(18361);
        e.exports = function(e) {
            return r(e, 5)
        }
    },
    89203: function(e) {
        e.exports = function(e) {
            return function() {
                return e
            }
        }
    },
    77837: function(e, t, n) {
        var r = n(93702)
          , i = n(80231)
          , a = n(29153)
          , o = Math.max
          , s = Math.min;
        e.exports = function(e, t, n) {
            var u, l, c, d, p, f, h = 0, m = !1, y = !1, g = !0;
            if ("function" != typeof e)
                throw TypeError("Expected a function");
            function b(t) {
                var n = u
                  , r = l;
                return u = l = void 0,
                h = t,
                d = e.apply(r, n)
            }
            function v(e) {
                var n = e - f
                  , r = e - h;
                return void 0 === f || n >= t || n < 0 || y && r >= c
            }
            function w() {
                var e, n, r, a = i();
                if (v(a))
                    return T(a);
                p = setTimeout(w, (e = a - f,
                n = a - h,
                r = t - e,
                y ? s(r, c - n) : r))
            }
            function T(e) {
                return (p = void 0,
                g && u) ? b(e) : (u = l = void 0,
                d)
            }
            function E() {
                var e, n = i(), r = v(n);
                if (u = arguments,
                l = this,
                f = n,
                r) {
                    if (void 0 === p)
                        return h = e = f,
                        p = setTimeout(w, t),
                        m ? b(e) : d;
                    if (y)
                        return clearTimeout(p),
                        p = setTimeout(w, t),
                        b(f)
                }
                return void 0 === p && (p = setTimeout(w, t)),
                d
            }
            return t = a(t) || 0,
            r(n) && (m = !!n.leading,
            c = (y = "maxWait"in n) ? o(a(n.maxWait) || 0, t) : c,
            g = "trailing"in n ? !!n.trailing : g),
            E.cancel = function() {
                void 0 !== p && clearTimeout(p),
                h = 0,
                u = f = l = p = void 0
            }
            ,
            E.flush = function() {
                return void 0 === p ? d : T(i())
            }
            ,
            E
        }
    },
    8820: function(e, t, n) {
        var r = n(33729)
          , i = n(99835)
          , a = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g
          , o = RegExp("[\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff]", "g");
        e.exports = function(e) {
            return (e = i(e)) && e.replace(a, r).replace(o, "")
        }
    },
    96385: function(e, t, n) {
        var r = n(83399)
          , i = n(29735)
          , a = n(29153)
          , o = i(function(e, t, n) {
            return r(e, a(t) || 0, n)
        });
        e.exports = o
    },
    58260: function(e) {
        e.exports = function(e, t) {
            return e === t || e != e && t != t
        }
    },
    11198: function(e, t, n) {
        var r = n(69865)
          , i = n(5869)
          , a = n(55833)
          , o = n(55589)
          , s = n(98132);
        e.exports = function(e, t, n) {
            var u = o(e) ? r : i;
            return n && s(e, t, n) && (t = void 0),
            u(e, a(t, 3))
        }
    },
    26969: function(e, t, n) {
        var r = n(29301)(n(69312));
        e.exports = r
    },
    69312: function(e, t, n) {
        var r = n(44770)
          , i = n(55833)
          , a = n(96843)
          , o = Math.max;
        e.exports = function(e, t, n) {
            var s = null == e ? 0 : e.length;
            if (!s)
                return -1;
            var u = null == n ? 0 : a(n);
            return u < 0 && (u = o(s + u, 0)),
            r(e, i(t, 3), u)
        }
    },
    79875: function(e, t, n) {
        var r = n(22825)
          , i = n(69107);
        e.exports = function(e, t) {
            return r(i(e, t), 1)
        }
    },
    62923: function(e, t, n) {
        var r = n(22825);
        e.exports = function(e) {
            return (null == e ? 0 : e.length) ? r(e, 1) : []
        }
    },
    77734: function(e, t, n) {
        var r = n(84004)
          , i = n(61701)
          , a = n(84781)
          , o = n(55589);
        e.exports = function(e, t) {
            return (o(e) ? r : i)(e, a(t))
        }
    },
    21061: function(e) {
        e.exports = function(e) {
            for (var t = -1, n = null == e ? 0 : e.length, r = {}; ++t < n; ) {
                var i = e[t];
                r[i[0]] = i[1]
            }
            return r
        }
    },
    13546: function(e, t, n) {
        var r = n(40548);
        e.exports = function(e, t, n) {
            var i = null == e ? void 0 : r(e, t);
            return void 0 === i ? n : i
        }
    },
    39907: function(e, t, n) {
        var r = n(87500)
          , i = n(17325)
          , a = Object.prototype.hasOwnProperty
          , o = i(function(e, t, n) {
            a.call(e, n) ? e[n].push(t) : r(e, n, [t])
        });
        e.exports = o
    },
    56708: function(e, t, n) {
        var r = n(62902)
          , i = n(13544);
        e.exports = function(e, t) {
            return null != e && i(e, t, r)
        }
    },
    80229: function(e) {
        e.exports = function(e) {
            return e
        }
    },
    89941: function(e, t, n) {
        var r = n(89203)
          , i = n(80103)
          , a = n(80229)
          , o = Object.prototype.toString
          , s = i(function(e, t, n) {
            null != t && "function" != typeof t.toString && (t = o.call(t)),
            e[t] = n
        }, r(a));
        e.exports = s
    },
    79312: function(e, t, n) {
        var r = n(33016)
          , i = n(50440)
          , a = Object.prototype
          , o = a.hasOwnProperty
          , s = a.propertyIsEnumerable
          , u = r(function() {
            return arguments
        }()) ? r : function(e) {
            return i(e) && o.call(e, "callee") && !s.call(e, "callee")
        }
        ;
        e.exports = u
    },
    55589: function(e) {
        var t = Array.isArray;
        e.exports = t
    },
    30568: function(e, t, n) {
        var r = n(45563)
          , i = n(66052);
        e.exports = function(e) {
            return null != e && i(e.length) && !r(e)
        }
    },
    18268: function(e, t, n) {
        var r = n(30568)
          , i = n(50440);
        e.exports = function(e) {
            return i(e) && r(e)
        }
    },
    89256: function(e, t, n) {
        var r = n(69823)
          , i = n(50440);
        e.exports = function(e) {
            return !0 === e || !1 === e || i(e) && "[object Boolean]" == r(e)
        }
    },
    85778: function(e, t, n) {
        e = n.nmd(e);
        var r = n(83250)
          , i = n(37999)
          , a = t && !t.nodeType && t
          , o = a && e && !e.nodeType && e
          , s = o && o.exports === a ? r.Buffer : void 0
          , u = s ? s.isBuffer : void 0;
        e.exports = u || i
    },
    29787: function(e, t, n) {
        var r = n(41351)
          , i = n(87493)
          , a = n(79312)
          , o = n(55589)
          , s = n(30568)
          , u = n(85778)
          , l = n(32840)
          , c = n(50922)
          , d = Object.prototype.hasOwnProperty;
        e.exports = function(e) {
            if (null == e)
                return !0;
            if (s(e) && (o(e) || "string" == typeof e || "function" == typeof e.splice || u(e) || c(e) || a(e)))
                return !e.length;
            var t = i(e);
            if ("[object Map]" == t || "[object Set]" == t)
                return !e.size;
            if (l(e))
                return !r(e).length;
            for (var n in e)
                if (d.call(e, n))
                    return !1;
            return !0
        }
    },
    85466: function(e, t, n) {
        var r = n(34662);
        e.exports = function(e, t) {
            return r(e, t)
        }
    },
    45563: function(e, t, n) {
        var r = n(69823)
          , i = n(93702);
        e.exports = function(e) {
            if (!i(e))
                return !1;
            var t = r(e);
            return "[object Function]" == t || "[object GeneratorFunction]" == t || "[object AsyncFunction]" == t || "[object Proxy]" == t
        }
    },
    66052: function(e) {
        e.exports = function(e) {
            return "number" == typeof e && e > -1 && e % 1 == 0 && e <= 9007199254740991
        }
    },
    37613: function(e, t, n) {
        var r = n(52275)
          , i = n(31525)
          , a = n(8690)
          , o = a && a.isMap
          , s = o ? i(o) : r;
        e.exports = s
    },
    8819: function(e, t, n) {
        var r = n(3224);
        e.exports = function(e) {
            return r(e) && e != +e
        }
    },
    14698: function(e) {
        e.exports = function(e) {
            return null == e
        }
    },
    3224: function(e, t, n) {
        var r = n(69823)
          , i = n(50440);
        e.exports = function(e) {
            return "number" == typeof e || i(e) && "[object Number]" == r(e)
        }
    },
    93702: function(e) {
        e.exports = function(e) {
            var t = typeof e;
            return null != e && ("object" == t || "function" == t)
        }
    },
    50440: function(e) {
        e.exports = function(e) {
            return null != e && "object" == typeof e
        }
    },
    54256: function(e, t, n) {
        var r = n(69823)
          , i = n(18490)
          , a = n(50440)
          , o = Object.prototype
          , s = Function.prototype.toString
          , u = o.hasOwnProperty
          , l = s.call(Object);
        e.exports = function(e) {
            if (!a(e) || "[object Object]" != r(e))
                return !1;
            var t = i(e);
            if (null === t)
                return !0;
            var n = u.call(t, "constructor") && t.constructor;
            return "function" == typeof n && n instanceof n && s.call(n) == l
        }
    },
    60693: function(e, t, n) {
        var r = n(7170)
          , i = n(31525)
          , a = n(8690)
          , o = a && a.isSet
          , s = o ? i(o) : r;
        e.exports = s
    },
    76705: function(e, t, n) {
        var r = n(69823)
          , i = n(55589)
          , a = n(50440);
        e.exports = function(e) {
            return "string" == typeof e || !i(e) && a(e) && "[object String]" == r(e)
        }
    },
    52624: function(e, t, n) {
        var r = n(69823)
          , i = n(50440);
        e.exports = function(e) {
            return "symbol" == typeof e || i(e) && "[object Symbol]" == r(e)
        }
    },
    50922: function(e, t, n) {
        var r = n(42448)
          , i = n(31525)
          , a = n(8690)
          , o = a && a.isTypedArray
          , s = o ? i(o) : r;
        e.exports = s
    },
    75731: function(e, t, n) {
        var r = n(25048)(function(e, t, n) {
            return e + (n ? "-" : "") + t.toLowerCase()
        });
        e.exports = r
    },
    64038: function(e, t, n) {
        var r = n(87500)
          , i = n(17325)(function(e, t, n) {
            r(e, n, t)
        });
        e.exports = i
    },
    62096: function(e, t, n) {
        var r = n(75825)
          , i = n(41351)
          , a = n(30568);
        e.exports = function(e) {
            return a(e) ? r(e) : i(e)
        }
    },
    9882: function(e, t, n) {
        var r = n(75825)
          , i = n(71309)
          , a = n(30568);
        e.exports = function(e) {
            return a(e) ? r(e, !0) : i(e)
        }
    },
    77875: function(e) {
        e.exports = function(e) {
            var t = null == e ? 0 : e.length;
            return t ? e[t - 1] : void 0
        }
    },
    69107: function(e, t, n) {
        var r = n(29233)
          , i = n(55833)
          , a = n(78068)
          , o = n(55589);
        e.exports = function(e, t) {
            return (o(e) ? r : a)(e, i(t, 3))
        }
    },
    61230: function(e, t, n) {
        var r = n(87500)
          , i = n(44003)
          , a = n(55833);
        e.exports = function(e, t) {
            var n = {};
            return t = a(t, 3),
            i(e, function(e, i, a) {
                r(n, i, t(e, i, a))
            }),
            n
        }
    },
    56492: function(e, t, n) {
        var r = n(85117)
          , i = n(51669)
          , a = n(80229);
        e.exports = function(e) {
            return e && e.length ? r(e, a, i) : void 0
        }
    },
    79493: function(e, t, n) {
        var r = n(85117)
          , i = n(51669)
          , a = n(55833);
        e.exports = function(e, t) {
            return e && e.length ? r(e, a(t, 2), i) : void 0
        }
    },
    67997: function(e, t, n) {
        var r = n(95678);
        function i(e, t) {
            if ("function" != typeof e || null != t && "function" != typeof t)
                throw TypeError("Expected a function");
            var n = function() {
                var r = arguments
                  , i = t ? t.apply(this, r) : r[0]
                  , a = n.cache;
                if (a.has(i))
                    return a.get(i);
                var o = e.apply(this, r);
                return n.cache = a.set(i, o) || a,
                o
            };
            return n.cache = new (i.Cache || r),
            n
        }
        i.Cache = r,
        e.exports = i
    },
    88469: function(e, t, n) {
        var r = n(92133)
          , i = n(66948)(function(e, t, n) {
            r(e, t, n)
        });
        e.exports = i
    },
    65071: function(e, t, n) {
        var r = n(85117)
          , i = n(46718)
          , a = n(80229);
        e.exports = function(e) {
            return e && e.length ? r(e, a, i) : void 0
        }
    },
    76838: function(e, t, n) {
        var r = n(85117)
          , i = n(55833)
          , a = n(46718);
        e.exports = function(e, t) {
            return e && e.length ? r(e, i(t, 2), a) : void 0
        }
    },
    30606: function(e) {
        e.exports = function(e) {
            if ("function" != typeof e)
                throw TypeError("Expected a function");
            return function() {
                var t = arguments;
                switch (t.length) {
                case 0:
                    return !e.call(this);
                case 1:
                    return !e.call(this, t[0]);
                case 2:
                    return !e.call(this, t[0], t[1]);
                case 3:
                    return !e.call(this, t[0], t[1], t[2])
                }
                return !e.apply(this, t)
            }
        }
    },
    71607: function(e) {
        e.exports = function() {}
    },
    80231: function(e, t, n) {
        var r = n(83250);
        e.exports = function() {
            return r.Date.now()
        }
    },
    55371: function(e, t, n) {
        var r = n(55833)
          , i = n(30606)
          , a = n(57383);
        e.exports = function(e, t) {
            return a(e, i(r(t)))
        }
    },
    40916: function(e, t, n) {
        var r = n(54466)
          , i = n(55589);
        e.exports = function(e, t, n, a) {
            return null == e ? [] : (i(t) || (t = null == t ? [] : [t]),
            i(n = a ? void 0 : n) || (n = null == n ? [] : [n]),
            r(e, t, n))
        }
    },
    50663: function(e, t, n) {
        var r = n(17325)(function(e, t, n) {
            e[n ? 0 : 1].push(t)
        }, function() {
            return [[], []]
        });
        e.exports = r
    },
    57383: function(e, t, n) {
        var r = n(29233)
          , i = n(55833)
          , a = n(57121)
          , o = n(55713);
        e.exports = function(e, t) {
            if (null == e)
                return {};
            var n = r(o(e), function(e) {
                return [e]
            });
            return t = i(t),
            a(e, n, function(e, n) {
                return t(e, n[0])
            })
        }
    },
    94437: function(e, t, n) {
        var r = n(86174)
          , i = n(3293)
          , a = n(5130)
          , o = n(86040);
        e.exports = function(e) {
            return a(e) ? r(o(e)) : i(e)
        }
    },
    50362: function(e, t, n) {
        var r = n(54616)
          , i = n(98132)
          , a = n(99558)
          , o = parseFloat
          , s = Math.min
          , u = Math.random;
        e.exports = function(e, t, n) {
            if (n && "boolean" != typeof n && i(e, t, n) && (t = n = void 0),
            void 0 === n && ("boolean" == typeof t ? (n = t,
            t = void 0) : "boolean" == typeof e && (n = e,
            e = void 0)),
            void 0 === e && void 0 === t ? (e = 0,
            t = 1) : (e = a(e),
            void 0 === t ? (t = e,
            e = 0) : t = a(t)),
            e > t) {
                var l = e;
                e = t,
                t = l
            }
            if (n || e % 1 || t % 1) {
                var c = u();
                return s(e + c * (t - e + o("1e-" + ((c + "").length - 1))), t)
            }
            return r(e, t)
        }
    },
    38569: function(e, t, n) {
        var r = n(51523)();
        e.exports = r
    },
    17682: function(e, t, n) {
        var r = n(85115)
          , i = n(61701)
          , a = n(55833)
          , o = n(34306)
          , s = n(55589);
        e.exports = function(e, t, n) {
            var u = s(e) ? r : o
              , l = arguments.length < 3;
            return u(e, a(t, 4), n, l, i)
        }
    },
    38265: function(e, t, n) {
        var r = n(55833)
          , i = n(3372);
        e.exports = function(e, t) {
            var n = [];
            if (!(e && e.length))
                return n;
            var a = -1
              , o = []
              , s = e.length;
            for (t = r(t, 3); ++a < s; ) {
                var u = e[a];
                t(u, a, e) && (n.push(u),
                o.push(a))
            }
            return i(e, o),
            n
        }
    },
    50305: function(e, t, n) {
        var r = n(99835);
        e.exports = function() {
            var e = arguments
              , t = r(e[0]);
            return e.length < 3 ? t : t.replace(e[1], e[2])
        }
    },
    32663: function(e, t, n) {
        var r = n(23628)("round");
        e.exports = r
    },
    74137: function(e, t, n) {
        var r = n(73455)
          , i = n(81860)
          , a = n(55589);
        e.exports = function(e) {
            return (a(e) ? r : i)(e)
        }
    },
    91039: function(e, t, n) {
        var r = n(41351)
          , i = n(87493)
          , a = n(30568)
          , o = n(76705)
          , s = n(11324);
        e.exports = function(e) {
            if (null == e)
                return 0;
            if (a(e))
                return o(e) ? s(e) : e.length;
            var t = i(e);
            return "[object Map]" == t || "[object Set]" == t ? e.size : r(e).length
        }
    },
    29040: function(e, t, n) {
        var r = n(1831)
          , i = n(55833)
          , a = n(30854)
          , o = n(55589)
          , s = n(98132);
        e.exports = function(e, t, n) {
            var u = o(e) ? r : a;
            return n && s(e, t, n) && (t = void 0),
            u(e, i(t, 3))
        }
    },
    71635: function(e, t, n) {
        var r = n(22825)
          , i = n(54466)
          , a = n(29735)
          , o = n(98132)
          , s = a(function(e, t) {
            if (null == e)
                return [];
            var n = t.length;
            return n > 1 && o(e, t[0], t[1]) ? t = [] : n > 2 && o(t[0], t[1], t[2]) && (t = [t[0]]),
            i(e, r(t, 1), [])
        });
        e.exports = s
    },
    84506: function(e) {
        e.exports = function() {
            return []
        }
    },
    37999: function(e) {
        e.exports = function() {
            return !1
        }
    },
    28102: function(e, t, n) {
        var r = n(23055)
          , i = n(80229);
        e.exports = function(e) {
            return e && e.length ? r(e, i) : 0
        }
    },
    64341: function(e, t, n) {
        var r = n(55833)
          , i = n(23055);
        e.exports = function(e, t) {
            return e && e.length ? i(e, r(t, 2)) : 0
        }
    },
    14633: function(e, t, n) {
        var r = n(77837)
          , i = n(93702);
        e.exports = function(e, t, n) {
            var a = !0
              , o = !0;
            if ("function" != typeof e)
                throw TypeError("Expected a function");
            return i(n) && (a = "leading"in n ? !!n.leading : a,
            o = "trailing"in n ? !!n.trailing : o),
            r(e, t, {
                leading: a,
                maxWait: t,
                trailing: o
            })
        }
    },
    93170: function(e, t, n) {
        var r = n(18509)
          , i = n(84781)
          , a = n(96843)
          , o = Math.min;
        e.exports = function(e, t) {
            if ((e = a(e)) < 1 || e > 9007199254740991)
                return [];
            var n = 4294967295
              , s = o(e, 4294967295);
            t = i(t),
            e -= 4294967295;
            for (var u = r(s, t); ++n < e; )
                t(n);
            return u
        }
    },
    99558: function(e, t, n) {
        var r = n(29153)
          , i = 1 / 0;
        e.exports = function(e) {
            return e ? (e = r(e)) === i || e === -i ? (e < 0 ? -1 : 1) * 17976931348623157e292 : e == e ? e : 0 : 0 === e ? e : 0
        }
    },
    96843: function(e, t, n) {
        var r = n(99558);
        e.exports = function(e) {
            var t = r(e)
              , n = t % 1;
            return t == t ? n ? t - n : t : 0
        }
    },
    69977: function(e, t, n) {
        var r = n(99835);
        e.exports = function(e) {
            return r(e).toLowerCase()
        }
    },
    29153: function(e, t, n) {
        var r = n(21656)
          , i = n(93702)
          , a = n(52624)
          , o = 0 / 0
          , s = /^[-+]0x[0-9a-f]+$/i
          , u = /^0b[01]+$/i
          , l = /^0o[0-7]+$/i
          , c = parseInt;
        e.exports = function(e) {
            if ("number" == typeof e)
                return e;
            if (a(e))
                return o;
            if (i(e)) {
                var t = "function" == typeof e.valueOf ? e.valueOf() : e;
                e = i(t) ? t + "" : t
            }
            if ("string" != typeof e)
                return 0 === e ? e : +e;
            e = r(e);
            var n = u.test(e);
            return n || l.test(e) ? c(e.slice(2), n ? 2 : 8) : s.test(e) ? o : +e
        }
    },
    36222: function(e, t, n) {
        var r = n(78618)
          , i = n(9882);
        e.exports = function(e) {
            return r(e, i(e))
        }
    },
    99835: function(e, t, n) {
        var r = n(86245);
        e.exports = function(e) {
            return null == e ? "" : r(e)
        }
    },
    12850: function(e, t, n) {
        var r = n(99835);
        e.exports = function(e) {
            return r(e).toUpperCase()
        }
    },
    43762: function(e, t, n) {
        var r = n(86245)
          , i = n(3237)
          , a = n(28559)
          , o = n(15233)
          , s = n(99835)
          , u = n(62438);
        e.exports = function(e, t, n) {
            if ((e = s(e)) && (n || void 0 === t))
                return e.slice(0, u(e) + 1);
            if (!e || !(t = r(t)))
                return e;
            var l = o(e)
              , c = a(l, o(t)) + 1;
            return i(l, 0, c).join("")
        }
    },
    27767: function(e, t, n) {
        var r = n(22825)
          , i = n(29735)
          , a = n(80135)
          , o = n(18268)
          , s = i(function(e) {
            return a(r(e, 1, o, !0))
        });
        e.exports = s
    },
    90292: function(e, t, n) {
        var r = n(80135);
        e.exports = function(e) {
            return e && e.length ? r(e) : []
        }
    },
    3010: function(e, t, n) {
        var r = n(55833)
          , i = n(80135);
        e.exports = function(e, t) {
            return e && e.length ? i(e, r(t, 2)) : []
        }
    },
    61422: function(e, t, n) {
        var r = n(99835)
          , i = 0;
        e.exports = function(e) {
            var t = ++i;
            return r(e) + t
        }
    },
    51309: function(e, t, n) {
        var r = n(41254)("toUpperCase");
        e.exports = r
    },
    31682: function(e, t, n) {
        var r = n(20071)
          , i = n(62096);
        e.exports = function(e) {
            return null == e ? [] : r(e, i(e))
        }
    },
    12170: function(e, t, n) {
        var r = n(96026)
          , i = n(70605)
          , a = n(99835)
          , o = n(76061);
        e.exports = function(e, t, n) {
            return (e = a(e),
            void 0 === (t = n ? void 0 : t)) ? i(e) ? o(e) : r(e) : e.match(t) || []
        }
    },
    93642: function(e, t, n) {
        var r = n(678)
          , i = n(82383)
          , a = r.DEFAULT_COMPARATOR
          , o = r.reverseComparator;
        function s(e, t, n, r) {
            for (var a, o, s = r, u = new e(r); s > 0; )
                a = n[--s],
                0 !== s && (o = n[0],
                n[0] = a,
                function(e, t, n, r) {
                    for (var a, o = r, s = t[r], u = 2 * r + 1; u < n; )
                        (a = u + 1) < n && e(t[u], t[a]) >= 0 && (u = a),
                        t[r] = t[u],
                        u = 2 * (r = u) + 1;
                    t[r] = s,
                    i.siftDown(e, t, o, r)
                }(t, n, --r, 0),
                a = o),
                u[s] = a;
            return u
        }
        function u(e, t, n) {
            if (2 == arguments.length && (n = t,
            t = null),
            this.ArrayClass = e,
            this.capacity = n,
            this.items = new e(n),
            this.clear(),
            this.comparator = t || a,
            "number" != typeof n && n <= 0)
                throw Error("mnemonist/FixedReverseHeap.constructor: capacity should be a number > 0.");
            if ("function" != typeof this.comparator)
                throw Error("mnemonist/FixedReverseHeap.constructor: given comparator should be a function.");
            this.comparator = o(this.comparator)
        }
        u.prototype.clear = function() {
            this.size = 0
        }
        ,
        u.prototype.push = function(e) {
            return this.size < this.capacity ? (this.items[this.size] = e,
            i.siftDown(this.comparator, this.items, 0, this.size),
            this.size++) : this.comparator(e, this.items[0]) > 0 && i.replace(this.comparator, this.items, e),
            this.size
        }
        ,
        u.prototype.peek = function() {
            return this.items[0]
        }
        ,
        u.prototype.consume = function() {
            var e = s(this.ArrayClass, this.comparator, this.items, this.size);
            return this.size = 0,
            e
        }
        ,
        u.prototype.toArray = function() {
            return s(this.ArrayClass, this.comparator, this.items.slice(0, this.size), this.size)
        }
        ,
        u.prototype.inspect = function() {
            var e = this.toArray();
            return Object.defineProperty(e, "constructor", {
                value: u,
                enumerable: !1
            }),
            e
        }
        ,
        "undefined" != typeof Symbol && (u.prototype[Symbol.for("nodejs.util.inspect.custom")] = u.prototype.inspect),
        e.exports = u
    },
    82383: function(e, t, n) {
        var r = n(21411)
          , i = n(678)
          , a = n(31452)
          , o = i.DEFAULT_COMPARATOR
          , s = i.reverseComparator;
        function u(e, t, n, r) {
            for (var i, a, o = t[r]; r > n; ) {
                if (a = t[i = r - 1 >> 1],
                0 > e(o, a)) {
                    t[r] = a,
                    r = i;
                    continue
                }
                break
            }
            t[r] = o
        }
        function l(e, t, n) {
            for (var r, i = t.length, a = n, o = t[n], s = 2 * n + 1; s < i; )
                (r = s + 1) < i && e(t[s], t[r]) >= 0 && (s = r),
                t[n] = t[s],
                s = 2 * (n = s) + 1;
            t[n] = o,
            u(e, t, a, n)
        }
        function c(e, t, n) {
            t.push(n),
            u(e, t, 0, t.length - 1)
        }
        function d(e, t) {
            var n = t.pop();
            if (0 !== t.length) {
                var r = t[0];
                return t[0] = n,
                l(e, t, 0),
                r
            }
            return n
        }
        function p(e, t, n) {
            if (0 === t.length)
                throw Error("mnemonist/heap.replace: cannot pop an empty heap.");
            var r = t[0];
            return t[0] = n,
            l(e, t, 0),
            r
        }
        function f(e, t, n) {
            var r;
            return 0 !== t.length && 0 > e(t[0], n) && (r = t[0],
            t[0] = n,
            n = r,
            l(e, t, 0)),
            n
        }
        function h(e, t) {
            for (var n = t.length >> 1; --n >= 0; )
                l(e, t, n)
        }
        function m(e, t) {
            for (var n = t.length, r = 0, i = Array(n); r < n; )
                i[r++] = d(e, t);
            return i
        }
        function y(e) {
            if (this.clear(),
            this.comparator = e || o,
            "function" != typeof this.comparator)
                throw Error("mnemonist/Heap.constructor: given comparator should be a function.")
        }
        function g(e) {
            if (this.clear(),
            this.comparator = e || o,
            "function" != typeof this.comparator)
                throw Error("mnemonist/MaxHeap.constructor: given comparator should be a function.");
            this.comparator = s(this.comparator)
        }
        y.prototype.clear = function() {
            this.items = [],
            this.size = 0
        }
        ,
        y.prototype.push = function(e) {
            return c(this.comparator, this.items, e),
            ++this.size
        }
        ,
        y.prototype.peek = function() {
            return this.items[0]
        }
        ,
        y.prototype.pop = function() {
            return 0 !== this.size && this.size--,
            d(this.comparator, this.items)
        }
        ,
        y.prototype.replace = function(e) {
            return p(this.comparator, this.items, e)
        }
        ,
        y.prototype.pushpop = function(e) {
            return f(this.comparator, this.items, e)
        }
        ,
        y.prototype.consume = function() {
            return this.size = 0,
            m(this.comparator, this.items)
        }
        ,
        y.prototype.toArray = function() {
            return m(this.comparator, this.items.slice())
        }
        ,
        y.prototype.inspect = function() {
            var e = this.toArray();
            return Object.defineProperty(e, "constructor", {
                value: y,
                enumerable: !1
            }),
            e
        }
        ,
        "undefined" != typeof Symbol && (y.prototype[Symbol.for("nodejs.util.inspect.custom")] = y.prototype.inspect),
        g.prototype = y.prototype,
        y.from = function(e, t) {
            var n, r = new y(t);
            return n = a.isArrayLike(e) ? e.slice() : a.toArray(e),
            h(r.comparator, n),
            r.items = n,
            r.size = n.length,
            r
        }
        ,
        g.from = function(e, t) {
            var n, r = new g(t);
            return n = a.isArrayLike(e) ? e.slice() : a.toArray(e),
            h(r.comparator, n),
            r.items = n,
            r.size = n.length,
            r
        }
        ,
        y.siftUp = l,
        y.siftDown = u,
        y.push = c,
        y.pop = d,
        y.replace = p,
        y.pushpop = f,
        y.heapify = h,
        y.consume = m,
        y.nsmallest = function(e, t, n) {
            2 == arguments.length && (n = t,
            t = e,
            e = o);
            var i, u, l, c, d = s(e), f = 1 / 0;
            if (1 === t) {
                if (a.isArrayLike(n)) {
                    for (i = 0,
                    u = n.length; i < u; i++)
                        l = n[i],
                        (f === 1 / 0 || 0 > e(l, f)) && (f = l);
                    return (c = new n.constructor(1))[0] = f,
                    c
                }
                return r(n, function(t) {
                    (f === 1 / 0 || 0 > e(t, f)) && (f = t)
                }),
                [f]
            }
            if (a.isArrayLike(n)) {
                if (t >= n.length)
                    return n.slice().sort(e);
                for (h(d, c = n.slice(0, t)),
                i = t,
                u = n.length; i < u; i++)
                    d(n[i], c[0]) > 0 && p(d, c, n[i]);
                return c.sort(e)
            }
            var m = a.guessLength(n);
            return null !== m && m < t && (t = m),
            c = Array(t),
            i = 0,
            r(n, function(e) {
                i < t ? c[i] = e : (i === t && h(d, c),
                d(e, c[0]) > 0 && p(d, c, e)),
                i++
            }),
            c.length > i && (c.length = i),
            c.sort(e)
        }
        ,
        y.nlargest = function(e, t, n) {
            2 == arguments.length && (n = t,
            t = e,
            e = o);
            var i, u, l, c, d = s(e), f = -1 / 0;
            if (1 === t) {
                if (a.isArrayLike(n)) {
                    for (i = 0,
                    u = n.length; i < u; i++)
                        l = n[i],
                        (f === -1 / 0 || e(l, f) > 0) && (f = l);
                    return (c = new n.constructor(1))[0] = f,
                    c
                }
                return r(n, function(t) {
                    (f === -1 / 0 || e(t, f) > 0) && (f = t)
                }),
                [f]
            }
            if (a.isArrayLike(n)) {
                if (t >= n.length)
                    return n.slice().sort(d);
                for (c = n.slice(0, t),
                h(e, c),
                i = t,
                u = n.length; i < u; i++)
                    e(n[i], c[0]) > 0 && p(e, c, n[i]);
                return c.sort(d)
            }
            var m = a.guessLength(n);
            return null !== m && m < t && (t = m),
            c = Array(t),
            i = 0,
            r(n, function(n) {
                i < t ? c[i] = n : (i === t && h(e, c),
                e(n, c[0]) > 0 && p(e, c, n)),
                i++
            }),
            c.length > i && (c.length = i),
            c.sort(d)
        }
        ,
        y.MinHeap = y,
        y.MaxHeap = g,
        e.exports = y
    },
    35595: function(e, t, n) {
        var r = n(54884)
          , i = n(21411);
        function a() {
            this.clear()
        }
        a.prototype.clear = function() {
            this.items = [],
            this.offset = 0,
            this.size = 0
        }
        ,
        a.prototype.enqueue = function(e) {
            return this.items.push(e),
            ++this.size
        }
        ,
        a.prototype.dequeue = function() {
            if (this.size) {
                var e = this.items[this.offset];
                return 2 * ++this.offset >= this.items.length && (this.items = this.items.slice(this.offset),
                this.offset = 0),
                this.size--,
                e
            }
        }
        ,
        a.prototype.peek = function() {
            if (this.size)
                return this.items[this.offset]
        }
        ,
        a.prototype.forEach = function(e, t) {
            t = arguments.length > 1 ? t : this;
            for (var n = this.offset, r = 0, i = this.items.length; n < i; n++,
            r++)
                e.call(t, this.items[n], r, this)
        }
        ,
        a.prototype.toArray = function() {
            return this.items.slice(this.offset)
        }
        ,
        a.prototype.values = function() {
            var e = this.items
              , t = this.offset;
            return new r(function() {
                if (t >= e.length)
                    return {
                        done: !0
                    };
                var n = e[t];
                return t++,
                {
                    value: n,
                    done: !1
                }
            }
            )
        }
        ,
        a.prototype.entries = function() {
            var e = this.items
              , t = this.offset
              , n = 0;
            return new r(function() {
                if (t >= e.length)
                    return {
                        done: !0
                    };
                var r = e[t];
                return t++,
                {
                    value: [n++, r],
                    done: !1
                }
            }
            )
        }
        ,
        "undefined" != typeof Symbol && (a.prototype[Symbol.iterator] = a.prototype.values),
        a.prototype.toString = function() {
            return this.toArray().join(",")
        }
        ,
        a.prototype.toJSON = function() {
            return this.toArray()
        }
        ,
        a.prototype.inspect = function() {
            var e = this.toArray();
            return Object.defineProperty(e, "constructor", {
                value: a,
                enumerable: !1
            }),
            e
        }
        ,
        "undefined" != typeof Symbol && (a.prototype[Symbol.for("nodejs.util.inspect.custom")] = a.prototype.inspect),
        a.from = function(e) {
            var t = new a;
            return i(e, function(e) {
                t.enqueue(e)
            }),
            t
        }
        ,
        a.of = function() {
            return a.from(arguments)
        }
        ,
        e.exports = a
    },
    678: function(e, t) {
        t.DEFAULT_COMPARATOR = function(e, t) {
            return e < t ? -1 : e > t ? 1 : 0
        }
        ,
        t.DEFAULT_REVERSE_COMPARATOR = function(e, t) {
            return e < t ? 1 : e > t ? -1 : 0
        }
        ,
        t.reverseComparator = function(e) {
            return function(t, n) {
                return e(n, t)
            }
        }
        ,
        t.createTupleComparator = function(e) {
            return 2 === e ? function(e, t) {
                return e[0] < t[0] ? -1 : e[0] > t[0] ? 1 : e[1] < t[1] ? -1 : e[1] > t[1] ? 1 : 0
            }
            : function(t, n) {
                for (var r = 0; r < e; ) {
                    if (t[r] < n[r])
                        return -1;
                    if (t[r] > n[r])
                        return 1;
                    r++
                }
                return 0
            }
        }
    },
    31452: function(e, t, n) {
        var r = n(21411)
          , i = n(70687);
        function a(e) {
            return "number" == typeof e.length ? e.length : "number" == typeof e.size ? e.size : void 0
        }
        t.isArrayLike = function(e) {
            return Array.isArray(e) || i.isTypedArray(e)
        }
        ,
        t.guessLength = a,
        t.toArray = function(e) {
            var t = a(e)
              , n = "number" == typeof t ? Array(t) : []
              , i = 0;
            return r(e, function(e) {
                n[i++] = e
            }),
            n
        }
        ,
        t.toArrayWithIndices = function(e) {
            var t = a(e)
              , n = "number" == typeof t ? i.getPointerArray(t) : Array
              , o = "number" == typeof t ? Array(t) : []
              , s = "number" == typeof t ? new n(t) : []
              , u = 0;
            return r(e, function(e) {
                o[u] = e,
                s[u] = u++
            }),
            [o, s]
        }
    },
    70687: function(e, t) {
        t.getPointerArray = function(e) {
            var t = e - 1;
            if (t <= 255)
                return Uint8Array;
            if (t <= 65535)
                return Uint16Array;
            if (t <= 4294967295)
                return Uint32Array;
            throw Error("mnemonist: Pointer Array of size > 4294967295 is not supported.")
        }
        ,
        t.getSignedPointerArray = function(e) {
            var t = e - 1;
            return t <= 127 ? Int8Array : t <= 32767 ? Int16Array : t <= 2147483647 ? Int32Array : Float64Array
        }
        ,
        t.getNumberType = function(e) {
            return e === (0 | e) ? -1 === Math.sign(e) ? e <= 127 && e >= -128 ? Int8Array : e <= 32767 && e >= -32768 ? Int16Array : Int32Array : e <= 255 ? Uint8Array : e <= 65535 ? Uint16Array : Uint32Array : Float64Array
        }
        ;
        var n = {
            Uint8Array: 1,
            Int8Array: 2,
            Uint16Array: 3,
            Int16Array: 4,
            Uint32Array: 5,
            Int32Array: 6,
            Float32Array: 7,
            Float64Array: 8
        };
        t.getMinimalRepresentation = function(e, r) {
            var i, a, o, s, u, l = null, c = 0;
            for (s = 0,
            u = e.length; s < u; s++)
                o = r ? r(e[s]) : e[s],
                (i = n[(a = t.getNumberType(o)).name]) > c && (c = i,
                l = a);
            return l
        }
        ,
        t.isTypedArray = function(e) {
            return "undefined" != typeof ArrayBuffer && ArrayBuffer.isView(e)
        }
        ,
        t.concat = function() {
            var e, t, n, r = 0;
            for (e = 0,
            n = arguments.length; e < n; e++)
                r += arguments[e].length;
            var i = new arguments[0].constructor(r);
            for (e = 0,
            t = 0; e < n; e++)
                i.set(arguments[e], t),
                t += arguments[e].length;
            return i
        }
        ,
        t.indices = function(e) {
            for (var n = new (t.getPointerArray(e))(e), r = 0; r < e; r++)
                n[r] = r;
            return n
        }
    },
    46224: function(e, t, n) {
        "use strict";
        n.d(t, {
            GI: function() {
                return c
            },
            GJ: function() {
                return d
            },
            MS: function() {
                return p
            },
            Wt: function() {
                return f
            },
            dQ: function() {
                return u
            },
            mN: function() {
                return l
            },
            vA: function() {
                return s
            }
        });
        var r = n(57917)
          , i = n(28500)
          , a = n(22321)
          , o = n(73656);
        let s = e=>{
            if (e === i.JY && o.env.NEXT_PUBLIC_NODE_REAL_HEADER)
                return {
                    origin: o.env.NEXT_PUBLIC_NODE_REAL_HEADER
                }
        }
          , u = new a.GraphQLClient(i.JY)
          , l = {
            [r.a_.ETHEREUM]: new a.GraphQLClient(i.H$[r.a_.ETHEREUM]),
            [r.a_.GOERLI]: new a.GraphQLClient(i.H$[r.a_.GOERLI]),
            [r.a_.BSC]: new a.GraphQLClient(i.H$[r.a_.BSC]),
            [r.a_.BSC_TESTNET]: new a.GraphQLClient(i.H$[r.a_.BSC_TESTNET])
        }
          , c = {
            ...l,
            [r.a_.BSC]: new a.GraphQLClient(i.uT)
        }
          , d = new a.GraphQLClient(i.EC)
          , p = new a.GraphQLClient(i.gr);
        new a.GraphQLClient(i.JY,{
            timeout: 5e3,
            headers: {
                origin: "https://pancakeswap.finance"
            }
        });
        let f = new a.GraphQLClient(i.gr);
        new a.GraphQLClient(i.d$,{
            headers: {
                "X-API-KEY": o.env.BIT_QUERY_HEADER
            },
            timeout: 5e3
        })
    },
    27264: function(e, t, n) {
        "use strict";
        n.d(t, {
            r: function() {
                return c
            }
        });
        var r, i = n(19274), a = n(43429), o = n(93018), s = 256, u = e=>({
            call: t=>(0,
            o.REe)(e, t),
            createBlockFilter: ()=>(0,
            o.IP4)(e),
            createContractEventFilter: t=>(0,
            o.AhP)(e, t),
            createEventFilter: t=>(0,
            o.jgW)(e, t),
            createPendingTransactionFilter: ()=>(0,
            o.WjP)(e),
            estimateContractGas: t=>(0,
            o.Dmr)(e, t),
            estimateGas: t=>(0,
            o.QH8)(e, t),
            getBalance: t=>(0,
            o.sbY)(e, t),
            getBlock: t=>(0,
            o.Qgf)(e, t),
            getBlockNumber: t=>(0,
            o.zAD)(e, t),
            getBlockTransactionCount: t=>(0,
            o.cbU)(e, t),
            getBytecode: t=>(0,
            o.cZ8)(e, t),
            getChainId: ()=>(0,
            o.LQk)(e),
            getEnsAddress: t=>(0,
            o.OLZ)(e, t),
            getEnsAvatar: t=>(0,
            o.rDi)(e, t),
            getEnsName: t=>(0,
            o.wWn)(e, t),
            getEnsResolver: t=>(0,
            o.SXW)(e, t),
            getEnsText: t=>(0,
            o.gQG)(e, t),
            getFeeHistory: t=>(0,
            o.ZYl)(e, t),
            getFilterChanges: t=>(0,
            o.KV9)(e, t),
            getFilterLogs: t=>(0,
            o.J0p)(e, t),
            getGasPrice: ()=>(0,
            o.o3)(e),
            getLogs: t=>(0,
            o.yrc)(e, t),
            getStorageAt: t=>(0,
            o.YHl)(e, t),
            getTransaction: t=>(0,
            o.foU)(e, t),
            getTransactionConfirmations: t=>(0,
            o.a_5)(e, t),
            getTransactionCount: t=>(0,
            o.K6X)(e, t),
            getTransactionReceipt: t=>(0,
            o.ag7)(e, t),
            multicall: t=>(0,
            o.ApJ)(e, t),
            readContract: t=>(0,
            o.LkN)(e, t),
            simulateContract: t=>(0,
            o.aQP)(e, t),
            uninstallFilter: t=>(0,
            o.WZR)(e, t),
            waitForTransactionReceipt: t=>(0,
            o.ecV)(e, t),
            watchBlocks: t=>(0,
            o.pex)(e, t),
            watchBlockNumber: t=>(0,
            o.qub)(e, t),
            watchContractEvent: t=>(0,
            o.Y$E)(e, t),
            watchEvent: t=>(0,
            o.F2S)(e, t),
            watchPendingTransactions: t=>(0,
            o.OJH)(e, t)
        });
        let l = i.zG.reduce((e,t)=>({
            ...e,
            [t.id]: function({chain: e, key: t="public", name: n="Public Client", transport: i, pollingInterval: a}) {
                let o = function({chain: e, key: t="base", name: n="Base Client", pollingInterval: i=4e3, transport: a, type: o="base"}) {
                    let {config: u, request: l, value: c} = a({
                        chain: e,
                        pollingInterval: i
                    });
                    return {
                        chain: e,
                        key: t,
                        name: n,
                        pollingInterval: i,
                        request: l,
                        transport: {
                            ...u,
                            ...c
                        },
                        type: o,
                        uid: function(e=11) {
                            if (!r || s + e > 512) {
                                r = "",
                                s = 0;
                                for (let e = 0; e < 256; e++)
                                    r += (256 + 256 * Math.random() | 0).toString(16).substring(1)
                            }
                            return r.substring(s, s++ + e)
                        }()
                    }
                }({
                    chain: e,
                    key: t,
                    name: n,
                    pollingInterval: a,
                    transport: i,
                    type: "publicClient"
                });
                return {
                    ...o,
                    ...u(o)
                }
            }({
                chain: t,
                transport: function(e, t={}) {
                    let {fetchOptions: n, key: r="http", name: i="HTTP JSON-RPC", retryDelay: a} = t;
                    return ({chain: s, retryCount: u, timeout: l})=>{
                        let c = t.retryCount ?? u
                          , d = l ?? t.timeout ?? 1e4
                          , p = e || s?.rpcUrls.default.http[0];
                        if (!p)
                            throw new o.IXe;
                        return function({key: e, name: t, request: n, retryCount: r=3, retryDelay: i=150, timeout: a, type: s}, u) {
                            return {
                                config: {
                                    key: e,
                                    name: t,
                                    request: n,
                                    retryCount: r,
                                    retryDelay: i,
                                    timeout: a,
                                    type: s
                                },
                                request: (0,
                                o.niD)(n, {
                                    retryCount: r,
                                    retryDelay: i
                                }),
                                value: u
                            }
                        }({
                            key: r,
                            name: i,
                            async request({method: e, params: t}) {
                                let {result: r} = await o.f4N.http(p, {
                                    body: {
                                        method: e,
                                        params: t
                                    },
                                    fetchOptions: n,
                                    timeout: d
                                });
                                return r
                            },
                            retryCount: c,
                            retryDelay: a,
                            timeout: d,
                            type: "http"
                        }, {
                            url: e
                        })
                    }
                }(a.W[t.id], {
                    timeout: 15e3
                })
            })
        }), {})
          , c = e=>{
            let {chainId: t} = e;
            return l[t]
        }
    },
    67439: function(e, t, n) {
        var r = n(73656);
        let i = "object" == typeof r && r.env && r.env.NODE_DEBUG && /\bsemver\b/i.test(r.env.NODE_DEBUG) ? (...e)=>console.error("SEMVER", ...e) : ()=>{}
        ;
        e.exports = i
    },
    69244: function(e, t, n) {
        "use strict";
        var r, i, a = this && this.__awaiter || function(e, t, n, r) {
            return new (n || (n = Promise))(function(i, a) {
                function o(e) {
                    try {
                        u(r.next(e))
                    } catch (e) {
                        a(e)
                    }
                }
                function s(e) {
                    try {
                        u(r.throw(e))
                    } catch (e) {
                        a(e)
                    }
                }
                function u(e) {
                    var t;
                    e.done ? i(e.value) : ((t = e.value)instanceof n ? t : new n(function(e) {
                        e(t)
                    }
                    )).then(o, s)
                }
                u((r = r.apply(e, t || [])).next())
            }
            )
        }
        ;
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.generateNonce = t.checkContractWalletSignature = t.SiweMessage = t.SignatureType = t.ErrorTypes = void 0;
        let o = n(80900)
          , s = n(49569)
          , u = n(35398);
        (r = i = t.ErrorTypes || (t.ErrorTypes = {})).INVALID_SIGNATURE = "Invalid signature.",
        r.EXPIRED_MESSAGE = "Expired message.",
        r.MALFORMED_SESSION = "Malformed session.",
        (t.SignatureType || (t.SignatureType = {})).PERSONAL_SIGNATURE = "Personal signature";
        class l {
            constructor(e) {
                if ("string" == typeof e) {
                    let t = new u.ParsedMessage(e);
                    this.domain = t.domain,
                    this.address = t.address,
                    this.statement = t.statement,
                    this.uri = t.uri,
                    this.version = t.version,
                    this.nonce = t.nonce,
                    this.issuedAt = t.issuedAt,
                    this.expirationTime = t.expirationTime,
                    this.notBefore = t.notBefore,
                    this.requestId = t.requestId,
                    this.chainId = t.chainId,
                    this.resources = t.resources
                } else
                    Object.assign(this, e),
                    "string" == typeof this.chainId && (this.chainId = parseInt(this.chainId))
            }
            regexFromMessage(e) {
                let t = new u.ParsedMessageRegExp(e);
                return t.match
            }
            toMessage() {
                let e = `${this.domain} wants you to sign in with your Ethereum account:`
                  , n = `URI: ${this.uri}`
                  , r = [e, this.address].join("\n")
                  , i = `Version: ${this.version}`;
                this.nonce || (this.nonce = (0,
                t.generateNonce)());
                let a = "Chain ID: " + this.chainId
                  , o = `Nonce: ${this.nonce}`
                  , s = [n, i, a, o];
                if (this.issuedAt && Date.parse(this.issuedAt),
                this.issuedAt = this.issuedAt ? this.issuedAt : new Date().toISOString(),
                s.push(`Issued At: ${this.issuedAt}`),
                this.expirationTime) {
                    let e = `Expiration Time: ${this.expirationTime}`;
                    s.push(e)
                }
                this.notBefore && s.push(`Not Before: ${this.notBefore}`),
                this.requestId && s.push(`Request ID: ${this.requestId}`),
                this.resources && s.push(["Resources:", ...this.resources.map(e=>`- ${e}`)].join("\n"));
                let u = s.join("\n");
                return r = [r, this.statement].join("\n\n"),
                this.statement && (r += "\n"),
                [r, u].join("\n")
            }
            signMessage() {
                return console && console.warn && console.warn("signMessage method is deprecated, use prepareMessage instead."),
                this.prepareMessage()
            }
            prepareMessage() {
                let e;
                return this.version,
                this.toMessage()
            }
            validate(e=this.signature, n) {
                return a(this, void 0, void 0, function*() {
                    return new Promise((r,o)=>a(this, void 0, void 0, function*() {
                        let a = this.prepareMessage();
                        try {
                            let o, u = [];
                            if (a || u.push("`message`"),
                            e || u.push("`signature`"),
                            this.address || u.push("`address`"),
                            u.length > 0)
                                throw Error(`${i.MALFORMED_SESSION} missing: ${u.join(", ")}.`);
                            try {
                                o = s.ethers.utils.verifyMessage(a, e)
                            } catch (e) {} finally {
                                if (o !== this.address)
                                    try {
                                        let r = yield(0,
                                        t.checkContractWalletSignature)(this, e, n);
                                        if (!r)
                                            throw Error(`${i.INVALID_SIGNATURE}: ${o} !== ${this.address}`)
                                    } catch (e) {
                                        throw e
                                    }
                            }
                            let c = new l(a);
                            if (c.expirationTime) {
                                let e = new Date(c.expirationTime).getTime();
                                if (isNaN(e))
                                    throw Error(`${i.MALFORMED_SESSION} invalid expiration date.`);
                                if (new Date().getTime() >= e)
                                    throw Error(i.EXPIRED_MESSAGE)
                            }
                            r(c)
                        } catch (e) {
                            o(e)
                        }
                    }))
                })
            }
        }
        t.SiweMessage = l;
        let c = (e,t,n)=>a(void 0, void 0, void 0, function*() {
            if (!n)
                return !1;
            try {
                let r = new s.Contract(e.address,["function isValidSignature(bytes32 _message, bytes _signature) public view returns (bool)"],n)
                  , i = s.utils.hashMessage(e.signMessage());
                return yield r.isValidSignature(i, t)
            } catch (e) {
                throw e
            }
        });
        t.checkContractWalletSignature = c;
        let d = ()=>(0,
        o.randomStringForEntropy)(96);
        t.generateNonce = d
    },
    16394: function(e, t, n) {
        "use strict";
        var r = this && this.__createBinding || (Object.create ? function(e, t, n, r) {
            void 0 === r && (r = n);
            var i = Object.getOwnPropertyDescriptor(t, n);
            (!i || ("get"in i ? !t.__esModule : i.writable || i.configurable)) && (i = {
                enumerable: !0,
                get: function() {
                    return t[n]
                }
            }),
            Object.defineProperty(e, r, i)
        }
        : function(e, t, n, r) {
            void 0 === r && (r = n),
            e[r] = t[n]
        }
        )
          , i = this && this.__exportStar || function(e, t) {
            for (var n in e)
                "default" === n || Object.prototype.hasOwnProperty.call(t, n) || r(t, e, n)
        }
        ;
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        i(n(69244), t)
    },
    46850: function(e, t, n) {
        "use strict";
        e.exports.numbers = i,
        e.exports.sum = o,
        e.exports.mean = s,
        e.exports.median = function(e) {
            if (0 === (e = i(e)).length)
                return NaN;
            var t = e.length / 2 | 0;
            return (e = a(e)).length % 2 ? e[t] : (e[t - 1] + e[t]) / 2
        }
        ,
        e.exports.mode = function(e) {
            if (0 === (e = i(e)).length)
                return NaN;
            for (var t = NaN, n = {}, r = 0; r < e.length; r++) {
                var a = e[r]
                  , o = n[a] || 0;
                o++,
                n[a] = o
            }
            var s = i(Object.keys(n).sort(function(e, t) {
                return n[t] - n[e]
            }));
            if (t = s[0],
            n[s[1]] == n[t]) {
                if (s.length == e.length)
                    return e;
                for (var u = new Set([t]), l = n[t], r = 1; r < s.length; r++)
                    if (n[s[r]] == l)
                        u.add(s[r]);
                    else
                        break;
                return u
            }
            return t
        }
        ,
        e.exports.variance = l,
        e.exports.sampleVariance = c,
        e.exports.populationVariance = l,
        e.exports.stdev = d,
        e.exports.sampleStdev = function(e) {
            return Math.sqrt(c(e))
        }
        ,
        e.exports.populationStdev = d,
        e.exports.percentile = function(e, t) {
            if (0 === (e = i(e)).length || null == t || t < 0)
                return NaN;
            t > 1 && (t = 1);
            var n = (e = a(e)).length * t - .5;
            if ((0 | n) === n)
                return e[n];
            var r = 0 | n
              , o = n - r;
            return (1 - o) * e[r] + o * e[Math.min(r + 1, e.length - 1)]
        }
        ,
        e.exports.histogram = function(e, t) {
            if (null == e || 0 === (e = a(i(e))).length)
                return null;
            null == t && (t = Math.sqrt(e.length)),
            (t = Math.round(t)) < 1 && (t = 1);
            var n = e[0]
              , r = e[e.length - 1];
            n === r && (n -= .5,
            r += .5);
            var o = r - n
              , s = (o + .05 * o) / t
              , u = (n + r) / 2
              , l = u - s * Math.floor(t / 2);
            if (t % 2 != 0)
                var l = u - s / 2 - s * Math.floor(t / 2);
            for (var c = {
                values: Array(t).fill(0),
                bins: t,
                binWidth: s,
                binLimits: [l, l + s * t]
            }, d = 0, p = 0; p < e.length; p++) {
                for (; e[p] > (d + 1) * s + l; )
                    d++;
                c.values[d]++
            }
            return c
        }
        ;
        var r = n(35095);
        function i(e) {
            var t = [];
            if (null == e)
                return t;
            for (var n = 0; n < e.length; n++)
                r(e[n]) && t.push(+e[n]);
            return t
        }
        function a(e) {
            return e.sort(function(e, t) {
                return e - t
            })
        }
        function o(e) {
            e = i(e);
            for (var t = 0, n = 0; n < e.length; n++)
                t += e[n];
            return t
        }
        function s(e) {
            return 0 === (e = i(e)).length ? NaN : o(e) / e.length
        }
        function u(e) {
            for (var t = s(e = i(e)), n = [], r = 0; r < e.length; r++)
                n.push(Math.pow(e[r] - t, 2));
            return n
        }
        function l(e) {
            return s(u(e))
        }
        function c(e) {
            var t = u(e);
            return t.length <= 1 ? NaN : o(t) / (t.length - 1)
        }
        function d(e) {
            return Math.sqrt(l(e))
        }
    },
    61829: function(e, t, n) {
        "use strict";
        function r(e, t) {
            if (!e)
                throw Error("Invariant failed")
        }
        n.d(t, {
            Z: function() {
                return r
            }
        })
    },
    76505: function(e, t, n) {
        "use strict";
        if (n.d(t, {
            _: function() {
                return u
            }
        }),
        2272 == n.j)
            var r, i = n(82959);
        if (2272 == n.j)
            var a = n(86234);
        if (2272 == n.j)
            var o = n(44369);
        if (2272 == n.j)
            var s = n(34130);
        var u = class extends (2272 == n.j ? i.wR : null) {
            constructor({chains: e, options: t}={}) {
                let n = {
                    shimDisconnect: !0,
                    getProvider: ()=>"undefined" != typeof window ? window.ethereum : void 0,
                    ...t
                };
                super({
                    chains: e,
                    options: n
                }),
                (0,
                i.ov)(this, "id", "injected"),
                (0,
                i.ov)(this, "name"),
                (0,
                i.ov)(this, "ready"),
                (0,
                i.Ko)(this, r, void 0),
                (0,
                i.ov)(this, "shimDisconnectKey", `${this.id}.shimDisconnect`),
                (0,
                i.ov)(this, "onAccountsChanged", e=>{
                    0 === e.length ? this.emit("disconnect") : this.emit("change", {
                        account: (0,
                        s.getAddress)(e[0])
                    })
                }
                ),
                (0,
                i.ov)(this, "onChainChanged", e=>{
                    let t = (0,
                    a.Jk)(e)
                      , n = this.isChainUnsupported(t);
                    this.emit("change", {
                        chain: {
                            id: t,
                            unsupported: n
                        }
                    })
                }
                ),
                (0,
                i.ov)(this, "onDisconnect", async e=>{
                    if (1013 === e.code) {
                        let e = await this.getProvider();
                        if (e) {
                            let e = await this.getAccount();
                            if (e)
                                return
                        }
                    }
                    this.emit("disconnect"),
                    this.options.shimDisconnect && a.s3().storage?.removeItem(this.shimDisconnectKey)
                }
                );
                let o = n.getProvider();
                if ("string" == typeof n.name)
                    this.name = n.name;
                else if (o) {
                    let e = function(e) {
                        if (!e)
                            return "Injected";
                        let t = e=>e.isApexWallet ? "Apex Wallet" : e.isAvalanche ? "Core Wallet" : e.isBackpack ? "Backpack" : e.isBifrost ? "Bifrost Wallet" : e.isBitKeep ? "BitKeep" : e.isBitski ? "Bitski" : e.isBraveWallet ? "Brave Wallet" : e.isCoinbaseWallet ? "Coinbase Wallet" : e.isDawn ? "Dawn Wallet" : e.isExodus ? "Exodus" : e.isFrame ? "Frame" : e.isFrontier ? "Frontier Wallet" : e.isGamestop ? "GameStop Wallet" : e.isHyperPay ? "HyperPay Wallet" : e.isImToken ? "ImToken" : e.isKuCoinWallet ? "KuCoin Wallet" : e.isMathWallet ? "MathWallet" : e.isOkxWallet || e.isOKExWallet ? "OKX Wallet" : e.isOneInchIOSWallet || e.isOneInchAndroidWallet ? "1inch Wallet" : e.isOpera ? "Opera" : e.isPhantom ? "Phantom" : e.isPortal ? "Ripio Portal" : e.isRabby ? "Rabby" : e.isRainbow ? "Rainbow" : e.isStatus ? "Status" : e.isTally ? "Taho" : e.isTokenPocket ? "TokenPocket" : e.isTokenary ? "Tokenary" : e.isTrust || e.isTrustWallet ? "Trust Wallet" : e.isXDEFI ? "XDEFI Wallet" : e.isZerion ? "Zerion" : e.isMetaMask ? "MetaMask" : void 0;
                        if (e.providers?.length) {
                            let n = new Set
                              , r = 1;
                            for (let i of e.providers) {
                                let e = t(i);
                                e || (e = `Unknown Wallet #${r}`,
                                r += 1),
                                n.add(e)
                            }
                            let i = [...n];
                            return i.length ? i : i[0] ?? "Injected"
                        }
                        return t(e) ?? "Injected"
                    }(o);
                    n.name ? this.name = n.name(e) : "string" == typeof e ? this.name = e : this.name = e[0]
                } else
                    this.name = "Injected";
                this.ready = !!o
            }
            async connect({chainId: e}={}) {
                try {
                    let t = await this.getProvider();
                    if (!t)
                        throw new a.Nu;
                    t.on && (t.on("accountsChanged", this.onAccountsChanged),
                    t.on("chainChanged", this.onChainChanged),
                    t.on("disconnect", this.onDisconnect)),
                    this.emit("message", {
                        type: "connecting"
                    });
                    let n = await t.request({
                        method: "eth_requestAccounts"
                    })
                      , r = (0,
                    s.getAddress)(n[0])
                      , i = await this.getChainId()
                      , o = this.isChainUnsupported(i);
                    if (e && i !== e) {
                        let t = await this.switchChain(e);
                        i = t.id,
                        o = this.isChainUnsupported(i)
                    }
                    return this.options.shimDisconnect && a.s3().storage?.setItem(this.shimDisconnectKey, !0),
                    {
                        account: r,
                        chain: {
                            id: i,
                            unsupported: o
                        },
                        provider: t
                    }
                } catch (e) {
                    if (this.isUserRejectedRequestError(e))
                        throw new a.ab(e);
                    if (-32002 === e.code)
                        throw new a.TA(e);
                    throw e
                }
            }
            async disconnect() {
                let e = await this.getProvider();
                e?.removeListener && (e.removeListener("accountsChanged", this.onAccountsChanged),
                e.removeListener("chainChanged", this.onChainChanged),
                e.removeListener("disconnect", this.onDisconnect),
                this.options.shimDisconnect && a.s3().storage?.removeItem(this.shimDisconnectKey))
            }
            async getAccount() {
                let e = await this.getProvider();
                if (!e)
                    throw new a.Nu;
                let t = await e.request({
                    method: "eth_accounts"
                });
                return (0,
                s.getAddress)(t[0])
            }
            async getChainId() {
                let e = await this.getProvider();
                if (!e)
                    throw new a.Nu;
                return e.request({
                    method: "eth_chainId"
                }).then(a.Jk)
            }
            async getProvider() {
                let e = this.options.getProvider();
                return e && (0,
                i.qx)(this, r, e),
                (0,
                i.ac)(this, r)
            }
            async getSigner({chainId: e}={}) {
                let[t,n] = await Promise.all([this.getProvider(), this.getAccount()]);
                return new o.Q(t,e).getSigner(n)
            }
            async isAuthorized() {
                try {
                    if (this.options.shimDisconnect && !a.s3().storage?.getItem(this.shimDisconnectKey))
                        return !1;
                    let e = await this.getProvider();
                    if (!e)
                        throw new a.Nu;
                    let t = await this.getAccount();
                    return !!t
                } catch {
                    return !1
                }
            }
            async switchChain(e) {
                let t = await this.getProvider();
                if (!t)
                    throw new a.Nu;
                let n = (0,
                s.hexValue)(e);
                try {
                    return await Promise.all([t.request({
                        method: "wallet_switchEthereumChain",
                        params: [{
                            chainId: n
                        }]
                    }), new Promise(t=>this.on("change", ({chain: n})=>{
                        n?.id === e && t()
                    }
                    ))]),
                    this.chains.find(t=>t.id === e) ?? {
                        id: e,
                        name: `Chain ${n}`,
                        network: `${n}`,
                        nativeCurrency: {
                            name: "Ether",
                            decimals: 18,
                            symbol: "ETH"
                        },
                        rpcUrls: {
                            default: {
                                http: [""]
                            },
                            public: {
                                http: [""]
                            }
                        }
                    }
                } catch (i) {
                    let r = this.chains.find(t=>t.id === e);
                    if (!r)
                        throw new a.X4({
                            chainId: e,
                            connectorId: this.id
                        });
                    if (4902 === i.code || i?.data?.originalError?.code === 4902)
                        try {
                            await t.request({
                                method: "wallet_addEthereumChain",
                                params: [{
                                    chainId: n,
                                    chainName: r.name,
                                    nativeCurrency: r.nativeCurrency,
                                    rpcUrls: [r.rpcUrls.public?.http[0] ?? ""],
                                    blockExplorerUrls: this.getBlockExplorerUrls(r)
                                }]
                            });
                            let i = await this.getChainId();
                            if (i !== e)
                                throw new a.zZ("User rejected switch after adding network.",{
                                    code: 4001
                                });
                            return r
                        } catch (e) {
                            if (this.isUserRejectedRequestError(e))
                                throw new a.ab(e);
                            throw new a.iA
                        }
                    if (this.isUserRejectedRequestError(i))
                        throw new a.ab(i);
                    throw new a.x3(i)
                }
            }
            async watchAsset({address: e, decimals: t=18, image: n, symbol: r}) {
                let i = await this.getProvider();
                if (!i)
                    throw new a.Nu;
                return i.request({
                    method: "wallet_watchAsset",
                    params: {
                        type: "ERC20",
                        options: {
                            address: e,
                            decimals: t,
                            image: n,
                            symbol: r
                        }
                    }
                })
            }
            isUserRejectedRequestError(e) {
                return 4001 === e.code
            }
        }
        ;
        r = new WeakMap
    },
    82959: function(e, t, n) {
        "use strict";
        if (n.d(t, {
            Ko: function() {
                return c
            },
            U9: function() {
                return p
            },
            ac: function() {
                return l
            },
            ov: function() {
                return s
            },
            qx: function() {
                return d
            },
            wR: function() {
                return f
            }
        }),
        2272 == n.j)
            var r = n(10398);
        var i = n(21883)
          , a = Object.defineProperty
          , o = (e,t,n)=>t in e ? a(e, t, {
            enumerable: !0,
            configurable: !0,
            writable: !0,
            value: n
        }) : e[t] = n
          , s = (e,t,n)=>(o(e, "symbol" != typeof t ? t + "" : t, n),
        n)
          , u = (e,t,n)=>{
            if (!t.has(e))
                throw TypeError("Cannot " + n)
        }
          , l = (e,t,n)=>(u(e, t, "read from private field"),
        n ? n.call(e) : t.get(e))
          , c = (e,t,n)=>{
            if (t.has(e))
                throw TypeError("Cannot add the same private member more than once");
            t instanceof WeakSet ? t.add(e) : t.set(e, n)
        }
          , d = (e,t,n,r)=>(u(e, t, "write to private field"),
        r ? r.call(e, n) : t.set(e, n),
        n)
          , p = (e,t,n)=>(u(e, t, "access private method"),
        n)
          , f = class extends (2272 == n.j ? i : null) {
            constructor({chains: e=[r.RJ, r.ws], options: t}) {
                super(),
                s(this, "chains"),
                s(this, "options"),
                this.chains = e,
                this.options = t
            }
            getBlockExplorerUrls(e) {
                let {default: t, ...n} = e.blockExplorers ?? {};
                if (t)
                    return [t.url, ...Object.values(n).map(e=>e.url)]
            }
            isChainUnsupported(e) {
                return !this.chains.some(t=>t.id === e)
            }
        }
    },
    21513: function(e, t, n) {
        "use strict";
        if (n.d(t, {
            D: function() {
                return d
            }
        }),
        2272 == n.j)
            var r, i, a, o, s = n(82959);
        if (2272 == n.j)
            var u = n(86234);
        if (2272 == n.j)
            var l = n(44369);
        if (2272 == n.j)
            var c = n(34130);
        var d = class extends (2272 == n.j ? s.wR : null) {
            constructor({chains: e, options: t}) {
                super({
                    chains: e,
                    options: {
                        reloadOnDisconnect: !1,
                        ...t
                    }
                }),
                (0,
                s.Ko)(this, a),
                (0,
                s.ov)(this, "id", "coinbaseWallet"),
                (0,
                s.ov)(this, "name", "Coinbase Wallet"),
                (0,
                s.ov)(this, "ready", !0),
                (0,
                s.Ko)(this, r, void 0),
                (0,
                s.Ko)(this, i, void 0),
                (0,
                s.ov)(this, "onAccountsChanged", e=>{
                    0 === e.length ? this.emit("disconnect") : this.emit("change", {
                        account: (0,
                        c.getAddress)(e[0])
                    })
                }
                ),
                (0,
                s.ov)(this, "onChainChanged", e=>{
                    let t = (0,
                    u.Jk)(e)
                      , n = this.isChainUnsupported(t);
                    this.emit("change", {
                        chain: {
                            id: t,
                            unsupported: n
                        }
                    })
                }
                ),
                (0,
                s.ov)(this, "onDisconnect", ()=>{
                    this.emit("disconnect")
                }
                )
            }
            async connect({chainId: e}={}) {
                try {
                    let t = await this.getProvider();
                    t.on("accountsChanged", this.onAccountsChanged),
                    t.on("chainChanged", this.onChainChanged),
                    t.on("disconnect", this.onDisconnect),
                    this.emit("message", {
                        type: "connecting"
                    });
                    let n = await t.enable()
                      , r = (0,
                    c.getAddress)(n[0])
                      , i = await this.getChainId()
                      , a = this.isChainUnsupported(i);
                    if (e && i !== e) {
                        let t = await this.switchChain(e);
                        i = t.id,
                        a = this.isChainUnsupported(i)
                    }
                    return {
                        account: r,
                        chain: {
                            id: i,
                            unsupported: a
                        },
                        provider: new l.Q(t)
                    }
                } catch (e) {
                    if (/(user closed modal|accounts received is empty)/i.test(e.message))
                        throw new u.ab(e);
                    throw e
                }
            }
            async disconnect() {
                if (!(0,
                s.ac)(this, i))
                    return;
                let e = await this.getProvider();
                e.removeListener("accountsChanged", this.onAccountsChanged),
                e.removeListener("chainChanged", this.onChainChanged),
                e.removeListener("disconnect", this.onDisconnect),
                e.disconnect(),
                e.close()
            }
            async getAccount() {
                let e = await this.getProvider()
                  , t = await e.request({
                    method: "eth_accounts"
                });
                return (0,
                c.getAddress)(t[0])
            }
            async getChainId() {
                let e = await this.getProvider()
                  , t = (0,
                u.Jk)(e.chainId);
                return t
            }
            async getProvider() {
                if (!(0,
                s.ac)(this, i)) {
                    let e = (await Promise.all([n.e(6723), n.e(5313), n.e(3508), n.e(5569), n.e(223)]).then(n.t.bind(n, 85569, 19))).default;
                    "function" != typeof e && "function" == typeof e.default && (e = e.default),
                    (0,
                    s.qx)(this, r, new e(this.options));
                    let t = s.ac(this, r).walletExtension?.getChainId()
                      , a = this.chains.find(e=>this.options.chainId ? e.id === this.options.chainId : e.id === t) || this.chains[0]
                      , o = this.options.chainId || a?.id
                      , u = this.options.jsonRpcUrl || a?.rpcUrls.default.http[0];
                    (0,
                    s.qx)(this, i, (0,
                    s.ac)(this, r).makeWeb3Provider(u, o))
                }
                return (0,
                s.ac)(this, i)
            }
            async getSigner({chainId: e}={}) {
                let[t,n] = await Promise.all([this.getProvider(), this.getAccount()]);
                return new l.Q(t,e).getSigner(n)
            }
            async isAuthorized() {
                try {
                    let e = await this.getAccount();
                    return !!e
                } catch {
                    return !1
                }
            }
            async switchChain(e) {
                let t = await this.getProvider()
                  , n = (0,
                c.hexValue)(e);
                try {
                    return await t.request({
                        method: "wallet_switchEthereumChain",
                        params: [{
                            chainId: n
                        }]
                    }),
                    this.chains.find(t=>t.id === e) ?? {
                        id: e,
                        name: `Chain ${n}`,
                        network: `${n}`,
                        nativeCurrency: {
                            name: "Ether",
                            decimals: 18,
                            symbol: "ETH"
                        },
                        rpcUrls: {
                            default: {
                                http: [""]
                            },
                            public: {
                                http: [""]
                            }
                        }
                    }
                } catch (i) {
                    let r = this.chains.find(t=>t.id === e);
                    if (!r)
                        throw new u.X4({
                            chainId: e,
                            connectorId: this.id
                        });
                    if (4902 === i.code)
                        try {
                            return await t.request({
                                method: "wallet_addEthereumChain",
                                params: [{
                                    chainId: n,
                                    chainName: r.name,
                                    nativeCurrency: r.nativeCurrency,
                                    rpcUrls: [r.rpcUrls.public?.http[0] ?? ""],
                                    blockExplorerUrls: this.getBlockExplorerUrls(r)
                                }]
                            }),
                            r
                        } catch (e) {
                            if ((0,
                            s.U9)(this, a, o).call(this, e))
                                throw new u.ab(e);
                            throw new u.iA
                        }
                    if ((0,
                    s.U9)(this, a, o).call(this, i))
                        throw new u.ab(i);
                    throw new u.x3(i)
                }
            }
            async watchAsset({address: e, decimals: t=18, image: n, symbol: r}) {
                let i = await this.getProvider();
                return i.request({
                    method: "wallet_watchAsset",
                    params: {
                        type: "ERC20",
                        options: {
                            address: e,
                            decimals: t,
                            image: n,
                            symbol: r
                        }
                    }
                })
            }
        }
        ;
        r = new WeakMap,
        i = new WeakMap,
        a = new WeakSet,
        o = function(e) {
            return /(user rejected)/i.test(e.message)
        }
    },
    8826: function(e, t, n) {
        "use strict";
        if (n.d(t, {
            Q: function() {
                return d
            }
        }),
        2272 == n.j)
            var r, i, a, o = n(82959);
        var s = n(53650)
          , u = n(86234);
        if (2272 == n.j)
            var l = n(44369);
        var c = n(34130)
          , d = class extends (2272 == n.j ? o.wR : null) {
            constructor({chains: e, options: t={
                enableDebugLogs: !1
            }}={}) {
                super({
                    chains: e,
                    options: t
                }),
                (0,
                o.Ko)(this, i),
                (0,
                o.ov)(this, "id", "ledger"),
                (0,
                o.ov)(this, "name", "Ledger"),
                (0,
                o.ov)(this, "ready", !0),
                (0,
                o.Ko)(this, r, void 0),
                (0,
                o.ov)(this, "onAccountsChanged", e=>{
                    0 === e.length ? this.emit("disconnect") : this.emit("change", {
                        account: (0,
                        c.getAddress)(e[0])
                    })
                }
                ),
                (0,
                o.ov)(this, "onChainChanged", e=>{
                    let t = (0,
                    u.Jk)(e)
                      , n = this.isChainUnsupported(t);
                    this.emit("change", {
                        chain: {
                            id: t,
                            unsupported: n
                        }
                    })
                }
                ),
                (0,
                o.ov)(this, "onDisconnect", ()=>{
                    this.emit("disconnect")
                }
                )
            }
            async connect() {
                try {
                    let e = await this.getProvider({
                        create: !0
                    });
                    e.on && (e.on("accountsChanged", this.onAccountsChanged),
                    e.on("chainChanged", this.onChainChanged),
                    e.on("disconnect", this.onDisconnect)),
                    this.emit("message", {
                        type: "connecting"
                    });
                    let t = await e.request({
                        method: "eth_requestAccounts"
                    })
                      , n = (0,
                    c.getAddress)(t[0])
                      , r = await this.getChainId()
                      , s = this.isChainUnsupported(r);
                    return this.switchChain = (0,
                    o.U9)(this, i, a),
                    {
                        account: n,
                        chain: {
                            id: r,
                            unsupported: s
                        },
                        provider: new l.Q(e)
                    }
                } catch (e) {
                    if (4001 === e.code)
                        throw new u.ab(e);
                    if (-32002 === e.code)
                        throw e instanceof Error ? e : Error(String(e));
                    throw e
                }
            }
            async disconnect() {
                let e = await this.getProvider();
                e?.disconnect && await e.disconnect(),
                e?.removeListener && (e.removeListener("accountsChanged", this.onAccountsChanged),
                e.removeListener("chainChanged", this.onChainChanged),
                e.removeListener("disconnect", this.onDisconnect)),
                "undefined" != typeof localStorage && localStorage.removeItem("walletconnect")
            }
            async getAccount() {
                let e = await this.getProvider()
                  , t = await e.request({
                    method: "eth_accounts"
                })
                  , n = (0,
                c.getAddress)(t[0]);
                return n
            }
            async getChainId() {
                let e = await this.getProvider()
                  , t = await e.request({
                    method: "eth_chainId"
                });
                return (0,
                u.Jk)(t)
            }
            async getProvider({chainId: e, create: t}={
                create: !1
            }) {
                if (!(0,
                o.ac)(this, r) || e || t) {
                    let t = await (0,
                    s.MS)();
                    this.options.enableDebugLogs && t.enableDebugLogs();
                    let n = this.chains.reduce((e,t)=>({
                        ...e,
                        [t.id]: t.rpcUrls.default.http[0]
                    }), {});
                    t.checkSupport({
                        bridge: this.options.bridge,
                        providerType: s.B5.Ethereum,
                        chainId: e || this.options.chainId,
                        rpc: {
                            ...n,
                            ...this.options?.rpc
                        }
                    }),
                    (0,
                    o.qx)(this, r, await t.getProvider())
                }
                return (0,
                o.ac)(this, r)
            }
            async getSigner({chainId: e}={}) {
                let[t,n] = await Promise.all([this.getProvider({
                    chainId: e
                }), this.getAccount()]);
                return new l.Q(t,e).getSigner(n)
            }
            async isAuthorized() {
                try {
                    let e = await this.getAccount();
                    return !!e
                } catch {
                    return !1
                }
            }
        }
        ;
        r = new WeakMap,
        i = new WeakSet,
        a = async function(e) {
            let t = await this.getProvider()
              , n = (0,
            c.hexValue)(e);
            try {
                return await Promise.race([t.request({
                    method: "wallet_switchEthereumChain",
                    params: [{
                        chainId: n
                    }]
                }), new Promise(t=>this.on("change", ({chain: n})=>{
                    n?.id === e && t(e)
                }
                ))]),
                this.chains.find(t=>t.id === e) ?? {
                    id: e,
                    name: `Chain ${n}`,
                    network: `${n}`,
                    nativeCurrency: {
                        name: "Ether",
                        decimals: 18,
                        symbol: "ETH"
                    },
                    rpcUrls: {
                        default: {
                            http: [""]
                        },
                        public: {
                            http: [""]
                        }
                    }
                }
            } catch (t) {
                let e = "string" == typeof t ? t : t?.message;
                if (/user rejected request/i.test(e))
                    throw new u.ab(t);
                throw new u.x3(t)
            }
        }
    },
    40717: function(e, t, n) {
        "use strict";
        if (n.d(t, {
            i: function() {
                return u
            }
        }),
        2272 == n.j)
            var r, i = n(76505);
        if (2272 == n.j)
            var a = n(82959);
        if (2272 == n.j)
            var o = n(86234);
        if (2272 == n.j)
            var s = n(34130);
        var u = class extends (2272 == n.j ? i._ : null) {
            constructor({chains: e, options: t}={}) {
                let n = {
                    name: "MetaMask",
                    shimDisconnect: !0,
                    getProvider() {
                        function e(e) {
                            let t = !!e?.isMetaMask;
                            if (t && (!e.isBraveWallet || e._events || e._state) && !e.isApexWallet && !e.isAvalanche && !e.isBitKeep && !e.isKuCoinWallet && !e.isMathWallet && !e.isOkxWallet && !e.isOKExWallet && !e.isOneInchIOSWallet && !e.isOneInchAndroidWallet && !e.isOpera && !e.isPortal && !e.isRabby && !e.isTokenPocket && !e.isTokenary && !e.isZerion)
                                return e
                        }
                        if ("undefined" == typeof window)
                            return;
                        let t = window.ethereum;
                        return t?.providers ? t.providers.find(e) : e(t)
                    },
                    ...t
                };
                super({
                    chains: e,
                    options: n
                }),
                (0,
                a.ov)(this, "id", "metaMask"),
                (0,
                a.ov)(this, "shimDisconnectKey", `${this.id}.shimDisconnect`),
                (0,
                a.Ko)(this, r, void 0),
                (0,
                a.qx)(this, r, n.UNSTABLE_shimOnConnectSelectAccount)
            }
            async connect({chainId: e}={}) {
                try {
                    let t = await this.getProvider();
                    if (!t)
                        throw new o.Nu;
                    t.on && (t.on("accountsChanged", this.onAccountsChanged),
                    t.on("chainChanged", this.onChainChanged),
                    t.on("disconnect", this.onDisconnect)),
                    this.emit("message", {
                        type: "connecting"
                    });
                    let n = null;
                    if ((0,
                    a.ac)(this, r) && this.options?.shimDisconnect && !o.s3().storage?.getItem(this.shimDisconnectKey)) {
                        n = await this.getAccount().catch(()=>null);
                        let e = !!n;
                        if (e)
                            try {
                                await t.request({
                                    method: "wallet_requestPermissions",
                                    params: [{
                                        eth_accounts: {}
                                    }]
                                }),
                                n = await this.getAccount()
                            } catch (e) {
                                if (this.isUserRejectedRequestError(e))
                                    throw new o.ab(e);
                                if (e.code === new o.TA(e).code)
                                    throw e
                            }
                    }
                    if (!n) {
                        let e = await t.request({
                            method: "eth_requestAccounts"
                        });
                        n = (0,
                        s.getAddress)(e[0])
                    }
                    let i = await this.getChainId()
                      , u = this.isChainUnsupported(i);
                    if (e && i !== e) {
                        let t = await this.switchChain(e);
                        i = t.id,
                        u = this.isChainUnsupported(i)
                    }
                    return this.options?.shimDisconnect && o.s3().storage?.setItem(this.shimDisconnectKey, !0),
                    {
                        account: n,
                        chain: {
                            id: i,
                            unsupported: u
                        },
                        provider: t
                    }
                } catch (e) {
                    if (this.isUserRejectedRequestError(e))
                        throw new o.ab(e);
                    if (-32002 === e.code)
                        throw new o.TA(e);
                    throw e
                }
            }
        }
        ;
        r = new WeakMap
    },
    97869: function(e, t, n) {
        "use strict";
        if (n.d(t, {
            J: function() {
                return d
            }
        }),
        2272 == n.j)
            var r, i, a = n(82959);
        var o = n(18147)
          , s = n(70935);
        if (2272 == n.j)
            var u = n(86234);
        if (2272 == n.j)
            var l = n(44369);
        if (2272 == n.j)
            var c = n(34130);
        var d = class extends (2272 == n.j ? a.wR : null) {
            constructor({chains: e, options: t}) {
                let n = {
                    shimDisconnect: !1,
                    ...t
                };
                super({
                    chains: e,
                    options: n
                }),
                (0,
                a.ov)(this, "id", "safe"),
                (0,
                a.ov)(this, "name", "Safe"),
                (0,
                a.ov)(this, "ready", "undefined" != typeof window && window?.parent !== window),
                (0,
                a.Ko)(this, r, void 0),
                (0,
                a.Ko)(this, i, void 0),
                (0,
                a.ov)(this, "shimDisconnectKey", `${this.id}.shimDisconnect`);
                let o = s;
                "function" != typeof s && "function" == typeof s.default && (o = s.default),
                (0,
                a.qx)(this, i, new o(n))
            }
            async connect() {
                let e = await this.getProvider();
                if (!e)
                    throw new u.Nu;
                e.on && (e.on("accountsChanged", this.onAccountsChanged),
                e.on("chainChanged", this.onChainChanged),
                e.on("disconnect", this.onDisconnect)),
                this.emit("message", {
                    type: "connecting"
                });
                let t = await this.getAccount()
                  , n = await this.getChainId();
                return this.options.shimDisconnect && u.s3().storage?.setItem(this.shimDisconnectKey, !0),
                {
                    account: t,
                    provider: e,
                    chain: {
                        id: n,
                        unsupported: this.isChainUnsupported(n)
                    }
                }
            }
            async disconnect() {
                let e = await this.getProvider();
                e?.removeListener && (e.removeListener("accountsChanged", this.onAccountsChanged),
                e.removeListener("chainChanged", this.onChainChanged),
                e.removeListener("disconnect", this.onDisconnect),
                this.options.shimDisconnect && u.s3().storage?.removeItem(this.shimDisconnectKey))
            }
            async getAccount() {
                let e = await this.getProvider();
                if (!e)
                    throw new u.Nu;
                let t = await e.request({
                    method: "eth_accounts"
                });
                return (0,
                c.getAddress)(t[0])
            }
            async getChainId() {
                let e = await this.getProvider();
                if (!e)
                    throw new u.Nu;
                return (0,
                u.Jk)(e.chainId)
            }
            async getProvider() {
                if (!(0,
                a.ac)(this, r)) {
                    let e = await (0,
                    a.ac)(this, i).safe.getInfo();
                    if (!e)
                        throw Error("Could not load Safe information");
                    (0,
                    a.qx)(this, r, new o.N(e,(0,
                    a.ac)(this, i)))
                }
                return (0,
                a.ac)(this, r)
            }
            async getSigner() {
                let e = await this.getProvider()
                  , t = await this.getAccount();
                return new l.Q(e).getSigner(t)
            }
            async isAuthorized() {
                try {
                    if (this.options.shimDisconnect && !u.s3().storage?.getItem(this.shimDisconnectKey))
                        return !1;
                    let e = await this.getAccount();
                    return !!e
                } catch {
                    return !1
                }
            }
            onAccountsChanged(e) {}
            onChainChanged(e) {}
            onDisconnect() {
                this.emit("disconnect")
            }
        }
        ;
        r = new WeakMap,
        i = new WeakMap
    },
    8045: function(e, t, n) {
        "use strict";
        if (n.d(t, {
            O: function() {
                return d
            }
        }),
        2272 == n.j)
            var r, i, a, o = n(82959);
        var s = n(86234);
        if (2272 == n.j)
            var u = n(44369);
        var l = n(34130)
          , c = /(imtoken|metamask|rainbow|trust wallet|uniswap wallet|ledger)/i
          , d = class extends (2272 == n.j ? o.wR : null) {
            constructor(e) {
                super(e),
                (0,
                o.Ko)(this, i),
                (0,
                o.ov)(this, "id", "walletConnectLegacy"),
                (0,
                o.ov)(this, "name", "WalletConnectLegacy"),
                (0,
                o.ov)(this, "ready", !0),
                (0,
                o.Ko)(this, r, void 0),
                (0,
                o.ov)(this, "onAccountsChanged", e=>{
                    0 === e.length ? this.emit("disconnect") : this.emit("change", {
                        account: (0,
                        l.getAddress)(e[0])
                    })
                }
                ),
                (0,
                o.ov)(this, "onChainChanged", e=>{
                    let t = (0,
                    s.Jk)(e)
                      , n = this.isChainUnsupported(t);
                    this.emit("change", {
                        chain: {
                            id: t,
                            unsupported: n
                        }
                    })
                }
                ),
                (0,
                o.ov)(this, "onDisconnect", ()=>{
                    this.emit("disconnect")
                }
                )
            }
            async connect({chainId: e}={}) {
                try {
                    let t = e;
                    if (!t) {
                        let e = (0,
                        s.s3)().lastUsedChainId;
                        e && !this.isChainUnsupported(e) && (t = e)
                    }
                    let n = await this.getProvider({
                        chainId: t,
                        create: !0
                    });
                    n.on("accountsChanged", this.onAccountsChanged),
                    n.on("chainChanged", this.onChainChanged),
                    n.on("disconnect", this.onDisconnect),
                    setTimeout(()=>this.emit("message", {
                        type: "connecting"
                    }), 0);
                    let r = await n.enable()
                      , d = (0,
                    l.getAddress)(r[0])
                      , p = await this.getChainId()
                      , f = this.isChainUnsupported(p)
                      , h = n.connector?.peerMeta?.name ?? "";
                    return c.test(h) && (this.switchChain = (0,
                    o.U9)(this, i, a)),
                    {
                        account: d,
                        chain: {
                            id: p,
                            unsupported: f
                        },
                        provider: new u.Q(n)
                    }
                } catch (e) {
                    if (/user closed modal/i.test(e.message))
                        throw new s.ab(e);
                    throw e
                }
            }
            async disconnect() {
                let e = await this.getProvider();
                await e.disconnect(),
                e.removeListener("accountsChanged", this.onAccountsChanged),
                e.removeListener("chainChanged", this.onChainChanged),
                e.removeListener("disconnect", this.onDisconnect),
                "undefined" != typeof localStorage && localStorage.removeItem("walletconnect")
            }
            async getAccount() {
                let e = await this.getProvider()
                  , t = e.accounts;
                return (0,
                l.getAddress)(t[0])
            }
            async getChainId() {
                let e = await this.getProvider()
                  , t = (0,
                s.Jk)(e.chainId);
                return t
            }
            async getProvider({chainId: e, create: t}={}) {
                if (!(0,
                o.ac)(this, r) || e || t) {
                    let t = this.options?.infuraId ? {} : this.chains.reduce((e,t)=>({
                        ...e,
                        [t.id]: t.rpcUrls.default.http[0]
                    }), {})
                      , i = (await Promise.all([n.e(5313), n.e(3508), n.e(9365)]).then(n.bind(n, 79365))).default;
                    (0,
                    o.qx)(this, r, new i({
                        ...this.options,
                        chainId: e,
                        rpc: {
                            ...t,
                            ...this.options?.rpc
                        }
                    })),
                    (0,
                    o.ac)(this, r).http = await (0,
                    o.ac)(this, r).setHttpProvider(e)
                }
                return (0,
                o.ac)(this, r)
            }
            async getSigner({chainId: e}={}) {
                let[t,n] = await Promise.all([this.getProvider({
                    chainId: e
                }), this.getAccount()]);
                return new u.Q(t,e).getSigner(n)
            }
            async isAuthorized() {
                try {
                    let e = await this.getAccount();
                    return !!e
                } catch {
                    return !1
                }
            }
        }
        ;
        r = new WeakMap,
        i = new WeakSet,
        a = async function(e) {
            let t = await this.getProvider()
              , n = (0,
            l.hexValue)(e);
            try {
                return await Promise.race([t.request({
                    method: "wallet_switchEthereumChain",
                    params: [{
                        chainId: n
                    }]
                }), new Promise(t=>this.on("change", ({chain: n})=>{
                    n?.id === e && t(e)
                }
                ))]),
                this.chains.find(t=>t.id === e) ?? {
                    id: e,
                    name: `Chain ${n}`,
                    network: `${n}`,
                    nativeCurrency: {
                        name: "Ether",
                        decimals: 18,
                        symbol: "ETH"
                    },
                    rpcUrls: {
                        default: {
                            http: [""]
                        },
                        public: {
                            http: [""]
                        }
                    }
                }
            } catch (t) {
                let e = "string" == typeof t ? t : t?.message;
                if (/user rejected request/i.test(e))
                    throw new s.ab(t);
                throw new s.x3(t)
            }
        }
    },
    8358: function(e, t, n) {
        "use strict";
        n.d(t, {
            Ko: function() {
                return a
            },
            U9: function() {
                return s
            },
            ac: function() {
                return i
            },
            qx: function() {
                return o
            }
        });
        var r = (e,t,n)=>{
            if (!t.has(e))
                throw TypeError("Cannot " + n)
        }
          , i = (e,t,n)=>(r(e, t, "read from private field"),
        n ? n.call(e) : t.get(e))
          , a = (e,t,n)=>{
            if (t.has(e))
                throw TypeError("Cannot add the same private member more than once");
            t instanceof WeakSet ? t.add(e) : t.set(e, n)
        }
          , o = (e,t,n,i)=>(r(e, t, "write to private field"),
        i ? i.call(e, n) : t.set(e, n),
        n)
          , s = (e,t,n)=>(r(e, t, "access private method"),
        n)
    },
    86234: function(e, t, n) {
        "use strict";
        if (n.d(t, {
            $j: function() {
                return R
            },
            D0: function() {
                return J
            },
            DG: function() {
                return X
            },
            Ds: function() {
                return b
            },
            EG: function() {
                return K
            },
            Fx: function() {
                return Z
            },
            Hy: function() {
                return Q
            },
            If: function() {
                return et
            },
            JH: function() {
                return z
            },
            Jk: function() {
                return A
            },
            Nu: function() {
                return ed
            },
            OJ: function() {
                return ev
            },
            QB: function() {
                return g
            },
            QC: function() {
                return en
            },
            RQ: function() {
                return V
            },
            TA: function() {
                return eg
            },
            VH: function() {
                return q
            },
            X4: function() {
                return el
            },
            a4: function() {
                return G
            },
            ab: function() {
                return ew
            },
            b0: function() {
                return $
            },
            eI: function() {
                return O
            },
            g_: function() {
                return x
            },
            iA: function() {
                return eo
            },
            jS: function() {
                return W
            },
            l: function() {
                return Y
            },
            lG: function() {
                return j
            },
            o6: function() {
                return I
            },
            rn: function() {
                return er
            },
            s3: function() {
                return N
            },
            vZ: function() {
                return function e(t, n) {
                    if (t === n)
                        return !0;
                    if (t && n && "object" == typeof t && "object" == typeof n) {
                        let r, i;
                        if (t.constructor !== n.constructor)
                            return !1;
                        if (Array.isArray(t) && Array.isArray(n)) {
                            if ((r = t.length) != n.length)
                                return !1;
                            for (i = r; 0 != i--; )
                                if (!e(t[i], n[i]))
                                    return !1;
                            return !0
                        }
                        if (t.valueOf !== Object.prototype.valueOf)
                            return t.valueOf() === n.valueOf();
                        if (t.toString !== Object.prototype.toString)
                            return t.toString() === n.toString();
                        let a = Object.keys(t);
                        if ((r = a.length) !== Object.keys(n).length)
                            return !1;
                        for (i = r; 0 != i--; )
                            if (!Object.prototype.hasOwnProperty.call(n, a[i]))
                                return !1;
                        for (i = r; 0 != i--; ) {
                            let r = a[i];
                            if (r && !e(t[r], n[r]))
                                return !1
                        }
                        return !0
                    }
                    return t != t && n != n
                }
            },
            wp: function() {
                return S
            },
            x3: function() {
                return eb
            },
            xq: function() {
                return ee
            },
            zP: function() {
                return F
            },
            zZ: function() {
                return ea
            }
        }),
        2272 == n.j)
            var r, i, a, o, s, u = n(76505);
        if (2272 == n.j)
            var l = n(8358);
        if (2272 == n.j)
            var c = n(84267);
        if (2272 == n.j)
            var d = n(80846);
        if (2272 == n.j)
            var p = n(20414);
        if (2272 == n.j)
            var f = n(13004);
        if (2272 == n.j)
            var h = n(34130);
        if (2272 == n.j)
            var m = n(4817);
        if (2272 == n.j)
            var y = n(5672);
        function g(e, t, {minQuorum: n=1, pollingInterval: r=4e3, targetQuorum: i=1, stallTimeout: a}={}) {
            if (!e.length)
                throw Error("must have at least one chain");
            if (i < n)
                throw Error("quorum cannot be lower than minQuorum");
            let o = []
              , s = {}
              , u = {};
            for (let n of e) {
                let e = !1;
                for (let r of t) {
                    let t = r(n);
                    t && (e = !0,
                    o.some(({id: e})=>e === n.id) || (o = [...o, t.chain]),
                    s[n.id] = [...s[n.id] || [], t.provider],
                    t.webSocketProvider && (u[n.id] = [...u[n.id] || [], t.webSocketProvider]))
                }
                if (!e)
                    throw Error(`Could not find valid provider configuration for chain "${n.name}".

You may need to add \`jsonRpcProvider\` to \`configureChains\` with the chain's RPC URLs.
Read more: https://wagmi.sh/core/providers/jsonRpc`)
            }
            return {
                chains: o,
                provider: ({chainId: t})=>{
                    let u;
                    let l = o.find(e=>e.id === t) ?? e[0]
                      , d = s[l.id];
                    if (!d || !d[0])
                        throw Error(`No providers configured for chain "${l.id}"`);
                    return u = 1 === d.length ? d[0]() : function e(t, n, r, {stallTimeout: i}) {
                        try {
                            return new c.H(r.map((e,t)=>{
                                let n = e();
                                return {
                                    provider: n,
                                    priority: n.priority ?? t,
                                    stallTimeout: n.stallTimeout ?? i,
                                    weight: n.weight
                                }
                            }
                            ),t)
                        } catch (a) {
                            if (a?.message?.includes("quorum will always fail; larger than total weight")) {
                                if (t === n)
                                    throw a;
                                return e(t - 1, n, r, {
                                    stallTimeout: i
                                })
                            }
                            throw a
                        }
                    }(i, n, d, {
                        stallTimeout: a
                    }),
                    42220 === l.id && (u.formatter.formats.block = {
                        ...u.formatter.formats.block,
                        difficulty: ()=>0,
                        gasLimit: ()=>0
                    }),
                    Object.assign(u, {
                        chains: o,
                        pollingInterval: r
                    })
                }
                ,
                webSocketProvider: ({chainId: t})=>{
                    let n = o.find(e=>e.id === t) ?? e[0]
                      , r = u[n.id];
                    if (!r)
                        return;
                    let i = r[0]?.();
                    return i && 42220 === n.id && (i.formatter.formats.block = {
                        ...i.formatter.formats.block,
                        difficulty: ()=>0,
                        gasLimit: ()=>0
                    }),
                    Object.assign(i || {}, {
                        chains: o
                    })
                }
            }
        }
        function b(e, t=0) {
            let n;
            return function(...r) {
                if (!t)
                    return e(...r);
                n && clearTimeout(n),
                n = setTimeout(function() {
                    n = null,
                    e(...r)
                }, t)
            }
        }
        var v = (e,{find: t, replace: n})=>e && t(e) ? n(e) : "object" != typeof e ? e : Array.isArray(e) ? e.map(e=>v(e, {
            find: t,
            replace: n
        })) : e instanceof Object ? Object.entries(e).reduce((e,[r,i])=>({
            ...e,
            [r]: v(i, {
                find: t,
                replace: n
            })
        }), {}) : e;
        function w(e) {
            let t = JSON.parse(e)
              , n = v(t, {
                find: e=>"BigNumber" === e.type,
                replace: e=>f.O$.from(e.hex)
            });
            return n
        }
        function T({contract: e, functionName: t, args: n=[]}) {
            if (t in e.functions)
                return t;
            let r = n?.length ?? 0
              , i = Object.keys(e.functions).filter(e=>e.startsWith(`${t}(`)).map(e=>({
                name: e,
                fragment: h.FunctionFragment.fromString(e)
            })).filter(e=>r === e.fragment.inputs.length);
            for (let e of i) {
                let t = n.every((t,n)=>{
                    let r = e.fragment.inputs[n];
                    return function e(t, n) {
                        let r = typeof t
                          , i = n.type;
                        switch (i) {
                        case "address":
                            return (0,
                            h.isAddress)(t);
                        case "bool":
                            return "boolean" === r;
                        case "function":
                        case "string":
                            return "string" === r;
                        default:
                            if ("tuple" === i && "components"in n)
                                return Object.values(n.components).every((n,r)=>e(Object.values(t)[r], n));
                            if (/^u?int(8|16|24|32|40|48|56|64|72|80|88|96|104|112|120|128|136|144|152|160|168|176|184|192|200|208|216|224|232|240|248|256)?$/.test(i))
                                return "number" === r || "bigint" === r || f.O$.isBigNumber(t);
                            if (/^bytes([1-9]|1[0-9]|2[0-9]|3[0-2])?$/.test(i))
                                return "string" === r || t instanceof Uint8Array;
                            if (/[a-z]+[1-9]{0,3}(\[[0-9]{0,}\])+$/.test(i))
                                return Array.isArray(t) && t.every(t=>e(t, {
                                    ...n,
                                    type: i.replace(/(\[[0-9]{0,}\])$/, "")
                                }));
                            return !1
                        }
                    }(t, r)
                }
                );
                if (t)
                    return e.name
            }
            return t
        }
        function E(e) {
            N()?.config.logger?.warn?.(e)
        }
        function A(e) {
            return "string" == typeof e ? Number.parseInt(e, "0x" === e.trim().substring(0, 2) ? 16 : 10) : "bigint" == typeof e ? Number(e) : e
        }
        function x({abi: e, data: t, functionName: n}) {
            var r;
            if (t && Array.isArray(r = t) && Object.keys(r).length === r.length) {
                let r = m.CH.getInterface(e)
                  , i = r.getFunction(n)
                  , a = (i.outputs?.length || 0) > 1
                  , o = r.encodeFunctionResult(n, a ? t : [t])
                  , s = r.decodeFunctionResult(n, o);
                return a ? s : s[0]
            }
            return t
        }
        function k(e, t) {
            return e.slice(0, t).join(".") || "."
        }
        function C(e, t) {
            let {length: n} = e;
            for (let r = 0; r < n; ++r)
                if (e[r] === t)
                    return r + 1;
            return 0
        }
        function _(e, t, n, r) {
            return JSON.stringify(e, function(e, t) {
                let n = "function" == typeof e
                  , r = "function" == typeof t
                  , i = []
                  , a = [];
                return function(o, s) {
                    if ("object" == typeof s) {
                        if (i.length) {
                            let e = C(i, this);
                            0 === e ? i[i.length] = this : (i.splice(e),
                            a.splice(e)),
                            a[a.length] = o;
                            let n = C(i, s);
                            if (0 !== n)
                                return r ? t.call(this, o, s, k(a, n)) : `[ref=${k(a, n)}]`
                        } else
                            i[0] = s,
                            a[0] = o
                    }
                    return n ? e.call(this, o, s) : s
                }
            }(t, r), n ?? void 0)
        }
        var S = {
            getItem: e=>"",
            setItem: (e,t)=>null,
            removeItem: e=>null
        };
        function I({deserialize: e=w, key: t="wagmi", serialize: n=_, storage: r}) {
            return {
                ...r,
                getItem: (n,i=null)=>{
                    let a = r.getItem(`${t}.${n}`);
                    try {
                        return a ? e(a) : i
                    } catch (e) {
                        return console.warn(e),
                        i
                    }
                }
                ,
                setItem: (e,i)=>{
                    if (null === i)
                        r.removeItem(`${t}.${e}`);
                    else
                        try {
                            r.setItem(`${t}.${e}`, n(i))
                        } catch (e) {
                            console.error(e)
                        }
                }
                ,
                removeItem: e=>r.removeItem(`${t}.${e}`)
            }
        }
        var P = "store"
          , B = class {
            constructor({autoConnect: e=!1, connectors: t=[new u._], provider: n, storage: s=I({
                storage: "undefined" != typeof window ? window.localStorage : S
            }), logger: c={
                warn: console.warn
            }, webSocketProvider: f}) {
                let h;
                (0,
                l.Ko)(this, a),
                this.providers = new Map,
                this.webSocketProviders = new Map,
                (0,
                l.Ko)(this, r, void 0),
                (0,
                l.Ko)(this, i, void 0),
                this.config = {
                    autoConnect: e,
                    connectors: t,
                    logger: c,
                    provider: n,
                    storage: s,
                    webSocketProvider: f
                };
                let m = "disconnected";
                if (e)
                    try {
                        let e = s.getItem(P)
                          , t = e?.state?.data;
                        m = t?.account ? "reconnecting" : "connecting",
                        h = t?.chain?.id
                    } catch (e) {}
                this.store = (0,
                p.M)((0,
                d.XR)((0,
                d.tJ)(()=>({
                    connectors: "function" == typeof t ? t() : t,
                    provider: this.getProvider({
                        chainId: h
                    }),
                    status: m,
                    webSocketProvider: this.getWebSocketProvider({
                        chainId: h
                    })
                }), {
                    name: P,
                    storage: s,
                    partialize: t=>({
                        ...e && {
                            data: {
                                account: t?.data?.account,
                                chain: t?.data?.chain
                            }
                        },
                        chains: t?.chains
                    }),
                    version: 2
                }))),
                this.storage = s,
                (0,
                l.qx)(this, i, s?.getItem("wallet")),
                (0,
                l.U9)(this, a, o).call(this),
                e && "undefined" != typeof window && setTimeout(async()=>await this.autoConnect(), 0)
            }
            get chains() {
                return this.store.getState().chains
            }
            get connectors() {
                return this.store.getState().connectors
            }
            get connector() {
                return this.store.getState().connector
            }
            get data() {
                return this.store.getState().data
            }
            get error() {
                return this.store.getState().error
            }
            get lastUsedChainId() {
                return this.data?.chain?.id
            }
            get provider() {
                return this.store.getState().provider
            }
            get status() {
                return this.store.getState().status
            }
            get subscribe() {
                return this.store.subscribe
            }
            get webSocketProvider() {
                return this.store.getState().webSocketProvider
            }
            setState(e) {
                let t = "function" == typeof e ? e(this.store.getState()) : e;
                this.store.setState(t, !0)
            }
            clearState() {
                this.setState(e=>({
                    ...e,
                    chains: void 0,
                    connector: void 0,
                    data: void 0,
                    error: void 0,
                    status: "disconnected"
                }))
            }
            async destroy() {
                this.connector && await this.connector.disconnect?.(),
                (0,
                l.qx)(this, r, !1),
                this.clearState(),
                this.store.destroy()
            }
            async autoConnect() {
                if ((0,
                l.ac)(this, r))
                    return;
                (0,
                l.qx)(this, r, !0),
                this.setState(e=>({
                    ...e,
                    status: e.data?.account ? "reconnecting" : "connecting"
                }));
                let e = (0,
                l.ac)(this, i) ? [...this.connectors].sort(e=>e.id === (0,
                l.ac)(this, i) ? -1 : 1) : this.connectors
                  , t = !1;
                for (let n of e) {
                    if (!n.ready || !n.isAuthorized)
                        continue;
                    let e = await n.isAuthorized();
                    if (!e)
                        continue;
                    let r = await n.connect();
                    this.setState(e=>({
                        ...e,
                        connector: n,
                        chains: n?.chains,
                        data: r,
                        status: "connected"
                    })),
                    t = !0;
                    break
                }
                return t || this.setState(e=>({
                    ...e,
                    data: void 0,
                    status: "disconnected"
                })),
                (0,
                l.qx)(this, r, !1),
                this.data
            }
            getProvider({bust: e, chainId: t}={}) {
                let n = this.providers.get(t ?? -1);
                if (n && !e)
                    return n;
                let {provider: r} = this.config;
                return n = "function" == typeof r ? r({
                    chainId: t
                }) : r,
                this.providers.set(t ?? -1, n),
                n
            }
            getWebSocketProvider({bust: e, chainId: t}={}) {
                let n = this.webSocketProviders.get(t ?? -1);
                if (n && !e)
                    return n;
                let {webSocketProvider: r} = this.config;
                return (n = "function" == typeof r ? r({
                    chainId: t
                }) : r) && this.webSocketProviders.set(t ?? -1, n),
                n
            }
            setLastUsedConnector(e=null) {
                this.storage?.setItem("wallet", e)
            }
        }
        ;
        function O(e) {
            let t = new B(e);
            return s = t,
            t
        }
        function N() {
            if (!s)
                throw Error("No wagmi client found. Ensure you have set up a client: https://wagmi.sh/react/client");
            return s
        }
        async function R({chainId: e, connector: t}) {
            let n = N()
              , r = n.connector;
            if (r && t.id === r.id)
                throw new ec;
            try {
                n.setState(e=>({
                    ...e,
                    status: "connecting"
                }));
                let r = await t.connect({
                    chainId: e
                });
                return n.setLastUsedConnector(t.id),
                n.setState(e=>({
                    ...e,
                    connector: t,
                    chains: t?.chains,
                    data: r,
                    status: "connected"
                })),
                n.storage.setItem("connected", !0),
                {
                    ...r,
                    connector: t
                }
            } catch (e) {
                throw n.setState(e=>({
                    ...e,
                    status: e.connector ? "connected" : "disconnected"
                })),
                e
            }
        }
        async function F() {
            let e = N();
            e.connector && await e.connector.disconnect(),
            e.clearState(),
            e.storage.removeItem("connected")
        }
        r = new WeakMap,
        i = new WeakMap,
        a = new WeakSet,
        o = function() {
            let e = e=>{
                this.setState(t=>({
                    ...t,
                    data: {
                        ...t.data,
                        ...e
                    }
                }))
            }
              , t = ()=>{
                this.clearState()
            }
              , n = e=>{
                this.setState(t=>({
                    ...t,
                    error: e
                }))
            }
            ;
            this.store.subscribe(({connector: e})=>e, (r,i)=>{
                i?.off?.("change", e),
                i?.off?.("disconnect", t),
                i?.off?.("error", n),
                r && (r.on?.("change", e),
                r.on?.("disconnect", t),
                r.on?.("error", n))
            }
            );
            let {provider: r, webSocketProvider: i} = this.config;
            ("function" == typeof r || "function" == typeof i) && this.store.subscribe(({data: e})=>e?.chain?.id, e=>{
                this.setState(t=>({
                    ...t,
                    provider: this.getProvider({
                        bust: !0,
                        chainId: e
                    }),
                    webSocketProvider: this.getWebSocketProvider({
                        bust: !0,
                        chainId: e
                    })
                }))
            }
            )
        }
        ;
        var D = [{
            type: "event",
            name: "Approval",
            inputs: [{
                indexed: !0,
                name: "owner",
                type: "address"
            }, {
                indexed: !0,
                name: "spender",
                type: "address"
            }, {
                indexed: !1,
                name: "value",
                type: "uint256"
            }]
        }, {
            type: "event",
            name: "Transfer",
            inputs: [{
                indexed: !0,
                name: "from",
                type: "address"
            }, {
                indexed: !0,
                name: "to",
                type: "address"
            }, {
                indexed: !1,
                name: "value",
                type: "uint256"
            }]
        }, {
            type: "function",
            name: "allowance",
            stateMutability: "view",
            inputs: [{
                name: "owner",
                type: "address"
            }, {
                name: "spender",
                type: "address"
            }],
            outputs: [{
                name: "",
                type: "uint256"
            }]
        }, {
            type: "function",
            name: "approve",
            stateMutability: "nonpayable",
            inputs: [{
                name: "spender",
                type: "address"
            }, {
                name: "amount",
                type: "uint256"
            }],
            outputs: [{
                name: "",
                type: "bool"
            }]
        }, {
            type: "function",
            name: "balanceOf",
            stateMutability: "view",
            inputs: [{
                name: "account",
                type: "address"
            }],
            outputs: [{
                name: "",
                type: "uint256"
            }]
        }, {
            type: "function",
            name: "decimals",
            stateMutability: "view",
            inputs: [],
            outputs: [{
                name: "",
                type: "uint8"
            }]
        }, {
            type: "function",
            name: "name",
            stateMutability: "view",
            inputs: [],
            outputs: [{
                name: "",
                type: "string"
            }]
        }, {
            type: "function",
            name: "symbol",
            stateMutability: "view",
            inputs: [],
            outputs: [{
                name: "",
                type: "string"
            }]
        }, {
            type: "function",
            name: "totalSupply",
            stateMutability: "view",
            inputs: [],
            outputs: [{
                name: "",
                type: "uint256"
            }]
        }, {
            type: "function",
            name: "transfer",
            stateMutability: "nonpayable",
            inputs: [{
                name: "recipient",
                type: "address"
            }, {
                name: "amount",
                type: "uint256"
            }],
            outputs: [{
                name: "",
                type: "bool"
            }]
        }, {
            type: "function",
            name: "transferFrom",
            stateMutability: "nonpayable",
            inputs: [{
                name: "sender",
                type: "address"
            }, {
                name: "recipient",
                type: "address"
            }, {
                name: "amount",
                type: "uint256"
            }],
            outputs: [{
                name: "",
                type: "bool"
            }]
        }]
          , M = [{
            type: "event",
            name: "Approval",
            inputs: [{
                indexed: !0,
                name: "owner",
                type: "address"
            }, {
                indexed: !0,
                name: "spender",
                type: "address"
            }, {
                indexed: !1,
                name: "value",
                type: "uint256"
            }]
        }, {
            type: "event",
            name: "Transfer",
            inputs: [{
                indexed: !0,
                name: "from",
                type: "address"
            }, {
                indexed: !0,
                name: "to",
                type: "address"
            }, {
                indexed: !1,
                name: "value",
                type: "uint256"
            }]
        }, {
            type: "function",
            name: "allowance",
            stateMutability: "view",
            inputs: [{
                name: "owner",
                type: "address"
            }, {
                name: "spender",
                type: "address"
            }],
            outputs: [{
                name: "",
                type: "uint256"
            }]
        }, {
            type: "function",
            name: "approve",
            stateMutability: "nonpayable",
            inputs: [{
                name: "spender",
                type: "address"
            }, {
                name: "amount",
                type: "uint256"
            }],
            outputs: [{
                name: "",
                type: "bool"
            }]
        }, {
            type: "function",
            name: "balanceOf",
            stateMutability: "view",
            inputs: [{
                name: "account",
                type: "address"
            }],
            outputs: [{
                name: "",
                type: "uint256"
            }]
        }, {
            type: "function",
            name: "decimals",
            stateMutability: "view",
            inputs: [],
            outputs: [{
                name: "",
                type: "uint8"
            }]
        }, {
            type: "function",
            name: "name",
            stateMutability: "view",
            inputs: [],
            outputs: [{
                name: "",
                type: "bytes32"
            }]
        }, {
            type: "function",
            name: "symbol",
            stateMutability: "view",
            inputs: [],
            outputs: [{
                name: "",
                type: "bytes32"
            }]
        }, {
            type: "function",
            name: "totalSupply",
            stateMutability: "view",
            inputs: [],
            outputs: [{
                name: "",
                type: "uint256"
            }]
        }, {
            type: "function",
            name: "transfer",
            stateMutability: "nonpayable",
            inputs: [{
                name: "recipient",
                type: "address"
            }, {
                name: "amount",
                type: "uint256"
            }],
            outputs: [{
                name: "",
                type: "bool"
            }]
        }, {
            type: "function",
            name: "transferFrom",
            stateMutability: "nonpayable",
            inputs: [{
                name: "sender",
                type: "address"
            }, {
                name: "recipient",
                type: "address"
            }, {
                name: "amount",
                type: "uint256"
            }],
            outputs: [{
                name: "",
                type: "bool"
            }]
        }]
          , L = [{
            inputs: [{
                components: [{
                    name: "target",
                    type: "address"
                }, {
                    name: "allowFailure",
                    type: "bool"
                }, {
                    name: "callData",
                    type: "bytes"
                }],
                name: "calls",
                type: "tuple[]"
            }],
            name: "aggregate3",
            outputs: [{
                components: [{
                    name: "success",
                    type: "bool"
                }, {
                    name: "returnData",
                    type: "bytes"
                }],
                name: "returnData",
                type: "tuple[]"
            }],
            stateMutability: "view",
            type: "function"
        }];
        function U({address: e, abi: t, signerOrProvider: n}) {
            return new m.CH(e,t,n)
        }
        function q({chainId: e}={}) {
            let t = N();
            return e && t.getProvider({
                chainId: e
            }) || t.provider
        }
        function j({chainId: e}={}) {
            let t = N();
            return e && t.getWebSocketProvider({
                chainId: e
            }) || t.webSocketProvider
        }
        function $(e, t) {
            let n = N()
              , r = async()=>t(q(e))
              , i = n.subscribe(({provider: e})=>e, r);
            return i
        }
        function Z(e, t) {
            let n = N()
              , r = async()=>t(j(e))
              , i = n.subscribe(({webSocketProvider: e})=>e, r);
            return i
        }
        async function H({allowFailure: e=!0, chainId: t, contracts: n, overrides: r}) {
            let i = q({
                chainId: t
            });
            if (!i.chains?.[0])
                throw new ey;
            let a = i.network.chainId;
            if (void 0 !== t && t !== a)
                throw new el({
                    chainId: t
                });
            let o = i.chains.find(e=>e.id === a);
            if (!o)
                throw new el({
                    chainId: a
                });
            if (!o?.contracts?.multicall3)
                throw new es({
                    chain: o
                });
            if ("number" == typeof r?.blockTag && r?.blockTag < (o.contracts.multicall3.blockCreated ?? 0))
                throw new es({
                    blockNumber: r?.blockTag,
                    chain: o
                });
            let s = U({
                address: o.contracts.multicall3.address,
                abi: L,
                signerOrProvider: i
            })
              , u = n.map(({address: t, abi: n, functionName: r, ...i})=>{
                let {args: a} = i || {}
                  , o = U({
                    address: t,
                    abi: n
                })
                  , s = T({
                    contract: o,
                    functionName: r,
                    args: a
                });
                try {
                    let n = o[s];
                    n || E(`"${s}" is not in the interface for contract "${t}"`);
                    let r = o.interface.encodeFunctionData(s, a ?? []);
                    return {
                        target: t,
                        allowFailure: e,
                        callData: r
                    }
                } catch (n) {
                    if (!e)
                        throw n;
                    return {
                        target: t,
                        allowFailure: e,
                        callData: "0x"
                    }
                }
            }
            )
              , l = [u, ...r ? [r] : []]
              , c = await s.aggregate3(...l);
            return c.map(({returnData: t, success: r},i)=>{
                let {address: a, abi: s, functionName: u, ...l} = n[i]
                  , c = U({
                    address: a,
                    abi: s
                })
                  , d = l.args
                  , p = T({
                    contract: c,
                    functionName: u,
                    args: d
                });
                if (!r) {
                    let n;
                    try {
                        c.interface.decodeFunctionResult(p, t)
                    } catch (t) {
                        if (n = new eh({
                            address: a,
                            args: d,
                            chainId: o.id,
                            functionName: p,
                            errorMessage: t.message
                        }),
                        !e)
                            throw n;
                        E(n.message)
                    }
                    return null
                }
                if ("0x" === t) {
                    let t = new ef({
                        address: a,
                        args: d,
                        chainId: o.id,
                        functionName: p
                    });
                    if (!e)
                        throw t;
                    return E(t.message),
                    null
                }
                try {
                    let e = c.interface.decodeFunctionResult(p, t);
                    return Array.isArray(e) && 1 === e.length ? e[0] : e
                } catch (n) {
                    let t = new em({
                        address: a,
                        args: d,
                        chainId: o.id,
                        functionName: p,
                        errorMessage: n.message
                    });
                    if (!e)
                        throw t;
                    return E(t.message),
                    null
                }
            }
            )
        }
        async function G({address: e, chainId: t, abi: n, functionName: r, overrides: i, ...a}) {
            let o = q({
                chainId: t
            })
              , s = U({
                address: e,
                abi: n,
                signerOrProvider: o
            })
              , u = a.args
              , l = T({
                contract: s,
                functionName: r,
                args: u
            })
              , c = s[l];
            if (!c)
                throw new ep({
                    address: e,
                    functionName: l
                });
            let d = [...u ?? [], ...i ? [i] : []];
            return c?.(...d)
        }
        async function z({allowFailure: e=!0, contracts: t, overrides: n}) {
            try {
                let r;
                let i = q()
                  , a = t.reduce((e,t,n)=>{
                    let r = t.chainId ?? i.network.chainId;
                    return {
                        ...e,
                        [r]: [...e[r] || [], {
                            contract: t,
                            index: n
                        }]
                    }
                }
                , {})
                  , o = ()=>Object.entries(a).map(([t,r])=>H({
                    allowFailure: e,
                    chainId: parseInt(t),
                    contracts: r.map(({contract: e})=>e),
                    overrides: n
                }));
                r = e ? (await Promise.allSettled(o())).map(e=>{
                    if ("fulfilled" === e.status)
                        return e.value;
                    if (e.reason instanceof es)
                        throw E(e.reason.message),
                        e.reason;
                    return null
                }
                ).flat() : (await Promise.all(o())).flat();
                let s = Object.values(a).map(e=>e.map(({index: e})=>e)).flat();
                return r.reduce((e,t,n)=>(e && (e[s[n]] = t),
                e), [])
            } catch (i) {
                if (i instanceof em || i instanceof ef || i instanceof eh)
                    throw i;
                let r = ()=>t.map(e=>G({
                    ...e,
                    overrides: n
                }));
                if (e)
                    return (await Promise.allSettled(r())).map((e,n)=>{
                        if ("fulfilled" === e.status)
                            return e.value;
                        let {address: r, args: i, chainId: a, functionName: o} = t[n]
                          , s = new eh({
                            address: r,
                            functionName: o,
                            chainId: a ?? 1,
                            args: i,
                            errorMessage: e.reason
                        });
                        return E(s.message),
                        null
                    }
                    );
                return await Promise.all(r())
            }
        }
        async function V({chainId: e}={}) {
            let t = q({
                chainId: e
            })
              , n = await t.getBlockNumber();
            return n
        }
        async function W({chainId: e, formatUnits: t="wei"}={}) {
            let n = q({
                chainId: e
            })
              , r = await n.getFeeData()
              , i = {
                gasPrice: r.gasPrice ? (0,
                h.formatUnits)(r.gasPrice, t) : null,
                maxFeePerGas: r.maxFeePerGas ? (0,
                h.formatUnits)(r.maxFeePerGas, t) : null,
                maxPriorityFeePerGas: r.maxPriorityFeePerGas ? (0,
                h.formatUnits)(r.maxPriorityFeePerGas, t) : null
            };
            return {
                ...r,
                formatted: i
            }
        }
        async function K({address: e, chainId: t, formatUnits: n, token: r}) {
            let i = N()
              , a = q({
                chainId: t
            });
            if (r) {
                let i = async({abi: i})=>{
                    let a = {
                        abi: i,
                        address: r,
                        chainId: t
                    }
                      , [o,s,u] = await z({
                        allowFailure: !1,
                        contracts: [{
                            ...a,
                            functionName: "balanceOf",
                            args: [e]
                        }, {
                            ...a,
                            functionName: "decimals"
                        }, {
                            ...a,
                            functionName: "symbol"
                        }]
                    });
                    return {
                        decimals: s,
                        formatted: (0,
                        h.formatUnits)(o ?? "0", n ?? s),
                        symbol: u,
                        value: o
                    }
                }
                ;
                try {
                    return await i({
                        abi: D
                    })
                } catch (e) {
                    if (e instanceof em) {
                        let {symbol: e, ...t} = await i({
                            abi: M
                        });
                        return {
                            symbol: (0,
                            h.parseBytes32String)(e),
                            ...t
                        }
                    }
                    throw e
                }
            }
            let o = [...i.provider.chains || [], ...i.chains ?? []]
              , s = await a.getBalance(e)
              , u = o.find(e=>e.id === a.network.chainId);
            return {
                decimals: u?.nativeCurrency.decimals ?? 18,
                formatted: (0,
                h.formatUnits)(s ?? "0", n ?? "ether"),
                symbol: u?.nativeCurrency.symbol ?? "ETH",
                value: s
            }
        }
        async function X({chainId: e}={}) {
            let t = N()
              , n = await t.connector?.getSigner?.({
                chainId: e
            }) || null;
            return n
        }
        function J() {
            let {data: e, connector: t, status: n} = N();
            switch (n) {
            case "connected":
                return {
                    address: e?.account,
                    connector: t,
                    isConnected: !0,
                    isConnecting: !1,
                    isDisconnected: !1,
                    isReconnecting: !1,
                    status: n
                };
            case "reconnecting":
                return {
                    address: e?.account,
                    connector: t,
                    isConnected: !!e?.account,
                    isConnecting: !1,
                    isDisconnected: !1,
                    isReconnecting: !0,
                    status: n
                };
            case "connecting":
                return {
                    address: e?.account,
                    connector: t,
                    isConnected: !1,
                    isConnecting: !0,
                    isDisconnected: !1,
                    isReconnecting: !1,
                    status: n
                };
            case "disconnected":
                return {
                    address: void 0,
                    connector: void 0,
                    isConnected: !1,
                    isConnecting: !1,
                    isDisconnected: !0,
                    isReconnecting: !1,
                    status: n
                }
            }
        }
        function Q() {
            let e = N()
              , t = e.data?.chain?.id
              , n = e.chains ?? []
              , r = [...e.provider.chains || [], ...n].find(e=>e.id === t) ?? {
                id: t,
                name: `Chain ${t}`,
                network: `${t}`,
                nativeCurrency: {
                    name: "Ether",
                    decimals: 18,
                    symbol: "ETH"
                },
                rpcUrls: {
                    default: {
                        http: [""]
                    },
                    public: {
                        http: [""]
                    }
                }
            };
            return {
                chain: t ? {
                    ...r,
                    ...e.data?.chain,
                    id: t
                } : void 0,
                chains: n
            }
        }
        async function Y(e) {
            try {
                let t = await X();
                if (!t)
                    throw new ed;
                return await t.signMessage(e.message)
            } catch (e) {
                if (4001 === e.code || "ACTION_REJECTED" === e.code)
                    throw new ew(e);
                throw e
            }
        }
        async function ee({domain: e, types: t, value: n}) {
            let r = await X();
            if (!r)
                throw new ed;
            let {chainId: i} = e
              , a = i ? A(i) : void 0;
            a && function({chainId: e, signer: t}) {
                let {chain: n, chains: r} = Q()
                  , i = n?.id;
                if (i && e !== i)
                    throw new eu({
                        activeChain: r.find(e=>e.id === i)?.name ?? `Chain ${i}`,
                        targetChain: r.find(t=>t.id === e)?.name ?? `Chain ${e}`
                    });
                if (t) {
                    let n = t.provider?.network?.chainId;
                    if (n && e !== n) {
                        let t = N().connector;
                        throw new el({
                            chainId: e,
                            connectorId: t?.id ?? "unknown"
                        })
                    }
                }
            }({
                chainId: a,
                signer: r
            });
            let o = Object.entries(t).filter(([e])=>"EIP712Domain" !== e).reduce((e,[t,n])=>(e[t] = n.filter(e=>"EIP712Domain" !== e.type),
            e), {});
            try {
                return await r._signTypedData(e, o, n)
            } catch (e) {
                if (4001 === e.code || "ACTION_REJECTED" === e.code)
                    throw new ew(e);
                throw e
            }
        }
        async function et({chainId: e}) {
            let {connector: t} = N();
            if (!t)
                throw new ed;
            if (!t.switchChain)
                throw new ev({
                    connector: t
                });
            return t.switchChain(e)
        }
        function en(e, {selector: t=e=>e}={}) {
            let n = N()
              , r = ()=>e(Q())
              , i = n.subscribe(({data: e, chains: n})=>t({
                chainId: e?.chain?.id,
                chains: n
            }), r, {
                equalityFn: y.X
            });
            return i
        }
        function er({chainId: e}, t) {
            let n = N()
              , r = async()=>{
                let n = await X({
                    chainId: e
                });
                return N().connector ? t(n) : t(null)
            }
              , i = n.subscribe(({data: e, connector: t})=>({
                account: e?.account,
                chainId: e?.chain?.id,
                connector: t
            }), r, {
                equalityFn: y.X
            });
            return i
        }
        var ei = class extends Error {
            constructor(e, t) {
                let {cause: n, code: r, data: i} = t;
                if (!Number.isInteger(r))
                    throw Error('"code" must be an integer.');
                if (!e || "string" != typeof e)
                    throw Error('"message" must be a nonempty string.');
                super(e),
                this.cause = n,
                this.code = r,
                this.data = i
            }
        }
          , ea = class extends (2272 == n.j ? ei : null) {
            constructor(e, t) {
                let {cause: n, code: r, data: i} = t;
                if (!(Number.isInteger(r) && r >= 1e3 && r <= 4999))
                    throw Error('"code" must be an integer such that: 1000 <= code <= 4999');
                super(e, {
                    cause: n,
                    code: r,
                    data: i
                })
            }
        }
          , eo = class extends Error {
            constructor() {
                super(...arguments),
                this.name = "AddChainError",
                this.message = "Error adding chain"
            }
        }
          , es = class extends Error {
            constructor({blockNumber: e, chain: t}) {
                super(`Chain "${t.name}" does not support multicall ${e ? ` on block ${e}` : ""}.`),
                this.name = "ChainDoesNotSupportMulticall"
            }
        }
          , eu = class extends Error {
            constructor({activeChain: e, targetChain: t}) {
                super(`Chain mismatch: Expected "${t}", received "${e}".`),
                this.name = "ChainMismatchError"
            }
        }
          , el = class extends Error {
            constructor({chainId: e, connectorId: t}) {
                super(`Chain "${e}" not configured ${t ? ` for connector "${t}"` : ""}.`),
                this.name = "ChainNotConfigured"
            }
        }
          , ec = class extends Error {
            constructor() {
                super(...arguments),
                this.name = "ConnectorAlreadyConnectedError",
                this.message = "Connector already connected"
            }
        }
          , ed = class extends Error {
            constructor() {
                super(...arguments),
                this.name = "ConnectorNotFoundError",
                this.message = "Connector not found"
            }
        }
          , ep = class extends Error {
            constructor({address: e, chainId: t, functionName: n}) {
                let {chains: r, network: i} = q()
                  , a = r?.find(({id: e})=>e === (t || i.chainId))
                  , o = a?.blockExplorers?.default;
                super([`Function "${n}" on contract "${e}" does not exist.`, ...o ? ["", `${o?.name}: ${o?.url}/address/${e}#readContract`] : []].join("\n")),
                this.name = "ContractMethodDoesNotExistError"
            }
        }
          , ef = class extends Error {
            constructor({address: e, args: t, chainId: n, functionName: r}) {
                super(["Contract read returned an empty response. This could be due to any of the following:", `- The contract does not have the function "${r}",`, "- The parameters passed to the contract function may be invalid, or", "- The address is not a contract.", "", "Config:", JSON.stringify({
                    address: e,
                    abi: "...",
                    functionName: r,
                    chainId: n,
                    args: t
                }, null, 2)].join("\n")),
                this.name = "ContractMethodNoResultError"
            }
        }
          , eh = class extends Error {
            constructor({address: e, args: t, chainId: n, functionName: r, errorMessage: i}) {
                super(["Contract method reverted with an error.", "", "Config:", JSON.stringify({
                    address: e,
                    abi: "...",
                    functionName: r,
                    chainId: n,
                    args: t
                }, null, 2), "", `Details: ${i}`].join("\n")),
                this.name = "ContractMethodRevertedError"
            }
        }
          , em = class extends Error {
            constructor({address: e, args: t, chainId: n, functionName: r, errorMessage: i}) {
                super(["Failed to decode contract function result.", "", "Config:", JSON.stringify({
                    address: e,
                    abi: "...",
                    functionName: r,
                    chainId: n,
                    args: t
                }, null, 2), "", `Details: ${i}`].join("\n")),
                this.name = "ContractResultDecodeError"
            }
        }
          , ey = class extends Error {
            constructor() {
                super(...arguments),
                this.name = "ProviderChainsNotFound",
                this.message = "No chains were found on the wagmi provider. Some functions that require a chain may not work.\n\nIt is recommended to add a list of chains to the provider in `createClient`.\n\nExample:\n\n```\nimport { getDefaultProvider } from 'ethers'\nimport { chain, createClient } from 'wagmi'\n\ncreateClient({\n  provider: Object.assign(getDefaultProvider(), { chains: [chain.mainnet] })\n})\n```"
            }
        }
          , eg = class extends (2272 == n.j ? ei : null) {
            constructor(e) {
                super("Resource unavailable", {
                    cause: e,
                    code: -32002
                }),
                this.name = "ResourceUnavailable"
            }
        }
          , eb = class extends (2272 == n.j ? ea : null) {
            constructor(e) {
                super("Error switching chain", {
                    cause: e,
                    code: 4902
                }),
                this.name = "SwitchChainError"
            }
        }
          , ev = class extends Error {
            constructor({connector: e}) {
                super(`"${e.name}" does not support programmatic chain switching.`),
                this.name = "SwitchChainNotSupportedError"
            }
        }
          , ew = class extends (2272 == n.j ? ea : null) {
            constructor(e) {
                super("User rejected request", {
                    cause: e,
                    code: 4001
                }),
                this.name = "UserRejectedRequestError"
            }
        }
    },
    76743: function(e, t, n) {
        "use strict";
        if (n.d(t, {
            R: function() {
                return o
            }
        }),
        2272 == n.j)
            var r = n(32006);
        if (2272 == n.j)
            var i = n(30554);
        if (2272 == n.j)
            var a = n(79663);
        function o({priority: e, rpc: t, stallTimeout: n, static: o=!0, weight: s}) {
            return function(u) {
                let l = t(u);
                return l && "" !== l.http ? {
                    chain: {
                        ...u,
                        rpcUrls: {
                            ...u.rpcUrls,
                            default: {
                                http: [l.http]
                            }
                        }
                    },
                    provider: ()=>{
                        let t = o ? r.c : i.r
                          , a = new t(l.http,{
                            ensAddress: u.contracts?.ensRegistry?.address,
                            chainId: u.id,
                            name: u.network
                        });
                        return Object.assign(a, {
                            priority: e,
                            stallTimeout: n,
                            weight: s
                        })
                    }
                    ,
                    ...l.webSocket && {
                        webSocketProvider: ()=>new a.q(l.webSocket,u.id)
                    }
                } : null
            }
        }
    },
    82722: function(e, t, n) {
        "use strict";
        function r(e) {
            window.MotionDebug && window.MotionDebug.record(e)
        }
        n.d(t, {
            I: function() {
                return r
            }
        })
    },
    67773: function(e, t, n) {
        "use strict";
        if (n.d(t, {
            Z: function() {
                return a
            }
        }),
        2272 == n.j)
            var r = n(19661);
        function i(e) {
            return (i = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
                return typeof e
            }
            : function(e) {
                return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e
            }
            )(e)
        }
        function a(e) {
            return function e(t, n) {
                switch (i(t)) {
                case "string":
                    return JSON.stringify(t);
                case "function":
                    return t.name ? "[function ".concat(t.name, "]") : "[function]";
                case "object":
                    if (null === t)
                        return "null";
                    return function(t, n) {
                        if (-1 !== n.indexOf(t))
                            return "[Circular]";
                        var i, a, o = [].concat(n, [t]), s = "function" == typeof (i = t[String(r.Z)]) ? i : "function" == typeof t.inspect ? t.inspect : void 0;
                        if (void 0 !== s) {
                            var u = s.call(t);
                            if (u !== t)
                                return "string" == typeof u ? u : e(u, o)
                        } else if (Array.isArray(t))
                            return function(t, n) {
                                if (0 === t.length)
                                    return "[]";
                                if (n.length > 2)
                                    return "[Array]";
                                for (var r = Math.min(10, t.length), i = t.length - r, a = [], o = 0; o < r; ++o)
                                    a.push(e(t[o], n));
                                return 1 === i ? a.push("... 1 more item") : i > 1 && a.push("... ".concat(i, " more items")),
                                "[" + a.join(", ") + "]"
                            }(t, o);
                        return 0 === (a = Object.keys(t)).length ? "{}" : o.length > 2 ? "[" + function(e) {
                            var t = Object.prototype.toString.call(e).replace(/^\[object /, "").replace(/]$/, "");
                            if ("Object" === t && "function" == typeof e.constructor) {
                                var n = e.constructor.name;
                                if ("string" == typeof n && "" !== n)
                                    return n
                            }
                            return t
                        }(t) + "]" : "{ " + a.map(function(n) {
                            var r = e(t[n], o);
                            return n + ": " + r
                        }).join(", ") + " }"
                    }(t, n);
                default:
                    return String(t)
                }
            }(e, [])
        }
    },
    44449: function(e, t, n) {
        "use strict";
        function r(e, t) {
            if (!e)
                throw Error(null != t ? t : "Unexpected invariant triggered.")
        }
        n.d(t, {
            Z: function() {
                return r
            }
        })
    },
    19661: function(e, t, n) {
        "use strict";
        var r = "function" == typeof Symbol && "function" == typeof Symbol.for ? Symbol.for("nodejs.util.inspect.custom") : void 0;
        t.Z = 2272 == n.j ? r : null
    },
    84405: function(e, t, n) {
        "use strict";
        n.d(t, {
            UG: function() {
                return o
            }
        });
        var r = n(44449)
          , i = n(19661);
        function a(e) {
            var t = e.prototype.toJSON;
            "function" == typeof t || (0,
            r.Z)(0),
            e.prototype.inspect = t,
            i.Z && (e.prototype[i.Z] = t)
        }
        function o(e) {
            return null != e && "string" == typeof e.kind
        }
        a(function() {
            function e(e, t, n) {
                this.start = e.start,
                this.end = t.end,
                this.startToken = e,
                this.endToken = t,
                this.source = n
            }
            return e.prototype.toJSON = function() {
                return {
                    start: this.start,
                    end: this.end
                }
            }
            ,
            e
        }()),
        a(function() {
            function e(e, t, n, r, i, a, o) {
                this.kind = e,
                this.start = t,
                this.end = n,
                this.line = r,
                this.column = i,
                this.value = o,
                this.prev = a,
                this.next = null
            }
            return e.prototype.toJSON = function() {
                return {
                    kind: this.kind,
                    value: this.value,
                    line: this.line,
                    column: this.column
                }
            }
            ,
            e
        }())
    },
    36430: function(e, t, n) {
        "use strict";
        n.r(t),
        n.d(t, {
            print: function() {
                return i
            }
        });
        var r = n(58306);
        function i(e) {
            return (0,
            r.Vn)(e, {
                leave: a
            })
        }
        var a = {
            Name: function(e) {
                return e.value
            },
            Variable: function(e) {
                return "$" + e.name
            },
            Document: function(e) {
                return s(e.definitions, "\n\n") + "\n"
            },
            OperationDefinition: function(e) {
                var t = e.operation
                  , n = e.name
                  , r = l("(", s(e.variableDefinitions, ", "), ")")
                  , i = s(e.directives, " ")
                  , a = e.selectionSet;
                return n || i || r || "query" !== t ? s([t, s([n, r]), i, a], " ") : a
            },
            VariableDefinition: function(e) {
                var t = e.variable
                  , n = e.type
                  , r = e.defaultValue
                  , i = e.directives;
                return t + ": " + n + l(" = ", r) + l(" ", s(i, " "))
            },
            SelectionSet: function(e) {
                return u(e.selections)
            },
            Field: function(e) {
                var t = e.alias
                  , n = e.name
                  , r = e.arguments
                  , i = e.directives
                  , a = e.selectionSet
                  , o = l("", t, ": ") + n
                  , u = o + l("(", s(r, ", "), ")");
                return u.length > 80 && (u = o + l("(\n", c(s(r, "\n")), "\n)")),
                s([u, s(i, " "), a], " ")
            },
            Argument: function(e) {
                return e.name + ": " + e.value
            },
            FragmentSpread: function(e) {
                return "..." + e.name + l(" ", s(e.directives, " "))
            },
            InlineFragment: function(e) {
                var t = e.typeCondition
                  , n = e.directives
                  , r = e.selectionSet;
                return s(["...", l("on ", t), s(n, " "), r], " ")
            },
            FragmentDefinition: function(e) {
                var t = e.name
                  , n = e.typeCondition
                  , r = e.variableDefinitions
                  , i = e.directives
                  , a = e.selectionSet;
                return "fragment ".concat(t).concat(l("(", s(r, ", "), ")"), " ") + "on ".concat(n, " ").concat(l("", s(i, " "), " ")) + a
            },
            IntValue: function(e) {
                return e.value
            },
            FloatValue: function(e) {
                return e.value
            },
            StringValue: function(e, t) {
                var n = e.value;
                return e.block ? function(e) {
                    var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : ""
                      , n = arguments.length > 2 && void 0 !== arguments[2] && arguments[2]
                      , r = -1 === e.indexOf("\n")
                      , i = " " === e[0] || "	" === e[0]
                      , a = '"' === e[e.length - 1]
                      , o = "\\" === e[e.length - 1]
                      , s = !r || a || o || n
                      , u = "";
                    return s && !(r && i) && (u += "\n" + t),
                    u += t ? e.replace(/\n/g, "\n" + t) : e,
                    s && (u += "\n"),
                    '"""' + u.replace(/"""/g, '\\"""') + '"""'
                }(n, "description" === t ? "" : "  ") : JSON.stringify(n)
            },
            BooleanValue: function(e) {
                return e.value ? "true" : "false"
            },
            NullValue: function() {
                return "null"
            },
            EnumValue: function(e) {
                return e.value
            },
            ListValue: function(e) {
                return "[" + s(e.values, ", ") + "]"
            },
            ObjectValue: function(e) {
                return "{" + s(e.fields, ", ") + "}"
            },
            ObjectField: function(e) {
                return e.name + ": " + e.value
            },
            Directive: function(e) {
                return "@" + e.name + l("(", s(e.arguments, ", "), ")")
            },
            NamedType: function(e) {
                return e.name
            },
            ListType: function(e) {
                return "[" + e.type + "]"
            },
            NonNullType: function(e) {
                return e.type + "!"
            },
            SchemaDefinition: o(function(e) {
                var t = e.directives
                  , n = e.operationTypes;
                return s(["schema", s(t, " "), u(n)], " ")
            }),
            OperationTypeDefinition: function(e) {
                return e.operation + ": " + e.type
            },
            ScalarTypeDefinition: o(function(e) {
                return s(["scalar", e.name, s(e.directives, " ")], " ")
            }),
            ObjectTypeDefinition: o(function(e) {
                var t = e.name
                  , n = e.interfaces
                  , r = e.directives
                  , i = e.fields;
                return s(["type", t, l("implements ", s(n, " & ")), s(r, " "), u(i)], " ")
            }),
            FieldDefinition: o(function(e) {
                var t = e.name
                  , n = e.arguments
                  , r = e.type
                  , i = e.directives;
                return t + (p(n) ? l("(\n", c(s(n, "\n")), "\n)") : l("(", s(n, ", "), ")")) + ": " + r + l(" ", s(i, " "))
            }),
            InputValueDefinition: o(function(e) {
                var t = e.name
                  , n = e.type
                  , r = e.defaultValue
                  , i = e.directives;
                return s([t + ": " + n, l("= ", r), s(i, " ")], " ")
            }),
            InterfaceTypeDefinition: o(function(e) {
                var t = e.name
                  , n = e.interfaces
                  , r = e.directives
                  , i = e.fields;
                return s(["interface", t, l("implements ", s(n, " & ")), s(r, " "), u(i)], " ")
            }),
            UnionTypeDefinition: o(function(e) {
                var t = e.name
                  , n = e.directives
                  , r = e.types;
                return s(["union", t, s(n, " "), r && 0 !== r.length ? "= " + s(r, " | ") : ""], " ")
            }),
            EnumTypeDefinition: o(function(e) {
                var t = e.name
                  , n = e.directives
                  , r = e.values;
                return s(["enum", t, s(n, " "), u(r)], " ")
            }),
            EnumValueDefinition: o(function(e) {
                return s([e.name, s(e.directives, " ")], " ")
            }),
            InputObjectTypeDefinition: o(function(e) {
                var t = e.name
                  , n = e.directives
                  , r = e.fields;
                return s(["input", t, s(n, " "), u(r)], " ")
            }),
            DirectiveDefinition: o(function(e) {
                var t = e.name
                  , n = e.arguments
                  , r = e.repeatable
                  , i = e.locations;
                return "directive @" + t + (p(n) ? l("(\n", c(s(n, "\n")), "\n)") : l("(", s(n, ", "), ")")) + (r ? " repeatable" : "") + " on " + s(i, " | ")
            }),
            SchemaExtension: function(e) {
                var t = e.directives
                  , n = e.operationTypes;
                return s(["extend schema", s(t, " "), u(n)], " ")
            },
            ScalarTypeExtension: function(e) {
                return s(["extend scalar", e.name, s(e.directives, " ")], " ")
            },
            ObjectTypeExtension: function(e) {
                var t = e.name
                  , n = e.interfaces
                  , r = e.directives
                  , i = e.fields;
                return s(["extend type", t, l("implements ", s(n, " & ")), s(r, " "), u(i)], " ")
            },
            InterfaceTypeExtension: function(e) {
                var t = e.name
                  , n = e.interfaces
                  , r = e.directives
                  , i = e.fields;
                return s(["extend interface", t, l("implements ", s(n, " & ")), s(r, " "), u(i)], " ")
            },
            UnionTypeExtension: function(e) {
                var t = e.name
                  , n = e.directives
                  , r = e.types;
                return s(["extend union", t, s(n, " "), r && 0 !== r.length ? "= " + s(r, " | ") : ""], " ")
            },
            EnumTypeExtension: function(e) {
                var t = e.name
                  , n = e.directives
                  , r = e.values;
                return s(["extend enum", t, s(n, " "), u(r)], " ")
            },
            InputObjectTypeExtension: function(e) {
                var t = e.name
                  , n = e.directives
                  , r = e.fields;
                return s(["extend input", t, s(n, " "), u(r)], " ")
            }
        };
        function o(e) {
            return function(t) {
                return s([t.description, e(t)], "\n")
            }
        }
        function s(e) {
            var t, n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "";
            return null !== (t = null == e ? void 0 : e.filter(function(e) {
                return e
            }).join(n)) && void 0 !== t ? t : ""
        }
        function u(e) {
            return l("{\n", c(s(e, "\n")), "\n}")
        }
        function l(e, t) {
            var n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : "";
            return null != t && "" !== t ? e + t + n : ""
        }
        function c(e) {
            return l("  ", e.replace(/\n/g, "\n  "))
        }
        function d(e) {
            return -1 !== e.indexOf("\n")
        }
        function p(e) {
            return null != e && e.some(d)
        }
    },
    58306: function(e, t, n) {
        "use strict";
        if (n.d(t, {
            Vn: function() {
                return s
            }
        }),
        2272 == n.j)
            var r = n(67773);
        if (2272 == n.j)
            var i = n(84405);
        var a = {
            Name: [],
            Document: ["definitions"],
            OperationDefinition: ["name", "variableDefinitions", "directives", "selectionSet"],
            VariableDefinition: ["variable", "type", "defaultValue", "directives"],
            Variable: ["name"],
            SelectionSet: ["selections"],
            Field: ["alias", "name", "arguments", "directives", "selectionSet"],
            Argument: ["name", "value"],
            FragmentSpread: ["name", "directives"],
            InlineFragment: ["typeCondition", "directives", "selectionSet"],
            FragmentDefinition: ["name", "variableDefinitions", "typeCondition", "directives", "selectionSet"],
            IntValue: [],
            FloatValue: [],
            StringValue: [],
            BooleanValue: [],
            NullValue: [],
            EnumValue: [],
            ListValue: ["values"],
            ObjectValue: ["fields"],
            ObjectField: ["name", "value"],
            Directive: ["name", "arguments"],
            NamedType: ["name"],
            ListType: ["type"],
            NonNullType: ["type"],
            SchemaDefinition: ["description", "directives", "operationTypes"],
            OperationTypeDefinition: ["type"],
            ScalarTypeDefinition: ["description", "name", "directives"],
            ObjectTypeDefinition: ["description", "name", "interfaces", "directives", "fields"],
            FieldDefinition: ["description", "name", "arguments", "type", "directives"],
            InputValueDefinition: ["description", "name", "type", "defaultValue", "directives"],
            InterfaceTypeDefinition: ["description", "name", "interfaces", "directives", "fields"],
            UnionTypeDefinition: ["description", "name", "directives", "types"],
            EnumTypeDefinition: ["description", "name", "directives", "values"],
            EnumValueDefinition: ["description", "name", "directives"],
            InputObjectTypeDefinition: ["description", "name", "directives", "fields"],
            DirectiveDefinition: ["description", "name", "arguments", "locations"],
            SchemaExtension: ["directives", "operationTypes"],
            ScalarTypeExtension: ["name", "directives"],
            ObjectTypeExtension: ["name", "interfaces", "directives", "fields"],
            InterfaceTypeExtension: ["name", "interfaces", "directives", "fields"],
            UnionTypeExtension: ["name", "directives", "types"],
            EnumTypeExtension: ["name", "directives", "values"],
            InputObjectTypeExtension: ["name", "directives", "fields"]
        }
          , o = Object.freeze({});
        function s(e, t) {
            var n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : a
              , s = void 0
              , u = Array.isArray(e)
              , l = [e]
              , c = -1
              , d = []
              , p = void 0
              , f = void 0
              , h = void 0
              , m = []
              , y = []
              , g = e;
            do {
                var b, v = ++c === l.length, w = v && 0 !== d.length;
                if (v) {
                    if (f = 0 === y.length ? void 0 : m[m.length - 1],
                    p = h,
                    h = y.pop(),
                    w) {
                        if (u)
                            p = p.slice();
                        else {
                            for (var T = {}, E = 0, A = Object.keys(p); E < A.length; E++) {
                                var x = A[E];
                                T[x] = p[x]
                            }
                            p = T
                        }
                        for (var k = 0, C = 0; C < d.length; C++) {
                            var _ = d[C][0]
                              , S = d[C][1];
                            u && (_ -= k),
                            u && null === S ? (p.splice(_, 1),
                            k++) : p[_] = S
                        }
                    }
                    c = s.index,
                    l = s.keys,
                    d = s.edits,
                    u = s.inArray,
                    s = s.prev
                } else {
                    if (f = h ? u ? c : l[c] : void 0,
                    null == (p = h ? h[f] : g))
                        continue;
                    h && m.push(f)
                }
                var I = void 0;
                if (!Array.isArray(p)) {
                    if (!(0,
                    i.UG)(p))
                        throw Error("Invalid AST Node: ".concat((0,
                        r.Z)(p), "."));
                    var P = function(e, t, n) {
                        var r = e[t];
                        if (r) {
                            if (!n && "function" == typeof r)
                                return r;
                            var i = n ? r.leave : r.enter;
                            if ("function" == typeof i)
                                return i
                        } else {
                            var a = n ? e.leave : e.enter;
                            if (a) {
                                if ("function" == typeof a)
                                    return a;
                                var o = a[t];
                                if ("function" == typeof o)
                                    return o
                            }
                        }
                    }(t, p.kind, v);
                    if (P) {
                        if ((I = P.call(t, p, f, h, m, y)) === o)
                            break;
                        if (!1 === I) {
                            if (!v) {
                                m.pop();
                                continue
                            }
                        } else if (void 0 !== I && (d.push([f, I]),
                        !v)) {
                            if ((0,
                            i.UG)(I))
                                p = I;
                            else {
                                m.pop();
                                continue
                            }
                        }
                    }
                }
                void 0 === I && w && d.push([f, p]),
                v ? m.pop() : (s = {
                    inArray: u,
                    index: c,
                    keys: l,
                    edits: d,
                    prev: s
                },
                l = (u = Array.isArray(p)) ? p : null !== (b = n[p.kind]) && void 0 !== b ? b : [],
                c = -1,
                d = [],
                h && y.push(h),
                h = p)
            } while (void 0 !== s);
            return 0 !== d.length && (g = d[d.length - 1][1]),
            g
        }
    },
    34962: function(e, t, n) {
        "use strict";
        function r(e, t) {
            if (!e)
                throw Error(t)
        }
        n.d(t, {
            a: function() {
                return r
            }
        })
    },
    77150: function(e, t, n) {
        "use strict";
        function r(e) {
            return function e(t, n) {
                switch (typeof t) {
                case "string":
                    return JSON.stringify(t);
                case "function":
                    return t.name ? `[function ${t.name}]` : "[function]";
                case "object":
                    return function(t, n) {
                        if (null === t)
                            return "null";
                        if (n.includes(t))
                            return "[Circular]";
                        let r = [...n, t];
                        if ("function" == typeof t.toJSON) {
                            let n = t.toJSON();
                            if (n !== t)
                                return "string" == typeof n ? n : e(n, r)
                        } else if (Array.isArray(t))
                            return function(t, n) {
                                if (0 === t.length)
                                    return "[]";
                                if (n.length > 2)
                                    return "[Array]";
                                let r = Math.min(10, t.length)
                                  , i = t.length - r
                                  , a = [];
                                for (let i = 0; i < r; ++i)
                                    a.push(e(t[i], n));
                                return 1 === i ? a.push("... 1 more item") : i > 1 && a.push(`... ${i} more items`),
                                "[" + a.join(", ") + "]"
                            }(t, r);
                        return function(t, n) {
                            let r = Object.entries(t);
                            if (0 === r.length)
                                return "{}";
                            if (n.length > 2)
                                return "[" + function(e) {
                                    let t = Object.prototype.toString.call(e).replace(/^\[object /, "").replace(/]$/, "");
                                    if ("Object" === t && "function" == typeof e.constructor) {
                                        let t = e.constructor.name;
                                        if ("string" == typeof t && "" !== t)
                                            return t
                                    }
                                    return t
                                }(t) + "]";
                            let i = r.map(([t,r])=>t + ": " + e(r, n));
                            return "{ " + i.join(", ") + " }"
                        }(t, r)
                    }(t, n);
                default:
                    return String(t)
                }
            }(e, [])
        }
        n.d(t, {
            X: function() {
                return r
            }
        })
    },
    48500: function(e, t, n) {
        "use strict";
        var r, i;
        n.d(t, {
            UG: function() {
                return l
            },
            WU: function() {
                return o
            },
            Ye: function() {
                return a
            },
            h8: function() {
                return s
            },
            ku: function() {
                return r
            }
        });
        class a {
            constructor(e, t, n) {
                this.start = e.start,
                this.end = t.end,
                this.startToken = e,
                this.endToken = t,
                this.source = n
            }
            get[Symbol.toStringTag]() {
                return "Location"
            }
            toJSON() {
                return {
                    start: this.start,
                    end: this.end
                }
            }
        }
        class o {
            constructor(e, t, n, r, i, a) {
                this.kind = e,
                this.start = t,
                this.end = n,
                this.line = r,
                this.column = i,
                this.value = a,
                this.prev = null,
                this.next = null
            }
            get[Symbol.toStringTag]() {
                return "Token"
            }
            toJSON() {
                return {
                    kind: this.kind,
                    value: this.value,
                    line: this.line,
                    column: this.column
                }
            }
        }
        let s = {
            Name: [],
            Document: ["definitions"],
            OperationDefinition: ["name", "variableDefinitions", "directives", "selectionSet"],
            VariableDefinition: ["variable", "type", "defaultValue", "directives"],
            Variable: ["name"],
            SelectionSet: ["selections"],
            Field: ["alias", "name", "arguments", "directives", "selectionSet"],
            Argument: ["name", "value"],
            FragmentSpread: ["name", "directives"],
            InlineFragment: ["typeCondition", "directives", "selectionSet"],
            FragmentDefinition: ["name", "variableDefinitions", "typeCondition", "directives", "selectionSet"],
            IntValue: [],
            FloatValue: [],
            StringValue: [],
            BooleanValue: [],
            NullValue: [],
            EnumValue: [],
            ListValue: ["values"],
            ObjectValue: ["fields"],
            ObjectField: ["name", "value"],
            Directive: ["name", "arguments"],
            NamedType: ["name"],
            ListType: ["type"],
            NonNullType: ["type"],
            SchemaDefinition: ["description", "directives", "operationTypes"],
            OperationTypeDefinition: ["type"],
            ScalarTypeDefinition: ["description", "name", "directives"],
            ObjectTypeDefinition: ["description", "name", "interfaces", "directives", "fields"],
            FieldDefinition: ["description", "name", "arguments", "type", "directives"],
            InputValueDefinition: ["description", "name", "type", "defaultValue", "directives"],
            InterfaceTypeDefinition: ["description", "name", "interfaces", "directives", "fields"],
            UnionTypeDefinition: ["description", "name", "directives", "types"],
            EnumTypeDefinition: ["description", "name", "directives", "values"],
            EnumValueDefinition: ["description", "name", "directives"],
            InputObjectTypeDefinition: ["description", "name", "directives", "fields"],
            DirectiveDefinition: ["description", "name", "arguments", "locations"],
            SchemaExtension: ["directives", "operationTypes"],
            ScalarTypeExtension: ["name", "directives"],
            ObjectTypeExtension: ["name", "interfaces", "directives", "fields"],
            InterfaceTypeExtension: ["name", "interfaces", "directives", "fields"],
            UnionTypeExtension: ["name", "directives", "types"],
            EnumTypeExtension: ["name", "directives", "values"],
            InputObjectTypeExtension: ["name", "directives", "fields"]
        }
          , u = new Set(Object.keys(s));
        function l(e) {
            let t = null == e ? void 0 : e.kind;
            return "string" == typeof t && u.has(t)
        }
        (i = r || (r = {})).QUERY = "query",
        i.MUTATION = "mutation",
        i.SUBSCRIPTION = "subscription"
    },
    99408: function(e, t, n) {
        "use strict";
        n.d(t, {
            LZ: function() {
                return a
            },
            wv: function() {
                return i
            }
        });
        var r = n(71754);
        function i(e) {
            var t, n;
            let i = Number.MAX_SAFE_INTEGER
              , a = null
              , o = -1;
            for (let t = 0; t < e.length; ++t) {
                let s = e[t]
                  , u = function(e) {
                    let t = 0;
                    for (; t < e.length && (0,
                    r.FD)(e.charCodeAt(t)); )
                        ++t;
                    return t
                }(s);
                u !== s.length && (a = null !== (n = a) && void 0 !== n ? n : t,
                o = t,
                0 !== t && u < i && (i = u))
            }
            return e.map((e,t)=>0 === t ? e : e.slice(i)).slice(null !== (t = a) && void 0 !== t ? t : 0, o + 1)
        }
        function a(e, t) {
            let n = e.replace(/"""/g, '\\"""')
              , i = n.split(/\r\n|[\n\r]/g)
              , a = 1 === i.length
              , o = i.length > 1 && i.slice(1).every(e=>0 === e.length || (0,
            r.FD)(e.charCodeAt(0)))
              , s = n.endsWith('\\"""')
              , u = e.endsWith('"') && !s
              , l = e.endsWith("\\")
              , c = u || l
              , d = !(null != t && t.minimize) && (!a || e.length > 70 || c || o || s)
              , p = ""
              , f = a && (0,
            r.FD)(e.charCodeAt(0));
            return (d && !f || o) && (p += "\n"),
            p += n,
            (d || c) && (p += "\n"),
            '"""' + p + '"""'
        }
    },
    71754: function(e, t, n) {
        "use strict";
        function r(e) {
            return 9 === e || 32 === e
        }
        function i(e) {
            return e >= 48 && e <= 57
        }
        function a(e) {
            return e >= 97 && e <= 122 || e >= 65 && e <= 90
        }
        function o(e) {
            return a(e) || 95 === e
        }
        function s(e) {
            return a(e) || i(e) || 95 === e
        }
        n.d(t, {
            FD: function() {
                return r
            },
            HQ: function() {
                return s
            },
            LQ: function() {
                return o
            },
            X1: function() {
                return i
            }
        })
    },
    16334: function(e, t, n) {
        "use strict";
        var r, i;
        n.d(t, {
            h: function() {
                return r
            }
        }),
        (i = r || (r = {})).NAME = "Name",
        i.DOCUMENT = "Document",
        i.OPERATION_DEFINITION = "OperationDefinition",
        i.VARIABLE_DEFINITION = "VariableDefinition",
        i.SELECTION_SET = "SelectionSet",
        i.FIELD = "Field",
        i.ARGUMENT = "Argument",
        i.FRAGMENT_SPREAD = "FragmentSpread",
        i.INLINE_FRAGMENT = "InlineFragment",
        i.FRAGMENT_DEFINITION = "FragmentDefinition",
        i.VARIABLE = "Variable",
        i.INT = "IntValue",
        i.FLOAT = "FloatValue",
        i.STRING = "StringValue",
        i.BOOLEAN = "BooleanValue",
        i.NULL = "NullValue",
        i.ENUM = "EnumValue",
        i.LIST = "ListValue",
        i.OBJECT = "ObjectValue",
        i.OBJECT_FIELD = "ObjectField",
        i.DIRECTIVE = "Directive",
        i.NAMED_TYPE = "NamedType",
        i.LIST_TYPE = "ListType",
        i.NON_NULL_TYPE = "NonNullType",
        i.SCHEMA_DEFINITION = "SchemaDefinition",
        i.OPERATION_TYPE_DEFINITION = "OperationTypeDefinition",
        i.SCALAR_TYPE_DEFINITION = "ScalarTypeDefinition",
        i.OBJECT_TYPE_DEFINITION = "ObjectTypeDefinition",
        i.FIELD_DEFINITION = "FieldDefinition",
        i.INPUT_VALUE_DEFINITION = "InputValueDefinition",
        i.INTERFACE_TYPE_DEFINITION = "InterfaceTypeDefinition",
        i.UNION_TYPE_DEFINITION = "UnionTypeDefinition",
        i.ENUM_TYPE_DEFINITION = "EnumTypeDefinition",
        i.ENUM_VALUE_DEFINITION = "EnumValueDefinition",
        i.INPUT_OBJECT_TYPE_DEFINITION = "InputObjectTypeDefinition",
        i.DIRECTIVE_DEFINITION = "DirectiveDefinition",
        i.SCHEMA_EXTENSION = "SchemaExtension",
        i.SCALAR_TYPE_EXTENSION = "ScalarTypeExtension",
        i.OBJECT_TYPE_EXTENSION = "ObjectTypeExtension",
        i.INTERFACE_TYPE_EXTENSION = "InterfaceTypeExtension",
        i.UNION_TYPE_EXTENSION = "UnionTypeExtension",
        i.ENUM_TYPE_EXTENSION = "EnumTypeExtension",
        i.INPUT_OBJECT_TYPE_EXTENSION = "InputObjectTypeExtension"
    },
    13372: function(e, t, n) {
        "use strict";
        n.r(t),
        n.d(t, {
            Parser: function() {
                return F
            },
            parse: function() {
                return B
            },
            parseConstValue: function() {
                return N
            },
            parseType: function() {
                return R
            },
            parseValue: function() {
                return O
            }
        });
        let r = /\r\n|[\n\r]/g;
        function i(e, t) {
            let n = 0
              , i = 1;
            for (let a of e.body.matchAll(r)) {
                if ("number" == typeof a.index || function(e, t) {
                    if (!e)
                        throw Error(null != t ? t : "Unexpected invariant triggered.")
                }(!1),
                a.index >= t)
                    break;
                n = a.index + a[0].length,
                i += 1
            }
            return {
                line: i,
                column: t + 1 - n
            }
        }
        function a(e, t) {
            let n = e.locationOffset.column - 1
              , r = "".padStart(n) + e.body
              , i = t.line - 1
              , a = e.locationOffset.line - 1
              , s = t.line + a
              , u = 1 === t.line ? n : 0
              , l = t.column + u
              , c = `${e.name}:${s}:${l}
`
              , d = r.split(/\r\n|[\n\r]/g)
              , p = d[i];
            if (p.length > 120) {
                let e = Math.floor(l / 80)
                  , t = [];
                for (let e = 0; e < p.length; e += 80)
                    t.push(p.slice(e, e + 80));
                return c + o([[`${s} |`, t[0]], ...t.slice(1, e + 1).map(e=>["|", e]), ["|", "^".padStart(l % 80)], ["|", t[e + 1]]])
            }
            return c + o([[`${s - 1} |`, d[i - 1]], [`${s} |`, p], ["|", "^".padStart(l)], [`${s + 1} |`, d[i + 1]]])
        }
        function o(e) {
            let t = e.filter(([e,t])=>void 0 !== t)
              , n = Math.max(...t.map(([e])=>e.length));
            return t.map(([e,t])=>e.padStart(n) + (t ? " " + t : "")).join("\n")
        }
        class s extends Error {
            constructor(e, ...t) {
                var n, r, a, o;
                let {nodes: l, source: c, positions: d, path: p, originalError: f, extensions: h} = function(e) {
                    let t = e[0];
                    return null == t || "kind"in t || "length"in t ? {
                        nodes: t,
                        source: e[1],
                        positions: e[2],
                        path: e[3],
                        originalError: e[4],
                        extensions: e[5]
                    } : t
                }(t);
                super(e),
                this.name = "GraphQLError",
                this.path = null != p ? p : void 0,
                this.originalError = null != f ? f : void 0,
                this.nodes = u(Array.isArray(l) ? l : l ? [l] : void 0);
                let m = u(null === (n = this.nodes) || void 0 === n ? void 0 : n.map(e=>e.loc).filter(e=>null != e));
                this.source = null != c ? c : null == m ? void 0 : null === (r = m[0]) || void 0 === r ? void 0 : r.source,
                this.positions = null != d ? d : null == m ? void 0 : m.map(e=>e.start),
                this.locations = d && c ? d.map(e=>i(c, e)) : null == m ? void 0 : m.map(e=>i(e.source, e.start));
                let y = "object" == typeof (o = null == f ? void 0 : f.extensions) && null !== o ? null == f ? void 0 : f.extensions : void 0;
                this.extensions = null !== (a = null != h ? h : y) && void 0 !== a ? a : Object.create(null),
                Object.defineProperties(this, {
                    message: {
                        writable: !0,
                        enumerable: !0
                    },
                    name: {
                        enumerable: !1
                    },
                    nodes: {
                        enumerable: !1
                    },
                    source: {
                        enumerable: !1
                    },
                    positions: {
                        enumerable: !1
                    },
                    originalError: {
                        enumerable: !1
                    }
                }),
                null != f && f.stack ? Object.defineProperty(this, "stack", {
                    value: f.stack,
                    writable: !0,
                    configurable: !0
                }) : Error.captureStackTrace ? Error.captureStackTrace(this, s) : Object.defineProperty(this, "stack", {
                    value: Error().stack,
                    writable: !0,
                    configurable: !0
                })
            }
            get[Symbol.toStringTag]() {
                return "GraphQLError"
            }
            toString() {
                let e = this.message;
                if (this.nodes) {
                    for (let n of this.nodes)
                        if (n.loc) {
                            var t;
                            e += "\n\n" + a((t = n.loc).source, i(t.source, t.start))
                        }
                } else if (this.source && this.locations)
                    for (let t of this.locations)
                        e += "\n\n" + a(this.source, t);
                return e
            }
            toJSON() {
                let e = {
                    message: this.message
                };
                return null != this.locations && (e.locations = this.locations),
                null != this.path && (e.path = this.path),
                null != this.extensions && Object.keys(this.extensions).length > 0 && (e.extensions = this.extensions),
                e
            }
        }
        function u(e) {
            return void 0 === e || 0 === e.length ? void 0 : e
        }
        function l(e, t, n) {
            return new s(`Syntax Error: ${n}`,{
                source: e,
                positions: [t]
            })
        }
        var c, d, p, f, h = n(48500);
        (c = p || (p = {})).QUERY = "QUERY",
        c.MUTATION = "MUTATION",
        c.SUBSCRIPTION = "SUBSCRIPTION",
        c.FIELD = "FIELD",
        c.FRAGMENT_DEFINITION = "FRAGMENT_DEFINITION",
        c.FRAGMENT_SPREAD = "FRAGMENT_SPREAD",
        c.INLINE_FRAGMENT = "INLINE_FRAGMENT",
        c.VARIABLE_DEFINITION = "VARIABLE_DEFINITION",
        c.SCHEMA = "SCHEMA",
        c.SCALAR = "SCALAR",
        c.OBJECT = "OBJECT",
        c.FIELD_DEFINITION = "FIELD_DEFINITION",
        c.ARGUMENT_DEFINITION = "ARGUMENT_DEFINITION",
        c.INTERFACE = "INTERFACE",
        c.UNION = "UNION",
        c.ENUM = "ENUM",
        c.ENUM_VALUE = "ENUM_VALUE",
        c.INPUT_OBJECT = "INPUT_OBJECT",
        c.INPUT_FIELD_DEFINITION = "INPUT_FIELD_DEFINITION";
        var m = n(16334)
          , y = n(99408)
          , g = n(71754);
        (d = f || (f = {})).SOF = "<SOF>",
        d.EOF = "<EOF>",
        d.BANG = "!",
        d.DOLLAR = "$",
        d.AMP = "&",
        d.PAREN_L = "(",
        d.PAREN_R = ")",
        d.SPREAD = "...",
        d.COLON = ":",
        d.EQUALS = "=",
        d.AT = "@",
        d.BRACKET_L = "[",
        d.BRACKET_R = "]",
        d.BRACE_L = "{",
        d.PIPE = "|",
        d.BRACE_R = "}",
        d.NAME = "Name",
        d.INT = "Int",
        d.FLOAT = "Float",
        d.STRING = "String",
        d.BLOCK_STRING = "BlockString",
        d.COMMENT = "Comment";
        class b {
            constructor(e) {
                let t = new h.WU(f.SOF,0,0,0,0);
                this.source = e,
                this.lastToken = t,
                this.token = t,
                this.line = 1,
                this.lineStart = 0
            }
            get[Symbol.toStringTag]() {
                return "Lexer"
            }
            advance() {
                this.lastToken = this.token;
                let e = this.token = this.lookahead();
                return e
            }
            lookahead() {
                let e = this.token;
                if (e.kind !== f.EOF)
                    do
                        if (e.next)
                            e = e.next;
                        else {
                            let t = function(e, t) {
                                let n = e.source.body
                                  , r = n.length
                                  , i = t;
                                for (; i < r; ) {
                                    let t = n.charCodeAt(i);
                                    switch (t) {
                                    case 65279:
                                    case 9:
                                    case 32:
                                    case 44:
                                        ++i;
                                        continue;
                                    case 10:
                                        ++i,
                                        ++e.line,
                                        e.lineStart = i;
                                        continue;
                                    case 13:
                                        10 === n.charCodeAt(i + 1) ? i += 2 : ++i,
                                        ++e.line,
                                        e.lineStart = i;
                                        continue;
                                    case 35:
                                        return function(e, t) {
                                            let n = e.source.body
                                              , r = n.length
                                              , i = t + 1;
                                            for (; i < r; ) {
                                                let e = n.charCodeAt(i);
                                                if (10 === e || 13 === e)
                                                    break;
                                                if (v(e))
                                                    ++i;
                                                else if (w(n, i))
                                                    i += 2;
                                                else
                                                    break
                                            }
                                            return x(e, f.COMMENT, t, i, n.slice(t + 1, i))
                                        }(e, i);
                                    case 33:
                                        return x(e, f.BANG, i, i + 1);
                                    case 36:
                                        return x(e, f.DOLLAR, i, i + 1);
                                    case 38:
                                        return x(e, f.AMP, i, i + 1);
                                    case 40:
                                        return x(e, f.PAREN_L, i, i + 1);
                                    case 41:
                                        return x(e, f.PAREN_R, i, i + 1);
                                    case 46:
                                        if (46 === n.charCodeAt(i + 1) && 46 === n.charCodeAt(i + 2))
                                            return x(e, f.SPREAD, i, i + 3);
                                        break;
                                    case 58:
                                        return x(e, f.COLON, i, i + 1);
                                    case 61:
                                        return x(e, f.EQUALS, i, i + 1);
                                    case 64:
                                        return x(e, f.AT, i, i + 1);
                                    case 91:
                                        return x(e, f.BRACKET_L, i, i + 1);
                                    case 93:
                                        return x(e, f.BRACKET_R, i, i + 1);
                                    case 123:
                                        return x(e, f.BRACE_L, i, i + 1);
                                    case 124:
                                        return x(e, f.PIPE, i, i + 1);
                                    case 125:
                                        return x(e, f.BRACE_R, i, i + 1);
                                    case 34:
                                        if (34 === n.charCodeAt(i + 1) && 34 === n.charCodeAt(i + 2))
                                            return function(e, t) {
                                                let n = e.source.body
                                                  , r = n.length
                                                  , i = e.lineStart
                                                  , a = t + 3
                                                  , o = a
                                                  , s = ""
                                                  , u = [];
                                                for (; a < r; ) {
                                                    let r = n.charCodeAt(a);
                                                    if (34 === r && 34 === n.charCodeAt(a + 1) && 34 === n.charCodeAt(a + 2)) {
                                                        s += n.slice(o, a),
                                                        u.push(s);
                                                        let r = x(e, f.BLOCK_STRING, t, a + 3, (0,
                                                        y.wv)(u).join("\n"));
                                                        return e.line += u.length - 1,
                                                        e.lineStart = i,
                                                        r
                                                    }
                                                    if (92 === r && 34 === n.charCodeAt(a + 1) && 34 === n.charCodeAt(a + 2) && 34 === n.charCodeAt(a + 3)) {
                                                        s += n.slice(o, a),
                                                        o = a + 1,
                                                        a += 4;
                                                        continue
                                                    }
                                                    if (10 === r || 13 === r) {
                                                        s += n.slice(o, a),
                                                        u.push(s),
                                                        13 === r && 10 === n.charCodeAt(a + 1) ? a += 2 : ++a,
                                                        s = "",
                                                        o = a,
                                                        i = a;
                                                        continue
                                                    }
                                                    if (v(r))
                                                        ++a;
                                                    else if (w(n, a))
                                                        a += 2;
                                                    else
                                                        throw l(e.source, a, `Invalid character within String: ${A(e, a)}.`)
                                                }
                                                throw l(e.source, a, "Unterminated string.")
                                            }(e, i);
                                        return function(e, t) {
                                            let n = e.source.body
                                              , r = n.length
                                              , i = t + 1
                                              , a = i
                                              , o = "";
                                            for (; i < r; ) {
                                                let r = n.charCodeAt(i);
                                                if (34 === r)
                                                    return o += n.slice(a, i),
                                                    x(e, f.STRING, t, i + 1, o);
                                                if (92 === r) {
                                                    o += n.slice(a, i);
                                                    let t = 117 === n.charCodeAt(i + 1) ? 123 === n.charCodeAt(i + 2) ? function(e, t) {
                                                        let n = e.source.body
                                                          , r = 0
                                                          , i = 3;
                                                        for (; i < 12; ) {
                                                            let e = n.charCodeAt(t + i++);
                                                            if (125 === e) {
                                                                if (i < 5 || !v(r))
                                                                    break;
                                                                return {
                                                                    value: String.fromCodePoint(r),
                                                                    size: i
                                                                }
                                                            }
                                                            if ((r = r << 4 | _(e)) < 0)
                                                                break
                                                        }
                                                        throw l(e.source, t, `Invalid Unicode escape sequence: "${n.slice(t, t + i)}".`)
                                                    }(e, i) : function(e, t) {
                                                        let n = e.source.body
                                                          , r = C(n, t + 2);
                                                        if (v(r))
                                                            return {
                                                                value: String.fromCodePoint(r),
                                                                size: 6
                                                            };
                                                        if (T(r) && 92 === n.charCodeAt(t + 6) && 117 === n.charCodeAt(t + 7)) {
                                                            let e = C(n, t + 8);
                                                            if (E(e))
                                                                return {
                                                                    value: String.fromCodePoint(r, e),
                                                                    size: 12
                                                                }
                                                        }
                                                        throw l(e.source, t, `Invalid Unicode escape sequence: "${n.slice(t, t + 6)}".`)
                                                    }(e, i) : function(e, t) {
                                                        let n = e.source.body
                                                          , r = n.charCodeAt(t + 1);
                                                        switch (r) {
                                                        case 34:
                                                            return {
                                                                value: '"',
                                                                size: 2
                                                            };
                                                        case 92:
                                                            return {
                                                                value: "\\",
                                                                size: 2
                                                            };
                                                        case 47:
                                                            return {
                                                                value: "/",
                                                                size: 2
                                                            };
                                                        case 98:
                                                            return {
                                                                value: "\b",
                                                                size: 2
                                                            };
                                                        case 102:
                                                            return {
                                                                value: "\f",
                                                                size: 2
                                                            };
                                                        case 110:
                                                            return {
                                                                value: "\n",
                                                                size: 2
                                                            };
                                                        case 114:
                                                            return {
                                                                value: "\r",
                                                                size: 2
                                                            };
                                                        case 116:
                                                            return {
                                                                value: "	",
                                                                size: 2
                                                            }
                                                        }
                                                        throw l(e.source, t, `Invalid character escape sequence: "${n.slice(t, t + 2)}".`)
                                                    }(e, i);
                                                    o += t.value,
                                                    i += t.size,
                                                    a = i;
                                                    continue
                                                }
                                                if (10 === r || 13 === r)
                                                    break;
                                                if (v(r))
                                                    ++i;
                                                else if (w(n, i))
                                                    i += 2;
                                                else
                                                    throw l(e.source, i, `Invalid character within String: ${A(e, i)}.`)
                                            }
                                            throw l(e.source, i, "Unterminated string.")
                                        }(e, i)
                                    }
                                    if ((0,
                                    g.X1)(t) || 45 === t)
                                        return function(e, t, n) {
                                            let r = e.source.body
                                              , i = t
                                              , a = n
                                              , o = !1;
                                            if (45 === a && (a = r.charCodeAt(++i)),
                                            48 === a) {
                                                if (a = r.charCodeAt(++i),
                                                (0,
                                                g.X1)(a))
                                                    throw l(e.source, i, `Invalid number, unexpected digit after 0: ${A(e, i)}.`)
                                            } else
                                                i = k(e, i, a),
                                                a = r.charCodeAt(i);
                                            if (46 === a && (o = !0,
                                            a = r.charCodeAt(++i),
                                            i = k(e, i, a),
                                            a = r.charCodeAt(i)),
                                            (69 === a || 101 === a) && (o = !0,
                                            (43 === (a = r.charCodeAt(++i)) || 45 === a) && (a = r.charCodeAt(++i)),
                                            i = k(e, i, a),
                                            a = r.charCodeAt(i)),
                                            46 === a || (0,
                                            g.LQ)(a))
                                                throw l(e.source, i, `Invalid number, expected digit but got: ${A(e, i)}.`);
                                            return x(e, o ? f.FLOAT : f.INT, t, i, r.slice(t, i))
                                        }(e, i, t);
                                    if ((0,
                                    g.LQ)(t))
                                        return function(e, t) {
                                            let n = e.source.body
                                              , r = n.length
                                              , i = t + 1;
                                            for (; i < r; ) {
                                                let e = n.charCodeAt(i);
                                                if ((0,
                                                g.HQ)(e))
                                                    ++i;
                                                else
                                                    break
                                            }
                                            return x(e, f.NAME, t, i, n.slice(t, i))
                                        }(e, i);
                                    throw l(e.source, i, 39 === t ? "Unexpected single quote character ('), did you mean to use a double quote (\")?" : v(t) || w(n, i) ? `Unexpected character: ${A(e, i)}.` : `Invalid character: ${A(e, i)}.`)
                                }
                                return x(e, f.EOF, r, r)
                            }(this, e.end);
                            e.next = t,
                            t.prev = e,
                            e = t
                        }
                    while (e.kind === f.COMMENT);
                return e
            }
        }
        function v(e) {
            return e >= 0 && e <= 55295 || e >= 57344 && e <= 1114111
        }
        function w(e, t) {
            return T(e.charCodeAt(t)) && E(e.charCodeAt(t + 1))
        }
        function T(e) {
            return e >= 55296 && e <= 56319
        }
        function E(e) {
            return e >= 56320 && e <= 57343
        }
        function A(e, t) {
            let n = e.source.body.codePointAt(t);
            if (void 0 === n)
                return f.EOF;
            if (n >= 32 && n <= 126) {
                let e = String.fromCodePoint(n);
                return '"' === e ? "'\"'" : `"${e}"`
            }
            return "U+" + n.toString(16).toUpperCase().padStart(4, "0")
        }
        function x(e, t, n, r, i) {
            let a = e.line
              , o = 1 + n - e.lineStart;
            return new h.WU(t,n,r,a,o,i)
        }
        function k(e, t, n) {
            if (!(0,
            g.X1)(n))
                throw l(e.source, t, `Invalid number, expected digit but got: ${A(e, t)}.`);
            let r = e.source.body
              , i = t + 1;
            for (; (0,
            g.X1)(r.charCodeAt(i)); )
                ++i;
            return i
        }
        function C(e, t) {
            return _(e.charCodeAt(t)) << 12 | _(e.charCodeAt(t + 1)) << 8 | _(e.charCodeAt(t + 2)) << 4 | _(e.charCodeAt(t + 3))
        }
        function _(e) {
            return e >= 48 && e <= 57 ? e - 48 : e >= 65 && e <= 70 ? e - 55 : e >= 97 && e <= 102 ? e - 87 : -1
        }
        var S = n(34962)
          , I = n(77150);
        class P {
            constructor(e, t="GraphQL request", n={
                line: 1,
                column: 1
            }) {
                "string" == typeof e || (0,
                S.a)(!1, `Body must be a string. Received: ${(0,
                I.X)(e)}.`),
                this.body = e,
                this.name = t,
                this.locationOffset = n,
                this.locationOffset.line > 0 || (0,
                S.a)(!1, "line in locationOffset is 1-indexed and must be positive."),
                this.locationOffset.column > 0 || (0,
                S.a)(!1, "column in locationOffset is 1-indexed and must be positive.")
            }
            get[Symbol.toStringTag]() {
                return "Source"
            }
        }
        function B(e, t) {
            let n = new F(e,t);
            return n.parseDocument()
        }
        function O(e, t) {
            let n = new F(e,t);
            n.expectToken(f.SOF);
            let r = n.parseValueLiteral(!1);
            return n.expectToken(f.EOF),
            r
        }
        function N(e, t) {
            let n = new F(e,t);
            n.expectToken(f.SOF);
            let r = n.parseConstValueLiteral();
            return n.expectToken(f.EOF),
            r
        }
        function R(e, t) {
            let n = new F(e,t);
            n.expectToken(f.SOF);
            let r = n.parseTypeReference();
            return n.expectToken(f.EOF),
            r
        }
        class F {
            constructor(e, t={}) {
                let n = e instanceof P ? e : new P(e);
                this._lexer = new b(n),
                this._options = t,
                this._tokenCounter = 0
            }
            parseName() {
                let e = this.expectToken(f.NAME);
                return this.node(e, {
                    kind: m.h.NAME,
                    value: e.value
                })
            }
            parseDocument() {
                return this.node(this._lexer.token, {
                    kind: m.h.DOCUMENT,
                    definitions: this.many(f.SOF, this.parseDefinition, f.EOF)
                })
            }
            parseDefinition() {
                if (this.peek(f.BRACE_L))
                    return this.parseOperationDefinition();
                let e = this.peekDescription()
                  , t = e ? this._lexer.lookahead() : this._lexer.token;
                if (t.kind === f.NAME) {
                    switch (t.value) {
                    case "schema":
                        return this.parseSchemaDefinition();
                    case "scalar":
                        return this.parseScalarTypeDefinition();
                    case "type":
                        return this.parseObjectTypeDefinition();
                    case "interface":
                        return this.parseInterfaceTypeDefinition();
                    case "union":
                        return this.parseUnionTypeDefinition();
                    case "enum":
                        return this.parseEnumTypeDefinition();
                    case "input":
                        return this.parseInputObjectTypeDefinition();
                    case "directive":
                        return this.parseDirectiveDefinition()
                    }
                    if (e)
                        throw l(this._lexer.source, this._lexer.token.start, "Unexpected description, descriptions are supported only on type definitions.");
                    switch (t.value) {
                    case "query":
                    case "mutation":
                    case "subscription":
                        return this.parseOperationDefinition();
                    case "fragment":
                        return this.parseFragmentDefinition();
                    case "extend":
                        return this.parseTypeSystemExtension()
                    }
                }
                throw this.unexpected(t)
            }
            parseOperationDefinition() {
                let e;
                let t = this._lexer.token;
                if (this.peek(f.BRACE_L))
                    return this.node(t, {
                        kind: m.h.OPERATION_DEFINITION,
                        operation: h.ku.QUERY,
                        name: void 0,
                        variableDefinitions: [],
                        directives: [],
                        selectionSet: this.parseSelectionSet()
                    });
                let n = this.parseOperationType();
                return this.peek(f.NAME) && (e = this.parseName()),
                this.node(t, {
                    kind: m.h.OPERATION_DEFINITION,
                    operation: n,
                    name: e,
                    variableDefinitions: this.parseVariableDefinitions(),
                    directives: this.parseDirectives(!1),
                    selectionSet: this.parseSelectionSet()
                })
            }
            parseOperationType() {
                let e = this.expectToken(f.NAME);
                switch (e.value) {
                case "query":
                    return h.ku.QUERY;
                case "mutation":
                    return h.ku.MUTATION;
                case "subscription":
                    return h.ku.SUBSCRIPTION
                }
                throw this.unexpected(e)
            }
            parseVariableDefinitions() {
                return this.optionalMany(f.PAREN_L, this.parseVariableDefinition, f.PAREN_R)
            }
            parseVariableDefinition() {
                return this.node(this._lexer.token, {
                    kind: m.h.VARIABLE_DEFINITION,
                    variable: this.parseVariable(),
                    type: (this.expectToken(f.COLON),
                    this.parseTypeReference()),
                    defaultValue: this.expectOptionalToken(f.EQUALS) ? this.parseConstValueLiteral() : void 0,
                    directives: this.parseConstDirectives()
                })
            }
            parseVariable() {
                let e = this._lexer.token;
                return this.expectToken(f.DOLLAR),
                this.node(e, {
                    kind: m.h.VARIABLE,
                    name: this.parseName()
                })
            }
            parseSelectionSet() {
                return this.node(this._lexer.token, {
                    kind: m.h.SELECTION_SET,
                    selections: this.many(f.BRACE_L, this.parseSelection, f.BRACE_R)
                })
            }
            parseSelection() {
                return this.peek(f.SPREAD) ? this.parseFragment() : this.parseField()
            }
            parseField() {
                let e, t;
                let n = this._lexer.token
                  , r = this.parseName();
                return this.expectOptionalToken(f.COLON) ? (e = r,
                t = this.parseName()) : t = r,
                this.node(n, {
                    kind: m.h.FIELD,
                    alias: e,
                    name: t,
                    arguments: this.parseArguments(!1),
                    directives: this.parseDirectives(!1),
                    selectionSet: this.peek(f.BRACE_L) ? this.parseSelectionSet() : void 0
                })
            }
            parseArguments(e) {
                let t = e ? this.parseConstArgument : this.parseArgument;
                return this.optionalMany(f.PAREN_L, t, f.PAREN_R)
            }
            parseArgument(e=!1) {
                let t = this._lexer.token
                  , n = this.parseName();
                return this.expectToken(f.COLON),
                this.node(t, {
                    kind: m.h.ARGUMENT,
                    name: n,
                    value: this.parseValueLiteral(e)
                })
            }
            parseConstArgument() {
                return this.parseArgument(!0)
            }
            parseFragment() {
                let e = this._lexer.token;
                this.expectToken(f.SPREAD);
                let t = this.expectOptionalKeyword("on");
                return !t && this.peek(f.NAME) ? this.node(e, {
                    kind: m.h.FRAGMENT_SPREAD,
                    name: this.parseFragmentName(),
                    directives: this.parseDirectives(!1)
                }) : this.node(e, {
                    kind: m.h.INLINE_FRAGMENT,
                    typeCondition: t ? this.parseNamedType() : void 0,
                    directives: this.parseDirectives(!1),
                    selectionSet: this.parseSelectionSet()
                })
            }
            parseFragmentDefinition() {
                let e = this._lexer.token;
                return (this.expectKeyword("fragment"),
                !0 === this._options.allowLegacyFragmentVariables) ? this.node(e, {
                    kind: m.h.FRAGMENT_DEFINITION,
                    name: this.parseFragmentName(),
                    variableDefinitions: this.parseVariableDefinitions(),
                    typeCondition: (this.expectKeyword("on"),
                    this.parseNamedType()),
                    directives: this.parseDirectives(!1),
                    selectionSet: this.parseSelectionSet()
                }) : this.node(e, {
                    kind: m.h.FRAGMENT_DEFINITION,
                    name: this.parseFragmentName(),
                    typeCondition: (this.expectKeyword("on"),
                    this.parseNamedType()),
                    directives: this.parseDirectives(!1),
                    selectionSet: this.parseSelectionSet()
                })
            }
            parseFragmentName() {
                if ("on" === this._lexer.token.value)
                    throw this.unexpected();
                return this.parseName()
            }
            parseValueLiteral(e) {
                let t = this._lexer.token;
                switch (t.kind) {
                case f.BRACKET_L:
                    return this.parseList(e);
                case f.BRACE_L:
                    return this.parseObject(e);
                case f.INT:
                    return this.advanceLexer(),
                    this.node(t, {
                        kind: m.h.INT,
                        value: t.value
                    });
                case f.FLOAT:
                    return this.advanceLexer(),
                    this.node(t, {
                        kind: m.h.FLOAT,
                        value: t.value
                    });
                case f.STRING:
                case f.BLOCK_STRING:
                    return this.parseStringLiteral();
                case f.NAME:
                    switch (this.advanceLexer(),
                    t.value) {
                    case "true":
                        return this.node(t, {
                            kind: m.h.BOOLEAN,
                            value: !0
                        });
                    case "false":
                        return this.node(t, {
                            kind: m.h.BOOLEAN,
                            value: !1
                        });
                    case "null":
                        return this.node(t, {
                            kind: m.h.NULL
                        });
                    default:
                        return this.node(t, {
                            kind: m.h.ENUM,
                            value: t.value
                        })
                    }
                case f.DOLLAR:
                    if (e) {
                        if (this.expectToken(f.DOLLAR),
                        this._lexer.token.kind === f.NAME) {
                            let e = this._lexer.token.value;
                            throw l(this._lexer.source, t.start, `Unexpected variable "$ ${e}" in constant value.`)
                        }
                        throw this.unexpected(t)
                    }
                    return this.parseVariable();
                default:
                    throw this.unexpected()
                }
            }
            parseConstValueLiteral() {
                return this.parseValueLiteral(!0)
            }
            parseStringLiteral() {
                let e = this._lexer.token;
                return this.advanceLexer(),
                this.node(e, {
                    kind: m.h.STRING,
                    value: e.value,
                    block: e.kind === f.BLOCK_STRING
                })
            }
            parseList(e) {
                let t = ()=>this.parseValueLiteral(e);
                return this.node(this._lexer.token, {
                    kind: m.h.LIST,
                    values: this.any(f.BRACKET_L, t, f.BRACKET_R)
                })
            }
            parseObject(e) {
                let t = ()=>this.parseObjectField(e);
                return this.node(this._lexer.token, {
                    kind: m.h.OBJECT,
                    fields: this.any(f.BRACE_L, t, f.BRACE_R)
                })
            }
            parseObjectField(e) {
                let t = this._lexer.token
                  , n = this.parseName();
                return this.expectToken(f.COLON),
                this.node(t, {
                    kind: m.h.OBJECT_FIELD,
                    name: n,
                    value: this.parseValueLiteral(e)
                })
            }
            parseDirectives(e) {
                let t = [];
                for (; this.peek(f.AT); )
                    t.push(this.parseDirective(e));
                return t
            }
            parseConstDirectives() {
                return this.parseDirectives(!0)
            }
            parseDirective(e) {
                let t = this._lexer.token;
                return this.expectToken(f.AT),
                this.node(t, {
                    kind: m.h.DIRECTIVE,
                    name: this.parseName(),
                    arguments: this.parseArguments(e)
                })
            }
            parseTypeReference() {
                let e;
                let t = this._lexer.token;
                if (this.expectOptionalToken(f.BRACKET_L)) {
                    let n = this.parseTypeReference();
                    this.expectToken(f.BRACKET_R),
                    e = this.node(t, {
                        kind: m.h.LIST_TYPE,
                        type: n
                    })
                } else
                    e = this.parseNamedType();
                return this.expectOptionalToken(f.BANG) ? this.node(t, {
                    kind: m.h.NON_NULL_TYPE,
                    type: e
                }) : e
            }
            parseNamedType() {
                return this.node(this._lexer.token, {
                    kind: m.h.NAMED_TYPE,
                    name: this.parseName()
                })
            }
            peekDescription() {
                return this.peek(f.STRING) || this.peek(f.BLOCK_STRING)
            }
            parseDescription() {
                if (this.peekDescription())
                    return this.parseStringLiteral()
            }
            parseSchemaDefinition() {
                let e = this._lexer.token
                  , t = this.parseDescription();
                this.expectKeyword("schema");
                let n = this.parseConstDirectives()
                  , r = this.many(f.BRACE_L, this.parseOperationTypeDefinition, f.BRACE_R);
                return this.node(e, {
                    kind: m.h.SCHEMA_DEFINITION,
                    description: t,
                    directives: n,
                    operationTypes: r
                })
            }
            parseOperationTypeDefinition() {
                let e = this._lexer.token
                  , t = this.parseOperationType();
                this.expectToken(f.COLON);
                let n = this.parseNamedType();
                return this.node(e, {
                    kind: m.h.OPERATION_TYPE_DEFINITION,
                    operation: t,
                    type: n
                })
            }
            parseScalarTypeDefinition() {
                let e = this._lexer.token
                  , t = this.parseDescription();
                this.expectKeyword("scalar");
                let n = this.parseName()
                  , r = this.parseConstDirectives();
                return this.node(e, {
                    kind: m.h.SCALAR_TYPE_DEFINITION,
                    description: t,
                    name: n,
                    directives: r
                })
            }
            parseObjectTypeDefinition() {
                let e = this._lexer.token
                  , t = this.parseDescription();
                this.expectKeyword("type");
                let n = this.parseName()
                  , r = this.parseImplementsInterfaces()
                  , i = this.parseConstDirectives()
                  , a = this.parseFieldsDefinition();
                return this.node(e, {
                    kind: m.h.OBJECT_TYPE_DEFINITION,
                    description: t,
                    name: n,
                    interfaces: r,
                    directives: i,
                    fields: a
                })
            }
            parseImplementsInterfaces() {
                return this.expectOptionalKeyword("implements") ? this.delimitedMany(f.AMP, this.parseNamedType) : []
            }
            parseFieldsDefinition() {
                return this.optionalMany(f.BRACE_L, this.parseFieldDefinition, f.BRACE_R)
            }
            parseFieldDefinition() {
                let e = this._lexer.token
                  , t = this.parseDescription()
                  , n = this.parseName()
                  , r = this.parseArgumentDefs();
                this.expectToken(f.COLON);
                let i = this.parseTypeReference()
                  , a = this.parseConstDirectives();
                return this.node(e, {
                    kind: m.h.FIELD_DEFINITION,
                    description: t,
                    name: n,
                    arguments: r,
                    type: i,
                    directives: a
                })
            }
            parseArgumentDefs() {
                return this.optionalMany(f.PAREN_L, this.parseInputValueDef, f.PAREN_R)
            }
            parseInputValueDef() {
                let e;
                let t = this._lexer.token
                  , n = this.parseDescription()
                  , r = this.parseName();
                this.expectToken(f.COLON);
                let i = this.parseTypeReference();
                this.expectOptionalToken(f.EQUALS) && (e = this.parseConstValueLiteral());
                let a = this.parseConstDirectives();
                return this.node(t, {
                    kind: m.h.INPUT_VALUE_DEFINITION,
                    description: n,
                    name: r,
                    type: i,
                    defaultValue: e,
                    directives: a
                })
            }
            parseInterfaceTypeDefinition() {
                let e = this._lexer.token
                  , t = this.parseDescription();
                this.expectKeyword("interface");
                let n = this.parseName()
                  , r = this.parseImplementsInterfaces()
                  , i = this.parseConstDirectives()
                  , a = this.parseFieldsDefinition();
                return this.node(e, {
                    kind: m.h.INTERFACE_TYPE_DEFINITION,
                    description: t,
                    name: n,
                    interfaces: r,
                    directives: i,
                    fields: a
                })
            }
            parseUnionTypeDefinition() {
                let e = this._lexer.token
                  , t = this.parseDescription();
                this.expectKeyword("union");
                let n = this.parseName()
                  , r = this.parseConstDirectives()
                  , i = this.parseUnionMemberTypes();
                return this.node(e, {
                    kind: m.h.UNION_TYPE_DEFINITION,
                    description: t,
                    name: n,
                    directives: r,
                    types: i
                })
            }
            parseUnionMemberTypes() {
                return this.expectOptionalToken(f.EQUALS) ? this.delimitedMany(f.PIPE, this.parseNamedType) : []
            }
            parseEnumTypeDefinition() {
                let e = this._lexer.token
                  , t = this.parseDescription();
                this.expectKeyword("enum");
                let n = this.parseName()
                  , r = this.parseConstDirectives()
                  , i = this.parseEnumValuesDefinition();
                return this.node(e, {
                    kind: m.h.ENUM_TYPE_DEFINITION,
                    description: t,
                    name: n,
                    directives: r,
                    values: i
                })
            }
            parseEnumValuesDefinition() {
                return this.optionalMany(f.BRACE_L, this.parseEnumValueDefinition, f.BRACE_R)
            }
            parseEnumValueDefinition() {
                let e = this._lexer.token
                  , t = this.parseDescription()
                  , n = this.parseEnumValueName()
                  , r = this.parseConstDirectives();
                return this.node(e, {
                    kind: m.h.ENUM_VALUE_DEFINITION,
                    description: t,
                    name: n,
                    directives: r
                })
            }
            parseEnumValueName() {
                if ("true" === this._lexer.token.value || "false" === this._lexer.token.value || "null" === this._lexer.token.value)
                    throw l(this._lexer.source, this._lexer.token.start, `${D(this._lexer.token)} is reserved and cannot be used for an enum value.`);
                return this.parseName()
            }
            parseInputObjectTypeDefinition() {
                let e = this._lexer.token
                  , t = this.parseDescription();
                this.expectKeyword("input");
                let n = this.parseName()
                  , r = this.parseConstDirectives()
                  , i = this.parseInputFieldsDefinition();
                return this.node(e, {
                    kind: m.h.INPUT_OBJECT_TYPE_DEFINITION,
                    description: t,
                    name: n,
                    directives: r,
                    fields: i
                })
            }
            parseInputFieldsDefinition() {
                return this.optionalMany(f.BRACE_L, this.parseInputValueDef, f.BRACE_R)
            }
            parseTypeSystemExtension() {
                let e = this._lexer.lookahead();
                if (e.kind === f.NAME)
                    switch (e.value) {
                    case "schema":
                        return this.parseSchemaExtension();
                    case "scalar":
                        return this.parseScalarTypeExtension();
                    case "type":
                        return this.parseObjectTypeExtension();
                    case "interface":
                        return this.parseInterfaceTypeExtension();
                    case "union":
                        return this.parseUnionTypeExtension();
                    case "enum":
                        return this.parseEnumTypeExtension();
                    case "input":
                        return this.parseInputObjectTypeExtension()
                    }
                throw this.unexpected(e)
            }
            parseSchemaExtension() {
                let e = this._lexer.token;
                this.expectKeyword("extend"),
                this.expectKeyword("schema");
                let t = this.parseConstDirectives()
                  , n = this.optionalMany(f.BRACE_L, this.parseOperationTypeDefinition, f.BRACE_R);
                if (0 === t.length && 0 === n.length)
                    throw this.unexpected();
                return this.node(e, {
                    kind: m.h.SCHEMA_EXTENSION,
                    directives: t,
                    operationTypes: n
                })
            }
            parseScalarTypeExtension() {
                let e = this._lexer.token;
                this.expectKeyword("extend"),
                this.expectKeyword("scalar");
                let t = this.parseName()
                  , n = this.parseConstDirectives();
                if (0 === n.length)
                    throw this.unexpected();
                return this.node(e, {
                    kind: m.h.SCALAR_TYPE_EXTENSION,
                    name: t,
                    directives: n
                })
            }
            parseObjectTypeExtension() {
                let e = this._lexer.token;
                this.expectKeyword("extend"),
                this.expectKeyword("type");
                let t = this.parseName()
                  , n = this.parseImplementsInterfaces()
                  , r = this.parseConstDirectives()
                  , i = this.parseFieldsDefinition();
                if (0 === n.length && 0 === r.length && 0 === i.length)
                    throw this.unexpected();
                return this.node(e, {
                    kind: m.h.OBJECT_TYPE_EXTENSION,
                    name: t,
                    interfaces: n,
                    directives: r,
                    fields: i
                })
            }
            parseInterfaceTypeExtension() {
                let e = this._lexer.token;
                this.expectKeyword("extend"),
                this.expectKeyword("interface");
                let t = this.parseName()
                  , n = this.parseImplementsInterfaces()
                  , r = this.parseConstDirectives()
                  , i = this.parseFieldsDefinition();
                if (0 === n.length && 0 === r.length && 0 === i.length)
                    throw this.unexpected();
                return this.node(e, {
                    kind: m.h.INTERFACE_TYPE_EXTENSION,
                    name: t,
                    interfaces: n,
                    directives: r,
                    fields: i
                })
            }
            parseUnionTypeExtension() {
                let e = this._lexer.token;
                this.expectKeyword("extend"),
                this.expectKeyword("union");
                let t = this.parseName()
                  , n = this.parseConstDirectives()
                  , r = this.parseUnionMemberTypes();
                if (0 === n.length && 0 === r.length)
                    throw this.unexpected();
                return this.node(e, {
                    kind: m.h.UNION_TYPE_EXTENSION,
                    name: t,
                    directives: n,
                    types: r
                })
            }
            parseEnumTypeExtension() {
                let e = this._lexer.token;
                this.expectKeyword("extend"),
                this.expectKeyword("enum");
                let t = this.parseName()
                  , n = this.parseConstDirectives()
                  , r = this.parseEnumValuesDefinition();
                if (0 === n.length && 0 === r.length)
                    throw this.unexpected();
                return this.node(e, {
                    kind: m.h.ENUM_TYPE_EXTENSION,
                    name: t,
                    directives: n,
                    values: r
                })
            }
            parseInputObjectTypeExtension() {
                let e = this._lexer.token;
                this.expectKeyword("extend"),
                this.expectKeyword("input");
                let t = this.parseName()
                  , n = this.parseConstDirectives()
                  , r = this.parseInputFieldsDefinition();
                if (0 === n.length && 0 === r.length)
                    throw this.unexpected();
                return this.node(e, {
                    kind: m.h.INPUT_OBJECT_TYPE_EXTENSION,
                    name: t,
                    directives: n,
                    fields: r
                })
            }
            parseDirectiveDefinition() {
                let e = this._lexer.token
                  , t = this.parseDescription();
                this.expectKeyword("directive"),
                this.expectToken(f.AT);
                let n = this.parseName()
                  , r = this.parseArgumentDefs()
                  , i = this.expectOptionalKeyword("repeatable");
                this.expectKeyword("on");
                let a = this.parseDirectiveLocations();
                return this.node(e, {
                    kind: m.h.DIRECTIVE_DEFINITION,
                    description: t,
                    name: n,
                    arguments: r,
                    repeatable: i,
                    locations: a
                })
            }
            parseDirectiveLocations() {
                return this.delimitedMany(f.PIPE, this.parseDirectiveLocation)
            }
            parseDirectiveLocation() {
                let e = this._lexer.token
                  , t = this.parseName();
                if (Object.prototype.hasOwnProperty.call(p, t.value))
                    return t;
                throw this.unexpected(e)
            }
            node(e, t) {
                return !0 !== this._options.noLocation && (t.loc = new h.Ye(e,this._lexer.lastToken,this._lexer.source)),
                t
            }
            peek(e) {
                return this._lexer.token.kind === e
            }
            expectToken(e) {
                let t = this._lexer.token;
                if (t.kind === e)
                    return this.advanceLexer(),
                    t;
                throw l(this._lexer.source, t.start, `Expected ${M(e)}, found ${D(t)}.`)
            }
            expectOptionalToken(e) {
                let t = this._lexer.token;
                return t.kind === e && (this.advanceLexer(),
                !0)
            }
            expectKeyword(e) {
                let t = this._lexer.token;
                if (t.kind === f.NAME && t.value === e)
                    this.advanceLexer();
                else
                    throw l(this._lexer.source, t.start, `Expected "${e}", found ${D(t)}.`)
            }
            expectOptionalKeyword(e) {
                let t = this._lexer.token;
                return t.kind === f.NAME && t.value === e && (this.advanceLexer(),
                !0)
            }
            unexpected(e) {
                let t = null != e ? e : this._lexer.token;
                return l(this._lexer.source, t.start, `Unexpected ${D(t)}.`)
            }
            any(e, t, n) {
                this.expectToken(e);
                let r = [];
                for (; !this.expectOptionalToken(n); )
                    r.push(t.call(this));
                return r
            }
            optionalMany(e, t, n) {
                if (this.expectOptionalToken(e)) {
                    let e = [];
                    do
                        e.push(t.call(this));
                    while (!this.expectOptionalToken(n));
                    return e
                }
                return []
            }
            many(e, t, n) {
                this.expectToken(e);
                let r = [];
                do
                    r.push(t.call(this));
                while (!this.expectOptionalToken(n));
                return r
            }
            delimitedMany(e, t) {
                this.expectOptionalToken(e);
                let n = [];
                do
                    n.push(t.call(this));
                while (this.expectOptionalToken(e));
                return n
            }
            advanceLexer() {
                let {maxTokens: e} = this._options
                  , t = this._lexer.advance();
                if (void 0 !== e && t.kind !== f.EOF && (++this._tokenCounter,
                this._tokenCounter > e))
                    throw l(this._lexer.source, t.start, `Document contains more that ${e} tokens. Parsing aborted.`)
            }
        }
        function D(e) {
            let t = e.value;
            return M(e.kind) + (null != t ? ` "${t}"` : "")
        }
        function M(e) {
            return e === f.BANG || e === f.DOLLAR || e === f.AMP || e === f.PAREN_L || e === f.PAREN_R || e === f.SPREAD || e === f.COLON || e === f.EQUALS || e === f.AT || e === f.BRACKET_L || e === f.BRACKET_R || e === f.BRACE_L || e === f.PIPE || e === f.BRACE_R ? `"${e}"` : e
        }
    },
    24308: function(e, t, n) {
        "use strict";
        n.r(t),
        n.d(t, {
            print: function() {
                return p
            }
        });
        var r = n(99408);
        let i = /[\x00-\x1f\x22\x5c\x7f-\x9f]/g;
        function a(e) {
            return o[e.charCodeAt(0)]
        }
        let o = ["\\u0000", "\\u0001", "\\u0002", "\\u0003", "\\u0004", "\\u0005", "\\u0006", "\\u0007", "\\b", "\\t", "\\n", "\\u000B", "\\f", "\\r", "\\u000E", "\\u000F", "\\u0010", "\\u0011", "\\u0012", "\\u0013", "\\u0014", "\\u0015", "\\u0016", "\\u0017", "\\u0018", "\\u0019", "\\u001A", "\\u001B", "\\u001C", "\\u001D", "\\u001E", "\\u001F", "", "", '\\"', "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "\\\\", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "\\u007F", "\\u0080", "\\u0081", "\\u0082", "\\u0083", "\\u0084", "\\u0085", "\\u0086", "\\u0087", "\\u0088", "\\u0089", "\\u008A", "\\u008B", "\\u008C", "\\u008D", "\\u008E", "\\u008F", "\\u0090", "\\u0091", "\\u0092", "\\u0093", "\\u0094", "\\u0095", "\\u0096", "\\u0097", "\\u0098", "\\u0099", "\\u009A", "\\u009B", "\\u009C", "\\u009D", "\\u009E", "\\u009F"];
        var s = n(34962)
          , u = n(77150)
          , l = n(48500)
          , c = n(16334);
        let d = Object.freeze({});
        function p(e) {
            return function(e, t, n=l.h8) {
                let r, i, a;
                let o = new Map;
                for (let e of Object.values(c.h))
                    o.set(e, function(e, t) {
                        let n = e[t];
                        return "object" == typeof n ? n : "function" == typeof n ? {
                            enter: n,
                            leave: void 0
                        } : {
                            enter: e.enter,
                            leave: e.leave
                        }
                    }(t, e));
                let p = Array.isArray(e)
                  , f = [e]
                  , h = -1
                  , m = []
                  , y = e
                  , g = []
                  , b = [];
                do {
                    var v, w, T;
                    let e;
                    h++;
                    let c = h === f.length
                      , E = c && 0 !== m.length;
                    if (c) {
                        if (i = 0 === b.length ? void 0 : g[g.length - 1],
                        y = a,
                        a = b.pop(),
                        E) {
                            if (p) {
                                y = y.slice();
                                let e = 0;
                                for (let[t,n] of m) {
                                    let r = t - e;
                                    null === n ? (y.splice(r, 1),
                                    e++) : y[r] = n
                                }
                            } else
                                for (let[e,t] of (y = Object.defineProperties({}, Object.getOwnPropertyDescriptors(y)),
                                m))
                                    y[e] = t
                        }
                        h = r.index,
                        f = r.keys,
                        m = r.edits,
                        p = r.inArray,
                        r = r.prev
                    } else if (a) {
                        if (null == (y = a[i = p ? h : f[h]]))
                            continue;
                        g.push(i)
                    }
                    if (!Array.isArray(y)) {
                        (0,
                        l.UG)(y) || (0,
                        s.a)(!1, `Invalid AST Node: ${(0,
                        u.X)(y)}.`);
                        let n = c ? null === (v = o.get(y.kind)) || void 0 === v ? void 0 : v.leave : null === (w = o.get(y.kind)) || void 0 === w ? void 0 : w.enter;
                        if ((e = null == n ? void 0 : n.call(t, y, i, a, g, b)) === d)
                            break;
                        if (!1 === e) {
                            if (!c) {
                                g.pop();
                                continue
                            }
                        } else if (void 0 !== e && (m.push([i, e]),
                        !c)) {
                            if ((0,
                            l.UG)(e))
                                y = e;
                            else {
                                g.pop();
                                continue
                            }
                        }
                    }
                    void 0 === e && E && m.push([i, y]),
                    c ? g.pop() : (r = {
                        inArray: p,
                        index: h,
                        keys: f,
                        edits: m,
                        prev: r
                    },
                    f = (p = Array.isArray(y)) ? y : null !== (T = n[y.kind]) && void 0 !== T ? T : [],
                    h = -1,
                    m = [],
                    a && b.push(a),
                    a = y)
                } while (void 0 !== r);
                return 0 !== m.length ? m[m.length - 1][1] : e
            }(e, f)
        }
        let f = {
            Name: {
                leave: e=>e.value
            },
            Variable: {
                leave: e=>"$" + e.name
            },
            Document: {
                leave: e=>h(e.definitions, "\n\n")
            },
            OperationDefinition: {
                leave(e) {
                    let t = y("(", h(e.variableDefinitions, ", "), ")")
                      , n = h([e.operation, h([e.name, t]), h(e.directives, " ")], " ");
                    return ("query" === n ? "" : n + " ") + e.selectionSet
                }
            },
            VariableDefinition: {
                leave: ({variable: e, type: t, defaultValue: n, directives: r})=>e + ": " + t + y(" = ", n) + y(" ", h(r, " "))
            },
            SelectionSet: {
                leave: ({selections: e})=>m(e)
            },
            Field: {
                leave({alias: e, name: t, arguments: n, directives: r, selectionSet: i}) {
                    let a = y("", e, ": ") + t
                      , o = a + y("(", h(n, ", "), ")");
                    return o.length > 80 && (o = a + y("(\n", g(h(n, "\n")), "\n)")),
                    h([o, h(r, " "), i], " ")
                }
            },
            Argument: {
                leave: ({name: e, value: t})=>e + ": " + t
            },
            FragmentSpread: {
                leave: ({name: e, directives: t})=>"..." + e + y(" ", h(t, " "))
            },
            InlineFragment: {
                leave: ({typeCondition: e, directives: t, selectionSet: n})=>h(["...", y("on ", e), h(t, " "), n], " ")
            },
            FragmentDefinition: {
                leave: ({name: e, typeCondition: t, variableDefinitions: n, directives: r, selectionSet: i})=>`fragment ${e}${y("(", h(n, ", "), ")")} on ${t} ${y("", h(r, " "), " ")}` + i
            },
            IntValue: {
                leave: ({value: e})=>e
            },
            FloatValue: {
                leave: ({value: e})=>e
            },
            StringValue: {
                leave: ({value: e, block: t})=>t ? (0,
                r.LZ)(e) : `"${e.replace(i, a)}"`
            },
            BooleanValue: {
                leave: ({value: e})=>e ? "true" : "false"
            },
            NullValue: {
                leave: ()=>"null"
            },
            EnumValue: {
                leave: ({value: e})=>e
            },
            ListValue: {
                leave: ({values: e})=>"[" + h(e, ", ") + "]"
            },
            ObjectValue: {
                leave: ({fields: e})=>"{" + h(e, ", ") + "}"
            },
            ObjectField: {
                leave: ({name: e, value: t})=>e + ": " + t
            },
            Directive: {
                leave: ({name: e, arguments: t})=>"@" + e + y("(", h(t, ", "), ")")
            },
            NamedType: {
                leave: ({name: e})=>e
            },
            ListType: {
                leave: ({type: e})=>"[" + e + "]"
            },
            NonNullType: {
                leave: ({type: e})=>e + "!"
            },
            SchemaDefinition: {
                leave: ({description: e, directives: t, operationTypes: n})=>y("", e, "\n") + h(["schema", h(t, " "), m(n)], " ")
            },
            OperationTypeDefinition: {
                leave: ({operation: e, type: t})=>e + ": " + t
            },
            ScalarTypeDefinition: {
                leave: ({description: e, name: t, directives: n})=>y("", e, "\n") + h(["scalar", t, h(n, " ")], " ")
            },
            ObjectTypeDefinition: {
                leave: ({description: e, name: t, interfaces: n, directives: r, fields: i})=>y("", e, "\n") + h(["type", t, y("implements ", h(n, " & ")), h(r, " "), m(i)], " ")
            },
            FieldDefinition: {
                leave: ({description: e, name: t, arguments: n, type: r, directives: i})=>y("", e, "\n") + t + (b(n) ? y("(\n", g(h(n, "\n")), "\n)") : y("(", h(n, ", "), ")")) + ": " + r + y(" ", h(i, " "))
            },
            InputValueDefinition: {
                leave: ({description: e, name: t, type: n, defaultValue: r, directives: i})=>y("", e, "\n") + h([t + ": " + n, y("= ", r), h(i, " ")], " ")
            },
            InterfaceTypeDefinition: {
                leave: ({description: e, name: t, interfaces: n, directives: r, fields: i})=>y("", e, "\n") + h(["interface", t, y("implements ", h(n, " & ")), h(r, " "), m(i)], " ")
            },
            UnionTypeDefinition: {
                leave: ({description: e, name: t, directives: n, types: r})=>y("", e, "\n") + h(["union", t, h(n, " "), y("= ", h(r, " | "))], " ")
            },
            EnumTypeDefinition: {
                leave: ({description: e, name: t, directives: n, values: r})=>y("", e, "\n") + h(["enum", t, h(n, " "), m(r)], " ")
            },
            EnumValueDefinition: {
                leave: ({description: e, name: t, directives: n})=>y("", e, "\n") + h([t, h(n, " ")], " ")
            },
            InputObjectTypeDefinition: {
                leave: ({description: e, name: t, directives: n, fields: r})=>y("", e, "\n") + h(["input", t, h(n, " "), m(r)], " ")
            },
            DirectiveDefinition: {
                leave: ({description: e, name: t, arguments: n, repeatable: r, locations: i})=>y("", e, "\n") + "directive @" + t + (b(n) ? y("(\n", g(h(n, "\n")), "\n)") : y("(", h(n, ", "), ")")) + (r ? " repeatable" : "") + " on " + h(i, " | ")
            },
            SchemaExtension: {
                leave: ({directives: e, operationTypes: t})=>h(["extend schema", h(e, " "), m(t)], " ")
            },
            ScalarTypeExtension: {
                leave: ({name: e, directives: t})=>h(["extend scalar", e, h(t, " ")], " ")
            },
            ObjectTypeExtension: {
                leave: ({name: e, interfaces: t, directives: n, fields: r})=>h(["extend type", e, y("implements ", h(t, " & ")), h(n, " "), m(r)], " ")
            },
            InterfaceTypeExtension: {
                leave: ({name: e, interfaces: t, directives: n, fields: r})=>h(["extend interface", e, y("implements ", h(t, " & ")), h(n, " "), m(r)], " ")
            },
            UnionTypeExtension: {
                leave: ({name: e, directives: t, types: n})=>h(["extend union", e, h(t, " "), y("= ", h(n, " | "))], " ")
            },
            EnumTypeExtension: {
                leave: ({name: e, directives: t, values: n})=>h(["extend enum", e, h(t, " "), m(n)], " ")
            },
            InputObjectTypeExtension: {
                leave: ({name: e, directives: t, fields: n})=>h(["extend input", e, h(t, " "), m(n)], " ")
            }
        };
        function h(e, t="") {
            var n;
            return null !== (n = null == e ? void 0 : e.filter(e=>e).join(t)) && void 0 !== n ? n : ""
        }
        function m(e) {
            return y("{\n", g(h(e, "\n")), "\n}")
        }
        function y(e, t, n="") {
            return null != t && "" !== t ? e + t + n : ""
        }
        function g(e) {
            return y("  ", e.replace(/\n/g, "\n  "))
        }
        function b(e) {
            var t;
            return null !== (t = null == e ? void 0 : e.some(e=>e.includes("\n"))) && void 0 !== t && t
        }
    },
    88337: function(e, t, n) {
        "use strict";
        n.d(t, {
            dl: function() {
                return s
            },
            wn: function() {
                return l
            }
        });
        var r = n(36284)
          , i = n(4817)
          , a = n(57917)
          , o = [{
            inputs: [{
                components: [{
                    internalType: "address",
                    name: "target",
                    type: "address"
                }, {
                    internalType: "bytes",
                    name: "callData",
                    type: "bytes"
                }],
                internalType: "struct Multicall3.Call[]",
                name: "calls",
                type: "tuple[]"
            }],
            name: "aggregate",
            outputs: [{
                internalType: "uint256",
                name: "blockNumber",
                type: "uint256"
            }, {
                internalType: "bytes[]",
                name: "returnData",
                type: "bytes[]"
            }],
            stateMutability: "payable",
            type: "function"
        }, {
            inputs: [{
                components: [{
                    internalType: "address",
                    name: "target",
                    type: "address"
                }, {
                    internalType: "bool",
                    name: "allowFailure",
                    type: "bool"
                }, {
                    internalType: "bytes",
                    name: "callData",
                    type: "bytes"
                }],
                internalType: "struct Multicall3.Call3[]",
                name: "calls",
                type: "tuple[]"
            }],
            name: "aggregate3",
            outputs: [{
                components: [{
                    internalType: "bool",
                    name: "success",
                    type: "bool"
                }, {
                    internalType: "bytes",
                    name: "returnData",
                    type: "bytes"
                }],
                internalType: "struct Multicall3.Result[]",
                name: "returnData",
                type: "tuple[]"
            }],
            stateMutability: "payable",
            type: "function"
        }, {
            inputs: [{
                components: [{
                    internalType: "address",
                    name: "target",
                    type: "address"
                }, {
                    internalType: "bool",
                    name: "allowFailure",
                    type: "bool"
                }, {
                    internalType: "uint256",
                    name: "value",
                    type: "uint256"
                }, {
                    internalType: "bytes",
                    name: "callData",
                    type: "bytes"
                }],
                internalType: "struct Multicall3.Call3Value[]",
                name: "calls",
                type: "tuple[]"
            }],
            name: "aggregate3Value",
            outputs: [{
                components: [{
                    internalType: "bool",
                    name: "success",
                    type: "bool"
                }, {
                    internalType: "bytes",
                    name: "returnData",
                    type: "bytes"
                }],
                internalType: "struct Multicall3.Result[]",
                name: "returnData",
                type: "tuple[]"
            }],
            stateMutability: "payable",
            type: "function"
        }, {
            inputs: [{
                components: [{
                    internalType: "address",
                    name: "target",
                    type: "address"
                }, {
                    internalType: "bytes",
                    name: "callData",
                    type: "bytes"
                }],
                internalType: "struct Multicall3.Call[]",
                name: "calls",
                type: "tuple[]"
            }],
            name: "blockAndAggregate",
            outputs: [{
                internalType: "uint256",
                name: "blockNumber",
                type: "uint256"
            }, {
                internalType: "bytes32",
                name: "blockHash",
                type: "bytes32"
            }, {
                components: [{
                    internalType: "bool",
                    name: "success",
                    type: "bool"
                }, {
                    internalType: "bytes",
                    name: "returnData",
                    type: "bytes"
                }],
                internalType: "struct Multicall3.Result[]",
                name: "returnData",
                type: "tuple[]"
            }],
            stateMutability: "payable",
            type: "function"
        }, {
            inputs: [],
            name: "getBasefee",
            outputs: [{
                internalType: "uint256",
                name: "basefee",
                type: "uint256"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [{
                internalType: "uint256",
                name: "blockNumber",
                type: "uint256"
            }],
            name: "getBlockHash",
            outputs: [{
                internalType: "bytes32",
                name: "blockHash",
                type: "bytes32"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [],
            name: "getBlockNumber",
            outputs: [{
                internalType: "uint256",
                name: "blockNumber",
                type: "uint256"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [],
            name: "getChainId",
            outputs: [{
                internalType: "uint256",
                name: "chainid",
                type: "uint256"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [],
            name: "getCurrentBlockCoinbase",
            outputs: [{
                internalType: "address",
                name: "coinbase",
                type: "address"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [],
            name: "getCurrentBlockDifficulty",
            outputs: [{
                internalType: "uint256",
                name: "difficulty",
                type: "uint256"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [],
            name: "getCurrentBlockGasLimit",
            outputs: [{
                internalType: "uint256",
                name: "gaslimit",
                type: "uint256"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [],
            name: "getCurrentBlockTimestamp",
            outputs: [{
                internalType: "uint256",
                name: "timestamp",
                type: "uint256"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [{
                internalType: "address",
                name: "addr",
                type: "address"
            }],
            name: "getEthBalance",
            outputs: [{
                internalType: "uint256",
                name: "balance",
                type: "uint256"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [],
            name: "getLastBlockHash",
            outputs: [{
                internalType: "bytes32",
                name: "blockHash",
                type: "bytes32"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [{
                internalType: "bool",
                name: "requireSuccess",
                type: "bool"
            }, {
                components: [{
                    internalType: "address",
                    name: "target",
                    type: "address"
                }, {
                    internalType: "bytes",
                    name: "callData",
                    type: "bytes"
                }],
                internalType: "struct Multicall3.Call[]",
                name: "calls",
                type: "tuple[]"
            }],
            name: "tryAggregate",
            outputs: [{
                components: [{
                    internalType: "bool",
                    name: "success",
                    type: "bool"
                }, {
                    internalType: "bytes",
                    name: "returnData",
                    type: "bytes"
                }],
                internalType: "struct Multicall3.Result[]",
                name: "returnData",
                type: "tuple[]"
            }],
            stateMutability: "payable",
            type: "function"
        }, {
            inputs: [{
                internalType: "bool",
                name: "requireSuccess",
                type: "bool"
            }, {
                components: [{
                    internalType: "address",
                    name: "target",
                    type: "address"
                }, {
                    internalType: "bytes",
                    name: "callData",
                    type: "bytes"
                }],
                internalType: "struct Multicall3.Call[]",
                name: "calls",
                type: "tuple[]"
            }],
            name: "tryBlockAndAggregate",
            outputs: [{
                internalType: "uint256",
                name: "blockNumber",
                type: "uint256"
            }, {
                internalType: "bytes32",
                name: "blockHash",
                type: "bytes32"
            }, {
                components: [{
                    internalType: "bool",
                    name: "success",
                    type: "bool"
                }, {
                    internalType: "bytes",
                    name: "returnData",
                    type: "bytes"
                }],
                internalType: "struct Multicall3.Result[]",
                name: "returnData",
                type: "tuple[]"
            }],
            stateMutability: "payable",
            type: "function"
        }]
          , s = {
            1: "0xcA11bde05977b3631167028862bE2a173976CA11",
            4: "0xcA11bde05977b3631167028862bE2a173976CA11",
            5: "0xcA11bde05977b3631167028862bE2a173976CA11",
            56: "0xcA11bde05977b3631167028862bE2a173976CA11",
            97: "0xcA11bde05977b3631167028862bE2a173976CA11"
        }
          , u = (e,t)=>s[e] ? new i.CH(s[e],o,t) : null;
        function l(e) {
            let t = async function(t, n) {
                let i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : a.a_.BSC
                  , o = u(i, e({
                    chainId: i
                }));
                if (!o)
                    throw Error(`Multicall Provider missing for ${i}`);
                let s = new r.vU(t)
                  , l = n.map(e=>({
                    target: e.address.toLowerCase(),
                    callData: s.encodeFunctionData(e.name, e.params)
                }))
                  , {returnData: c} = await o.callStatic.aggregate(l)
                  , d = c.map((e,t)=>s.decodeFunctionResult(n[t].name, e));
                return d
            }
              , n = async t=>{
                let {abi: n, calls: i, chainId: o=a.a_.BSC, options: s, provider: l} = t
                  , {requireSuccess: c=!0, ...d} = s || {}
                  , p = u(o, l || e({
                    chainId: o
                }));
                if (!p)
                    throw Error(`Multicall Provider missing for ${o}`);
                let f = new r.vU(n)
                  , h = i.map(e=>({
                    target: e.address.toLowerCase(),
                    callData: f.encodeFunctionData(e.name, e.params)
                }))
                  , m = await p.callStatic.tryAggregate(c, h, d)
                  , y = m.map((e,t)=>{
                    let[n,r] = e;
                    return n && "0x" !== r ? f.decodeFunctionResult(i[t].name, r) : null
                }
                );
                return y
            }
              , i = async t=>{
                let {calls: n, chainId: i=a.a_.BSC, allowFailure: o, overrides: s} = t
                  , l = u(i, e({
                    chainId: i
                }));
                if (!l)
                    throw Error(`Multicall Provider missing for ${i}`);
                let c = new WeakMap
                  , d = n.map(e=>{
                    let {abi: t, address: n, name: i, params: a, allowFailure: s} = e
                      , u = c.get(t);
                    u || (u = new r.vU(t),
                    c.set(t, u)),
                    u.fragments.some(e=>e.name === i) || console.error(`${i} missing on ${n}`);
                    let l = u.encodeFunctionData(i, null != a ? a : []);
                    return {
                        target: n.toLowerCase(),
                        allowFailure: o || s,
                        callData: l
                    }
                }
                )
                  , p = await l.callStatic.aggregate3(d, ...s ? [s] : []);
                return p.map((e,t)=>{
                    let {returnData: r, success: i} = e;
                    if (!i || "0x" === r)
                        return null;
                    let {abi: a, name: o} = n[t]
                      , s = c.get(a)
                      , u = null == s ? void 0 : s.decodeFunctionResult(o, r);
                    return u
                }
                )
            }
            ;
            return {
                multicall: t,
                multicallv2: n,
                multicallv3: i
            }
        }
    },
    649: function(e, t, n) {
        "use strict";
        n.d(t, {
            $Z: function() {
                return V
            },
            Cu: function() {
                return N
            },
            Fn: function() {
                return e$
            },
            W4: function() {
                return eH
            },
            cH: function() {
                return nT
            },
            lM: function() {
                return F
            },
            mh: function() {
                return B
            },
            qU: function() {
                return j
            },
            qp: function() {
                return eP
            }
        });
        var r, i, a, o = n(79875), s = n(57917), u = n(37784), l = n(88337), c = n(62385), d = n(21061), p = n(61829), f = n(93348), h = n(34130), m = n(92163), y = n(18874), g = n(93642), b = n(35595), v = n(61230), w = n(28102), T = n(11286), E = n(84098), A = n(46850), x = n(90292), k = n(93018), C = n(22321), _ = n(46256), S = Object.defineProperty, I = (e,t)=>{
            for (var n in t)
                S(e, n, {
                    get: t[n],
                    enumerable: !0
                })
        }
        , P = ((r = P || {})[r.V2 = 0] = "V2",
        r[r.STABLE_SWAP = 1] = "STABLE_SWAP",
        r[r.MIXED = 2] = "MIXED",
        r), B = {};
        I(B, {
            createStableSwapPair: ()=>eu,
            getAllCommonPairs: ()=>eo,
            getBestTradeExactIn: ()=>e_,
            getBestTradeExactOut: ()=>eS,
            isStableSwapPair: ()=>et,
            stableSwapPairsByChainId: ()=>ev
        });
        var O = new s.gG(50n,10000n)
          , N = {
            [s.a_.ETHEREUM]: "0x13f4EA83D0bd40E75C8222255bc855a974568Dd4",
            [s.a_.GOERLI]: "0x9a489505a00cE272eAa5e07Dba6491314CaE3796",
            [s.a_.BSC]: "0x13f4EA83D0bd40E75C8222255bc855a974568Dd4",
            [s.a_.BSC_TESTNET]: "0x9a489505a00cE272eAa5e07Dba6491314CaE3796"
        };
        s.a_.ETHEREUM,
        s.a_.GOERLI,
        s.a_.BSC,
        s.a_.BSC_TESTNET;
        var R = {
            [s.a_.ETHEREUM]: "",
            [s.a_.GOERLI]: "",
            [s.a_.BSC]: "0xa680d27f63Fa5E213C502d1B3Ca1EB6a3C1b31D6",
            [s.a_.BSC_TESTNET]: "0xaE6C14AAA753B3FCaB96149e1E10Bc4EDF39F546"
        }
          , F = {
            [s.a_.ETHEREUM]: [s.FX[s.a_.ETHEREUM], u.gn[s.a_.ETHEREUM], u.AA[s.a_.ETHEREUM], u.Zn],
            [s.a_.GOERLI]: [s.FX[s.a_.GOERLI], u.gn[s.a_.GOERLI], u.lz[s.a_.GOERLI]],
            [s.a_.BSC]: [u.ds.wbnb, u.ds.cake, u.ds.busd, u.ds.usdt, u.ds.btcb, u.ds.eth, u.ds.usdc],
            [s.a_.BSC_TESTNET]: [u.dI.wbnb, u.dI.cake, u.dI.busd]
        }
          , D = {
            [s.a_.BSC]: {
                [u.ds.snfts.address]: [u.ds.sfund],
                [u.ds.ankr.address]: [u.ds.ankrbnb],
                [u.ds.ankrbnb.address]: [u.ds.ankrETH, u.ds.ankr],
                [u.ds.ankrETH.address]: [u.ds.ankrbnb]
            }
        }
          , M = {
            [s.a_.BSC]: {
                [u.ds.axlusdc.address]: [u.ds.usdt]
            }
        };
        s.a_.ETHEREUM,
        u.gn[s.a_.ETHEREUM],
        s.$v[s.a_.ETHEREUM],
        u.lz[s.a_.ETHEREUM],
        u.AA[s.a_.ETHEREUM],
        s.a_.GOERLI,
        u.gn[s.a_.GOERLI],
        s.FX[s.a_.GOERLI],
        u.lz[s.a_.GOERLI],
        s.a_.BSC,
        u.ds.busd,
        u.ds.cake,
        u.ds.btcb,
        s.a_.BSC_TESTNET,
        u.dI.wbnb,
        u.dI.cake,
        u.dI.busd,
        s.a_.ETHEREUM,
        u.gn[s.a_.ETHEREUM],
        s.FX[s.a_.ETHEREUM],
        u.lz[s.a_.ETHEREUM],
        u.AA[s.a_.ETHEREUM],
        s.$v[s.a_.ETHEREUM],
        s.a_.GOERLI,
        u.gn[s.a_.GOERLI],
        s.FX[s.a_.GOERLI],
        u.lz[s.a_.GOERLI],
        s.a_.BSC,
        u.ds.wbnb,
        u.ds.dai,
        u.ds.busd,
        u.ds.usdt,
        u.ds.cake,
        s.a_.BSC_TESTNET,
        u.dI.wbnb,
        u.dI.cake,
        u.dI.busd,
        s.a_.ETHEREUM,
        s.FX[s.a_.ETHEREUM],
        u.gn[s.a_.ETHEREUM],
        s.$v[s.a_.ETHEREUM],
        u.gn[s.a_.ETHEREUM],
        s.$v[s.a_.ETHEREUM],
        u.lz[s.a_.ETHEREUM],
        s.$v[s.a_.ETHEREUM],
        u.AA[s.a_.ETHEREUM],
        s.$v[s.a_.ETHEREUM],
        s.FX[s.a_.ETHEREUM],
        s.a_.BSC,
        u.ds.cake,
        u.ds.wbnb,
        u.ds.busd,
        u.ds.usdt,
        u.ds.dai,
        u.ds.usdt;
        var L = "0x0000000000000000000000000000000000000001"
          , U = "0x0000000000000000000000000000000000000002"
          , q = {
            [s.a_.ETHEREUM]: "0x678Aa4bF4E210cf2166753e054d5b7c31cc7fa86",
            [s.a_.GOERLI]: "0xB048Bbc1Ee6b733FFfCFb9e9CeF7375518e25997",
            [s.a_.BSC]: "0x678Aa4bF4E210cf2166753e054d5b7c31cc7fa86",
            [s.a_.BSC_TESTNET]: "0xB048Bbc1Ee6b733FFfCFb9e9CeF7375518e25997"
        }
          , j = {
            [s.a_.ETHEREUM]: "0xB048Bbc1Ee6b733FFfCFb9e9CeF7375518e25997",
            [s.a_.GOERLI]: "0xbC203d7f83677c7ed3F7acEc959963E7F4ECC5C2",
            [s.a_.BSC]: "0xB048Bbc1Ee6b733FFfCFb9e9CeF7375518e25997",
            [s.a_.BSC_TESTNET]: "0xbC203d7f83677c7ed3F7acEc959963E7F4ECC5C2"
        }
          , $ = e=>{
            switch (e) {
            case s.a_.BSC:
            case s.a_.BSC_TESTNET:
            case s.a_.ETHEREUM:
            case s.a_.GOERLI:
                return 2000n;
            default:
                return 0n
            }
        }
          , Z = e=>{
            switch (e) {
            case s.a_.BSC:
            case s.a_.BSC_TESTNET:
            case s.a_.ETHEREUM:
            case s.a_.GOERLI:
                return 31000n;
            default:
                return 0n
            }
        }
          , H = e=>{
            switch (e) {
            case s.a_.BSC:
            case s.a_.BSC_TESTNET:
            case s.a_.ETHEREUM:
            case s.a_.GOERLI:
                return 80000n;
            default:
                return 0n
            }
        }
          , G = {
            [s.a_.ETHEREUM]: [u.uR.usdt],
            [s.a_.GOERLI]: [u.On.usdc],
            [s.a_.BSC]: [u.ds.busd],
            [s.a_.BSC_TESTNET]: [u.dI.busd]
        }
          , z = {
            [s.a_.ETHEREUM]: u.uR.weth,
            [s.a_.GOERLI]: u.On.weth,
            [s.a_.BSC]: u.ds.wbnb,
            [s.a_.BSC_TESTNET]: u.dI.wbnb
        }
          , V = {
            [s.a_.BSC_TESTNET]: {
                defaultConfig: {
                    multicallChunk: 150,
                    gasLimitOverride: 1e6
                },
                gasErrorFailureOverride: {
                    gasLimitOverride: 1e6,
                    multicallChunk: 30
                },
                successRateFailureOverrides: {
                    gasLimitOverride: 1e6,
                    multicallChunk: 50
                }
            },
            [s.a_.BSC]: {
                defaultConfig: {
                    multicallChunk: 50,
                    gasLimitOverride: 1e6
                },
                gasErrorFailureOverride: {
                    gasLimitOverride: 1e6,
                    multicallChunk: 40
                },
                successRateFailureOverrides: {
                    gasLimitOverride: 1e6,
                    multicallChunk: 45
                }
            },
            [s.a_.ETHEREUM]: {
                defaultConfig: {
                    multicallChunk: 150,
                    gasLimitOverride: 1e6
                },
                gasErrorFailureOverride: {
                    gasLimitOverride: 1e6,
                    multicallChunk: 30
                },
                successRateFailureOverrides: {
                    gasLimitOverride: 1e6,
                    multicallChunk: 40
                }
            },
            [s.a_.GOERLI]: {
                defaultConfig: {
                    multicallChunk: 150,
                    gasLimitOverride: 1e6
                },
                gasErrorFailureOverride: {
                    gasLimitOverride: 1e6,
                    multicallChunk: 30
                },
                successRateFailureOverrides: {
                    gasLimitOverride: 1e6,
                    multicallChunk: 40
                }
            }
        };
        function W(e, t) {
            return (null == e ? void 0 : e.isNative) ? s.FX[t] : (null == e ? void 0 : e.isToken) ? e : void 0
        }
        function K(e, t) {
            let n = e && t ? W(e.currency, t) : void 0;
            return n && e ? s.ih.fromRawAmount(n, e.quotient) : void 0
        }
        var X = [{
            anonymous: !1,
            inputs: [{
                indexed: !0,
                internalType: "address",
                name: "owner",
                type: "address"
            }, {
                indexed: !0,
                internalType: "address",
                name: "spender",
                type: "address"
            }, {
                indexed: !1,
                internalType: "uint256",
                name: "value",
                type: "uint256"
            }],
            name: "Approval",
            type: "event"
        }, {
            anonymous: !1,
            inputs: [{
                indexed: !0,
                internalType: "address",
                name: "sender",
                type: "address"
            }, {
                indexed: !1,
                internalType: "uint256",
                name: "amount0",
                type: "uint256"
            }, {
                indexed: !1,
                internalType: "uint256",
                name: "amount1",
                type: "uint256"
            }, {
                indexed: !0,
                internalType: "address",
                name: "to",
                type: "address"
            }],
            name: "Burn",
            type: "event"
        }, {
            anonymous: !1,
            inputs: [{
                indexed: !0,
                internalType: "address",
                name: "sender",
                type: "address"
            }, {
                indexed: !1,
                internalType: "uint256",
                name: "amount0",
                type: "uint256"
            }, {
                indexed: !1,
                internalType: "uint256",
                name: "amount1",
                type: "uint256"
            }],
            name: "Mint",
            type: "event"
        }, {
            anonymous: !1,
            inputs: [{
                indexed: !0,
                internalType: "address",
                name: "sender",
                type: "address"
            }, {
                indexed: !1,
                internalType: "uint256",
                name: "amount0In",
                type: "uint256"
            }, {
                indexed: !1,
                internalType: "uint256",
                name: "amount1In",
                type: "uint256"
            }, {
                indexed: !1,
                internalType: "uint256",
                name: "amount0Out",
                type: "uint256"
            }, {
                indexed: !1,
                internalType: "uint256",
                name: "amount1Out",
                type: "uint256"
            }, {
                indexed: !0,
                internalType: "address",
                name: "to",
                type: "address"
            }],
            name: "Swap",
            type: "event"
        }, {
            anonymous: !1,
            inputs: [{
                indexed: !1,
                internalType: "uint112",
                name: "reserve0",
                type: "uint112"
            }, {
                indexed: !1,
                internalType: "uint112",
                name: "reserve1",
                type: "uint112"
            }],
            name: "Sync",
            type: "event"
        }, {
            anonymous: !1,
            inputs: [{
                indexed: !0,
                internalType: "address",
                name: "from",
                type: "address"
            }, {
                indexed: !0,
                internalType: "address",
                name: "to",
                type: "address"
            }, {
                indexed: !1,
                internalType: "uint256",
                name: "value",
                type: "uint256"
            }],
            name: "Transfer",
            type: "event"
        }, {
            inputs: [],
            name: "DOMAIN_SEPARATOR",
            outputs: [{
                internalType: "bytes32",
                name: "",
                type: "bytes32"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [],
            name: "MINIMUM_LIQUIDITY",
            outputs: [{
                internalType: "uint256",
                name: "",
                type: "uint256"
            }],
            stateMutability: "pure",
            type: "function"
        }, {
            inputs: [],
            name: "PERMIT_TYPEHASH",
            outputs: [{
                internalType: "bytes32",
                name: "",
                type: "bytes32"
            }],
            stateMutability: "pure",
            type: "function"
        }, {
            inputs: [{
                internalType: "address",
                name: "owner",
                type: "address"
            }, {
                internalType: "address",
                name: "spender",
                type: "address"
            }],
            name: "allowance",
            outputs: [{
                internalType: "uint256",
                name: "",
                type: "uint256"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [{
                internalType: "address",
                name: "spender",
                type: "address"
            }, {
                internalType: "uint256",
                name: "value",
                type: "uint256"
            }],
            name: "approve",
            outputs: [{
                internalType: "bool",
                name: "",
                type: "bool"
            }],
            stateMutability: "nonpayable",
            type: "function"
        }, {
            inputs: [{
                internalType: "address",
                name: "owner",
                type: "address"
            }],
            name: "balanceOf",
            outputs: [{
                internalType: "uint256",
                name: "",
                type: "uint256"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [{
                internalType: "address",
                name: "to",
                type: "address"
            }],
            name: "burn",
            outputs: [{
                internalType: "uint256",
                name: "amount0",
                type: "uint256"
            }, {
                internalType: "uint256",
                name: "amount1",
                type: "uint256"
            }],
            stateMutability: "nonpayable",
            type: "function"
        }, {
            inputs: [],
            name: "decimals",
            outputs: [{
                internalType: "uint8",
                name: "",
                type: "uint8"
            }],
            stateMutability: "pure",
            type: "function"
        }, {
            inputs: [],
            name: "factory",
            outputs: [{
                internalType: "address",
                name: "",
                type: "address"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [],
            name: "getReserves",
            outputs: [{
                internalType: "uint112",
                name: "reserve0",
                type: "uint112"
            }, {
                internalType: "uint112",
                name: "reserve1",
                type: "uint112"
            }, {
                internalType: "uint32",
                name: "blockTimestampLast",
                type: "uint32"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [{
                internalType: "address",
                name: "",
                type: "address"
            }, {
                internalType: "address",
                name: "",
                type: "address"
            }],
            name: "initialize",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function"
        }, {
            inputs: [],
            name: "kLast",
            outputs: [{
                internalType: "uint256",
                name: "",
                type: "uint256"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [{
                internalType: "address",
                name: "to",
                type: "address"
            }],
            name: "mint",
            outputs: [{
                internalType: "uint256",
                name: "liquidity",
                type: "uint256"
            }],
            stateMutability: "nonpayable",
            type: "function"
        }, {
            inputs: [],
            name: "name",
            outputs: [{
                internalType: "string",
                name: "",
                type: "string"
            }],
            stateMutability: "pure",
            type: "function"
        }, {
            inputs: [{
                internalType: "address",
                name: "owner",
                type: "address"
            }],
            name: "nonces",
            outputs: [{
                internalType: "uint256",
                name: "",
                type: "uint256"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [{
                internalType: "address",
                name: "owner",
                type: "address"
            }, {
                internalType: "address",
                name: "spender",
                type: "address"
            }, {
                internalType: "uint256",
                name: "value",
                type: "uint256"
            }, {
                internalType: "uint256",
                name: "deadline",
                type: "uint256"
            }, {
                internalType: "uint8",
                name: "v",
                type: "uint8"
            }, {
                internalType: "bytes32",
                name: "r",
                type: "bytes32"
            }, {
                internalType: "bytes32",
                name: "s",
                type: "bytes32"
            }],
            name: "permit",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function"
        }, {
            inputs: [],
            name: "price0CumulativeLast",
            outputs: [{
                internalType: "uint256",
                name: "",
                type: "uint256"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [],
            name: "price1CumulativeLast",
            outputs: [{
                internalType: "uint256",
                name: "",
                type: "uint256"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [{
                internalType: "address",
                name: "to",
                type: "address"
            }],
            name: "skim",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function"
        }, {
            inputs: [{
                internalType: "uint256",
                name: "amount0Out",
                type: "uint256"
            }, {
                internalType: "uint256",
                name: "amount1Out",
                type: "uint256"
            }, {
                internalType: "address",
                name: "to",
                type: "address"
            }, {
                internalType: "bytes",
                name: "data",
                type: "bytes"
            }],
            name: "swap",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function"
        }, {
            inputs: [],
            name: "symbol",
            outputs: [{
                internalType: "string",
                name: "",
                type: "string"
            }],
            stateMutability: "pure",
            type: "function"
        }, {
            inputs: [],
            name: "sync",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function"
        }, {
            inputs: [],
            name: "token0",
            outputs: [{
                internalType: "address",
                name: "",
                type: "address"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [],
            name: "token1",
            outputs: [{
                internalType: "address",
                name: "",
                type: "address"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [],
            name: "totalSupply",
            outputs: [{
                internalType: "uint256",
                name: "",
                type: "uint256"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [{
                internalType: "address",
                name: "to",
                type: "address"
            }, {
                internalType: "uint256",
                name: "value",
                type: "uint256"
            }],
            name: "transfer",
            outputs: [{
                internalType: "bool",
                name: "",
                type: "bool"
            }],
            stateMutability: "nonpayable",
            type: "function"
        }, {
            inputs: [{
                internalType: "address",
                name: "from",
                type: "address"
            }, {
                internalType: "address",
                name: "to",
                type: "address"
            }, {
                internalType: "uint256",
                name: "value",
                type: "uint256"
            }],
            name: "transferFrom",
            outputs: [{
                internalType: "bool",
                name: "",
                type: "bool"
            }],
            stateMutability: "nonpayable",
            type: "function"
        }];
        async function J(e, t) {
            let {provider: n, chainId: r} = t
              , i = e.map(e=>{
                let[t,n] = e;
                return [W(t, r), W(n, r)]
            }
            )
              , a = i.map(Q)
              , {multicallv2: o} = (0,
            l.wn)(n)
              , u = a.map(e=>({
                address: e,
                name: "getReserves",
                params: []
            }))
              , c = await o({
                abi: X,
                calls: u,
                chainId: r,
                options: {
                    requireSuccess: !1
                }
            })
              , d = c.map((e,t)=>{
                if (!e)
                    return [1, null];
                let n = i[t][0]
                  , r = i[t][1];
                if (!n || !r || n.equals(r))
                    return [3, null];
                let[a,o] = n.sortsBefore(r) ? [n, r] : [r, n]
                  , {reserve0: u, reserve1: l} = e;
                return [2, new s.sO(s.ih.fromRawAmount(a, u.toString()),s.ih.fromRawAmount(o, l.toString()))]
            }
            )
              , p = d.filter(e=>!!(2 === e[0] && e[1]));
            return p.map(e=>{
                let[,t] = e;
                return t
            }
            )
        }
        function Q(e) {
            let[t,n] = e
              , r = "";
            try {
                r = t && n && !t.equals(n) ? s.sO.getAddress(t, n) : ""
            } catch (e) {
                console.error(e.msg, `- pairAddresses: ${null == t ? void 0 : t.address}-${null == n ? void 0 : n.address}`, `chainId: ${null == t ? void 0 : t.chainId}`)
            }
            return r
        }
        function Y(e, t) {
            let {token0: n, token1: r} = e;
            return n.wrapped.equals(t.wrapped) || r.wrapped.equals(t.wrapped)
        }
        function ee(e, t) {
            return t.wrapped.equals(e.token0.wrapped) ? e.token1 : e.token0
        }
        function et(e) {
            return !!e.stableSwapAddress
        }
        var en = [{
            inputs: [],
            stateMutability: "nonpayable",
            type: "constructor"
        }, {
            anonymous: !1,
            inputs: [{
                indexed: !0,
                internalType: "address",
                name: "provider",
                type: "address"
            }, {
                indexed: !1,
                internalType: "uint256[2]",
                name: "token_amounts",
                type: "uint256[2]"
            }, {
                indexed: !1,
                internalType: "uint256[2]",
                name: "fees",
                type: "uint256[2]"
            }, {
                indexed: !1,
                internalType: "uint256",
                name: "invariant",
                type: "uint256"
            }, {
                indexed: !1,
                internalType: "uint256",
                name: "token_supply",
                type: "uint256"
            }],
            name: "AddLiquidity",
            type: "event"
        }, {
            anonymous: !1,
            inputs: [{
                indexed: !0,
                internalType: "uint256",
                name: "deadline",
                type: "uint256"
            }, {
                indexed: !1,
                internalType: "uint256",
                name: "fee",
                type: "uint256"
            }, {
                indexed: !1,
                internalType: "uint256",
                name: "admin_fee",
                type: "uint256"
            }],
            name: "CommitNewFee",
            type: "event"
        }, {
            anonymous: !1,
            inputs: [],
            name: "DonateAdminFees",
            type: "event"
        }, {
            anonymous: !1,
            inputs: [],
            name: "Kill",
            type: "event"
        }, {
            anonymous: !1,
            inputs: [{
                indexed: !1,
                internalType: "uint256",
                name: "fee",
                type: "uint256"
            }, {
                indexed: !1,
                internalType: "uint256",
                name: "admin_fee",
                type: "uint256"
            }],
            name: "NewFee",
            type: "event"
        }, {
            anonymous: !1,
            inputs: [{
                indexed: !0,
                internalType: "address",
                name: "previousOwner",
                type: "address"
            }, {
                indexed: !0,
                internalType: "address",
                name: "newOwner",
                type: "address"
            }],
            name: "OwnershipTransferred",
            type: "event"
        }, {
            anonymous: !1,
            inputs: [{
                indexed: !1,
                internalType: "uint256",
                name: "old_A",
                type: "uint256"
            }, {
                indexed: !1,
                internalType: "uint256",
                name: "new_A",
                type: "uint256"
            }, {
                indexed: !1,
                internalType: "uint256",
                name: "initial_time",
                type: "uint256"
            }, {
                indexed: !1,
                internalType: "uint256",
                name: "future_time",
                type: "uint256"
            }],
            name: "RampA",
            type: "event"
        }, {
            anonymous: !1,
            inputs: [{
                indexed: !0,
                internalType: "address",
                name: "provider",
                type: "address"
            }, {
                indexed: !1,
                internalType: "uint256[2]",
                name: "token_amounts",
                type: "uint256[2]"
            }, {
                indexed: !1,
                internalType: "uint256[2]",
                name: "fees",
                type: "uint256[2]"
            }, {
                indexed: !1,
                internalType: "uint256",
                name: "token_supply",
                type: "uint256"
            }],
            name: "RemoveLiquidity",
            type: "event"
        }, {
            anonymous: !1,
            inputs: [{
                indexed: !0,
                internalType: "address",
                name: "provider",
                type: "address"
            }, {
                indexed: !1,
                internalType: "uint256[2]",
                name: "token_amounts",
                type: "uint256[2]"
            }, {
                indexed: !1,
                internalType: "uint256[2]",
                name: "fees",
                type: "uint256[2]"
            }, {
                indexed: !1,
                internalType: "uint256",
                name: "invariant",
                type: "uint256"
            }, {
                indexed: !1,
                internalType: "uint256",
                name: "token_supply",
                type: "uint256"
            }],
            name: "RemoveLiquidityImbalance",
            type: "event"
        }, {
            anonymous: !1,
            inputs: [{
                indexed: !0,
                internalType: "address",
                name: "provider",
                type: "address"
            }, {
                indexed: !1,
                internalType: "uint256",
                name: "token_amount",
                type: "uint256"
            }, {
                indexed: !1,
                internalType: "uint256",
                name: "coin_amount",
                type: "uint256"
            }],
            name: "RemoveLiquidityOne",
            type: "event"
        }, {
            anonymous: !1,
            inputs: [],
            name: "RevertParameters",
            type: "event"
        }, {
            anonymous: !1,
            inputs: [{
                indexed: !1,
                internalType: "uint256",
                name: "A",
                type: "uint256"
            }, {
                indexed: !1,
                internalType: "uint256",
                name: "t",
                type: "uint256"
            }],
            name: "StopRampA",
            type: "event"
        }, {
            anonymous: !1,
            inputs: [{
                indexed: !0,
                internalType: "address",
                name: "buyer",
                type: "address"
            }, {
                indexed: !1,
                internalType: "uint256",
                name: "sold_id",
                type: "uint256"
            }, {
                indexed: !1,
                internalType: "uint256",
                name: "tokens_sold",
                type: "uint256"
            }, {
                indexed: !1,
                internalType: "uint256",
                name: "bought_id",
                type: "uint256"
            }, {
                indexed: !1,
                internalType: "uint256",
                name: "tokens_bought",
                type: "uint256"
            }],
            name: "TokenExchange",
            type: "event"
        }, {
            anonymous: !1,
            inputs: [],
            name: "Unkill",
            type: "event"
        }, {
            inputs: [],
            name: "A",
            outputs: [{
                internalType: "uint256",
                name: "",
                type: "uint256"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [],
            name: "ADMIN_ACTIONS_DELAY",
            outputs: [{
                internalType: "uint256",
                name: "",
                type: "uint256"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [],
            name: "FEE_DENOMINATOR",
            outputs: [{
                internalType: "uint256",
                name: "",
                type: "uint256"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [],
            name: "KILL_DEADLINE_DT",
            outputs: [{
                internalType: "uint256",
                name: "",
                type: "uint256"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [],
            name: "MAX_A",
            outputs: [{
                internalType: "uint256",
                name: "",
                type: "uint256"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [],
            name: "MAX_ADMIN_FEE",
            outputs: [{
                internalType: "uint256",
                name: "",
                type: "uint256"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [],
            name: "MAX_A_CHANGE",
            outputs: [{
                internalType: "uint256",
                name: "",
                type: "uint256"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [],
            name: "MAX_DECIMAL",
            outputs: [{
                internalType: "uint256",
                name: "",
                type: "uint256"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [],
            name: "MAX_FEE",
            outputs: [{
                internalType: "uint256",
                name: "",
                type: "uint256"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [],
            name: "MIN_RAMP_TIME",
            outputs: [{
                internalType: "uint256",
                name: "",
                type: "uint256"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [],
            name: "N_COINS",
            outputs: [{
                internalType: "uint256",
                name: "",
                type: "uint256"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [],
            name: "PRECISION",
            outputs: [{
                internalType: "uint256",
                name: "",
                type: "uint256"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [{
                internalType: "uint256",
                name: "",
                type: "uint256"
            }],
            name: "PRECISION_MUL",
            outputs: [{
                internalType: "uint256",
                name: "",
                type: "uint256"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [{
                internalType: "uint256",
                name: "",
                type: "uint256"
            }],
            name: "RATES",
            outputs: [{
                internalType: "uint256",
                name: "",
                type: "uint256"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [],
            name: "STABLESWAP_FACTORY",
            outputs: [{
                internalType: "address",
                name: "",
                type: "address"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [{
                internalType: "uint256[2]",
                name: "amounts",
                type: "uint256[2]"
            }, {
                internalType: "uint256",
                name: "min_mint_amount",
                type: "uint256"
            }],
            name: "add_liquidity",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function"
        }, {
            inputs: [],
            name: "admin_actions_deadline",
            outputs: [{
                internalType: "uint256",
                name: "",
                type: "uint256"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [{
                internalType: "uint256",
                name: "i",
                type: "uint256"
            }],
            name: "admin_balances",
            outputs: [{
                internalType: "uint256",
                name: "",
                type: "uint256"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [],
            name: "admin_fee",
            outputs: [{
                internalType: "uint256",
                name: "",
                type: "uint256"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [],
            name: "apply_new_fee",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function"
        }, {
            inputs: [{
                internalType: "uint256",
                name: "",
                type: "uint256"
            }],
            name: "balances",
            outputs: [{
                internalType: "uint256",
                name: "",
                type: "uint256"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [{
                internalType: "uint256[2]",
                name: "amounts",
                type: "uint256[2]"
            }, {
                internalType: "bool",
                name: "deposit",
                type: "bool"
            }],
            name: "calc_token_amount",
            outputs: [{
                internalType: "uint256",
                name: "",
                type: "uint256"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [{
                internalType: "uint256",
                name: "_token_amount",
                type: "uint256"
            }, {
                internalType: "uint256",
                name: "i",
                type: "uint256"
            }],
            name: "calc_withdraw_one_coin",
            outputs: [{
                internalType: "uint256",
                name: "",
                type: "uint256"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [{
                internalType: "uint256",
                name: "",
                type: "uint256"
            }],
            name: "coins",
            outputs: [{
                internalType: "address",
                name: "",
                type: "address"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [{
                internalType: "uint256",
                name: "new_fee",
                type: "uint256"
            }, {
                internalType: "uint256",
                name: "new_admin_fee",
                type: "uint256"
            }],
            name: "commit_new_fee",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function"
        }, {
            inputs: [],
            name: "donate_admin_fees",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function"
        }, {
            inputs: [{
                internalType: "uint256",
                name: "i",
                type: "uint256"
            }, {
                internalType: "uint256",
                name: "j",
                type: "uint256"
            }, {
                internalType: "uint256",
                name: "dx",
                type: "uint256"
            }, {
                internalType: "uint256",
                name: "min_dy",
                type: "uint256"
            }],
            name: "exchange",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function"
        }, {
            inputs: [],
            name: "fee",
            outputs: [{
                internalType: "uint256",
                name: "",
                type: "uint256"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [],
            name: "future_A",
            outputs: [{
                internalType: "uint256",
                name: "",
                type: "uint256"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [],
            name: "future_A_time",
            outputs: [{
                internalType: "uint256",
                name: "",
                type: "uint256"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [],
            name: "future_admin_fee",
            outputs: [{
                internalType: "uint256",
                name: "",
                type: "uint256"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [],
            name: "future_fee",
            outputs: [{
                internalType: "uint256",
                name: "",
                type: "uint256"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [{
                internalType: "uint256",
                name: "i",
                type: "uint256"
            }, {
                internalType: "uint256",
                name: "j",
                type: "uint256"
            }, {
                internalType: "uint256",
                name: "dx",
                type: "uint256"
            }],
            name: "get_dy",
            outputs: [{
                internalType: "uint256",
                name: "",
                type: "uint256"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [{
                internalType: "uint256",
                name: "i",
                type: "uint256"
            }, {
                internalType: "uint256",
                name: "j",
                type: "uint256"
            }, {
                internalType: "uint256",
                name: "dx",
                type: "uint256"
            }],
            name: "get_dy_underlying",
            outputs: [{
                internalType: "uint256",
                name: "",
                type: "uint256"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [],
            name: "get_virtual_price",
            outputs: [{
                internalType: "uint256",
                name: "",
                type: "uint256"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [],
            name: "initial_A",
            outputs: [{
                internalType: "uint256",
                name: "",
                type: "uint256"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [],
            name: "initial_A_time",
            outputs: [{
                internalType: "uint256",
                name: "",
                type: "uint256"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [{
                internalType: "address[2]",
                name: "_coins",
                type: "address[2]"
            }, {
                internalType: "uint256",
                name: "_A",
                type: "uint256"
            }, {
                internalType: "uint256",
                name: "_fee",
                type: "uint256"
            }, {
                internalType: "uint256",
                name: "_admin_fee",
                type: "uint256"
            }, {
                internalType: "address",
                name: "_owner",
                type: "address"
            }],
            name: "initialize",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function"
        }, {
            inputs: [],
            name: "isInitialized",
            outputs: [{
                internalType: "bool",
                name: "",
                type: "bool"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [],
            name: "is_killed",
            outputs: [{
                internalType: "bool",
                name: "",
                type: "bool"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [],
            name: "kill_deadline",
            outputs: [{
                internalType: "uint256",
                name: "",
                type: "uint256"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [],
            name: "kill_me",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function"
        }, {
            inputs: [],
            name: "owner",
            outputs: [{
                internalType: "address",
                name: "",
                type: "address"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [{
                internalType: "uint256",
                name: "_future_A",
                type: "uint256"
            }, {
                internalType: "uint256",
                name: "_future_time",
                type: "uint256"
            }],
            name: "ramp_A",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function"
        }, {
            inputs: [{
                internalType: "uint256",
                name: "_amount",
                type: "uint256"
            }, {
                internalType: "uint256[2]",
                name: "min_amounts",
                type: "uint256[2]"
            }],
            name: "remove_liquidity",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function"
        }, {
            inputs: [{
                internalType: "uint256[2]",
                name: "amounts",
                type: "uint256[2]"
            }, {
                internalType: "uint256",
                name: "max_burn_amount",
                type: "uint256"
            }],
            name: "remove_liquidity_imbalance",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function"
        }, {
            inputs: [{
                internalType: "uint256",
                name: "_token_amount",
                type: "uint256"
            }, {
                internalType: "uint256",
                name: "i",
                type: "uint256"
            }, {
                internalType: "uint256",
                name: "min_amount",
                type: "uint256"
            }],
            name: "remove_liquidity_one_coin",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function"
        }, {
            inputs: [],
            name: "renounceOwnership",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function"
        }, {
            inputs: [],
            name: "revert_new_parameters",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function"
        }, {
            inputs: [],
            name: "stop_rampget_A",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function"
        }, {
            inputs: [],
            name: "token",
            outputs: [{
                internalType: "contract PancakeStableSwapLP",
                name: "",
                type: "address"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [{
                internalType: "address",
                name: "newOwner",
                type: "address"
            }],
            name: "transferOwnership",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function"
        }, {
            inputs: [],
            name: "unkill_me",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function"
        }, {
            inputs: [],
            name: "withdraw_admin_fees",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function"
        }];
        async function er(e, t, n) {
            let {provider: r} = n
              , {multicallv2: i} = (0,
            l.wn)(r)
              , a = K(t, t.currency.chainId);
            if (!a)
                throw Error(`No wrapped token amount found for input amount: ${t.currency.name}`);
            let o = t.currency.chainId
              , u = a.currency
              , c = ee(e, u)
              , d = t.wrapped.quotient.toString()
              , p = e.token0.equals(c)
              , f = {
                address: e.stableSwapAddress,
                name: "get_dy",
                params: p ? [1, 0, d] : [0, 1, d]
            }
              , h = await i({
                abi: en,
                calls: [f],
                chainId: o,
                options: {
                    requireSuccess: !0
                }
            });
            return s.ih.fromRawAmount(c, h.toString())
        }
        var ei = [{
            inputs: [],
            name: "FEE_DENOMINATOR",
            outputs: [{
                internalType: "uint256",
                name: "",
                type: "uint256"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [],
            name: "N_COINS",
            outputs: [{
                internalType: "uint256",
                name: "",
                type: "uint256"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [],
            name: "PRECISION",
            outputs: [{
                internalType: "uint256",
                name: "",
                type: "uint256"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [{
                internalType: "address",
                name: "_swap",
                type: "address"
            }],
            name: "PRECISION_MUL",
            outputs: [{
                internalType: "uint256[2]",
                name: "swapPRECISION_MUL",
                type: "uint256[2]"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [{
                internalType: "address",
                name: "_swap",
                type: "address"
            }],
            name: "RATES",
            outputs: [{
                internalType: "uint256[2]",
                name: "swapRATES",
                type: "uint256[2]"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [{
                internalType: "address",
                name: "_swap",
                type: "address"
            }, {
                internalType: "uint256[2]",
                name: "_balances",
                type: "uint256[2]"
            }],
            name: "_xp_mem",
            outputs: [{
                internalType: "uint256[2]",
                name: "result",
                type: "uint256[2]"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [{
                internalType: "address",
                name: "_swap",
                type: "address"
            }],
            name: "balances",
            outputs: [{
                internalType: "uint256[2]",
                name: "swapBalances",
                type: "uint256[2]"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [{
                internalType: "address",
                name: "_swap",
                type: "address"
            }, {
                internalType: "uint256",
                name: "_amount",
                type: "uint256"
            }],
            name: "calc_coins_amount",
            outputs: [{
                internalType: "uint256[2]",
                name: "",
                type: "uint256[2]"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [{
                internalType: "address",
                name: "_swap",
                type: "address"
            }, {
                internalType: "uint256[2]",
                name: "_balances",
                type: "uint256[2]"
            }, {
                internalType: "uint256",
                name: "amp",
                type: "uint256"
            }],
            name: "get_D_mem",
            outputs: [{
                internalType: "uint256",
                name: "",
                type: "uint256"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [{
                internalType: "address",
                name: "_swap",
                type: "address"
            }, {
                internalType: "uint256[2]",
                name: "amounts",
                type: "uint256[2]"
            }],
            name: "get_add_liquidity_fee",
            outputs: [{
                internalType: "uint256[2]",
                name: "liquidityFee",
                type: "uint256[2]"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [{
                internalType: "address",
                name: "_swap",
                type: "address"
            }, {
                internalType: "uint256[2]",
                name: "amounts",
                type: "uint256[2]"
            }],
            name: "get_add_liquidity_mint_amount",
            outputs: [{
                internalType: "uint256",
                name: "",
                type: "uint256"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [{
                internalType: "address",
                name: "_swap",
                type: "address"
            }, {
                internalType: "uint256",
                name: "i",
                type: "uint256"
            }, {
                internalType: "uint256",
                name: "j",
                type: "uint256"
            }, {
                internalType: "uint256",
                name: "dx",
                type: "uint256"
            }],
            name: "get_exchange_fee",
            outputs: [{
                internalType: "uint256",
                name: "exFee",
                type: "uint256"
            }, {
                internalType: "uint256",
                name: "exAdminFee",
                type: "uint256"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [{
                internalType: "address",
                name: "_swap",
                type: "address"
            }, {
                internalType: "uint256[2]",
                name: "amounts",
                type: "uint256[2]"
            }],
            name: "get_remove_liquidity_imbalance_fee",
            outputs: [{
                internalType: "uint256[2]",
                name: "liquidityFee",
                type: "uint256[2]"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [{
                internalType: "address",
                name: "_swap",
                type: "address"
            }, {
                internalType: "uint256",
                name: "_token_amount",
                type: "uint256"
            }, {
                internalType: "uint256",
                name: "i",
                type: "uint256"
            }],
            name: "get_remove_liquidity_one_coin_fee",
            outputs: [{
                internalType: "uint256",
                name: "adminFee",
                type: "uint256"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [{
                internalType: "address",
                name: "_swap",
                type: "address"
            }],
            name: "token",
            outputs: [{
                internalType: "contract IERC20",
                name: "",
                type: "address"
            }],
            stateMutability: "view",
            type: "function"
        }];
        async function ea(e, t, n) {
            let {provider: r} = n
              , i = t.currency.chainId
              , {multicallv2: a} = (0,
            l.wn)(r)
              , o = function(e, t) {
                let {chainId: n} = t.currency
                  , r = K(t, n);
                if (!r)
                    throw Error(`No wrapped token amount found for input amount: ${t.currency.name}`);
                let {stableSwapAddress: i} = e
                  , a = r.currency
                  , o = ee(e, a)
                  , s = t.wrapped.quotient.toString()
                  , u = e.token0.equals(o);
                return {
                    address: e.infoStableSwapAddress || R[n],
                    name: "get_exchange_fee",
                    params: u ? [i, 1, 0, s] : [i, 0, 1, s]
                }
            }(e, t)
              , u = ee(e, t.currency)
              , [[c,d]] = await a({
                abi: ei,
                calls: [o],
                chainId: i,
                options: {
                    requireSuccess: !0
                }
            });
            return {
                fee: s.ih.fromRawAmount(u, c.toString()),
                adminFee: s.ih.fromRawAmount(u, d.toString())
            }
        }
        async function eo(e, t, n) {
            var r, i, a, s, u;
            let {provider: l} = n
              , c = e.chainId;
            if (!c || c !== t.chainId)
                return [];
            let[d,p] = c ? [W(e, c), W(t, c)] : [void 0, void 0]
              , f = null !== (a = F[c]) && void 0 !== a ? a : []
              , h = d && null !== (s = null === (r = D[c]) || void 0 === r ? void 0 : r[d.address]) && void 0 !== s ? s : []
              , m = p && null !== (u = null === (i = D[c]) || void 0 === i ? void 0 : i[p.address]) && void 0 !== u ? u : []
              , y = [...f, ...h, ...m]
              , g = o(y, e=>y.map(t=>[e, t]))
              , b = es(d, p, y, g, c)
              , v = await J(b, {
                chainId: c,
                provider: l
            });
            return Object.values(v.reduce((e,t)=>{
                var n;
                return e[t.liquidityToken.address] = null !== (n = e[t.liquidityToken.address]) && void 0 !== n ? n : t,
                e
            }
            , {}))
        }
        var es = (e,t,n,r,i)=>e && t ? [[e, t], ...n.map(t=>[e, t]), ...n.map(e=>[t, e]), ...r].filter(e=>!!(e[0] && e[1])).filter(e=>{
            let[t,n] = e;
            return t.address !== n.address
        }
        ).filter(e=>{
            let[t,n] = e;
            if (!i)
                return !0;
            let r = M[i]
              , a = null == r ? void 0 : r[t.address]
              , o = null == r ? void 0 : r[n.address];
            return !a && !o || (!a || !!a.find(e=>n.equals(e))) && (!o || !!o.find(e=>t.equals(e)))
        }
        ) : [];
        function eu(e) {
            let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : ""
              , n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : ""
              , r = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : ""
              , i = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 0
              , a = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : 0;
            return {
                ...e,
                stableSwapAddress: t,
                lpAddress: n,
                infoStableSwapAddress: r,
                liquidityToken: new s.Z$(e.token0.chainId,n,18,"Stable-LP","Pancake StableSwap LPs"),
                price: new s.tA(e.token0,e.token1,"0","1"),
                fee: new s.gG(0),
                adminFee: new s.gG(0),
                involvesToken: t=>t.equals(e.token0) || t.equals(e.token1),
                stableLpFee: i,
                stableLpFeeRateOfTotalFee: a
            }
        }
        function el(e) {
            let {routeType: t, pairs: n, inputAmount: r, outputAmount: i, tradeType: a} = e;
            return {
                tradeType: a,
                inputAmount: r,
                outputAmount: i,
                route: function(e) {
                    let {routeType: t, input: n, pairs: r, output: i} = e
                      , a = n.wrapped
                      , o = [a];
                    for (let[e,t] of r.entries()) {
                        let n = ee(t, o[e]);
                        o.push(n)
                    }
                    return {
                        routeType: t,
                        input: n,
                        output: i,
                        pairs: r,
                        path: o
                    }
                }({
                    routeType: t,
                    pairs: n,
                    input: r.currency,
                    output: i.currency
                })
            }
        }
        function ec(e) {
            let {tradeType: t, inputAmount: n, outputAmount: r, route: {pairs: i}} = e;
            return el({
                routeType: 0,
                pairs: i,
                inputAmount: n,
                outputAmount: r,
                tradeType: t
            })
        }
        function ed(e, t, n) {
            let {fee: r, adminFee: i} = n;
            (0,
            p.Z)(r.currency.equals(t.currency), "FEE_CURRENCY_MATCH"),
            (0,
            p.Z)(i.currency.equals(t.currency), "FEE_CURRENCY_MATCH");
            let a = new s.tA({
                baseAmount: t.add(r),
                quoteAmount: e
            })
              , o = a.quote(r)
              , u = a.quote(i);
            return {
                fee: new s.gG(o.quotient,e.quotient),
                adminFee: new s.gG(u.quotient,e.quotient)
            }
        }
        var ep = [{
            lpSymbol: "HAY-BUSD LP",
            lpAddress: "0xB6040A9F294477dDAdf5543a24E5463B8F2423Ae",
            token: u.ds.hay,
            quoteToken: u.ds.busd,
            stableSwapAddress: "0x49079d07ef47449af808a4f36c2a8dec975594ec",
            infoStableSwapAddress: "0xa680d27f63Fa5E213C502d1B3Ca1EB6a3C1b31D6",
            stableLpFee: 2e-4,
            stableLpFeeRateOfTotalFee: .5
        }, {
            lpSymbol: "USDT-BUSD LP",
            lpAddress: "0x36842F8fb99D55477C0Da638aF5ceb6bBf86aA98",
            token: u.ds.usdt,
            quoteToken: u.ds.busd,
            stableSwapAddress: "0x169F653A54ACD441aB34B73dA9946e2C451787EF",
            infoStableSwapAddress: "0xa680d27f63Fa5E213C502d1B3Ca1EB6a3C1b31D6",
            stableLpFee: 5e-5,
            stableLpFeeRateOfTotalFee: .5
        }, {
            lpSymbol: "USDC-BUSD LP",
            lpAddress: "0x1A77C359D0019cD8F4d36b7CDf5a88043D801072",
            token: u.ds.usdc,
            quoteToken: u.ds.busd,
            stableSwapAddress: "0xc2F5B9a3d9138ab2B74d581fC11346219eBf43Fe",
            infoStableSwapAddress: "0xa680d27f63Fa5E213C502d1B3Ca1EB6a3C1b31D6",
            stableLpFee: 5e-5,
            stableLpFeeRateOfTotalFee: .5
        }, {
            lpSymbol: "USDT-USDC LP",
            lpAddress: "0xee1bcc9F1692E81A281b3a302a4b67890BA4be76",
            token: u.ds.usdt,
            quoteToken: u.ds.usdc,
            stableSwapAddress: "0x3EFebC418efB585248A0D2140cfb87aFcc2C63DD",
            infoStableSwapAddress: "0xa680d27f63Fa5E213C502d1B3Ca1EB6a3C1b31D6",
            stableLpFee: 5e-5,
            stableLpFeeRateOfTotalFee: .5
        }, {
            lpSymbol: "axlUSDC-USDT LP",
            lpAddress: "0x1c7e5a3A72b6D94DE5Ec20812E3e68713978a584",
            token: u.ds.axlusdc,
            quoteToken: u.ds.usdt,
            stableSwapAddress: "0x6D8fba276ec6F1EDa2344DA48565AdbCA7e4FFa5",
            infoStableSwapAddress: "0x150c8AbEB487137acCC541925408e73b92F39A50",
            stableLpFee: 2e-4,
            stableLpFeeRateOfTotalFee: .5
        }, {
            lpSymbol: "WBNB-stkBNB LP",
            lpAddress: "0x9976f5c8BEfDee650226d5571d5F5551e8722b75",
            token: u.ds.wbnb,
            quoteToken: u.ds.stkbnb,
            stableSwapAddress: "0x0b03e3d6Ec0c5e5bBf993dED8D947C6fb6eEc18D",
            infoStableSwapAddress: "0x150c8AbEB487137acCC541925408e73b92F39A50",
            stableLpFee: 2e-4,
            stableLpFeeRateOfTotalFee: .5
        }, {
            lpSymbol: "BNBx-BNB LP",
            lpAddress: "0x92357Ab9003CA881E08e32CDAE59B10B3161b05C",
            token: u.ds.bnbx,
            quoteToken: u.ds.wbnb,
            stableSwapAddress: "0x9c138bE1D76ee4C5162E0fe9D4eEA5542a23D1bD",
            infoStableSwapAddress: "0x150c8AbEB487137acCC541925408e73b92F39A50",
            stableLpFee: 2e-4,
            stableLpFeeRateOfTotalFee: .5
        }, {
            lpSymbol: "HAY-USDT LP",
            lpAddress: "0xB2Aa63f363196caba3154D4187949283F085a488",
            token: u.ds.hay,
            quoteToken: u.ds.usdt,
            stableSwapAddress: "0xb1Da7D2C257c5700612BdE35C8d7187dc80d79f1",
            infoStableSwapAddress: "0x150c8AbEB487137acCC541925408e73b92F39A50",
            stableLpFee: 4e-4,
            stableLpFeeRateOfTotalFee: .5
        }]
          , ef = new s.Z$(s.a_.BSC_TESTNET,"0x0fB5D7c73FA349A90392f873a4FA1eCf6a3d0a96",18,"USDT","MOCK Token")
          , eh = [{
            lpSymbol: "USDT-WBNB LP",
            lpAddress: "0x4c091Dc4418Bd3353A87488535528FD86954da2c",
            token: ef,
            quoteToken: u.dI.wbnb,
            stableSwapAddress: "0xBcd585Ee8B8Ac8de6b0e45dA32Aa31703036b2a1",
            infoStableSwapAddress: "0x0A548d59D04096Bc01206D58C3D63c478e1e06dB",
            stableLpFee: 4e-4,
            stableLpFeeRateOfTotalFee: .5
        }, {
            lpSymbol: "USDT-BUSD LP",
            lpAddress: "0x746a7063101E2D3305D1556888ee08193f2B9a07",
            token: ef,
            quoteToken: u.dI.busd,
            stableSwapAddress: "0xE25A1352477f3DB9B3008B31e9b7a07a18f8A9e6",
            infoStableSwapAddress: "0x0A548d59D04096Bc01206D58C3D63c478e1e06dB",
            stableLpFee: 4e-4,
            stableLpFeeRateOfTotalFee: .5
        }, {
            lpSymbol: "BUSD-USDC LP",
            lpAddress: "0x7CA885d338462790DD1B5416ebe6bec75ee045a1",
            token: u.dI.mockBusd,
            quoteToken: u.dI.usdc,
            stableSwapAddress: "0xd5E56CD4c8111643a94Ee084df31F44055a1EC9F",
            infoStableSwapAddress: "0xaE6C14AAA753B3FCaB96149e1E10Bc4EDF39F546",
            stableLpFee: 2e-4,
            stableLpFeeRateOfTotalFee: .5
        }, {
            lpSymbol: "USDT-BUSD LP",
            lpAddress: "0x9Fa2Ef2C3dF6F903F4b73047311e861C51a11B60",
            token: u.dI.usdt,
            quoteToken: u.dI.mockBusd,
            stableSwapAddress: "0xc418d68751Cbe0407C8fdd90Cde73cE95b892f39",
            infoStableSwapAddress: "0xaE6C14AAA753B3FCaB96149e1E10Bc4EDF39F546",
            stableLpFee: 2e-4,
            stableLpFeeRateOfTotalFee: .5
        }]
          , em = e=>ey.includes(e)
          , ey = [s.a_.BSC, s.a_.BSC_TESTNET]
          , eg = {
            [s.a_.BSC]: ep,
            [s.a_.BSC_TESTNET]: eh
        };
        function eb(e) {
            return em(e) && eg[e] || []
        }
        var ev = d(ey.map(e=>[e, function(e) {
            let t = eb(e);
            return t.map(e=>{
                let {token: t, quoteToken: n, stableSwapAddress: r, lpAddress: i, infoStableSwapAddress: a, stableLpFee: o, stableLpFeeRateOfTotalFee: u} = e
                  , l = (0,
                c.iG)(t)
                  , d = (0,
                c.iG)(n);
                return eu({
                    token0: l,
                    token1: d,
                    reserve0: s.ih.fromRawAmount(l, "0"),
                    reserve1: s.ih.fromRawAmount(d, "0")
                }, r, i, a, o, u)
            }
            )
        }(e)]));
        async function ew(e, t, n) {
            let {maxHops: r, provider: i} = n
              , {currency: {chainId: a}} = e
              , o = ev[a] || []
              , s = function(e, t, n) {
                let r = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 3
                  , i = Array(n.length).fill(!1)
                  , a = []
                  , o = (e,t,s,u)=>{
                    if (!(s.length > r)) {
                        if (s.length > 0 && Y(s[s.length - 1], t)) {
                            a.push([...s]);
                            return
                        }
                        for (let r = 0; r < n.length; r++) {
                            if (i[r])
                                continue;
                            let a = n[r]
                              , l = u || e;
                            if (!Y(a, l))
                                continue;
                            let c = ee(a, l);
                            s.push(a),
                            i[r] = !0,
                            o(e, t, s, c),
                            i[r] = !1,
                            s.pop()
                        }
                    }
                }
                ;
                return o(e, t, []),
                a
            }(e.currency, t, o, r)
              , u = await Promise.all(s.map(t=>eT(e, t, {
                provider: i
            })));
            if (!u.length)
                return null;
            let l = u[0];
            for (let e = 1; e < u.length; e += 1) {
                let t = u[e];
                t.outputAmount.greaterThan(l.outputAmount) && (l = t)
            }
            return l
        }
        async function eT(e, t, n) {
            let {provider: r} = n
              , i = e.currency
              , a = e
              , o = [];
            for (let e of t) {
                let t = a
                  , n = await Promise.all([er(e, t, {
                    provider: r
                }), ea(e, t, {
                    provider: r
                })]);
                a = n[0];
                let u = n[1];
                i = ee(e, i);
                let {fee: l, adminFee: c} = ed(t, a, u);
                o.push({
                    ...e,
                    price: new s.tA({
                        baseAmount: t,
                        quoteAmount: a.add(u.fee)
                    }),
                    fee: l,
                    adminFee: c
                })
            }
            return el({
                routeType: 1,
                inputAmount: e,
                outputAmount: a,
                pairs: o,
                tradeType: s.YL.EXACT_INPUT
            })
        }
        var eE = ex(s.YL.EXACT_INPUT)
          , eA = ex(s.YL.EXACT_OUTPUT);
        function ex(e) {
            function t(t, n, r, i) {
                return e === s.YL.EXACT_INPUT ? s.ho.bestTradeExactIn(t, n, r, i) : s.ho.bestTradeExactOut(t, r, n, i)
            }
            return async function(e, n, r) {
                var i, a;
                let {provider: o, allCommonPairs: u, ...l} = r
                  , {maxHops: c=3} = l
                  , d = async()=>Array.isArray(u) ? u : u ? u(e.currency, n) : eo(e.currency, n, {
                    provider: o
                })
                  , p = await d();
                if (!p.length)
                    return null;
                if (1 === c)
                    return null !== (i = t(p, e, n, l)[0]) && void 0 !== i ? i : null;
                let f = null;
                for (let r = 1; r <= c; r++) {
                    let i = null !== (a = t(p, e, n, {
                        ...l,
                        maxHops: r,
                        maxNumResults: 1
                    })[0]) && void 0 !== a ? a : null;
                    (0,
                    s._B)(f, i, O) && (f = i)
                }
                return f
            }
        }
        async function ek(e, t, n) {
            let {provider: r} = n
              , {inputAmount: i, route: a, tradeType: o} = e;
            if (!t.length)
                return ec(e);
            let u = e=>t.find(t=>Y(e, t.token0) && Y(e, t.token1))
              , l = i
              , c = i.currency
              , d = ()=>!c.equals(l.currency)
              , p = async()=>l.currency.equals(i.currency) && c.equals(e.outputAmount.currency) ? e.outputAmount : d() ? eC(l, c, n) : l
              , f = null
              , h = e=>{
                f = null === f || f === e ? e : 2
            }
              , m = [];
            for (let[e,t] of a.pairs.entries()) {
                let n = u(t);
                if (n) {
                    let e = await p()
                      , t = await Promise.all([er(n, e, {
                        provider: r
                    }), ea(n, e, {
                        provider: r
                    })]);
                    l = t[0];
                    let i = t[1];
                    c = ee(n, c);
                    let {fee: a, adminFee: o} = ed(e, l, i);
                    m.push({
                        ...n,
                        price: new s.tA({
                            baseAmount: e,
                            quoteAmount: l.add(i.fee)
                        }),
                        fee: a,
                        adminFee: o
                    }),
                    h(1);
                    continue
                }
                c = ee(t, c),
                e === a.pairs.length - 1 && (l = await p()),
                m.push(t),
                h(0)
            }
            if (null === f)
                throw Error("No valid route found");
            return el({
                routeType: f,
                pairs: m,
                inputAmount: i,
                outputAmount: s.ih.fromFractionalAmount(e.outputAmount.currency, l.numerator, l.denominator),
                tradeType: o
            })
        }
        async function eC(e, t, n) {
            let r = await eE(e, t, n);
            if (!r)
                throw Error(`Cannot get valid trade from ${e.currency.name} to ${t.name}`);
            return r.outputAmount
        }
        var e_ = eI(s.YL.EXACT_INPUT)
          , eS = eI(s.YL.EXACT_OUTPUT);
        function eI(e) {
            let t = e === s.YL.EXACT_INPUT
              , n = t ? eE : eA;
            return async function(e, r, i) {
                let {provider: a} = i
                  , {currency: {chainId: o}} = e
                  , s = await n(e, r, i)
                  , u = (s || t) && await ew((null == s ? void 0 : s.inputAmount) || e, (null == s ? void 0 : s.outputAmount.currency) || r, i);
                if (!s)
                    return u || null;
                let l = ev[o] || []
                  , c = await ek(s, l, {
                    provider: a
                })
                  , {outputAmount: d} = c;
                return u && u.outputAmount.greaterThan(d) && u.outputAmount.greaterThan(s.outputAmount) ? u : d.lessThan(s.outputAmount) ? ec(s) : c
            }
        }
        var eP = {};
        function eB(e) {
            let {amplifier: t, balances: n} = e
              , r = n.length;
            (0,
            p.Z)(r > 1, "To get constant D, pool should have at least two coins.");
            let i = n.reduce((e,t)=>e + BigInt(t), s.xE);
            if (i === s.xE)
                return s.xE;
            let a = BigInt(r)
              , o = s.ry
              , u = BigInt(t) * a
              , l = s.xE
              , c = i;
            for (let e = 0; e < 255; e += 1) {
                let e = c;
                for (let t of n)
                    e = e * c / (BigInt(t) * a + 1n);
                if (l = c,
                (c = (u * i + e * a) * c / ((u - s.ry) * c + (a + s.ry) * e)) > l && c - l <= o || c <= l && l - c <= o)
                    break
            }
            return c
        }
        function eO(e) {
            let {amplifier: t, balances: n, i: r, j: i, x: a} = e
              , o = n.length;
            (0,
            p.Z)(o > 1, "To get y, pool should have at least two coins."),
            (0,
            p.Z)(r !== i && r >= 0 && i >= 0 && r < o && i < o, `Invalid i: ${r} and j: ${i}`);
            let u = BigInt(o)
              , l = eB({
                amplifier: t,
                balances: n
            })
              , c = s.xE
              , d = l
              , f = BigInt(t) * u;
            for (let[e,t] of n.entries()) {
                if (e === i)
                    continue;
                let n = BigInt(t);
                e === r && (n += BigInt(a)),
                (0,
                p.Z)(n > s.xE, "Insufficient liquidity"),
                c += n,
                d = d * l / (n * u)
            }
            d = d * l / (f * u);
            let h = c + l / f
              , m = s.ry
              , y = s.xE
              , g = l;
            for (let e = 0; e < 255 && (y = g,
            (!((g = (g * g + d) / (2n * g + h - l)) > y) || !(g - y <= m)) && (!(g <= y) || !(y - g <= m))); e += 1)
                ;
            return g
        }
        I(eP, {
            getD: ()=>eB,
            getLPOutput: ()=>eD,
            getLPOutputWithoutFee: ()=>eM,
            getSwapInput: ()=>eq,
            getSwapInputWithtouFee: ()=>ej,
            getSwapOutput: ()=>eL,
            getSwapOutputWithoutFee: ()=>eU
        });
        var eN = 10n ** 18n
          , eR = e=>e.quotient * eN / 10n ** BigInt(e.currency.decimals)
          , eF = (e,t)=>s.ih.fromRawAmount(e, t * 10n ** BigInt(e.decimals) / eN);
        function eD(e) {
            let {amplifier: t, balances: n, totalSupply: r, amounts: i, fee: a} = e
              , o = r.currency
              , u = r.quotient;
            if (u === s.xE || !n.length || n.every(e=>e.quotient === s.xE)) {
                let e = eB({
                    amplifier: t,
                    balances: i.map(eR)
                });
                return s.ih.fromRawAmount(o, e)
            }
            let l = []
              , c = [];
            for (let[e,t] of n.entries()) {
                let n = i[e] || s.ih.fromRawAmount(t.currency, 0);
                (0,
                p.Z)(n.currency.wrapped.equals(t.currency.wrapped), "User input currency should be the same as pool balance currency.");
                let r = eR(t)
                  , a = eR(n);
                l.push(r),
                c.push(r + a)
            }
            let d = eB({
                amplifier: t,
                balances: l
            })
              , f = eB({
                amplifier: t,
                balances: c
            });
            (0,
            p.Z)(f >= d, "D1 should be greater than or equal than d0.");
            let h = u <= s.xE;
            if (h)
                return s.ih.fromRawAmount(r.currency, f);
            let m = l.length
              , y = a.multiply(m).divide(4 * (m - 1))
              , g = f;
            for (let[e,t] of l.entries()) {
                let n = f * t / d
                  , r = s.xE;
                r = n > c[e] ? n - c[e] : c[e] - n;
                let i = y.multiply(r).quotient;
                c[e] = c[e] - i
            }
            g = eB({
                amplifier: t,
                balances: c
            });
            let b = u * (g - d) / d;
            return s.ih.fromRawAmount(r.currency, b)
        }
        function eM(e) {
            return eD({
                ...e,
                fee: new s.gG(0)
            })
        }
        function eL(e) {
            let {amplifier: t, balances: n, outputCurrency: r, amount: i, fee: a} = e
              , o = e=>(0,
            p.Z)(!e.lessThan(s.xE), "Insufficient liquidity to perform the swap")
              , u = null
              , l = null
              , c = [];
            for (let[e,t] of n.entries()) {
                if (c.push(eR(t)),
                t.currency.wrapped.equals(i.currency.wrapped)) {
                    u = e;
                    continue
                }
                if (t.currency.wrapped.equals(r.wrapped)) {
                    l = e;
                    continue
                }
            }
            if ((0,
            p.Z)(null !== u && null !== l && u !== l, "Input currency or output currency does not match currencies of token balances."),
            i.quotient < s.xE) {
                let e = s.yC.subtract(a).invert().multiply(eR(i)).quotient
                  , n = eO({
                    amplifier: t,
                    balances: c,
                    i: u,
                    j: l,
                    x: e
                })
                  , d = n - c[l]
                  , p = eF(r, d);
                return o(p),
                p
            }
            let d = eO({
                amplifier: t,
                balances: c,
                i: u,
                j: l,
                x: eR(i)
            })
              , f = c[l] - d
              , h = a.multiply(f).quotient
              , m = eF(r, f - h);
            return o(m),
            m
        }
        function eU(e) {
            return eL({
                ...e,
                fee: new s.gG(0)
            })
        }
        function eq(e) {
            let {amount: t, ...n} = e;
            return eL({
                ...n,
                amount: s.ih.fromRawAmount(t.currency, -t.quotient)
            })
        }
        function ej(e) {
            return eq({
                ...e,
                fee: new s.gG(0)
            })
        }
        var e$ = {};
        I(e$, {
            APISchema: ()=>t5,
            Transformer: ()=>tt,
            createOffChainQuoteProvider: ()=>t_,
            createPoolProvider: ()=>tC,
            createQuoteProvider: ()=>t$,
            createStaticPoolProvider: ()=>tZ,
            getBestTrade: ()=>tv,
            getCheckAgainstBaseTokens: ()=>tp,
            getExecutionPrice: ()=>e8,
            getMidPrice: ()=>e2,
            getPairCombinations: ()=>tf,
            getStablePoolsOnChain: ()=>tE,
            getV2PoolSubgraph: ()=>t0,
            getV2PoolsOnChain: ()=>tT,
            getV3PoolSubgraph: ()=>tK,
            getV3PoolsWithoutTicksOnChain: ()=>tA,
            involvesCurrency: ()=>eK,
            isStablePool: ()=>eW,
            isV2Pool: ()=>ez,
            isV3Pool: ()=>eV,
            log: ()=>te,
            maximumAmountIn: ()=>e4,
            metric: ()=>e7,
            minimumAmountOut: ()=>e9,
            v2PoolSubgraphSelection: ()=>t6,
            v3PoolSubgraphSelection: ()=>tQ
        });
        var eZ = function(e, t) {
            if (e && t)
                try {
                    let n = (0,
                    h.parseUnits)(e, t.decimals).toString();
                    if ("0" !== n)
                        return m.ih.fromRawAmount(t, BigInt(n))
                } catch (t) {
                    console.debug(`Failed to parse input amount: "${e}"`, t)
                }
        }
          , eH = ((i = eH || {})[i.V2 = 0] = "V2",
        i[i.V3 = 1] = "V3",
        i[i.STABLE = 2] = "STABLE",
        i)
          , eG = ((a = eG || {})[a.V2 = 0] = "V2",
        a[a.V3 = 1] = "V3",
        a[a.STABLE = 2] = "STABLE",
        a[a.MIXED = 3] = "MIXED",
        a);
        function ez(e) {
            return 0 === e.type
        }
        function eV(e) {
            return 1 === e.type
        }
        function eW(e) {
            return 2 === e.type && e.balances.length >= 2
        }
        function eK(e, t) {
            let n = t.wrapped;
            if (ez(e)) {
                let {reserve0: t, reserve1: r} = e;
                return t.currency.equals(n) || r.currency.equals(n)
            }
            if (eV(e)) {
                let {token0: t, token1: r} = e;
                return t.equals(n) || r.equals(n)
            }
            if (eW(e)) {
                let {balances: t} = e;
                return t.some(e=>e.currency.equals(n))
            }
            return !1
        }
        function eX(e, t) {
            let n = t.wrapped;
            if (ez(e)) {
                let {reserve0: t, reserve1: r} = e;
                return t.currency.equals(n) ? r.currency : t.currency
            }
            if (eV(e)) {
                let {token0: t, token1: r} = e;
                return t.equals(n) ? r : t
            }
            if (eW(e)) {
                let {balances: t} = e;
                return t[0].currency.equals(n) ? t[1].currency : t[0].currency
            }
            throw Error("Cannot get output currency by invalid pool")
        }
        function eJ(e) {
            if (eW(e) || eV(e))
                return e.address;
            if (ez(e)) {
                let {reserve0: t, reserve1: n} = e;
                return s.sO.getAddress(t.currency.wrapped, n.currency.wrapped)
            }
            return ""
        }
        function eQ(e, t, n) {
            if (eV(e)) {
                let {token0: n, token1: r, fee: i, liquidity: a, sqrtRatioX96: o, tick: s} = e
                  , u = new f.Kg(n.wrapped,r.wrapped,i,o,a,s);
                return u.priceOf(t.wrapped)
            }
            if (ez(e)) {
                let n = new s.sO(e.reserve0.wrapped,e.reserve1.wrapped);
                return n.priceOf(t.wrapped)
            }
            if (eW(e)) {
                let {amplifier: r, balances: i, fee: a} = e
                  , o = eZ("1", t);
                if (!o)
                    throw Error(`Cannot parse amount for ${t.symbol}`);
                let u = eL({
                    amplifier: r,
                    balances: i,
                    fee: a,
                    outputCurrency: n,
                    amount: o
                });
                return new s.tA({
                    baseAmount: o,
                    quoteAmount: u
                })
            }
            return new s.tA(t,n,1n,0n)
        }
        function eY() {
            for (var e, t = arguments.length, n = Array(t), r = 0; r < t; r++)
                n[r] = arguments[r];
            let i = null === (e = n[0]) || void 0 === e ? void 0 : e.chainId;
            for (let e of n)
                if (e.chainId !== i)
                    return !1;
            return !0
        }
        function e0(e, t, n) {
            let r = [t.wrapped]
              , i = r[0]
              , a = null
              , o = (e,t)=>null === t ? e1(e) : 3 === t || t !== e1(e) ? 3 : t;
            for (let t of e)
                i = eX(t, i),
                r.push(i),
                a = o(t, a);
            if (null === a)
                throw Error("Invalid route type when constructing base route");
            return {
                path: r,
                pools: e,
                type: a,
                input: t,
                output: n
            }
        }
        function e1(e) {
            switch (e.type) {
            case 0:
                return 0;
            case 1:
                return 1;
            case 2:
                return 2;
            default:
                return 3
            }
        }
        function e2(e) {
            let {path: t, pools: n} = e
              , r = 0
              , i = null;
            for (let e of n) {
                let n = t[r].wrapped
                  , a = t[r + 1].wrapped
                  , o = eQ(e, n, a);
                i = i ? i.multiply(o) : o,
                r += 1
            }
            if (!i)
                throw Error("Get mid price failed");
            return i
        }
        function e6(e, t) {
            let n = e.input.wrapped
              , {path: r, types: i} = e.pools.reduce((e,t,n)=>{
                let {inputToken: r, path: i, types: a} = e
                  , o = eX(t, r).wrapped
                  , s = eV(t) ? t.fee : 8388608;
                return 0 === n ? {
                    inputToken: o,
                    types: ["address", "uint24", "address"],
                    path: [r.address, s, o.address]
                } : {
                    inputToken: o,
                    types: [...a, "uint24", "address"],
                    path: [...i, s, o.address]
                }
            }
            , {
                inputToken: n,
                path: [],
                types: []
            });
            return t ? (0,
            h.solidityPack)(i.reverse(), r.reverse()) : (0,
            h.solidityPack)(i, r)
        }
        function e5(e) {
            var t, n;
            return null !== (n = null === (t = G[e]) || void 0 === t ? void 0 : t[0]) && void 0 !== n ? n : null
        }
        function e3(e) {
            var t;
            return null !== (t = z[e]) && void 0 !== t ? t : null
        }
        function e8(e) {
            let {inputAmount: t, outputAmount: n} = e;
            return t.quotient === s.xE || n.quotient === s.xE ? null : new s.tA(t.currency,n.currency,t.quotient,n.quotient)
        }
        function e4(e, t) {
            let n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : e.inputAmount;
            if (e.tradeType === s.YL.EXACT_INPUT)
                return n;
            let r = new s.iA(s.ry).add(t).multiply(n.quotient).quotient;
            return s.ih.fromRawAmount(n.currency, r)
        }
        function e9(e, t) {
            let n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : e.outputAmount;
            if (e.tradeType === s.YL.EXACT_OUTPUT)
                return n;
            let r = new s.iA(s.ry).add(t).invert().multiply(n.quotient).quotient;
            return s.ih.fromRawAmount(n.currency, r)
        }
        var e7 = y("smart-router:metric")
          , te = y("smart-router:log")
          , tt = {};
        function tn(e) {
            return {
                address: e.isNative ? f.je : e.wrapped.address,
                decimals: e.decimals,
                symbol: e.symbol
            }
        }
        function tr(e) {
            return {
                currency: tn(e.currency),
                value: e.quotient.toString()
            }
        }
        function ti(e) {
            if (ez(e))
                return {
                    ...e,
                    reserve0: tr(e.reserve0),
                    reserve1: tr(e.reserve1)
                };
            if (eV(e))
                return {
                    ...e,
                    token0: tn(e.token0),
                    token1: tn(e.token1),
                    liquidity: e.liquidity.toString(),
                    sqrtRatioX96: e.sqrtRatioX96.toString(),
                    token0ProtocolFee: e.token0ProtocolFee.toFixed(0),
                    token1ProtocolFee: e.token1ProtocolFee.toFixed(0)
                };
            if (eW(e))
                return {
                    ...e,
                    balances: e.balances.map(tr),
                    amplifier: e.amplifier.toString(),
                    fee: e.fee.toSignificant(6)
                };
            throw Error("Cannot serialize unsupoorted pool")
        }
        function ta(e) {
            return {
                ...e,
                pools: e.pools.map(ti),
                path: e.path.map(tn),
                inputAmount: tr(e.inputAmount),
                outputAmount: tr(e.outputAmount)
            }
        }
        function to(e) {
            return {
                ...e,
                inputAmount: tr(e.inputAmount),
                outputAmount: tr(e.outputAmount),
                routes: e.routes.map(ta),
                gasEstimate: e.gasEstimate.toString(),
                gasEstimateInUSD: tr(e.gasEstimateInUSD)
            }
        }
        function ts(e, t) {
            if (t.address === f.je)
                return s._r.onChain(e);
            let {address: n, decimals: r, symbol: i} = t;
            return new s.Z$(e,n,r,i)
        }
        function tu(e, t) {
            return s.ih.fromRawAmount(ts(e, t.currency), t.value)
        }
        function tl(e, t) {
            if (0 === t.type)
                return {
                    ...t,
                    reserve0: tu(e, t.reserve0),
                    reserve1: tu(e, t.reserve1)
                };
            if (1 === t.type)
                return {
                    ...t,
                    token0: ts(e, t.token0),
                    token1: ts(e, t.token1),
                    liquidity: BigInt(t.liquidity),
                    sqrtRatioX96: BigInt(t.sqrtRatioX96),
                    token0ProtocolFee: new s.gG(t.token0ProtocolFee,100n),
                    token1ProtocolFee: new s.gG(t.token1ProtocolFee,100n)
                };
            if (2 === t.type)
                return {
                    ...t,
                    balances: t.balances.map(t=>tu(e, t)),
                    amplifier: BigInt(t.amplifier),
                    fee: new s.gG(1e6 * parseFloat(t.fee),100000n * 100n)
                };
            throw Error("Cannot parse unsupoorted pool")
        }
        function tc(e, t) {
            return {
                ...t,
                pools: t.pools.map(t=>tl(e, t)),
                path: t.path.map(t=>ts(e, t)),
                inputAmount: tu(e, t.inputAmount),
                outputAmount: tu(e, t.outputAmount)
            }
        }
        function td(e, t) {
            return {
                ...t,
                inputAmount: tu(e, t.inputAmount),
                outputAmount: tu(e, t.outputAmount),
                routes: t.routes.map(t=>tc(e, t)),
                gasEstimate: BigInt(t.gasEstimate),
                gasEstimateInUSD: tu(e, t.gasEstimateInUSD)
            }
        }
        I(tt, {
            parseCurrency: ()=>ts,
            parseCurrencyAmount: ()=>tu,
            parsePool: ()=>tl,
            parseRoute: ()=>tc,
            parseTrade: ()=>td,
            serializeCurrency: ()=>tn,
            serializeCurrencyAmount: ()=>tr,
            serializePool: ()=>ti,
            serializeRoute: ()=>ta,
            serializeTrade: ()=>to
        });
        var tp = (e,t)=>{
            var n, r, i, a, o;
            let s = null == e ? void 0 : e.chainId;
            if (!s || !e || !t || !eY(e, t))
                return [];
            let[u,l] = s ? [W(e, s), W(t, s)] : [void 0, void 0];
            if (!u || !l)
                return [];
            let c = null !== (i = F[s]) && void 0 !== i ? i : []
              , d = u && null !== (a = null === (n = D[s]) || void 0 === n ? void 0 : n[u.address]) && void 0 !== a ? a : []
              , p = l && null !== (o = null === (r = D[s]) || void 0 === r ? void 0 : r[l.address]) && void 0 !== o ? o : [];
            return [...c, ...d, ...p]
        }
          , tf = (e,t)=>{
            let n = null == e ? void 0 : e.chainId;
            if (!n || !e || !t || !eY(e, t))
                return [];
            let[r,i] = n ? [W(e, n), W(t, n)] : [void 0, void 0];
            if (!r || !i)
                return [];
            let a = tp(e, t)
              , s = o(a, e=>a.map(t=>[e, t]));
            return [[r, i], ...a.map(e=>[r, e]), ...a.map(e=>[i, e]), ...s].filter(e=>!!(e[0] && e[1])).filter(e=>{
                let[t,n] = e;
                return !t.equals(n)
            }
            ).filter(e=>{
                let[t,r] = e;
                if (!n)
                    return !0;
                let i = M[n]
                  , a = null == i ? void 0 : i[t.wrapped.address]
                  , o = null == i ? void 0 : i[r.wrapped.address];
                return !a && !o || (!a || !!a.find(e=>r.equals(e))) && (!o || !!o.find(e=>t.equals(e)))
            }
            )
        }
          , th = (e,t)=>{
            let n = new Set
              , r = o(e, e=>{
                let {pools: t} = e;
                return t.map(eJ)
            }
            );
            for (let e of r)
                n.add(e);
            for (let e of t) {
                let {pools: t} = e
                  , r = t.map(eJ);
                if (!r.some(e=>n.has(e)))
                    return e
            }
            return null
        }
        ;
        async function tm(e) {
            let {gasPriceWei: t, poolProvider: n, quoteCurrency: r, blockNumber: i} = e
              , {chainId: a} = r
              , o = e5(a);
            if (!o)
                throw Error(`No valid usd token found on chain ${a}`);
            let u = e3(a);
            if (!u)
                throw Error(`Unsupported chain ${a}. Native wrapped token not found.`);
            let l = BigInt("function" == typeof t ? await t() : t)
              , [c,d] = await Promise.all([tg(n, a, i), ty(n, r, i)])
              , p = (e,t)=>{
                let {pools: n} = e
                  , {initializedTickCrossedList: i} = t
                  , p = u.equals(r.wrapped)
                  , f = BigInt(Math.max(1, w(i)))
                  , h = new Set
                  , m = 0n;
                for (let e of n) {
                    let {type: t} = e;
                    if (ez(e)) {
                        if (!h.has(t)) {
                            m += 135000n,
                            h.add(t);
                            continue
                        }
                        m += 50000n;
                        continue
                    }
                    if (eV(e)) {
                        h.has(t) || (m += $(a),
                        h.add(t)),
                        m += H(a);
                        continue
                    }
                    if (eW(e)) {
                        if (!h.has(t)) {
                            m += 180000n,
                            h.add(t);
                            continue
                        }
                        m += 70000n;
                        continue
                    }
                }
                let y = Z(a) * f;
                m = m + y + 0n * 0n;
                let g = l * m
                  , b = s.ih.fromRawAmount(u, g)
                  , v = s.ih.fromRawAmount(r.wrapped, 0)
                  , T = s.ih.fromRawAmount(o, 0);
                try {
                    if (p && (v = b),
                    !p && d) {
                        let e = eQ(d, u, r.wrapped);
                        v = e.quote(b)
                    }
                    if (c) {
                        let e = eQ(c, u, o);
                        T = e.quote(b)
                    }
                } catch (e) {}
                return {
                    gasEstimate: m,
                    gasCostInToken: v,
                    gasCostInUSD: T
                }
            }
            ;
            return {
                estimateGasCost: p
            }
        }
        async function ty(e, t, n) {
            var r;
            let i = e3(t.chainId);
            if (!i || t.wrapped.equals(i))
                return null;
            let a = await e.getPools([[i, t]], {
                blockNumber: n
            });
            return null !== (r = a[0]) && void 0 !== r ? r : null
        }
        async function tg(e, t, n) {
            var r;
            let i = e5(t)
              , a = e3(t);
            if (!i || !a)
                return null;
            let o = await e.getPools([[a, i]], {
                blockNumber: n
            });
            return null !== (r = o[0]) && void 0 !== r ? r : null
        }
        async function tb(e) {
            let {amount: t, baseRoutes: n, distributionPercent: r, quoteProvider: i, tradeType: a, blockNumber: o, gasModel: u, quoterOptimization: l=!0} = e
              , [c,d] = function(e, t) {
                let n = []
                  , r = [];
                for (let i = 1; i <= 100 / t; i++)
                    n.push(i * t),
                    r.push(e.multiply(new s.iA(i * t,100)));
                return [n, r]
            }(t, r)
              , p = d.reduce((e,t,r)=>[...e, ...n.map(e=>({
                ...e,
                amount: t,
                percent: c[r]
            }))], [])
              , f = a === s.YL.EXACT_INPUT ? i.getRouteWithQuotesExactIn : i.getRouteWithQuotesExactOut;
            if (!l)
                return f(p, {
                    blockNumber: o,
                    gasModel: u
                });
            let h = window.requestIdleCallback || window.setTimeout;
            e7("Get quotes", "from", p.length, "routes", p);
            let m = e=>new Promise((t,n)=>{
                h(async()=>{
                    try {
                        let n = await f(e, {
                            blockNumber: o,
                            gasModel: u
                        });
                        t(n)
                    } catch (e) {
                        n(e)
                    }
                }
                )
            }
            )
              , y = T(p, 10)
              , g = await Promise.all(y.map(m))
              , b = g.reduce((e,t)=>[...e, ...t], []);
            return e7("Get quotes", "success, got", b.length, "quoted routes", b),
            b
        }
        async function tv(e, t, n, r) {
            let {blockNumber: i} = r
              , a = "function" == typeof i ? await i() : i
              , o = await tw(e, t, n, {
                ...r,
                blockNumber: a
            });
            if (!o || o.outputAmount.equalTo(s.xE))
                throw Error("Cannot find a valid swap route");
            let {routes: u, gasEstimateInUSD: l, gasEstimate: c, inputAmount: d, outputAmount: p} = o;
            return {
                tradeType: n,
                routes: u,
                gasEstimate: c,
                gasEstimateInUSD: l,
                inputAmount: d,
                outputAmount: p,
                blockNumber: a
            }
        }
        async function tw(e, t, n, r) {
            let {maxHops: i=3, maxSplits: a=4, distributionPercent: o=5, poolProvider: u, quoteProvider: l, blockNumber: c, gasPriceWei: d, allowedPoolTypes: p, quoterOptimization: f} = r
              , h = n === s.YL.EXACT_INPUT
              , m = h ? e.currency : t
              , y = h ? t : e.currency
              , w = await (null == u ? void 0 : u.getCandidatePools(e.currency, t, {
                blockNumber: c,
                protocols: p
            }))
              , T = function(e, t, n) {
                let r = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 3;
                e7("Computing routes from", n.length, "pools");
                let i = Array(n.length).fill(!1)
                  , a = []
                  , o = (e,t,s,u)=>{
                    if (!(s.length > r)) {
                        if (s.length > 0 && eK(s[s.length - 1], t)) {
                            a.push(e0([...s], e, t));
                            return
                        }
                        for (let r = 0; r < n.length; r++) {
                            if (i[r])
                                continue;
                            let a = n[r]
                              , l = u || e;
                            if (!eK(a, l))
                                continue;
                            let c = eX(a, l);
                            s.push(a),
                            i[r] = !0,
                            o(e, t, s, c),
                            i[r] = !1,
                            s.pop()
                        }
                    }
                }
                ;
                return o(e, t, []),
                e7("Computed routes from", n.length, "pools", a.length, "routes"),
                a
            }(m, y, w, i);
            n === s.YL.EXACT_OUTPUT && (T = T.filter(e=>{
                let {type: t} = e;
                return 3 !== t
            }
            ));
            let E = await tm({
                gasPriceWei: d,
                poolProvider: u,
                quoteCurrency: t,
                blockNumber: c
            })
              , A = await tb({
                amount: e,
                baseRoutes: T,
                distributionPercent: o,
                quoteProvider: l,
                tradeType: n,
                blockNumber: c,
                gasModel: E,
                quoterOptimization: f
            });
            return function(e, t, n, r, i) {
                let a = e.currency.chainId
                  , o = []
                  , u = {};
                for (let e of n)
                    u[e.percent] || (u[e.percent] = [],
                    o.push(e.percent)),
                    u[e.percent].push(e);
                let l = function(e, t, n, r, i, a) {
                    var o;
                    let u, l, {maxSplits: c=4, minSplits: d=0} = a, p = v(t, t=>t.sort((t,n)=>e === s.YL.EXACT_INPUT ? i(t).greaterThan(i(n)) ? -1 : 1 : i(t).lessThan(i(n)) ? -1 : 1)), f = e === s.YL.EXACT_INPUT ? (e,t)=>e.greaterThan(t) : (e,t)=>e.lessThan(t), h = e=>{
                        let t = e[0];
                        for (let n = 1; n < e.length; n++)
                            t = t.add(e[n]);
                        return t
                    }
                    , m = new g(Array,(e,t)=>f(e.quote, t.quote) ? -1 : 1,3);
                    if (!p[100] || d > 1)
                        console.log({
                            percentToSortedQuotes: v(p, e=>e.length)
                        }, "Did not find a valid route without any splits. Continuing search anyway.");
                    else
                        for (let e of (u = i(p[100][0]),
                        l = [p[100][0]],
                        p[100].slice(0, 5)))
                            m.push({
                                quote: i(e),
                                routes: [e]
                            });
                    let y = new b;
                    for (let e = n.length; e >= 0; e--) {
                        let t = n[e];
                        p[t] && (y.enqueue({
                            curRoutes: [p[t][0]],
                            percentIndex: e,
                            remainingPercent: 100 - t,
                            special: !1
                        }),
                        p[t] && p[t][1] && y.enqueue({
                            curRoutes: [p[t][1]],
                            percentIndex: e,
                            remainingPercent: 100 - t,
                            special: !0
                        }))
                    }
                    let w = 1;
                    for (; y.size > 0; ) {
                        console.log({
                            top5: Array.from(m.consume()).map(e=>`${e.quote.toExact()} (${e.routes.map(e=>`${e.percent}% ${e.amount.toExact()} ${e.pools.map(e=>ez(e) ? `V2 ${e.reserve0.currency.symbol}-${e.reserve1.currency.symbol}` : eV(e) ? `V3 fee ${e.fee} ${e.token0.symbol}-${e.token1.symbol}` : `Stable ${e}`).join(", ")} ${e.quote.toExact()}`).join(", ")})`),
                            onQueue: y.size
                        }, `Top 3 with ${w} splits`),
                        m.clear();
                        let t = y.size;
                        if (++w >= 3 && l && l.length < w - 1)
                            break;
                        if (w > c) {
                            console.log("Max splits reached. Stopping search.");
                            break
                        }
                        for (; t > 0; ) {
                            t--;
                            let {remainingPercent: r, curRoutes: a, percentIndex: o, special: c} = y.dequeue();
                            for (let t = o; t >= 0; t--) {
                                let o = n[t];
                                if (o > r || !p[o])
                                    continue;
                                let g = p[o]
                                  , b = th(a, g);
                                if (!b)
                                    continue;
                                let v = r - o
                                  , T = [...a, b];
                                if (0 === v && w >= d) {
                                    let t = T.map(e=>i(e))
                                      , n = h(t)
                                      , r = s.ih.fromRawAmount(n.currency, 0)
                                      , a = e === s.YL.EXACT_INPUT ? n.subtract(r) : n.add(r);
                                    m.push({
                                        quote: a,
                                        routes: T
                                    }),
                                    (!u || f(a, u)) && (u = a,
                                    l = T)
                                } else
                                    y.enqueue({
                                        curRoutes: T,
                                        remainingPercent: v,
                                        percentIndex: t,
                                        special: c
                                    })
                            }
                        }
                    }
                    if (!l)
                        return console.log("Could not find a valid swap"),
                        null;
                    let T = h(l.map(e=>e.quoteAdjustedForGas))
                      , E = l.map(e=>e.gasEstimate).reduce((e,t)=>e + t, 0n);
                    if (!G[r] || !G[r][0])
                        throw Error(`Could not find a USD token for computing gas costs on ${r}`);
                    let A = G[r][0]
                      , x = A.decimals
                      , k = {
                        gasUsedL1: 0n,
                        gasCostL1USD: s.ih.fromRawAmount(A, 0),
                        gasCostL1QuoteToken: s.ih.fromRawAmount(null === (o = l[0]) || void 0 === o ? void 0 : o.quote.currency.wrapped, 0)
                    }
                      , {gasCostL1USD: C, gasCostL1QuoteToken: _} = k
                      , S = l.map(e=>{
                        let t = x - e.gasCostInUSD.currency.decimals;
                        return 0 === t ? s.ih.fromRawAmount(A, e.gasCostInUSD.quotient) : s.ih.fromRawAmount(A, e.gasCostInUSD.quotient * 10n ** BigInt(t))
                    }
                    )
                      , I = h(S);
                    if (I.currency.equals(C.currency))
                        I = I.add(C);
                    else {
                        let e = x - C.currency.decimals;
                        I = I.add(s.ih.fromRawAmount(A, C.quotient * 10n ** BigInt(e)))
                    }
                    let P = h(l.map(e=>e.gasCostInToken)).add(_)
                      , B = h(l.map(e=>e.quote));
                    if (e === s.YL.EXACT_INPUT) {
                        let e = T.subtract(_);
                        T = e
                    } else {
                        let e = T.add(_);
                        T = e
                    }
                    let O = l.sort((e,t)=>t.amount.greaterThan(e.amount) ? 1 : -1);
                    return {
                        quote: B,
                        quoteGasAdjusted: T,
                        estimatedGasUsed: E,
                        estimatedGasUsedUSD: I,
                        estimatedGasUsedQuoteToken: P,
                        routes: O
                    }
                }(r, u, o.sort((e,t)=>e - t), a, e=>e.quoteAdjustedForGas, i);
                if (!l)
                    return null;
                let {routes: c} = l
                  , d = c.reduce((e,t)=>e.add(t.amount), s.ih.fromRawAmount(c[0].amount.currency, 0))
                  , p = e.subtract(d);
                p.greaterThan(0) && (console.log({
                    missingAmount: p.quotient.toString()
                }, "Optimal route's amounts did not equal exactIn/exactOut total. Adding missing amount to last route in array."),
                c[c.length - 1].amount = c[c.length - 1].amount.add(p)),
                console.log({
                    routes: c,
                    numSplits: c.length,
                    amount: e.toExact(),
                    quote: l.quote.toExact(),
                    quoteGasAdjusted: l.quoteGasAdjusted.toFixed(Math.min(l.quoteGasAdjusted.currency.decimals, 2)),
                    estimatedGasUSD: l.estimatedGasUsedUSD.toFixed(Math.min(l.estimatedGasUsedUSD.currency.decimals, 2)),
                    estimatedGasToken: l.estimatedGasUsedQuoteToken.toFixed(Math.min(l.estimatedGasUsedQuoteToken.currency.decimals, 2))
                }, `Found best swap route. ${c.length} split.`);
                let {routes: f, quote: h, estimatedGasUsed: m, estimatedGasUsedUSD: y} = l
                  , w = s.ih.fromRawAmount(t, h.quotient)
                  , T = r === s.YL.EXACT_INPUT;
                return {
                    routes: f.map(e=>{
                        let {type: n, amount: r, quote: i, pools: a, path: o, percent: u} = e
                          , l = s.ih.fromRawAmount(t, i.quotient);
                        return {
                            percent: u,
                            type: n,
                            pools: a,
                            path: o,
                            inputAmount: T ? r : l,
                            outputAmount: T ? l : r
                        }
                    }
                    ),
                    gasEstimate: m,
                    gasEstimateInUSD: y,
                    inputAmount: T ? e : w,
                    outputAmount: T ? w : e
                }
            }(e, t, A, n, {
                maxSplits: a
            })
        }
        var tT = tx({
            abi: X,
            getPossiblePoolMetas: e=>{
                let[t,n] = e;
                return [{
                    address: s.sO.getAddress(t.wrapped, n.wrapped),
                    currencyA: t,
                    currencyB: n
                }]
            }
            ,
            buildPoolInfoCalls: e=>[{
                address: e,
                name: "getReserves",
                params: []
            }],
            buildPool: (e,t)=>{
                let {currencyA: n, currencyB: r} = e
                  , [i] = t;
                if (!i)
                    return null;
                let[a,o] = i
                  , [u,l] = n.wrapped.sortsBefore(r.wrapped) ? [n, r] : [r, n];
                return {
                    type: 0,
                    reserve0: s.ih.fromRawAmount(u, a.toString()),
                    reserve1: s.ih.fromRawAmount(l, o.toString())
                }
            }
        })
          , tE = tx({
            abi: en,
            getPossiblePoolMetas: e=>{
                let[t,n] = e
                  , r = eb(t.chainId);
                return r.filter(e=>{
                    let {token: r, quoteToken: i} = e
                      , a = (0,
                    c.iG)(r)
                      , o = (0,
                    c.iG)(i);
                    return a.equals(t.wrapped) && o.equals(n.wrapped) || a.equals(n.wrapped) && o.equals(t.wrapped)
                }
                ).map(e=>{
                    let {stableSwapAddress: r} = e;
                    return {
                        address: r,
                        currencyA: t,
                        currencyB: n
                    }
                }
                )
            }
            ,
            buildPoolInfoCalls: e=>[{
                address: e,
                name: "balances",
                params: [0]
            }, {
                address: e,
                name: "balances",
                params: [1]
            }, {
                address: e,
                name: "A",
                params: []
            }, {
                address: e,
                name: "fee",
                params: []
            }, {
                address: e,
                name: "FEE_DENOMINATOR",
                params: []
            }],
            buildPool: (e,t)=>{
                let {currencyA: n, currencyB: r, address: i} = e
                  , [a,o,u,l,c] = t;
                if (!a || !o || !u || !l || !c)
                    return null;
                let[d,p] = n.wrapped.sortsBefore(r.wrapped) ? [n, r] : [r, n];
                return {
                    address: i,
                    type: 2,
                    balances: [s.ih.fromRawAmount(d, a.toString()), s.ih.fromRawAmount(p, o.toString())],
                    amplifier: BigInt(u.toString()),
                    fee: new s.gG(BigInt(l.toString()),BigInt(c.toString()))
                }
            }
        })
          , tA = tx({
            abi: [{
                inputs: [],
                stateMutability: "nonpayable",
                type: "constructor"
            }, {
                anonymous: !1,
                inputs: [{
                    indexed: !0,
                    internalType: "address",
                    name: "owner",
                    type: "address"
                }, {
                    indexed: !0,
                    internalType: "int24",
                    name: "tickLower",
                    type: "int24"
                }, {
                    indexed: !0,
                    internalType: "int24",
                    name: "tickUpper",
                    type: "int24"
                }, {
                    indexed: !1,
                    internalType: "uint128",
                    name: "amount",
                    type: "uint128"
                }, {
                    indexed: !1,
                    internalType: "uint256",
                    name: "amount0",
                    type: "uint256"
                }, {
                    indexed: !1,
                    internalType: "uint256",
                    name: "amount1",
                    type: "uint256"
                }],
                name: "Burn",
                type: "event"
            }, {
                anonymous: !1,
                inputs: [{
                    indexed: !0,
                    internalType: "address",
                    name: "owner",
                    type: "address"
                }, {
                    indexed: !1,
                    internalType: "address",
                    name: "recipient",
                    type: "address"
                }, {
                    indexed: !0,
                    internalType: "int24",
                    name: "tickLower",
                    type: "int24"
                }, {
                    indexed: !0,
                    internalType: "int24",
                    name: "tickUpper",
                    type: "int24"
                }, {
                    indexed: !1,
                    internalType: "uint128",
                    name: "amount0",
                    type: "uint128"
                }, {
                    indexed: !1,
                    internalType: "uint128",
                    name: "amount1",
                    type: "uint128"
                }],
                name: "Collect",
                type: "event"
            }, {
                anonymous: !1,
                inputs: [{
                    indexed: !0,
                    internalType: "address",
                    name: "sender",
                    type: "address"
                }, {
                    indexed: !0,
                    internalType: "address",
                    name: "recipient",
                    type: "address"
                }, {
                    indexed: !1,
                    internalType: "uint128",
                    name: "amount0",
                    type: "uint128"
                }, {
                    indexed: !1,
                    internalType: "uint128",
                    name: "amount1",
                    type: "uint128"
                }],
                name: "CollectProtocol",
                type: "event"
            }, {
                anonymous: !1,
                inputs: [{
                    indexed: !0,
                    internalType: "address",
                    name: "sender",
                    type: "address"
                }, {
                    indexed: !0,
                    internalType: "address",
                    name: "recipient",
                    type: "address"
                }, {
                    indexed: !1,
                    internalType: "uint256",
                    name: "amount0",
                    type: "uint256"
                }, {
                    indexed: !1,
                    internalType: "uint256",
                    name: "amount1",
                    type: "uint256"
                }, {
                    indexed: !1,
                    internalType: "uint256",
                    name: "paid0",
                    type: "uint256"
                }, {
                    indexed: !1,
                    internalType: "uint256",
                    name: "paid1",
                    type: "uint256"
                }],
                name: "Flash",
                type: "event"
            }, {
                anonymous: !1,
                inputs: [{
                    indexed: !1,
                    internalType: "uint16",
                    name: "observationCardinalityNextOld",
                    type: "uint16"
                }, {
                    indexed: !1,
                    internalType: "uint16",
                    name: "observationCardinalityNextNew",
                    type: "uint16"
                }],
                name: "IncreaseObservationCardinalityNext",
                type: "event"
            }, {
                anonymous: !1,
                inputs: [{
                    indexed: !1,
                    internalType: "uint160",
                    name: "sqrtPriceX96",
                    type: "uint160"
                }, {
                    indexed: !1,
                    internalType: "int24",
                    name: "tick",
                    type: "int24"
                }],
                name: "Initialize",
                type: "event"
            }, {
                anonymous: !1,
                inputs: [{
                    indexed: !1,
                    internalType: "address",
                    name: "sender",
                    type: "address"
                }, {
                    indexed: !0,
                    internalType: "address",
                    name: "owner",
                    type: "address"
                }, {
                    indexed: !0,
                    internalType: "int24",
                    name: "tickLower",
                    type: "int24"
                }, {
                    indexed: !0,
                    internalType: "int24",
                    name: "tickUpper",
                    type: "int24"
                }, {
                    indexed: !1,
                    internalType: "uint128",
                    name: "amount",
                    type: "uint128"
                }, {
                    indexed: !1,
                    internalType: "uint256",
                    name: "amount0",
                    type: "uint256"
                }, {
                    indexed: !1,
                    internalType: "uint256",
                    name: "amount1",
                    type: "uint256"
                }],
                name: "Mint",
                type: "event"
            }, {
                anonymous: !1,
                inputs: [{
                    indexed: !1,
                    internalType: "uint32",
                    name: "feeProtocol0Old",
                    type: "uint32"
                }, {
                    indexed: !1,
                    internalType: "uint32",
                    name: "feeProtocol1Old",
                    type: "uint32"
                }, {
                    indexed: !1,
                    internalType: "uint32",
                    name: "feeProtocol0New",
                    type: "uint32"
                }, {
                    indexed: !1,
                    internalType: "uint32",
                    name: "feeProtocol1New",
                    type: "uint32"
                }],
                name: "SetFeeProtocol",
                type: "event"
            }, {
                anonymous: !1,
                inputs: [{
                    indexed: !1,
                    internalType: "address",
                    name: "addr",
                    type: "address"
                }],
                name: "SetLmPoolEvent",
                type: "event"
            }, {
                anonymous: !1,
                inputs: [{
                    indexed: !0,
                    internalType: "address",
                    name: "sender",
                    type: "address"
                }, {
                    indexed: !0,
                    internalType: "address",
                    name: "recipient",
                    type: "address"
                }, {
                    indexed: !1,
                    internalType: "int256",
                    name: "amount0",
                    type: "int256"
                }, {
                    indexed: !1,
                    internalType: "int256",
                    name: "amount1",
                    type: "int256"
                }, {
                    indexed: !1,
                    internalType: "uint160",
                    name: "sqrtPriceX96",
                    type: "uint160"
                }, {
                    indexed: !1,
                    internalType: "uint128",
                    name: "liquidity",
                    type: "uint128"
                }, {
                    indexed: !1,
                    internalType: "int24",
                    name: "tick",
                    type: "int24"
                }, {
                    indexed: !1,
                    internalType: "uint128",
                    name: "protocolFeesToken0",
                    type: "uint128"
                }, {
                    indexed: !1,
                    internalType: "uint128",
                    name: "protocolFeesToken1",
                    type: "uint128"
                }],
                name: "Swap",
                type: "event"
            }, {
                inputs: [{
                    internalType: "int24",
                    name: "tickLower",
                    type: "int24"
                }, {
                    internalType: "int24",
                    name: "tickUpper",
                    type: "int24"
                }, {
                    internalType: "uint128",
                    name: "amount",
                    type: "uint128"
                }],
                name: "burn",
                outputs: [{
                    internalType: "uint256",
                    name: "amount0",
                    type: "uint256"
                }, {
                    internalType: "uint256",
                    name: "amount1",
                    type: "uint256"
                }],
                stateMutability: "nonpayable",
                type: "function"
            }, {
                inputs: [{
                    internalType: "address",
                    name: "recipient",
                    type: "address"
                }, {
                    internalType: "int24",
                    name: "tickLower",
                    type: "int24"
                }, {
                    internalType: "int24",
                    name: "tickUpper",
                    type: "int24"
                }, {
                    internalType: "uint128",
                    name: "amount0Requested",
                    type: "uint128"
                }, {
                    internalType: "uint128",
                    name: "amount1Requested",
                    type: "uint128"
                }],
                name: "collect",
                outputs: [{
                    internalType: "uint128",
                    name: "amount0",
                    type: "uint128"
                }, {
                    internalType: "uint128",
                    name: "amount1",
                    type: "uint128"
                }],
                stateMutability: "nonpayable",
                type: "function"
            }, {
                inputs: [{
                    internalType: "address",
                    name: "recipient",
                    type: "address"
                }, {
                    internalType: "uint128",
                    name: "amount0Requested",
                    type: "uint128"
                }, {
                    internalType: "uint128",
                    name: "amount1Requested",
                    type: "uint128"
                }],
                name: "collectProtocol",
                outputs: [{
                    internalType: "uint128",
                    name: "amount0",
                    type: "uint128"
                }, {
                    internalType: "uint128",
                    name: "amount1",
                    type: "uint128"
                }],
                stateMutability: "nonpayable",
                type: "function"
            }, {
                inputs: [],
                name: "factory",
                outputs: [{
                    internalType: "address",
                    name: "",
                    type: "address"
                }],
                stateMutability: "view",
                type: "function"
            }, {
                inputs: [],
                name: "fee",
                outputs: [{
                    internalType: "uint24",
                    name: "",
                    type: "uint24"
                }],
                stateMutability: "view",
                type: "function"
            }, {
                inputs: [],
                name: "feeGrowthGlobal0X128",
                outputs: [{
                    internalType: "uint256",
                    name: "",
                    type: "uint256"
                }],
                stateMutability: "view",
                type: "function"
            }, {
                inputs: [],
                name: "feeGrowthGlobal1X128",
                outputs: [{
                    internalType: "uint256",
                    name: "",
                    type: "uint256"
                }],
                stateMutability: "view",
                type: "function"
            }, {
                inputs: [{
                    internalType: "address",
                    name: "recipient",
                    type: "address"
                }, {
                    internalType: "uint256",
                    name: "amount0",
                    type: "uint256"
                }, {
                    internalType: "uint256",
                    name: "amount1",
                    type: "uint256"
                }, {
                    internalType: "bytes",
                    name: "data",
                    type: "bytes"
                }],
                name: "flash",
                outputs: [],
                stateMutability: "nonpayable",
                type: "function"
            }, {
                inputs: [{
                    internalType: "uint16",
                    name: "observationCardinalityNext",
                    type: "uint16"
                }],
                name: "increaseObservationCardinalityNext",
                outputs: [],
                stateMutability: "nonpayable",
                type: "function"
            }, {
                inputs: [{
                    internalType: "uint160",
                    name: "sqrtPriceX96",
                    type: "uint160"
                }],
                name: "initialize",
                outputs: [],
                stateMutability: "nonpayable",
                type: "function"
            }, {
                inputs: [],
                name: "liquidity",
                outputs: [{
                    internalType: "uint128",
                    name: "",
                    type: "uint128"
                }],
                stateMutability: "view",
                type: "function"
            }, {
                inputs: [],
                name: "lmPool",
                outputs: [{
                    internalType: "contract IPancakeV3LmPool",
                    name: "",
                    type: "address"
                }],
                stateMutability: "view",
                type: "function"
            }, {
                inputs: [],
                name: "maxLiquidityPerTick",
                outputs: [{
                    internalType: "uint128",
                    name: "",
                    type: "uint128"
                }],
                stateMutability: "view",
                type: "function"
            }, {
                inputs: [{
                    internalType: "address",
                    name: "recipient",
                    type: "address"
                }, {
                    internalType: "int24",
                    name: "tickLower",
                    type: "int24"
                }, {
                    internalType: "int24",
                    name: "tickUpper",
                    type: "int24"
                }, {
                    internalType: "uint128",
                    name: "amount",
                    type: "uint128"
                }, {
                    internalType: "bytes",
                    name: "data",
                    type: "bytes"
                }],
                name: "mint",
                outputs: [{
                    internalType: "uint256",
                    name: "amount0",
                    type: "uint256"
                }, {
                    internalType: "uint256",
                    name: "amount1",
                    type: "uint256"
                }],
                stateMutability: "nonpayable",
                type: "function"
            }, {
                inputs: [{
                    internalType: "uint256",
                    name: "",
                    type: "uint256"
                }],
                name: "observations",
                outputs: [{
                    internalType: "uint32",
                    name: "blockTimestamp",
                    type: "uint32"
                }, {
                    internalType: "int56",
                    name: "tickCumulative",
                    type: "int56"
                }, {
                    internalType: "uint160",
                    name: "secondsPerLiquidityCumulativeX128",
                    type: "uint160"
                }, {
                    internalType: "bool",
                    name: "initialized",
                    type: "bool"
                }],
                stateMutability: "view",
                type: "function"
            }, {
                inputs: [{
                    internalType: "uint32[]",
                    name: "secondsAgos",
                    type: "uint32[]"
                }],
                name: "observe",
                outputs: [{
                    internalType: "int56[]",
                    name: "tickCumulatives",
                    type: "int56[]"
                }, {
                    internalType: "uint160[]",
                    name: "secondsPerLiquidityCumulativeX128s",
                    type: "uint160[]"
                }],
                stateMutability: "view",
                type: "function"
            }, {
                inputs: [{
                    internalType: "bytes32",
                    name: "",
                    type: "bytes32"
                }],
                name: "positions",
                outputs: [{
                    internalType: "uint128",
                    name: "liquidity",
                    type: "uint128"
                }, {
                    internalType: "uint256",
                    name: "feeGrowthInside0LastX128",
                    type: "uint256"
                }, {
                    internalType: "uint256",
                    name: "feeGrowthInside1LastX128",
                    type: "uint256"
                }, {
                    internalType: "uint128",
                    name: "tokensOwed0",
                    type: "uint128"
                }, {
                    internalType: "uint128",
                    name: "tokensOwed1",
                    type: "uint128"
                }],
                stateMutability: "view",
                type: "function"
            }, {
                inputs: [],
                name: "protocolFees",
                outputs: [{
                    internalType: "uint128",
                    name: "token0",
                    type: "uint128"
                }, {
                    internalType: "uint128",
                    name: "token1",
                    type: "uint128"
                }],
                stateMutability: "view",
                type: "function"
            }, {
                inputs: [{
                    internalType: "uint32",
                    name: "feeProtocol0",
                    type: "uint32"
                }, {
                    internalType: "uint32",
                    name: "feeProtocol1",
                    type: "uint32"
                }],
                name: "setFeeProtocol",
                outputs: [],
                stateMutability: "nonpayable",
                type: "function"
            }, {
                inputs: [{
                    internalType: "address",
                    name: "_lmPool",
                    type: "address"
                }],
                name: "setLmPool",
                outputs: [],
                stateMutability: "nonpayable",
                type: "function"
            }, {
                inputs: [],
                name: "slot0",
                outputs: [{
                    internalType: "uint160",
                    name: "sqrtPriceX96",
                    type: "uint160"
                }, {
                    internalType: "int24",
                    name: "tick",
                    type: "int24"
                }, {
                    internalType: "uint16",
                    name: "observationIndex",
                    type: "uint16"
                }, {
                    internalType: "uint16",
                    name: "observationCardinality",
                    type: "uint16"
                }, {
                    internalType: "uint16",
                    name: "observationCardinalityNext",
                    type: "uint16"
                }, {
                    internalType: "uint32",
                    name: "feeProtocol",
                    type: "uint32"
                }, {
                    internalType: "bool",
                    name: "unlocked",
                    type: "bool"
                }],
                stateMutability: "view",
                type: "function"
            }, {
                inputs: [{
                    internalType: "int24",
                    name: "tickLower",
                    type: "int24"
                }, {
                    internalType: "int24",
                    name: "tickUpper",
                    type: "int24"
                }],
                name: "snapshotCumulativesInside",
                outputs: [{
                    internalType: "int56",
                    name: "tickCumulativeInside",
                    type: "int56"
                }, {
                    internalType: "uint160",
                    name: "secondsPerLiquidityInsideX128",
                    type: "uint160"
                }, {
                    internalType: "uint32",
                    name: "secondsInside",
                    type: "uint32"
                }],
                stateMutability: "view",
                type: "function"
            }, {
                inputs: [{
                    internalType: "address",
                    name: "recipient",
                    type: "address"
                }, {
                    internalType: "bool",
                    name: "zeroForOne",
                    type: "bool"
                }, {
                    internalType: "int256",
                    name: "amountSpecified",
                    type: "int256"
                }, {
                    internalType: "uint160",
                    name: "sqrtPriceLimitX96",
                    type: "uint160"
                }, {
                    internalType: "bytes",
                    name: "data",
                    type: "bytes"
                }],
                name: "swap",
                outputs: [{
                    internalType: "int256",
                    name: "amount0",
                    type: "int256"
                }, {
                    internalType: "int256",
                    name: "amount1",
                    type: "int256"
                }],
                stateMutability: "nonpayable",
                type: "function"
            }, {
                inputs: [{
                    internalType: "int16",
                    name: "",
                    type: "int16"
                }],
                name: "tickBitmap",
                outputs: [{
                    internalType: "uint256",
                    name: "",
                    type: "uint256"
                }],
                stateMutability: "view",
                type: "function"
            }, {
                inputs: [],
                name: "tickSpacing",
                outputs: [{
                    internalType: "int24",
                    name: "",
                    type: "int24"
                }],
                stateMutability: "view",
                type: "function"
            }, {
                inputs: [{
                    internalType: "int24",
                    name: "",
                    type: "int24"
                }],
                name: "ticks",
                outputs: [{
                    internalType: "uint128",
                    name: "liquidityGross",
                    type: "uint128"
                }, {
                    internalType: "int128",
                    name: "liquidityNet",
                    type: "int128"
                }, {
                    internalType: "uint256",
                    name: "feeGrowthOutside0X128",
                    type: "uint256"
                }, {
                    internalType: "uint256",
                    name: "feeGrowthOutside1X128",
                    type: "uint256"
                }, {
                    internalType: "int56",
                    name: "tickCumulativeOutside",
                    type: "int56"
                }, {
                    internalType: "uint160",
                    name: "secondsPerLiquidityOutsideX128",
                    type: "uint160"
                }, {
                    internalType: "uint32",
                    name: "secondsOutside",
                    type: "uint32"
                }, {
                    internalType: "bool",
                    name: "initialized",
                    type: "bool"
                }],
                stateMutability: "view",
                type: "function"
            }, {
                inputs: [],
                name: "token0",
                outputs: [{
                    internalType: "address",
                    name: "",
                    type: "address"
                }],
                stateMutability: "view",
                type: "function"
            }, {
                inputs: [],
                name: "token1",
                outputs: [{
                    internalType: "address",
                    name: "",
                    type: "address"
                }],
                stateMutability: "view",
                type: "function"
            }],
            getPossiblePoolMetas: e=>{
                let[t,n] = e
                  , r = f.zF[t.chainId];
                return r ? [f.lk.LOWEST, f.lk.LOW, f.lk.MEDIUM, f.lk.HIGH].map(e=>({
                    address: (0,
                    f.d_)({
                        deployerAddress: r,
                        tokenA: t.wrapped,
                        tokenB: n.wrapped,
                        fee: e
                    }),
                    currencyA: t,
                    currencyB: n,
                    fee: e
                })) : []
            }
            ,
            buildPoolInfoCalls: e=>[{
                address: e,
                name: "liquidity",
                params: []
            }, {
                address: e,
                name: "slot0",
                params: []
            }],
            buildPool: (e,t)=>{
                let {currencyA: n, currencyB: r, fee: i, address: a} = e
                  , [o,s] = t;
                if (!o || !s)
                    return null;
                let[u,l,,,,c] = s
                  , [d,p] = n.wrapped.sortsBefore(r.wrapped) ? [n, r] : [r, n]
                  , [h,m] = (0,
                f.BS)(c);
                return {
                    type: 1,
                    token0: d,
                    token1: p,
                    fee: i,
                    liquidity: BigInt(o.toString()),
                    sqrtRatioX96: BigInt(u.toString()),
                    tick: Number(l),
                    address: a,
                    token0ProtocolFee: h,
                    token1ProtocolFee: m
                }
            }
        });
        function tx(e) {
            let {abi: t, getPossiblePoolMetas: n, buildPoolInfoCalls: r, buildPool: i} = e;
            return async function(e, a, o) {
                var s, u;
                let l = null === (s = e[0]) || void 0 === s ? void 0 : null === (u = s[0]) || void 0 === u ? void 0 : u.chainId;
                if (!l)
                    return [];
                let c = a({
                    chainId: l
                })
                  , d = new Set
                  , p = [];
                for (let t of e) {
                    let e = n(t);
                    for (let t of e)
                        d.has(t.address) || (p.push(t),
                        d.add(t.address))
                }
                let f = []
                  , h = 0;
                for (let {address: e} of p) {
                    let t = r(e);
                    if (h || (h = t.length),
                    !h || h !== t.length)
                        throw Error("Inconsistent pool data call");
                    f = [...f, ...t]
                }
                if (!f.length)
                    return [];
                let m = await c.multicall({
                    contracts: f.map(e=>({
                        abi: t,
                        address: e.address,
                        functionName: e.name,
                        args: e.params
                    })),
                    allowFailure: !0,
                    blockNumber: o ? BigInt(Number(BigInt(o))) : void 0
                })
                  , y = [];
                for (let e = 0; e < p.length; e += 1) {
                    let t = m.slice(e * h, (e + 1) * h)
                      , n = i(p[e], t.map(e=>e.result));
                    n && y.push(n)
                }
                return y
            }
        }
        async function tk(e, t) {
            var n, r;
            let {provider: i, blockNumber: a, protocols: o=[1, 0, 2]} = t
              , s = null === (n = e[0]) || void 0 === n ? void 0 : null === (r = n[0]) || void 0 === r ? void 0 : r.chainId;
            if (!s)
                return [];
            let u = await Promise.all(o.map(t=>0 === t ? tT(e, i, a) : 1 === t ? tA(e, i, a) : tE(e, i, a)));
            return u.reduce((e,t)=>[...e, ...t], [])
        }
        function tC(e) {
            let t = function(e) {
                let {onChainProvider: t} = e
                  , n = {
                    getCandidatePools: async(e,t,r)=>{
                        let i = tf(e, t);
                        return n.getPools(i, r)
                    }
                    ,
                    getPools: async(e,n)=>{
                        let {blockNumber: r, protocols: i} = n;
                        return tk(e, {
                            provider: t,
                            blockNumber: r,
                            protocols: i
                        })
                    }
                };
                return n
            }(e);
            return t
        }
        function t_() {
            let e = function() {
                let e = !(arguments.length > 0) || void 0 === arguments[0] || arguments[0]
                  , t = function() {
                    let e = !(arguments.length > 0) || void 0 === arguments[0] || arguments[0];
                    return function(t, n) {
                        let {reserve0: r, reserve1: i} = t
                          , a = new s.sO(r.wrapped,i.wrapped)
                          , [o] = e ? a.getOutputAmount(n.wrapped) : a.getInputAmount(n.wrapped);
                        return o
                    }
                }(e)
                  , n = function() {
                    let e = !(arguments.length > 0) || void 0 === arguments[0] || arguments[0]
                      , t = e ? eL : eq;
                    return function(e, n) {
                        let {amplifier: r, balances: i, fee: a} = e;
                        return t({
                            amount: n,
                            balances: i,
                            amplifier: r,
                            outputCurrency: eX(e, n.currency),
                            fee: a
                        })
                    }
                }(e)
                  , r = function() {
                    let e = !(arguments.length > 0) || void 0 === arguments[0] || arguments[0];
                    return async function(t, n) {
                        let {token0: r, token1: i, fee: a, sqrtRatioX96: o, liquidity: s, ticks: u, tick: l} = t;
                        if (!(null == u ? void 0 : u.length))
                            return null;
                        try {
                            let t = new f.Kg(r.wrapped,i.wrapped,a,o,s,l,u)
                              , c = e ? t.getOutputAmount(n.wrapped) : t.getInputAmount(n.wrapped)
                              , [d,p] = await c
                              , {tickCurrent: h} = p
                              , m = f.l$.countInitializedTicksCrossed(u, l, h);
                            return {
                                quote: d,
                                numOfTicksCrossed: m
                            }
                        } catch (e) {
                            return null
                        }
                    }
                }(e)
                  , i = (t,n)=>e ? t.subtract(n) : t.add(n);
                return async function(a, o) {
                    let {gasModel: u} = o
                      , l = [];
                    for (let o of a)
                        try {
                            let {pools: a, amount: c} = o
                              , d = c
                              , p = Array(a.length).fill(0)
                              , f = !0;
                            for (let[i,o] of function*(t) {
                                let n = e ? 0 : t.length - 1
                                  , r = ()=>e ? n < t.length : n >= 0;
                                for (; r(); )
                                    yield[t[n], n],
                                    e ? n += 1 : n -= 1
                            }(a)) {
                                if (ez(i)) {
                                    d = t(i, d);
                                    continue
                                }
                                if (eW(i)) {
                                    d = n(i, d);
                                    continue
                                }
                                if (eV(i)) {
                                    let e = await r(i, d);
                                    if (!e || e.quote.quotient === s.xE) {
                                        f = !1;
                                        break
                                    }
                                    let {quote: t, numOfTicksCrossed: n} = e;
                                    d = t,
                                    p[o] = n
                                }
                            }
                            if (!f)
                                continue;
                            let {gasEstimate: h, gasCostInUSD: m, gasCostInToken: y} = u.estimateGasCost({
                                ...o,
                                quote: d
                            }, {
                                initializedTickCrossedList: p
                            });
                            l.push({
                                ...o,
                                quote: d,
                                quoteAdjustedForGas: i(d, y),
                                gasEstimate: h,
                                gasCostInUSD: m,
                                gasCostInToken: y
                            })
                        } catch (e) {}
                    return l
                }
            };
            return {
                getRouteWithQuotesExactIn: e(!0),
                getRouteWithQuotesExactOut: e(!1)
            }
        }
        var tS = [{
            inputs: [],
            name: "getCurrentBlockTimestamp",
            outputs: [{
                internalType: "uint256",
                name: "timestamp",
                type: "uint256"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [{
                internalType: "address",
                name: "addr",
                type: "address"
            }],
            name: "getEthBalance",
            outputs: [{
                internalType: "uint256",
                name: "balance",
                type: "uint256"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [{
                components: [{
                    internalType: "address",
                    name: "target",
                    type: "address"
                }, {
                    internalType: "uint256",
                    name: "gasLimit",
                    type: "uint256"
                }, {
                    internalType: "bytes",
                    name: "callData",
                    type: "bytes"
                }],
                internalType: "struct PancakeInterfaceMulticall.Call[]",
                name: "calls",
                type: "tuple[]"
            }],
            name: "multicall",
            outputs: [{
                internalType: "uint256",
                name: "blockNumber",
                type: "uint256"
            }, {
                components: [{
                    internalType: "bool",
                    name: "success",
                    type: "bool"
                }, {
                    internalType: "uint256",
                    name: "gasUsed",
                    type: "uint256"
                }, {
                    internalType: "bytes",
                    name: "returnData",
                    type: "bytes"
                }],
                internalType: "struct PancakeInterfaceMulticall.Result[]",
                name: "returnData",
                type: "tuple[]"
            }],
            stateMutability: "nonpayable",
            type: "function"
        }]
          , tI = class {
        }
          , tP = {
            [s.a_.ETHEREUM]: "0xac1cE734566f390A94b00eb9bf561c2625BF44ea",
            [s.a_.GOERLI]: "0x3D00CdB4785F0ef20C903A13596e0b9B2c652227",
            [s.a_.BSC]: "0xac1cE734566f390A94b00eb9bf561c2625BF44ea",
            [s.a_.BSC_TESTNET]: "0x3D00CdB4785F0ef20C903A13596e0b9B2c652227"
        }
          , tB = class extends tI {
            async callSameFunctionOnMultipleContracts(e) {
                var t;
                let {addresses: n, functionName: r, functionParams: i, providerConfig: a, abi: o} = e
                  , s = null !== (t = null == a ? void 0 : a.blockNumber) && void 0 !== t ? t : void 0
                  , u = (0,
                k.RUZ)({
                    abi: o,
                    functionName: r,
                    args: i
                })
                  , l = n.map(e=>({
                    target: e,
                    callData: u,
                    gasLimit: BigInt(this.gasLimitPerCall)
                }))
                  , {result: [c,d]} = await this.provider.simulateContract({
                    abi: tS,
                    address: tP[this.chainId],
                    functionName: "multicall",
                    args: [l],
                    blockNumber: s ? "object" == typeof s && "function" == typeof s.then ? BigInt(Number(await s)) : BigInt(Number(s)) : void 0
                })
                  , p = [];
                for (let e = 0; e < d.length; e++) {
                    let {success: t, returnData: n} = d[e];
                    if (!t || n.length <= 2) {
                        p.push({
                            success: !1,
                            returnData: n
                        });
                        continue
                    }
                    p.push({
                        success: !0,
                        result: (0,
                        k.khQ)({
                            abi: o,
                            functionName: r,
                            data: n
                        })
                    })
                }
                return {
                    blockNumber: c,
                    results: p
                }
            }
            async callSameFunctionOnContractWithMultipleParams(e) {
                var t, n;
                let {address: r, functionName: i, functionParams: a, additionalConfig: o, providerConfig: s, abi: u} = e
                  , l = null !== (t = null == o ? void 0 : o.gasLimitPerCallOverride) && void 0 !== t ? t : this.gasLimitPerCall
                  , c = null !== (n = null == s ? void 0 : s.blockNumber) && void 0 !== n ? n : void 0
                  , d = a.map(e=>{
                    let t = (0,
                    k.RUZ)({
                        abi: u,
                        functionName: i,
                        args: e
                    });
                    return {
                        target: r,
                        callData: t,
                        gasLimit: BigInt(l)
                    }
                }
                )
                  , {result: [p,f]} = await this.provider.simulateContract({
                    abi: tS,
                    address: tP[this.chainId],
                    functionName: "multicall",
                    args: [d],
                    blockNumber: c ? BigInt(Number(c)) : void 0
                })
                  , h = []
                  , m = [];
                for (let e = 0; e < f.length; e++) {
                    let {success: t, returnData: n, gasUsed: r} = f[e];
                    if (!t || n.length <= 2) {
                        h.push({
                            success: !1,
                            returnData: n
                        });
                        continue
                    }
                    m.push(Number(r)),
                    h.push({
                        success: !0,
                        result: (0,
                        k.khQ)({
                            abi: u,
                            functionName: i,
                            data: n
                        })
                    })
                }
                return {
                    blockNumber: p,
                    results: h,
                    approxGasUsedPerSuccessCall: A.percentile(m, 99)
                }
            }
            async callMultipleFunctionsOnSameContract(e) {
                var t, n;
                let {address: r, functionNames: i, functionParams: a, additionalConfig: o, providerConfig: s, abi: u} = e
                  , l = null !== (t = null == o ? void 0 : o.gasLimitPerCallOverride) && void 0 !== t ? t : this.gasLimitPerCall
                  , c = null !== (n = null == s ? void 0 : s.blockNumber) && void 0 !== n ? n : void 0
                  , d = i.map((e,t)=>{
                    let n = (0,
                    k.RUZ)({
                        abi: u,
                        functionName: e,
                        args: a ? a[t] : []
                    });
                    return {
                        target: r,
                        callData: n,
                        gasLimit: BigInt(l)
                    }
                }
                )
                  , {result: [p,f]} = await this.provider.simulateContract({
                    abi: tS,
                    address: tP[this.chainId],
                    functionName: "multicall",
                    args: [d],
                    blockNumber: c ? BigInt(Number(c)) : void 0
                })
                  , h = []
                  , m = [];
                for (let e = 0; e < f.length; e++) {
                    let {success: t, returnData: n, gasUsed: r} = f[e];
                    if (!t || n.length <= 2) {
                        h.push({
                            success: !1,
                            returnData: n
                        });
                        continue
                    }
                    m.push(Number(r)),
                    h.push({
                        success: !0,
                        result: (0,
                        k.khQ)({
                            abi: u,
                            data: n,
                            functionName: i[e]
                        })
                    })
                }
                return {
                    blockNumber: p,
                    results: h,
                    approxGasUsedPerSuccessCall: A.percentile(m, 99)
                }
            }
            constructor(e, t, n=1e6) {
                super(),
                this.chainId = e,
                this.provider = t,
                this.gasLimitPerCall = n;
                let r = tP[this.chainId];
                if (!r)
                    throw Error(`No address for Pancakeswap Multicall Contract on chain id: ${e}`);
                this.provider = t
            }
        }
        ;
        tB.abi = tS;
        var tO = {
            [s.a_.BSC_TESTNET]: .1,
            [s.a_.BSC]: .1,
            [s.a_.ETHEREUM]: .1,
            [s.a_.GOERLI]: .1
        }
          , tN = class extends Error {
            constructor() {
                super(...arguments),
                this.name = "BlockConflictError"
            }
        }
          , tR = class extends Error {
            constructor() {
                super(...arguments),
                this.name = "SuccessRateError"
            }
        }
          , tF = class extends Error {
            constructor() {
                super(...arguments),
                this.name = "ProviderBlockHeaderError"
            }
        }
          , tD = class extends Error {
            constructor() {
                super(...arguments),
                this.name = "ProviderTimeoutError"
            }
        }
          , tM = class extends Error {
            constructor() {
                super(...arguments),
                this.name = "ProviderGasError"
            }
        }
        ;
        function tL(e) {
            let {getQuoteFunctionName: t, getQuoterAddress: n, abi: r, getCallInputs: i} = e;
            return function(e) {
                let {onChainProvider: a, multicallConfigs: u} = e
                  , l = function() {
                    let e = !(arguments.length > 0) || void 0 === arguments[0] || arguments[0]
                      , l = t(e)
                      , c = (t,n)=>e ? t.subtract(n) : t.add(n);
                    return async function(t, d) {
                        let {blockNumber: p, gasModel: f} = d;
                        if (!t.length)
                            return [];
                        let h = t[0].amount.currency.chainId
                          , m = (null == u ? void 0 : u[h]) || V[h] || V[s.a_.ETHEREUM]
                          , y = a({
                            chainId: h
                        })
                          , {multicallChunk: g, gasLimitOverride: b} = m.defaultConfig
                          , {gasErrorFailureOverride: v, successRateFailureOverrides: w} = m
                          , k = {
                            blockNumber: p
                        }
                          , C = new tB(h,y,b)
                          , _ = t.map(t=>i(t, e))
                          , S = Math.ceil(_.length / Math.ceil(_.length / g))
                          , I = T(_, S)
                          , P = I.map((e,t)=>({
                            order: t,
                            status: "pending",
                            inputs: e
                        }))
                          , B = !1;
                        P.length;
                        let O = 0
                          , {results: N, blockNumber: R, approxGasUsedPerSuccessCall: F} = await E(async(e,t)=>{
                            let i;
                            tU(P),
                            P = await Promise.all(P.map(async(e,t)=>{
                                if ("success" === e.status)
                                    return e;
                                let {inputs: i, order: a} = e;
                                try {
                                    O += 1;
                                    let e = await C.callSameFunctionOnContractWithMultipleParams({
                                        address: n(h),
                                        abi: r,
                                        functionName: l,
                                        functionParams: i,
                                        providerConfig: k,
                                        additionalConfig: {
                                            gasLimitPerCallOverride: b
                                        }
                                    });
                                    return {
                                        order: a,
                                        status: "success",
                                        inputs: i,
                                        results: e
                                    }
                                } catch (e) {
                                    if (e.message.includes("header not found"))
                                        return {
                                            order: a,
                                            status: "failed",
                                            inputs: i,
                                            reason: new tF(e.message.slice(0, 500))
                                        };
                                    if (e.message.includes("timeout"))
                                        return {
                                            order: a,
                                            status: "failed",
                                            inputs: i,
                                            reason: new tD(`Req ${t}/${P.length}. Request had ${i.length} inputs. ${e.message.slice(0, 500)}`)
                                        };
                                    if (e.message.includes("out of gas"))
                                        return {
                                            order: a,
                                            status: "failed",
                                            inputs: i,
                                            reason: new tM(e.message.slice(0, 500))
                                        };
                                    return {
                                        order: a,
                                        status: "failed",
                                        inputs: i,
                                        reason: Error(`Unknown error from provider: ${e.message.slice(0, 500)}`)
                                    }
                                }
                            }
                            ));
                            let[a,s,u] = tU(P);
                            if (u.length > 0)
                                throw Error("Pending quote after waiting for all promises.");
                            let c = !1
                              , d = function(e, t, n) {
                                if (e.length <= 1)
                                    return null;
                                let r = e.map(e=>e.results)
                                  , i = r.map(e=>e.blockNumber)
                                  , a = i.map(e=>e.toString())
                                  , o = x(a);
                                return 1 === o.length ? null : new tN(`Quotes returned from different blocks. ${o}. ${t} calls were made with gas limit ${n}`)
                            }(a, I.length, b);
                            d && (c = !0);
                            let p = s.map(e=>e.reason.name).join(", ");
                            if (s.length > 0)
                                for (let e of s) {
                                    let {reason: t} = e;
                                    t instanceof tN ? c = !0 : t instanceof tF || t instanceof tD || t instanceof tM && (b = v.gasLimitOverride,
                                    g = v.multicallChunk,
                                    c = !0)
                                }
                            if (0 === s.length && (i = function(e, t, n) {
                                let r = e.length
                                  , i = e.filter(e=>e.success).length
                                  , a = 1 * i / r;
                                if (a < n) {
                                    if (t)
                                        return;
                                    return new tR(`Quote success rate below threshold of ${n}: ${a}`)
                                }
                            }(P.reduce((e,t)=>{
                                var n;
                                return "success" === t.status ? [...e, ...(null === (n = t.results) || void 0 === n ? void 0 : n.results) || []] : e
                            }
                            , []), B, tO[h])) && !B && (B = !0,
                            b = w.gasLimitOverride,
                            g = w.multicallChunk,
                            c = !0),
                            c) {
                                let e = Math.ceil(_.length / Math.ceil(_.length / g))
                                  , t = T(_, e);
                                P = t.map((e,t)=>({
                                    order: t,
                                    status: "pending",
                                    inputs: e
                                }))
                            }
                            if (s.length > 0)
                                throw Error(`Failed to get ${s.length} quotes. Reasons: ${p}`);
                            if (i)
                                throw i;
                            let f = a.sort((e,t)=>e.order < t.order ? -1 : 1)
                              , m = f.map(e=>e.results);
                            return {
                                results: o(m, e=>e.results),
                                blockNumber: BigInt(a[0].results.blockNumber),
                                approxGasUsedPerSuccessCall: A.percentile(m.map(e=>e.approxGasUsedPerSuccessCall), 100)
                            }
                        }
                        , {
                            retries: 2,
                            minTimeout: 25,
                            maxTimeout: 250
                        })
                          , D = function(e, t, n, r) {
                            let i = [];
                            for (let a = 0; a < e.length; a += 1) {
                                let o = t[a]
                                  , u = e[a];
                                if (!u)
                                    continue;
                                let {success: l} = u;
                                if (!l)
                                    continue;
                                let c = function(e, t) {
                                    let {input: n, output: r} = e;
                                    return t.equals(n) ? r : n
                                }(o, o.amount.currency)
                                  , d = s.ih.fromRawAmount(c.wrapped, u.result[0].toString())
                                  , {gasEstimate: p, gasCostInToken: f, gasCostInUSD: h} = n.estimateGasCost({
                                    ...o,
                                    quote: d
                                }, {
                                    initializedTickCrossedList: u.result[2]
                                });
                                i.push({
                                    ...o,
                                    quote: d,
                                    quoteAdjustedForGas: r(d, f),
                                    gasEstimate: p,
                                    gasCostInToken: f,
                                    gasCostInUSD: h
                                })
                            }
                            return i
                        }(N, t, f, c);
                        return D
                    }
                };
                return {
                    getRouteWithQuotesExactIn: l(!0),
                    getRouteWithQuotesExactOut: l(!1)
                }
            }
        }
        function tU(e) {
            let t = e.filter(e=>"success" === e.status)
              , n = e.filter(e=>"failed" === e.status)
              , r = e.filter(e=>"pending" === e.status);
            return [t, n, r]
        }
        var tq = tL({
            getQuoterAddress: e=>q[e],
            getQuoteFunctionName: ()=>"quoteExactInput",
            abi: [{
                inputs: [{
                    internalType: "address",
                    name: "_deployer",
                    type: "address"
                }, {
                    internalType: "address",
                    name: "_factory",
                    type: "address"
                }, {
                    internalType: "address",
                    name: "_factoryV2",
                    type: "address"
                }, {
                    internalType: "address",
                    name: "_factoryStable",
                    type: "address"
                }, {
                    internalType: "address",
                    name: "_WETH9",
                    type: "address"
                }],
                stateMutability: "nonpayable",
                type: "constructor"
            }, {
                inputs: [],
                name: "WETH9",
                outputs: [{
                    internalType: "address",
                    name: "",
                    type: "address"
                }],
                stateMutability: "view",
                type: "function"
            }, {
                inputs: [],
                name: "deployer",
                outputs: [{
                    internalType: "address",
                    name: "",
                    type: "address"
                }],
                stateMutability: "view",
                type: "function"
            }, {
                inputs: [],
                name: "factory",
                outputs: [{
                    internalType: "address",
                    name: "",
                    type: "address"
                }],
                stateMutability: "view",
                type: "function"
            }, {
                inputs: [],
                name: "factoryStable",
                outputs: [{
                    internalType: "address",
                    name: "",
                    type: "address"
                }],
                stateMutability: "view",
                type: "function"
            }, {
                inputs: [],
                name: "factoryV2",
                outputs: [{
                    internalType: "address",
                    name: "",
                    type: "address"
                }],
                stateMutability: "view",
                type: "function"
            }, {
                inputs: [{
                    internalType: "int256",
                    name: "amount0Delta",
                    type: "int256"
                }, {
                    internalType: "int256",
                    name: "amount1Delta",
                    type: "int256"
                }, {
                    internalType: "bytes",
                    name: "path",
                    type: "bytes"
                }],
                name: "pancakeV3SwapCallback",
                outputs: [],
                stateMutability: "view",
                type: "function"
            }, {
                inputs: [{
                    internalType: "bytes",
                    name: "path",
                    type: "bytes"
                }, {
                    internalType: "uint256[]",
                    name: "flag",
                    type: "uint256[]"
                }, {
                    internalType: "uint256",
                    name: "amountIn",
                    type: "uint256"
                }],
                name: "quoteExactInput",
                outputs: [{
                    internalType: "uint256",
                    name: "amountOut",
                    type: "uint256"
                }, {
                    internalType: "uint160[]",
                    name: "v3SqrtPriceX96AfterList",
                    type: "uint160[]"
                }, {
                    internalType: "uint32[]",
                    name: "v3InitializedTicksCrossedList",
                    type: "uint32[]"
                }, {
                    internalType: "uint256",
                    name: "v3SwapGasEstimate",
                    type: "uint256"
                }],
                stateMutability: "nonpayable",
                type: "function"
            }, {
                inputs: [{
                    components: [{
                        internalType: "address",
                        name: "tokenIn",
                        type: "address"
                    }, {
                        internalType: "address",
                        name: "tokenOut",
                        type: "address"
                    }, {
                        internalType: "uint256",
                        name: "amountIn",
                        type: "uint256"
                    }, {
                        internalType: "uint256",
                        name: "flag",
                        type: "uint256"
                    }],
                    internalType: "struct IMixedRouteQuoterV1.QuoteExactInputSingleStableParams",
                    name: "params",
                    type: "tuple"
                }],
                name: "quoteExactInputSingleStable",
                outputs: [{
                    internalType: "uint256",
                    name: "amountOut",
                    type: "uint256"
                }],
                stateMutability: "view",
                type: "function"
            }, {
                inputs: [{
                    components: [{
                        internalType: "address",
                        name: "tokenIn",
                        type: "address"
                    }, {
                        internalType: "address",
                        name: "tokenOut",
                        type: "address"
                    }, {
                        internalType: "uint256",
                        name: "amountIn",
                        type: "uint256"
                    }],
                    internalType: "struct IMixedRouteQuoterV1.QuoteExactInputSingleV2Params",
                    name: "params",
                    type: "tuple"
                }],
                name: "quoteExactInputSingleV2",
                outputs: [{
                    internalType: "uint256",
                    name: "amountOut",
                    type: "uint256"
                }],
                stateMutability: "view",
                type: "function"
            }, {
                inputs: [{
                    components: [{
                        internalType: "address",
                        name: "tokenIn",
                        type: "address"
                    }, {
                        internalType: "address",
                        name: "tokenOut",
                        type: "address"
                    }, {
                        internalType: "uint256",
                        name: "amountIn",
                        type: "uint256"
                    }, {
                        internalType: "uint24",
                        name: "fee",
                        type: "uint24"
                    }, {
                        internalType: "uint160",
                        name: "sqrtPriceLimitX96",
                        type: "uint160"
                    }],
                    internalType: "struct IMixedRouteQuoterV1.QuoteExactInputSingleV3Params",
                    name: "params",
                    type: "tuple"
                }],
                name: "quoteExactInputSingleV3",
                outputs: [{
                    internalType: "uint256",
                    name: "amountOut",
                    type: "uint256"
                }, {
                    internalType: "uint160",
                    name: "sqrtPriceX96After",
                    type: "uint160"
                }, {
                    internalType: "uint32",
                    name: "initializedTicksCrossed",
                    type: "uint32"
                }, {
                    internalType: "uint256",
                    name: "gasEstimate",
                    type: "uint256"
                }],
                stateMutability: "nonpayable",
                type: "function"
            }],
            getCallInputs: (e,t)=>[e6(e, !t), e.pools.map(e=>{
                if (eV(e))
                    return 0;
                if (ez(e))
                    return 1;
                if (eW(e)) {
                    if (2 === e.balances.length)
                        return 2;
                    if (3 === e.balances.length)
                        return 3
                }
                return -1
            }
            ).filter(e=>e >= 0), `0x ${e.amount.quotient.toString(16)}`]
        })
          , tj = tL({
            getQuoterAddress: e=>j[e],
            getQuoteFunctionName: e=>e ? "quoteExactInput" : "quoteExactOutput",
            abi: [{
                inputs: [{
                    internalType: "bytes",
                    name: "path",
                    type: "bytes"
                }, {
                    internalType: "uint256",
                    name: "amountIn",
                    type: "uint256"
                }],
                name: "quoteExactInput",
                outputs: [{
                    internalType: "uint256",
                    name: "amountOut",
                    type: "uint256"
                }, {
                    internalType: "uint160[]",
                    name: "sqrtPriceX96AfterList",
                    type: "uint160[]"
                }, {
                    internalType: "uint32[]",
                    name: "initializedTicksCrossedList",
                    type: "uint32[]"
                }, {
                    internalType: "uint256",
                    name: "gasEstimate",
                    type: "uint256"
                }],
                stateMutability: "nonpayable",
                type: "function"
            }, {
                inputs: [{
                    components: [{
                        internalType: "address",
                        name: "tokenIn",
                        type: "address"
                    }, {
                        internalType: "address",
                        name: "tokenOut",
                        type: "address"
                    }, {
                        internalType: "uint256",
                        name: "amountIn",
                        type: "uint256"
                    }, {
                        internalType: "uint24",
                        name: "fee",
                        type: "uint24"
                    }, {
                        internalType: "uint160",
                        name: "sqrtPriceLimitX96",
                        type: "uint160"
                    }],
                    internalType: "struct IQuoterV2.QuoteExactInputSingleParams",
                    name: "params",
                    type: "tuple"
                }],
                name: "quoteExactInputSingle",
                outputs: [{
                    internalType: "uint256",
                    name: "amountOut",
                    type: "uint256"
                }, {
                    internalType: "uint160",
                    name: "sqrtPriceX96After",
                    type: "uint160"
                }, {
                    internalType: "uint32",
                    name: "initializedTicksCrossed",
                    type: "uint32"
                }, {
                    internalType: "uint256",
                    name: "gasEstimate",
                    type: "uint256"
                }],
                stateMutability: "nonpayable",
                type: "function"
            }, {
                inputs: [{
                    internalType: "bytes",
                    name: "path",
                    type: "bytes"
                }, {
                    internalType: "uint256",
                    name: "amountOut",
                    type: "uint256"
                }],
                name: "quoteExactOutput",
                outputs: [{
                    internalType: "uint256",
                    name: "amountIn",
                    type: "uint256"
                }, {
                    internalType: "uint160[]",
                    name: "sqrtPriceX96AfterList",
                    type: "uint160[]"
                }, {
                    internalType: "uint32[]",
                    name: "initializedTicksCrossedList",
                    type: "uint32[]"
                }, {
                    internalType: "uint256",
                    name: "gasEstimate",
                    type: "uint256"
                }],
                stateMutability: "nonpayable",
                type: "function"
            }, {
                inputs: [{
                    components: [{
                        internalType: "address",
                        name: "tokenIn",
                        type: "address"
                    }, {
                        internalType: "address",
                        name: "tokenOut",
                        type: "address"
                    }, {
                        internalType: "uint256",
                        name: "amount",
                        type: "uint256"
                    }, {
                        internalType: "uint24",
                        name: "fee",
                        type: "uint24"
                    }, {
                        internalType: "uint160",
                        name: "sqrtPriceLimitX96",
                        type: "uint160"
                    }],
                    internalType: "struct IQuoterV2.QuoteExactOutputSingleParams",
                    name: "params",
                    type: "tuple"
                }],
                name: "quoteExactOutputSingle",
                outputs: [{
                    internalType: "uint256",
                    name: "amountIn",
                    type: "uint256"
                }, {
                    internalType: "uint160",
                    name: "sqrtPriceX96After",
                    type: "uint160"
                }, {
                    internalType: "uint32",
                    name: "initializedTicksCrossed",
                    type: "uint32"
                }, {
                    internalType: "uint256",
                    name: "gasEstimate",
                    type: "uint256"
                }],
                stateMutability: "nonpayable",
                type: "function"
            }],
            getCallInputs: (e,t)=>[e6(e, !t), `0x ${e.amount.quotient.toString(16)}`]
        });
        function t$(e) {
            let {onChainProvider: t, multicallConfigs: n} = e
              , r = t_()
              , i = tq({
                onChainProvider: t,
                multicallConfigs: n
            })
              , a = tj({
                onChainProvider: t,
                multicallConfigs: n
            })
              , o = function() {
                let e = !(arguments.length > 0) || void 0 === arguments[0] || arguments[0]
                  , t = e ? r.getRouteWithQuotesExactIn : r.getRouteWithQuotesExactOut
                  , n = e ? i.getRouteWithQuotesExactIn : i.getRouteWithQuotesExactOut
                  , o = e ? a.getRouteWithQuotesExactIn : a.getRouteWithQuotesExactOut;
                return async function(e, r) {
                    let {blockNumber: i, gasModel: a} = r
                      , s = []
                      , u = []
                      , l = [];
                    for (let t of e) {
                        if (0 === t.type || 2 === t.type) {
                            l.push(t);
                            continue
                        }
                        if (1 === t.type) {
                            s.push(t);
                            continue
                        }
                        let {pools: e} = t;
                        if (e.some(e=>eV(e))) {
                            u.push(t);
                            continue
                        }
                        l.push(t)
                    }
                    let[c,d,p] = await Promise.all([t(l, {
                        blockNumber: i,
                        gasModel: a
                    }), n(u, {
                        blockNumber: i,
                        gasModel: a
                    }), o(s, {
                        blockNumber: i,
                        gasModel: a
                    })]);
                    return [...c, ...d, ...p]
                }
            };
            return {
                getRouteWithQuotesExactIn: o(!0),
                getRouteWithQuotesExactOut: o(!1)
            }
        }
        function tZ(e) {
            let t = [0, 2, 1];
            return {
                getCandidatePools: async(n,r,i)=>{
                    let {protocols: a=t} = i;
                    return e.filter(e=>a.includes(e.type))
                }
                ,
                getPools: async(n,r)=>{
                    let {protocols: i=t} = r
                      , a = [];
                    for (let[t,r] of n)
                        for (let n of e)
                            eK(n, t) && eK(n, r) && i.includes(n.type) && a.push(n);
                    return a
                }
            }
        }
        var tH = {
            topN: 2,
            topNDirectSwaps: 2,
            topNTokenInOut: 2,
            topNSecondHop: 1,
            topNWithEachBaseToken: 3,
            topNWithBaseToken: 3
        }
          , tG = {
            [s.a_.BSC]: {
                topN: 2,
                topNDirectSwaps: 2,
                topNTokenInOut: 2,
                topNSecondHop: 1,
                topNWithEachBaseToken: 3,
                topNWithBaseToken: 4
            },
            [s.a_.BSC_TESTNET]: {
                topN: 2,
                topNDirectSwaps: 2,
                topNTokenInOut: 2,
                topNSecondHop: 1,
                topNWithEachBaseToken: 3,
                topNWithBaseToken: 4
            },
            [s.a_.ETHEREUM]: {
                topN: 2,
                topNDirectSwaps: 2,
                topNTokenInOut: 2,
                topNSecondHop: 1,
                topNWithEachBaseToken: 3,
                topNWithBaseToken: 4
            },
            [s.a_.GOERLI]: {
                topN: 2,
                topNDirectSwaps: 2,
                topNTokenInOut: 2,
                topNSecondHop: 1,
                topNWithEachBaseToken: 3,
                topNWithBaseToken: 4
            }
        }
          , tz = {
            [s.a_.BSC]: {
                [u.ds.ankr.address]: {
                    topNTokenInOut: 4
                },
                [u.ds.ankrbnb.address]: {
                    topNTokenInOut: 4
                },
                [u.ds.ankrETH.address]: {
                    topNTokenInOut: 4
                }
            }
        };
        function tV(e, t) {
            if (!t)
                return e;
            let n = {
                ...e
            }
              , r = Object.keys(n);
            for (let e of r)
                n[e] = Math.max(n[e], t[e] || 0);
            return n
        }
        var tW = C.gql`
  query getPools($pageSize: Int!, $poolAddrs: [String]) {
    pools(first: $pageSize, where: { id_in: $poolAddrs }) {
      id
      tick
      sqrtPrice
      feeTier
      liquidity
      feeProtocol
      totalValueLockedUSD
    }
  }
`
          , tK = async e=>{
            var t, n;
            let {provider: r, pairs: i} = e
              , a = null === (t = i[0]) || void 0 === t ? void 0 : null === (n = t[0]) || void 0 === n ? void 0 : n.chainId;
            if (!a)
                return [];
            let o = r({
                chainId: a
            });
            if (!o)
                return console.error("No subgraph client found for chainId", a),
                [];
            e7("Get V3 pools from subgraph start", i);
            let s = new Map;
            for (let e of i) {
                let t = function(e) {
                    let[t,n] = e;
                    return [f.lk.LOWEST, f.lk.LOW, f.lk.MEDIUM, f.lk.HIGH].map(e=>{
                        let[r,i] = t.wrapped.sortsBefore(n.wrapped) ? [t, n] : [n, t]
                          , a = [r.chainId, r.symbol, i.symbol, e].join("_")
                          , o = tX.get(a);
                        if (o)
                            return o;
                        let s = {
                            address: f.Kg.getAddress(t.wrapped, n.wrapped, e),
                            currencyA: t,
                            currencyB: n,
                            fee: e
                        };
                        return tX.set(a, s),
                        s
                    }
                    )
                }(e);
                for (let e of t)
                    s.set(e.address.toLocaleLowerCase(), e)
            }
            let u = Array.from(s.keys())
              , {pools: l} = await o.request(tW, {
                pageSize: 1e3,
                poolAddrs: u
            })
              , c = l.map(e=>{
                let {id: t, liquidity: n, sqrtPrice: r, tick: i, totalValueLockedUSD: a, feeProtocol: o} = e
                  , {fee: u, currencyA: l, currencyB: c, address: d} = s.get(t)
                  , [p,h] = l.wrapped.sortsBefore(c.wrapped) ? [l, c] : [c, l]
                  , [m,y] = (0,
                f.BS)(o);
                return {
                    type: 1,
                    fee: u,
                    token0: p,
                    token1: h,
                    liquidity: BigInt(n),
                    sqrtRatioX96: BigInt(r),
                    tick: Number(i),
                    address: d,
                    tvlUSD: BigInt(Number.parseInt(a)),
                    token0ProtocolFee: m,
                    token1ProtocolFee: y
                }
            }
            );
            return e7("Got V3 pools from subgraph end", c),
            c
        }
          , tX = new Map
          , tJ = (e,t)=>e.tvlUSD >= t.tvlUSD ? -1 : 1;
        function tQ(e, t, n) {
            var r;
            let i = function(e, t) {
                var n, r, i;
                let a = null == e ? void 0 : e.chainId;
                if (!a || !tG[a])
                    return tH;
                let o = null === (n = tz[a]) || void 0 === n ? void 0 : n[(null == e ? void 0 : e.wrapped.address) || ""]
                  , s = null === (r = tz[a]) || void 0 === r ? void 0 : r[(null == t ? void 0 : null === (i = t.wrapped) || void 0 === i ? void 0 : i.address) || ""];
                return tV(tV(tG[a], o), s)
            }(e, t);
            if (!n.length)
                return [];
            let a = n.sort(tJ)
              , {token0: {chainId: o}} = a[0]
              , u = null !== (r = F[o]) && void 0 !== r ? r : []
              , l = new Set
              , c = e=>{
                for (let t of e)
                    l.add(t.address)
            }
              , d = u.map(t=>a.filter(n=>n.token0.wrapped.equals(t) && n.token1.wrapped.equals(e.wrapped) || n.token1.wrapped.equals(t) && n.token0.wrapped.equals(e.wrapped)).sort(tJ).slice(0, i.topNWithEachBaseToken)).reduce((e,t)=>[...e, ...t], []).sort(tJ).slice(0, i.topNWithBaseToken);
            c(d);
            let p = u.map(e=>a.filter(n=>!l.has(n.address) && (n.token0.wrapped.equals(e) && n.token1.wrapped.equals(t.wrapped) || n.token1.wrapped.equals(e) && n.token0.wrapped.equals(t.wrapped))).sort(tJ).slice(0, i.topNWithEachBaseToken)).reduce((e,t)=>[...e, ...t], []).sort(tJ).slice(0, i.topNWithBaseToken);
            c(p);
            let f = a.filter(n=>!l.has(n.address) && (n.token0.wrapped.equals(e.wrapped) && n.token1.wrapped.equals(t.wrapped) || n.token1.wrapped.equals(e.wrapped) && n.token0.wrapped.equals(t.wrapped))).slice(0, i.topNDirectSwaps);
            c(f);
            let h = s.FX[o]
              , m = h ? a.filter(t=>!l.has(t.address) && (t.token0.wrapped.equals(h) && t.token1.wrapped.equals(e.wrapped) || t.token1.wrapped.equals(h) && t.token0.wrapped.equals(e.wrapped))).slice(0, 1) : [];
            c(m);
            let y = h ? a.filter(e=>!l.has(e.address) && (e.token0.wrapped.equals(h) && e.token1.wrapped.equals(t.wrapped) || e.token1.wrapped.equals(h) && e.token0.wrapped.equals(t.wrapped))).slice(0, 1) : [];
            c(y);
            let g = a.slice(0, i.topN).filter(e=>!l.has(e.address));
            c(g);
            let b = a.filter(t=>!l.has(t.address) && (t.token0.wrapped.equals(e.wrapped) || t.token1.wrapped.equals(e.wrapped))).slice(0, i.topNTokenInOut);
            c(b);
            let v = a.filter(e=>!l.has(e.address) && (e.token0.wrapped.equals(t.wrapped) || e.token1.wrapped.equals(t.wrapped))).slice(0, i.topNTokenInOut);
            c(v);
            let w = b.map(t=>t.token0.wrapped.equals(e.wrapped) ? t.token1 : t.token0).map(e=>a.filter(t=>!l.has(t.address) && (t.token0.wrapped.equals(e.wrapped) || t.token1.wrapped.equals(e.wrapped))).slice(0, i.topNSecondHop)).reduce((e,t)=>[...e, ...t], []).sort(tJ).slice(0, i.topNSecondHop);
            c(w);
            let T = v.map(e=>e.token0.wrapped.equals(t.wrapped) ? e.token1 : e.token0).map(e=>a.filter(t=>!l.has(t.address) && (t.token0.wrapped.equals(e.wrapped) || t.token1.wrapped.equals(e.wrapped))).slice(0, i.topNSecondHop)).reduce((e,t)=>[...e, ...t], []).sort(tJ).slice(0, i.topNSecondHop);
            c(T);
            let E = [...d, ...p, ...f, ...m, ...y, ...g, ...b, ...v, ...w, ...T];
            return E.map(e=>{
                let {tvlUSD: t, ...n} = e;
                return n
            }
            )
        }
        var tY = C.gql`
  query getPools($pageSize: Int!, $poolAddrs: [ID!]) {
    pairs(first: $pageSize, where: { id_in: $poolAddrs }) {
      id
      reserve0
      reserve1
      reserveUSD
    }
  }
`
          , t0 = async e=>{
            var t, n;
            let {provider: r, pairs: i} = e
              , a = null === (t = i[0]) || void 0 === t ? void 0 : null === (n = t[0]) || void 0 === n ? void 0 : n.chainId;
            if (!a)
                return [];
            let o = r({
                chainId: a
            });
            if (!o)
                return [];
            let u = new Map
              , l = [];
            for (let e of i) {
                let t = function(e) {
                    let[t,n] = e;
                    return {
                        currencyA: t,
                        currencyB: n,
                        address: s.sO.getAddress(t.wrapped, n.wrapped)
                    }
                }(e)
                  , n = t.address.toLocaleLowerCase();
                u.get(n) || (u.set(n, t),
                l.push(n))
            }
            e7("Get V2 pools from subgraph start", i);
            let {pairs: c} = await o.request(tY, {
                pageSize: 1e3,
                poolAddrs: l
            })
              , d = c.map(e=>{
                let {id: t, reserveUSD: n, reserve0: r, reserve1: i} = e
                  , {currencyA: a, currencyB: o, address: s} = u.get(t.toLocaleLowerCase())
                  , [l,c] = a.wrapped.sortsBefore(o.wrapped) ? [a, o] : [o, a]
                  , d = eZ(r, l)
                  , p = eZ(i, c);
                return r && i ? {
                    address: s,
                    type: 0,
                    reserve0: d,
                    reserve1: p,
                    tvlUSD: BigInt(Number.parseInt(n))
                } : null
            }
            ).filter(e=>!!e);
            return e7("Got V2 pools from subgraph end", d),
            d
        }
          , t1 = {
            topN: 3,
            topNDirectSwaps: 2,
            topNTokenInOut: 2,
            topNSecondHop: 1,
            topNWithEachBaseToken: 3,
            topNWithBaseToken: 3
        }
          , t2 = (e,t)=>e.tvlUSD >= t.tvlUSD ? -1 : 1;
        function t6(e, t, n) {
            var r;
            if (!n.length)
                return [];
            let {reserve0: {currency: {chainId: i}}} = n[0]
              , a = null !== (r = F[i]) && void 0 !== r ? r : []
              , o = new Set
              , u = e=>{
                for (let t of e)
                    o.add(t.address)
            }
              , l = a.map(t=>n.filter(n=>n.reserve0.currency.wrapped.equals(t) && n.reserve1.currency.wrapped.equals(e.wrapped) || n.reserve1.currency.wrapped.equals(t) && n.reserve0.currency.wrapped.equals(e.wrapped)).sort(t2).slice(0, t1.topNWithEachBaseToken)).reduce((e,t)=>[...e, ...t], []).sort(t2).slice(0, t1.topNWithBaseToken);
            u(l);
            let c = a.map(e=>n.filter(n=>!o.has(n.address) && (n.reserve0.currency.wrapped.equals(e) && n.reserve1.currency.wrapped.equals(t.wrapped) || n.reserve1.currency.wrapped.equals(e) && n.reserve0.currency.wrapped.equals(t.wrapped))).sort(t2).slice(0, t1.topNWithEachBaseToken)).reduce((e,t)=>[...e, ...t], []).sort(t2).slice(0, t1.topNWithBaseToken);
            u(c);
            let d = n.filter(n=>!o.has(n.address) && (n.reserve0.currency.wrapped.equals(e.wrapped) && n.reserve1.currency.wrapped.equals(t.wrapped) || n.reserve1.currency.wrapped.equals(e.wrapped) && n.reserve0.currency.wrapped.equals(t.wrapped))).slice(0, t1.topNDirectSwaps);
            u(d);
            let p = s.FX[i]
              , f = p ? n.filter(t=>!o.has(t.address) && (t.reserve0.currency.wrapped.equals(p) && t.reserve1.currency.wrapped.equals(e.wrapped) || t.reserve1.currency.wrapped.equals(p) && t.reserve0.currency.wrapped.equals(e.wrapped))).slice(0, 1) : [];
            u(f);
            let h = p ? n.filter(e=>!o.has(e.address) && (e.reserve0.currency.wrapped.equals(p) && e.reserve1.currency.wrapped.equals(t.wrapped) || e.reserve1.currency.wrapped.equals(p) && e.reserve0.currency.wrapped.equals(t.wrapped))).slice(0, 1) : [];
            u(h);
            let m = n.slice(0, t1.topN).filter(e=>!o.has(e.address));
            u(m);
            let y = n.filter(t=>!o.has(t.address) && (t.reserve0.currency.wrapped.equals(e.wrapped) || t.reserve1.currency.wrapped.equals(e.wrapped))).slice(0, t1.topNTokenInOut);
            u(y);
            let g = n.filter(e=>!o.has(e.address) && (e.reserve0.currency.wrapped.equals(t.wrapped) || e.reserve1.currency.wrapped.equals(t.wrapped))).slice(0, t1.topNTokenInOut);
            u(g);
            let b = y.map(t=>t.reserve0.currency.wrapped.equals(e.wrapped) ? t.reserve1.currency : t.reserve0.currency).map(e=>n.filter(t=>!o.has(t.address) && (t.reserve0.currency.wrapped.equals(e.wrapped) || t.reserve1.currency.wrapped.equals(e.wrapped))).slice(0, t1.topNSecondHop)).reduce((e,t)=>[...e, ...t], []).sort(t2).slice(0, t1.topNSecondHop);
            u(b);
            let v = g.map(e=>e.reserve0.currency.wrapped.equals(t.wrapped) ? e.reserve1.currency : e.reserve0.currency).map(e=>n.filter(t=>!o.has(t.address) && (t.reserve0.currency.wrapped.equals(e.wrapped) || t.reserve1.currency.wrapped.equals(e.wrapped))).slice(0, t1.topNSecondHop)).reduce((e,t)=>[...e, ...t], []).sort(t2).slice(0, t1.topNSecondHop);
            u(v);
            let w = [...l, ...c, ...d, ...f, ...h, ...m, ...y, ...g, ...b, ...v];
            return w.map(e=>{
                let {tvlUSD: t, ...n} = e;
                return n
            }
            )
        }
        var t5 = {};
        I(t5, {
            zRouterGetParams: ()=>nu,
            zRouterPostParams: ()=>nl
        });
        var t3 = _.z.nativeEnum(s.a_)
          , t8 = _.z.nativeEnum(f.lk)
          , t4 = _.z.nativeEnum(s.YL)
          , t9 = _.z.nativeEnum(eH)
          , t7 = _.z.array(t9)
          , ne = _.z.string().regex(/^0x[a-fA-F0-9]{40}$/).min(1)
          , nt = _.z.string().regex(/^[0-9]+$/)
          , nn = _.z.object({
            address: ne,
            decimals: _.z.number(),
            symbol: _.z.string()
        }).required()
          , nr = _.z.object({
            currency: nn.required(),
            value: nt
        }).required()
          , ni = _.z.object({
            type: t9,
            reserve0: nr,
            reserve1: nr
        }).required()
          , na = _.z.object({
            type: t9,
            token0: nn,
            token1: nn,
            fee: t8,
            liquidity: nt,
            sqrtRatioX96: nt,
            tick: _.z.number(),
            address: ne,
            token0ProtocolFee: _.z.string(),
            token1ProtocolFee: _.z.string()
        }).required()
          , no = _.z.object({
            type: t9,
            balances: _.z.array(nr),
            amplifier: nt,
            fee: _.z.string()
        }).required()
          , ns = _.z.array(_.z.union([ni, na, no]))
          , nu = _.z.object({
            chainId: t3,
            tradeType: t4,
            amount: nr,
            currency: nn,
            gasPriceWei: nt.optional(),
            maxHops: _.z.number().optional(),
            maxSplits: _.z.number().optional(),
            blockNumber: nt.optional(),
            poolTypes: t7.optional()
        }).required({
            chainId: !0,
            tradeType: !0,
            amount: !0,
            currency: !0,
            candidatePools: !0
        })
          , nl = _.z.object({
            chainId: t3,
            tradeType: t4,
            amount: nr,
            currency: nn,
            candidatePools: ns,
            gasPriceWei: nt.optional(),
            maxHops: _.z.number().optional(),
            maxSplits: _.z.number().optional(),
            blockNumber: nt.optional(),
            poolTypes: t7.optional()
        }).required({
            chainId: !0,
            tradeType: !0,
            amount: !0,
            currency: !0,
            candidatePools: !0
        })
          , nc = class {
            static encodeApproveMax(e) {
                return nc.INTERFACE.encodeFunctionData("approveMax", [e.address])
            }
            static encodeApproveMaxMinusOne(e) {
                return nc.INTERFACE.encodeFunctionData("approveMaxMinusOne", [e.address])
            }
            static encodeApproveZeroThenMax(e) {
                return nc.INTERFACE.encodeFunctionData("approveZeroThenMax", [e.address])
            }
            static encodeApproveZeroThenMaxMinusOne(e) {
                return nc.INTERFACE.encodeFunctionData("approveZeroThenMaxMinusOne", [e.address])
            }
            static encodeCallPositionManager(e) {
                if ((0,
                p.Z)(e.length > 0, "NULL_CALLDATA"),
                1 === e.length)
                    return nc.INTERFACE.encodeFunctionData("callPositionManager", e);
                let t = f.cK.INTERFACE.encodeFunctionData("multicall", [e]);
                return nc.INTERFACE.encodeFunctionData("callPositionManager", [t])
            }
            static encodeAddLiquidity(e, t, n, r) {
                let {amount0: i, amount1: a} = e.mintAmountsWithSlippage(r);
                return (t.amount0.quotient < i && (i = t.amount0.quotient),
                t.amount1.quotient < a && (a = t.amount1.quotient),
                Object.keys(n).some(e=>"recipient" === e)) ? nc.INTERFACE.encodeFunctionData("mint", [{
                    token0: e.pool.token0.address,
                    token1: e.pool.token1.address,
                    fee: e.pool.fee,
                    tickLower: e.tickLower,
                    tickUpper: e.tickUpper,
                    amount0Min: (0,
                    f._s)(i),
                    amount1Min: (0,
                    f._s)(a),
                    recipient: n.recipient
                }]) : nc.INTERFACE.encodeFunctionData("increaseLiquidity", [{
                    token0: e.pool.token0.address,
                    token1: e.pool.token1.address,
                    amount0Min: (0,
                    f._s)(i),
                    amount1Min: (0,
                    f._s)(a),
                    tokenId: (0,
                    f._s)(n.tokenId)
                }])
            }
            static encodeApprove(e, t) {
                switch (t) {
                case 1:
                    return nc.encodeApproveMax(e.wrapped);
                case 2:
                    return nc.encodeApproveMaxMinusOne(e.wrapped);
                case 3:
                    return nc.encodeApproveZeroThenMax(e.wrapped);
                case 4:
                    return nc.encodeApproveZeroThenMaxMinusOne(e.wrapped);
                default:
                    throw Error("Error: invalid ApprovalType")
                }
            }
            constructor() {}
        }
          , nd = nc;
        nd.INTERFACE = new h.Interface([{
            inputs: [{
                internalType: "address",
                name: "token",
                type: "address"
            }],
            name: "approveMax",
            outputs: [],
            stateMutability: "payable",
            type: "function"
        }, {
            inputs: [{
                internalType: "address",
                name: "token",
                type: "address"
            }],
            name: "approveMaxMinusOne",
            outputs: [],
            stateMutability: "payable",
            type: "function"
        }, {
            inputs: [{
                internalType: "address",
                name: "token",
                type: "address"
            }],
            name: "approveZeroThenMax",
            outputs: [],
            stateMutability: "payable",
            type: "function"
        }, {
            inputs: [{
                internalType: "address",
                name: "token",
                type: "address"
            }],
            name: "approveZeroThenMaxMinusOne",
            outputs: [],
            stateMutability: "payable",
            type: "function"
        }, {
            inputs: [{
                internalType: "bytes",
                name: "data",
                type: "bytes"
            }],
            name: "callPositionManager",
            outputs: [{
                internalType: "bytes",
                name: "result",
                type: "bytes"
            }],
            stateMutability: "payable",
            type: "function"
        }, {
            inputs: [{
                internalType: "address",
                name: "token",
                type: "address"
            }, {
                internalType: "uint256",
                name: "amount",
                type: "uint256"
            }],
            name: "getApprovalType",
            outputs: [{
                internalType: "enum IApproveAndCall.ApprovalType",
                name: "",
                type: "uint8"
            }],
            stateMutability: "nonpayable",
            type: "function"
        }, {
            inputs: [{
                components: [{
                    internalType: "address",
                    name: "token0",
                    type: "address"
                }, {
                    internalType: "address",
                    name: "token1",
                    type: "address"
                }, {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256"
                }, {
                    internalType: "uint256",
                    name: "amount0Min",
                    type: "uint256"
                }, {
                    internalType: "uint256",
                    name: "amount1Min",
                    type: "uint256"
                }],
                internalType: "struct IApproveAndCall.IncreaseLiquidityParams",
                name: "params",
                type: "tuple"
            }],
            name: "increaseLiquidity",
            outputs: [{
                internalType: "bytes",
                name: "result",
                type: "bytes"
            }],
            stateMutability: "payable",
            type: "function"
        }, {
            inputs: [{
                components: [{
                    internalType: "address",
                    name: "token0",
                    type: "address"
                }, {
                    internalType: "address",
                    name: "token1",
                    type: "address"
                }, {
                    internalType: "uint24",
                    name: "fee",
                    type: "uint24"
                }, {
                    internalType: "int24",
                    name: "tickLower",
                    type: "int24"
                }, {
                    internalType: "int24",
                    name: "tickUpper",
                    type: "int24"
                }, {
                    internalType: "uint256",
                    name: "amount0Min",
                    type: "uint256"
                }, {
                    internalType: "uint256",
                    name: "amount1Min",
                    type: "uint256"
                }, {
                    internalType: "address",
                    name: "recipient",
                    type: "address"
                }],
                internalType: "struct IApproveAndCall.MintParams",
                name: "params",
                type: "tuple"
            }],
            name: "mint",
            outputs: [{
                internalType: "bytes",
                name: "result",
                type: "bytes"
            }],
            stateMutability: "payable",
            type: "function"
        }]);
        var np = class {
            static encodeMulticall(e, t) {
                if (void 0 === t)
                    return f.mG.encodeMulticall(e);
                if (Array.isArray(e) || (e = [e]),
                "string" == typeof t && t.startsWith("0x")) {
                    let n = function(e) {
                        if (!e.match(/^0x[0-9a-fA-F]{64}$/))
                            throw Error(`${e} is not valid bytes32.`);
                        return e.toLowerCase()
                    }(t);
                    return np.INTERFACE.encodeFunctionData("multicall(bytes32,bytes[])", [n, e])
                }
                let n = (0,
                f._s)(t);
                return np.INTERFACE.encodeFunctionData("multicall(uint256,bytes[])", [n, e])
            }
            constructor() {}
        }
          , nf = np;
        function nh(e) {
            return (0,
            f._s)(e.multiply(1e4).quotient)
        }
        nf.INTERFACE = new h.Interface([{
            inputs: [{
                internalType: "bytes32",
                name: "previousBlockhash",
                type: "bytes32"
            }, {
                internalType: "bytes[]",
                name: "data",
                type: "bytes[]"
            }],
            name: "multicall",
            outputs: [{
                internalType: "bytes[]",
                name: "results",
                type: "bytes[]"
            }],
            stateMutability: "payable",
            type: "function"
        }, {
            inputs: [{
                internalType: "uint256",
                name: "deadline",
                type: "uint256"
            }, {
                internalType: "bytes[]",
                name: "data",
                type: "bytes[]"
            }],
            name: "multicall",
            outputs: [{
                internalType: "bytes[]",
                name: "results",
                type: "bytes[]"
            }],
            stateMutability: "payable",
            type: "function"
        }, {
            inputs: [{
                internalType: "bytes[]",
                name: "data",
                type: "bytes[]"
            }],
            name: "multicall",
            outputs: [{
                internalType: "bytes[]",
                name: "results",
                type: "bytes[]"
            }],
            stateMutability: "payable",
            type: "function"
        }]);
        var nm = class {
            static encodeUnwrapWETH9(e, t, n) {
                if ("string" == typeof t)
                    return f.H4.encodeUnwrapWETH9(e, t, n);
                if (n) {
                    let t = nh(n.fee)
                      , r = (0,
                    s.qn)(n.recipient);
                    return nm.INTERFACE.encodeFunctionData("unwrapWETH9WithFee(uint256,uint256,address)", [(0,
                    f._s)(e), t, r])
                }
                return nm.INTERFACE.encodeFunctionData("unwrapWETH9(uint256)", [(0,
                f._s)(e)])
            }
            static encodeSweepToken(e, t, n, r) {
                if ("string" == typeof n)
                    return f.H4.encodeSweepToken(e, t, n, r);
                if (r) {
                    let n = nh(r.fee)
                      , i = (0,
                    s.qn)(r.recipient);
                    return nm.INTERFACE.encodeFunctionData("sweepTokenWithFee(address,uint256,uint256,address)", [e.address, (0,
                    f._s)(t), n, i])
                }
                return nm.INTERFACE.encodeFunctionData("sweepToken(address,uint256)", [e.address, (0,
                f._s)(t)])
            }
            static encodePull(e, t) {
                return nm.INTERFACE.encodeFunctionData("pull", [e.address, (0,
                f._s)(t)])
            }
            static encodeWrapETH(e) {
                return nm.INTERFACE.encodeFunctionData("wrapETH", [(0,
                f._s)(e)])
            }
            constructor() {}
        }
          , ny = nm;
        ny.INTERFACE = new h.Interface([{
            inputs: [{
                internalType: "address",
                name: "token",
                type: "address"
            }, {
                internalType: "uint256",
                name: "value",
                type: "uint256"
            }],
            name: "pull",
            outputs: [],
            stateMutability: "payable",
            type: "function"
        }, {
            inputs: [],
            name: "refundETH",
            outputs: [],
            stateMutability: "payable",
            type: "function"
        }, {
            inputs: [{
                internalType: "address",
                name: "token",
                type: "address"
            }, {
                internalType: "uint256",
                name: "amountMinimum",
                type: "uint256"
            }, {
                internalType: "address",
                name: "recipient",
                type: "address"
            }],
            name: "sweepToken",
            outputs: [],
            stateMutability: "payable",
            type: "function"
        }, {
            inputs: [{
                internalType: "address",
                name: "token",
                type: "address"
            }, {
                internalType: "uint256",
                name: "amountMinimum",
                type: "uint256"
            }],
            name: "sweepToken",
            outputs: [],
            stateMutability: "payable",
            type: "function"
        }, {
            inputs: [{
                internalType: "address",
                name: "token",
                type: "address"
            }, {
                internalType: "uint256",
                name: "amountMinimum",
                type: "uint256"
            }, {
                internalType: "uint256",
                name: "feeBips",
                type: "uint256"
            }, {
                internalType: "address",
                name: "feeRecipient",
                type: "address"
            }],
            name: "sweepTokenWithFee",
            outputs: [],
            stateMutability: "payable",
            type: "function"
        }, {
            inputs: [{
                internalType: "address",
                name: "token",
                type: "address"
            }, {
                internalType: "uint256",
                name: "amountMinimum",
                type: "uint256"
            }, {
                internalType: "address",
                name: "recipient",
                type: "address"
            }, {
                internalType: "uint256",
                name: "feeBips",
                type: "uint256"
            }, {
                internalType: "address",
                name: "feeRecipient",
                type: "address"
            }],
            name: "sweepTokenWithFee",
            outputs: [],
            stateMutability: "payable",
            type: "function"
        }, {
            inputs: [{
                internalType: "uint256",
                name: "amountMinimum",
                type: "uint256"
            }, {
                internalType: "address",
                name: "recipient",
                type: "address"
            }],
            name: "unwrapWETH9",
            outputs: [],
            stateMutability: "payable",
            type: "function"
        }, {
            inputs: [{
                internalType: "uint256",
                name: "amountMinimum",
                type: "uint256"
            }],
            name: "unwrapWETH9",
            outputs: [],
            stateMutability: "payable",
            type: "function"
        }, {
            inputs: [{
                internalType: "uint256",
                name: "amountMinimum",
                type: "uint256"
            }, {
                internalType: "address",
                name: "recipient",
                type: "address"
            }, {
                internalType: "uint256",
                name: "feeBips",
                type: "uint256"
            }, {
                internalType: "address",
                name: "feeRecipient",
                type: "address"
            }],
            name: "unwrapWETH9WithFee",
            outputs: [],
            stateMutability: "payable",
            type: "function"
        }, {
            inputs: [{
                internalType: "uint256",
                name: "amountMinimum",
                type: "uint256"
            }, {
                internalType: "uint256",
                name: "feeBips",
                type: "uint256"
            }, {
                internalType: "address",
                name: "feeRecipient",
                type: "address"
            }],
            name: "unwrapWETH9WithFee",
            outputs: [],
            stateMutability: "payable",
            type: "function"
        }, {
            inputs: [{
                internalType: "uint256",
                name: "value",
                type: "uint256"
            }],
            name: "wrapETH",
            outputs: [],
            stateMutability: "payable",
            type: "function"
        }]);
        var ng = e=>{
            let t = []
              , n = 0
              , r = 0;
            for (; r < e.pools.length; )
                e.pools[n].type !== e.pools[r].type && (t.push(e.pools.slice(n, r)),
                n = r),
                ++r === e.pools.length && t.push(e.pools.slice(n, r));
            return t
        }
          , nb = (e,t)=>{
            let {inputToken: n} = e.reduce((e,t)=>{
                let {inputToken: n} = e;
                if (!eK(t, n))
                    throw Error("PATH");
                let r = eX(t, n);
                return {
                    inputToken: r
                }
            }
            , {
                inputToken: t
            });
            return n
        }
          , nv = new s.gG(50n,100n)
          , nw = class {
            static encodeV2Swap(e, t, n, r) {
                let i = (0,
                f._s)(e4(e, t.slippageTolerance).quotient)
                  , a = (0,
                f._s)(e9(e, t.slippageTolerance).quotient)
                  , o = e.routes[0]
                  , u = o.path.map(e=>e.wrapped.address)
                  , l = n ? U : void 0 === t.recipient ? L : (0,
                s.qn)(t.recipient);
                return e.tradeType === s.YL.EXACT_INPUT ? nw.INTERFACE.encodeFunctionData("swapExactTokensForTokens", [i, r ? 0 : a, u, l]) : nw.INTERFACE.encodeFunctionData("swapTokensForExactTokens", [a, i, u, l])
            }
            static encodeStableSwap(e, t, n, r) {
                let i = (0,
                f._s)(e4(e, t.slippageTolerance).quotient)
                  , a = (0,
                f._s)(e9(e, t.slippageTolerance).quotient);
                if (e.routes.length > 1 || e.routes[0].pools.some(e=>!eW(e)))
                    throw Error("Unsupported trade to encode");
                let o = e.routes[0]
                  , u = o.path.map(e=>e.wrapped.address)
                  , l = o.pools.map(e=>e.balances.length)
                  , c = n ? U : void 0 === t.recipient ? L : (0,
                s.qn)(t.recipient);
                return e.tradeType === s.YL.EXACT_INPUT ? nw.INTERFACE.encodeFunctionData("exactInputStableSwap", [u, l, i, r ? 0 : a, c]) : nw.INTERFACE.encodeFunctionData("exactOutputStableSwap", [u, l, a, i, c])
            }
            static encodeV3Swap(e, t, n, r) {
                let i = [];
                for (let a of e.routes) {
                    let {inputAmount: o, outputAmount: u, pools: l, path: c} = a
                      , d = (0,
                    f._s)(e4(e, t.slippageTolerance, o).quotient)
                      , p = (0,
                    f._s)(e9(e, t.slippageTolerance, u).quotient)
                      , h = 1 === l.length
                      , m = n ? U : void 0 === t.recipient ? L : (0,
                    s.qn)(t.recipient);
                    if (h) {
                        if (e.tradeType === s.YL.EXACT_INPUT) {
                            let e = {
                                tokenIn: c[0].wrapped.address,
                                tokenOut: c[1].wrapped.address,
                                fee: l[0].fee,
                                recipient: m,
                                amountIn: d,
                                amountOutMinimum: r ? 0 : p,
                                sqrtPriceLimitX96: 0
                            };
                            i.push(nw.INTERFACE.encodeFunctionData("exactInputSingle", [e]))
                        } else {
                            let e = {
                                tokenIn: c[0].wrapped.address,
                                tokenOut: c[1].wrapped.address,
                                fee: l[0].fee,
                                recipient: m,
                                amountOut: p,
                                amountInMaximum: d,
                                sqrtPriceLimitX96: 0
                            };
                            i.push(nw.INTERFACE.encodeFunctionData("exactOutputSingle", [e]))
                        }
                    } else {
                        let t = e6({
                            ...a,
                            input: o.currency,
                            output: u.currency
                        }, e.tradeType === s.YL.EXACT_OUTPUT);
                        if (e.tradeType === s.YL.EXACT_INPUT) {
                            let e = {
                                path: t,
                                recipient: m,
                                amountIn: d,
                                amountOutMinimum: r ? 0 : p
                            };
                            i.push(nw.INTERFACE.encodeFunctionData("exactInput", [e]))
                        } else {
                            let e = {
                                path: t,
                                recipient: m,
                                amountOut: p,
                                amountInMaximum: d
                            };
                            i.push(nw.INTERFACE.encodeFunctionData("exactOutput", [e]))
                        }
                    }
                }
                return i
            }
            static encodeMixedRouteSwap(e, t, n, r) {
                let i = []
                  , a = e.tradeType === s.YL.EXACT_INPUT;
                for (let o of e.routes) {
                    let {inputAmount: u, outputAmount: l, pools: c} = o
                      , d = (0,
                    f._s)(e4(e, t.slippageTolerance, u).quotient)
                      , p = (0,
                    f._s)(e9(e, t.slippageTolerance, l).quotient)
                      , h = 1 === c.length
                      , m = n ? U : void 0 === t.recipient ? L : (0,
                    s.qn)(t.recipient)
                      , y = e=>e.pools.every(eV)
                      , g = e=>e.pools.every(ez)
                      , b = e=>e.pools.every(eW);
                    if (h) {
                        if (y(o))
                            i = [...i, ...nw.encodeV3Swap({
                                ...e,
                                routes: [o],
                                inputAmount: u,
                                outputAmount: l
                            }, t, n, r)];
                        else if (g(o))
                            i = [...i, nw.encodeV2Swap({
                                ...e,
                                routes: [o],
                                inputAmount: u,
                                outputAmount: l
                            }, t, n, r)];
                        else if (b(o))
                            i = [...i, nw.encodeStableSwap({
                                ...e,
                                routes: [o],
                                inputAmount: u,
                                outputAmount: l
                            }, t, n, r)];
                        else
                            throw Error("Unsupported route to encode")
                    } else {
                        let e;
                        let t = ng(o)
                          , n = u.currency.wrapped;
                        for (let r = 0; r < t.length; r++) {
                            let o = t[r];
                            e = nb(o, n);
                            let s = e0([...o], n, e);
                            n = e.wrapped;
                            let u = r === t.length - 1
                              , l = u ? m : U
                              , c = 0 === r ? d : 0
                              , f = u ? p : 0;
                            if (y(s)) {
                                let e = e6(s, !a);
                                if (a) {
                                    let t = {
                                        path: e,
                                        recipient: l,
                                        amountIn: c,
                                        amountOutMinimum: f
                                    };
                                    i.push(nw.INTERFACE.encodeFunctionData("exactInput", [t]))
                                } else {
                                    let t = {
                                        path: e,
                                        recipient: m,
                                        amountOut: f,
                                        amountInMaximum: c
                                    };
                                    i.push(nw.INTERFACE.encodeFunctionData("exactOutput", [t]))
                                }
                            } else if (g(s)) {
                                let e = s.path.map(e=>e.wrapped.address);
                                if (a) {
                                    let t = [c, f, e, l];
                                    i.push(nw.INTERFACE.encodeFunctionData("swapExactTokensForTokens", t))
                                } else {
                                    let t = [f, c, e, l];
                                    i.push(nw.INTERFACE.encodeFunctionData("swapTokensForExactTokens", t))
                                }
                            } else if (b(s)) {
                                let e = s.path.map(e=>e.wrapped.address)
                                  , t = s.pools.map(e=>e.balances.length);
                                if (a) {
                                    let n = [e, t, c, f, l];
                                    i.push(nw.INTERFACE.encodeFunctionData("exactInputStableSwap", n))
                                } else {
                                    let n = [e, t, f, c, l];
                                    i.push(nw.INTERFACE.encodeFunctionData("exactOutputStableSwap", n))
                                }
                            } else
                                throw Error("Unsupported route")
                        }
                    }
                }
                return i
            }
            static encodeSwaps(e, t, n) {
                let r = Array.isArray(e) ? e : [e]
                  , i = r.reduce((e,t)=>e + t.routes.length, 0)
                  , a = r[0];
                (0,
                p.Z)(r.every(e=>e.inputAmount.currency.equals(a.inputAmount.currency)), "TOKEN_IN_DIFF"),
                (0,
                p.Z)(r.every(e=>e.outputAmount.currency.equals(a.outputAmount.currency)), "TOKEN_OUT_DIFF"),
                (0,
                p.Z)(r.every(e=>e.tradeType === a.tradeType), "TRADE_TYPE_DIFF");
                let o = []
                  , u = a.inputAmount.currency.isNative
                  , l = a.outputAmount.currency.isNative
                  , c = a.tradeType === s.YL.EXACT_INPUT && i > 2
                  , d = l || !!t.fee || !!n || c;
                for (let e of (t.inputTokenPermit && ((0,
                p.Z)(a.inputAmount.currency.isToken, "NON_TOKEN_PERMIT"),
                o.push(f.Im.encodePermit(a.inputAmount.currency, t.inputTokenPermit))),
                r))
                    if (1 === e.routes.length && 0 === e.routes[0].type)
                        o.push(nw.encodeV2Swap(e, t, d, c));
                    else if (e.routes.every(e=>1 === e.type))
                        for (let n of nw.encodeV3Swap(e, t, d, c))
                            o.push(n);
                    else
                        for (let n of nw.encodeMixedRouteSwap(e, t, d, c))
                            o.push(n);
                let h = s.ih.fromRawAmount(a.inputAmount.currency, 0)
                  , m = s.ih.fromRawAmount(a.outputAmount.currency, 0)
                  , y = r.reduce((e,n)=>e.add(e9(n, t.slippageTolerance)), m)
                  , g = r.reduce((e,t)=>e.add(t.outputAmount), m)
                  , b = r.reduce((e,n)=>e.add(e4(n, t.slippageTolerance)), h);
                return {
                    calldatas: o,
                    sampleTrade: a,
                    routerMustCustody: d,
                    inputIsNative: u,
                    outputIsNative: l,
                    totalAmountIn: b,
                    minimumAmountOut: y,
                    quoteAmountOut: g
                }
            }
            static swapCallParameters(e, t) {
                let {calldatas: n, sampleTrade: r, routerMustCustody: i, inputIsNative: a, outputIsNative: o, totalAmountIn: u, minimumAmountOut: l} = nw.encodeSwaps(e, t);
                return i && (o ? n.push(ny.encodeUnwrapWETH9(l.quotient, t.recipient, t.fee)) : n.push(ny.encodeSweepToken(r.outputAmount.currency.wrapped, l.quotient, t.recipient, t.fee))),
                a && (r.tradeType === s.YL.EXACT_OUTPUT || nw.riskOfPartialFill(e)) && n.push(f.H4.encodeRefundETH()),
                {
                    calldata: nf.encodeMulticall(n, t.deadlineOrPreviousBlockhash),
                    value: (0,
                    f._s)(a ? u.quotient : 0n)
                }
            }
            static swapAndAddCallParameters(e, t, n, r, i, a) {
                let o;
                let {calldatas: u, inputIsNative: l, outputIsNative: c, sampleTrade: d, totalAmountIn: h, quoteAmountOut: m, minimumAmountOut: y} = nw.encodeSwaps(e, t, !0);
                t.outputTokenPermit && ((0,
                p.Z)(m.currency.isToken, "NON_TOKEN_PERMIT_OUTPUT"),
                u.push(f.Im.encodePermit(m.currency, t.outputTokenPermit)));
                let {inputAmount: {currency: {chainId: g}}} = d
                  , b = n.pool.token0.wrapped.address === h.currency.wrapped.address
                  , {positionAmountIn: v, positionAmountOut: w} = nw.getPositionAmounts(n, b)
                  , T = l ? s.FX[g] : v.currency.wrapped
                  , E = c ? s.FX[g] : w.currency.wrapped
                  , A = w.subtract(m.wrapped);
                A.greaterThan(s.ih.fromRawAmount(w.currency, 0)) && (c ? u.push(ny.encodeWrapETH(A.quotient)) : u.push(ny.encodePull(E, A.quotient))),
                l ? u.push(ny.encodeWrapETH(v.quotient)) : u.push(ny.encodePull(T, v.quotient)),
                0 !== i && u.push(nd.encodeApprove(T, i)),
                0 !== a && u.push(nd.encodeApprove(E, a));
                let x = f.Ly.fromAmounts({
                    pool: n.pool,
                    tickLower: n.tickLower,
                    tickUpper: n.tickUpper,
                    amount0: b ? n.amount0.quotient.toString() : y.quotient.toString(),
                    amount1: b ? y.quotient.toString() : n.amount1.quotient.toString(),
                    useFullPrecision: !1
                });
                return u.push(nd.encodeAddLiquidity(n, x, r, t.slippageTolerance)),
                l ? u.push(ny.encodeUnwrapWETH9(0n)) : u.push(ny.encodeSweepToken(T, 0n)),
                c ? u.push(ny.encodeUnwrapWETH9(0n)) : u.push(ny.encodeSweepToken(E, 0n)),
                o = l ? h.wrapped.add(v.wrapped).quotient : c ? A.quotient : 0n,
                {
                    calldata: nf.encodeMulticall(u, t.deadlineOrPreviousBlockhash),
                    value: o.toString()
                }
            }
            static riskOfPartialFill(e) {
                return Array.isArray(e) ? e.some(e=>nw.v3TradeWithHighPriceImpact(e)) : nw.v3TradeWithHighPriceImpact(e)
            }
            static v3TradeWithHighPriceImpact(e) {
                return !(1 === e.routes.length && 0 === e.routes[0].type) && (function(e) {
                    let t = s.ih.fromRawAmount(e.outputAmount.currency.wrapped, 0);
                    for (let n of e.routes) {
                        let {inputAmount: e} = n
                          , r = e2(n);
                        t = t.add(r.quote(e.wrapped))
                    }
                    let n = t.subtract(e.outputAmount.wrapped).divide(t);
                    return new s.gG(n.numerator,n.denominator)
                }
                )(e).greaterThan(nv)
            }
            static getPositionAmounts(e, t) {
                let {amount0: n, amount1: r} = e.mintAmounts
                  , i = s.ih.fromRawAmount(e.pool.token0, n)
                  , a = s.ih.fromRawAmount(e.pool.token1, r)
                  , [o,u] = t ? [i, a] : [a, i];
                return {
                    positionAmountIn: o,
                    positionAmountOut: u
                }
            }
            constructor() {}
        }
          , nT = nw;
        nT.INTERFACE = new h.Interface([{
            inputs: [{
                internalType: "address",
                name: "_factoryV2",
                type: "address"
            }, {
                internalType: "address",
                name: "_deployer",
                type: "address"
            }, {
                internalType: "address",
                name: "_factoryV3",
                type: "address"
            }, {
                internalType: "address",
                name: "_positionManager",
                type: "address"
            }, {
                internalType: "address",
                name: "_stableFactory",
                type: "address"
            }, {
                internalType: "address",
                name: "_stableInfo",
                type: "address"
            }, {
                internalType: "address",
                name: "_WETH9",
                type: "address"
            }],
            stateMutability: "nonpayable",
            type: "constructor"
        }, {
            anonymous: !1,
            inputs: [{
                indexed: !0,
                internalType: "address",
                name: "previousOwner",
                type: "address"
            }, {
                indexed: !0,
                internalType: "address",
                name: "newOwner",
                type: "address"
            }],
            name: "OwnershipTransferred",
            type: "event"
        }, {
            anonymous: !1,
            inputs: [{
                indexed: !0,
                internalType: "address",
                name: "factory",
                type: "address"
            }, {
                indexed: !0,
                internalType: "address",
                name: "info",
                type: "address"
            }],
            name: "SetStableSwap",
            type: "event"
        }, {
            inputs: [],
            name: "WETH9",
            outputs: [{
                internalType: "address",
                name: "",
                type: "address"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [{
                internalType: "address",
                name: "token",
                type: "address"
            }],
            name: "approveMax",
            outputs: [],
            stateMutability: "payable",
            type: "function"
        }, {
            inputs: [{
                internalType: "address",
                name: "token",
                type: "address"
            }],
            name: "approveMaxMinusOne",
            outputs: [],
            stateMutability: "payable",
            type: "function"
        }, {
            inputs: [{
                internalType: "address",
                name: "token",
                type: "address"
            }],
            name: "approveZeroThenMax",
            outputs: [],
            stateMutability: "payable",
            type: "function"
        }, {
            inputs: [{
                internalType: "address",
                name: "token",
                type: "address"
            }],
            name: "approveZeroThenMaxMinusOne",
            outputs: [],
            stateMutability: "payable",
            type: "function"
        }, {
            inputs: [{
                internalType: "bytes",
                name: "data",
                type: "bytes"
            }],
            name: "callPositionManager",
            outputs: [{
                internalType: "bytes",
                name: "result",
                type: "bytes"
            }],
            stateMutability: "payable",
            type: "function"
        }, {
            inputs: [{
                internalType: "bytes[]",
                name: "paths",
                type: "bytes[]"
            }, {
                internalType: "uint128[]",
                name: "amounts",
                type: "uint128[]"
            }, {
                internalType: "uint24",
                name: "maximumTickDivergence",
                type: "uint24"
            }, {
                internalType: "uint32",
                name: "secondsAgo",
                type: "uint32"
            }],
            name: "checkOracleSlippage",
            outputs: [],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [{
                internalType: "bytes",
                name: "path",
                type: "bytes"
            }, {
                internalType: "uint24",
                name: "maximumTickDivergence",
                type: "uint24"
            }, {
                internalType: "uint32",
                name: "secondsAgo",
                type: "uint32"
            }],
            name: "checkOracleSlippage",
            outputs: [],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [],
            name: "deployer",
            outputs: [{
                internalType: "address",
                name: "",
                type: "address"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [{
                components: [{
                    internalType: "bytes",
                    name: "path",
                    type: "bytes"
                }, {
                    internalType: "address",
                    name: "recipient",
                    type: "address"
                }, {
                    internalType: "uint256",
                    name: "amountIn",
                    type: "uint256"
                }, {
                    internalType: "uint256",
                    name: "amountOutMinimum",
                    type: "uint256"
                }],
                internalType: "struct IV3SwapRouter.ExactInputParams",
                name: "params",
                type: "tuple"
            }],
            name: "exactInput",
            outputs: [{
                internalType: "uint256",
                name: "amountOut",
                type: "uint256"
            }],
            stateMutability: "payable",
            type: "function"
        }, {
            inputs: [{
                components: [{
                    internalType: "address",
                    name: "tokenIn",
                    type: "address"
                }, {
                    internalType: "address",
                    name: "tokenOut",
                    type: "address"
                }, {
                    internalType: "uint24",
                    name: "fee",
                    type: "uint24"
                }, {
                    internalType: "address",
                    name: "recipient",
                    type: "address"
                }, {
                    internalType: "uint256",
                    name: "amountIn",
                    type: "uint256"
                }, {
                    internalType: "uint256",
                    name: "amountOutMinimum",
                    type: "uint256"
                }, {
                    internalType: "uint160",
                    name: "sqrtPriceLimitX96",
                    type: "uint160"
                }],
                internalType: "struct IV3SwapRouter.ExactInputSingleParams",
                name: "params",
                type: "tuple"
            }],
            name: "exactInputSingle",
            outputs: [{
                internalType: "uint256",
                name: "amountOut",
                type: "uint256"
            }],
            stateMutability: "payable",
            type: "function"
        }, {
            inputs: [{
                internalType: "address[]",
                name: "path",
                type: "address[]"
            }, {
                internalType: "uint256[]",
                name: "flag",
                type: "uint256[]"
            }, {
                internalType: "uint256",
                name: "amountIn",
                type: "uint256"
            }, {
                internalType: "uint256",
                name: "amountOutMin",
                type: "uint256"
            }, {
                internalType: "address",
                name: "to",
                type: "address"
            }],
            name: "exactInputStableSwap",
            outputs: [{
                internalType: "uint256",
                name: "amountOut",
                type: "uint256"
            }],
            stateMutability: "payable",
            type: "function"
        }, {
            inputs: [{
                components: [{
                    internalType: "bytes",
                    name: "path",
                    type: "bytes"
                }, {
                    internalType: "address",
                    name: "recipient",
                    type: "address"
                }, {
                    internalType: "uint256",
                    name: "amountOut",
                    type: "uint256"
                }, {
                    internalType: "uint256",
                    name: "amountInMaximum",
                    type: "uint256"
                }],
                internalType: "struct IV3SwapRouter.ExactOutputParams",
                name: "params",
                type: "tuple"
            }],
            name: "exactOutput",
            outputs: [{
                internalType: "uint256",
                name: "amountIn",
                type: "uint256"
            }],
            stateMutability: "payable",
            type: "function"
        }, {
            inputs: [{
                components: [{
                    internalType: "address",
                    name: "tokenIn",
                    type: "address"
                }, {
                    internalType: "address",
                    name: "tokenOut",
                    type: "address"
                }, {
                    internalType: "uint24",
                    name: "fee",
                    type: "uint24"
                }, {
                    internalType: "address",
                    name: "recipient",
                    type: "address"
                }, {
                    internalType: "uint256",
                    name: "amountOut",
                    type: "uint256"
                }, {
                    internalType: "uint256",
                    name: "amountInMaximum",
                    type: "uint256"
                }, {
                    internalType: "uint160",
                    name: "sqrtPriceLimitX96",
                    type: "uint160"
                }],
                internalType: "struct IV3SwapRouter.ExactOutputSingleParams",
                name: "params",
                type: "tuple"
            }],
            name: "exactOutputSingle",
            outputs: [{
                internalType: "uint256",
                name: "amountIn",
                type: "uint256"
            }],
            stateMutability: "payable",
            type: "function"
        }, {
            inputs: [{
                internalType: "address[]",
                name: "path",
                type: "address[]"
            }, {
                internalType: "uint256[]",
                name: "flag",
                type: "uint256[]"
            }, {
                internalType: "uint256",
                name: "amountOut",
                type: "uint256"
            }, {
                internalType: "uint256",
                name: "amountInMax",
                type: "uint256"
            }, {
                internalType: "address",
                name: "to",
                type: "address"
            }],
            name: "exactOutputStableSwap",
            outputs: [{
                internalType: "uint256",
                name: "amountIn",
                type: "uint256"
            }],
            stateMutability: "payable",
            type: "function"
        }, {
            inputs: [],
            name: "factory",
            outputs: [{
                internalType: "address",
                name: "",
                type: "address"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [],
            name: "factoryV2",
            outputs: [{
                internalType: "address",
                name: "",
                type: "address"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [{
                internalType: "address",
                name: "token",
                type: "address"
            }, {
                internalType: "uint256",
                name: "amount",
                type: "uint256"
            }],
            name: "getApprovalType",
            outputs: [{
                internalType: "enum IApproveAndCall.ApprovalType",
                name: "",
                type: "uint8"
            }],
            stateMutability: "nonpayable",
            type: "function"
        }, {
            inputs: [{
                components: [{
                    internalType: "address",
                    name: "token0",
                    type: "address"
                }, {
                    internalType: "address",
                    name: "token1",
                    type: "address"
                }, {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256"
                }, {
                    internalType: "uint256",
                    name: "amount0Min",
                    type: "uint256"
                }, {
                    internalType: "uint256",
                    name: "amount1Min",
                    type: "uint256"
                }],
                internalType: "struct IApproveAndCall.IncreaseLiquidityParams",
                name: "params",
                type: "tuple"
            }],
            name: "increaseLiquidity",
            outputs: [{
                internalType: "bytes",
                name: "result",
                type: "bytes"
            }],
            stateMutability: "payable",
            type: "function"
        }, {
            inputs: [{
                components: [{
                    internalType: "address",
                    name: "token0",
                    type: "address"
                }, {
                    internalType: "address",
                    name: "token1",
                    type: "address"
                }, {
                    internalType: "uint24",
                    name: "fee",
                    type: "uint24"
                }, {
                    internalType: "int24",
                    name: "tickLower",
                    type: "int24"
                }, {
                    internalType: "int24",
                    name: "tickUpper",
                    type: "int24"
                }, {
                    internalType: "uint256",
                    name: "amount0Min",
                    type: "uint256"
                }, {
                    internalType: "uint256",
                    name: "amount1Min",
                    type: "uint256"
                }, {
                    internalType: "address",
                    name: "recipient",
                    type: "address"
                }],
                internalType: "struct IApproveAndCall.MintParams",
                name: "params",
                type: "tuple"
            }],
            name: "mint",
            outputs: [{
                internalType: "bytes",
                name: "result",
                type: "bytes"
            }],
            stateMutability: "payable",
            type: "function"
        }, {
            inputs: [{
                internalType: "bytes32",
                name: "previousBlockhash",
                type: "bytes32"
            }, {
                internalType: "bytes[]",
                name: "data",
                type: "bytes[]"
            }],
            name: "multicall",
            outputs: [{
                internalType: "bytes[]",
                name: "",
                type: "bytes[]"
            }],
            stateMutability: "payable",
            type: "function"
        }, {
            inputs: [{
                internalType: "uint256",
                name: "deadline",
                type: "uint256"
            }, {
                internalType: "bytes[]",
                name: "data",
                type: "bytes[]"
            }],
            name: "multicall",
            outputs: [{
                internalType: "bytes[]",
                name: "",
                type: "bytes[]"
            }],
            stateMutability: "payable",
            type: "function"
        }, {
            inputs: [{
                internalType: "bytes[]",
                name: "data",
                type: "bytes[]"
            }],
            name: "multicall",
            outputs: [{
                internalType: "bytes[]",
                name: "results",
                type: "bytes[]"
            }],
            stateMutability: "payable",
            type: "function"
        }, {
            inputs: [],
            name: "owner",
            outputs: [{
                internalType: "address",
                name: "",
                type: "address"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [{
                internalType: "int256",
                name: "amount0Delta",
                type: "int256"
            }, {
                internalType: "int256",
                name: "amount1Delta",
                type: "int256"
            }, {
                internalType: "bytes",
                name: "_data",
                type: "bytes"
            }],
            name: "pancakeV3SwapCallback",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function"
        }, {
            inputs: [],
            name: "positionManager",
            outputs: [{
                internalType: "address",
                name: "",
                type: "address"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [{
                internalType: "address",
                name: "token",
                type: "address"
            }, {
                internalType: "uint256",
                name: "value",
                type: "uint256"
            }],
            name: "pull",
            outputs: [],
            stateMutability: "payable",
            type: "function"
        }, {
            inputs: [],
            name: "refundETH",
            outputs: [],
            stateMutability: "payable",
            type: "function"
        }, {
            inputs: [],
            name: "renounceOwnership",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function"
        }, {
            inputs: [{
                internalType: "address",
                name: "token",
                type: "address"
            }, {
                internalType: "uint256",
                name: "value",
                type: "uint256"
            }, {
                internalType: "uint256",
                name: "deadline",
                type: "uint256"
            }, {
                internalType: "uint8",
                name: "v",
                type: "uint8"
            }, {
                internalType: "bytes32",
                name: "r",
                type: "bytes32"
            }, {
                internalType: "bytes32",
                name: "s",
                type: "bytes32"
            }],
            name: "selfPermit",
            outputs: [],
            stateMutability: "payable",
            type: "function"
        }, {
            inputs: [{
                internalType: "address",
                name: "token",
                type: "address"
            }, {
                internalType: "uint256",
                name: "nonce",
                type: "uint256"
            }, {
                internalType: "uint256",
                name: "expiry",
                type: "uint256"
            }, {
                internalType: "uint8",
                name: "v",
                type: "uint8"
            }, {
                internalType: "bytes32",
                name: "r",
                type: "bytes32"
            }, {
                internalType: "bytes32",
                name: "s",
                type: "bytes32"
            }],
            name: "selfPermitAllowed",
            outputs: [],
            stateMutability: "payable",
            type: "function"
        }, {
            inputs: [{
                internalType: "address",
                name: "token",
                type: "address"
            }, {
                internalType: "uint256",
                name: "nonce",
                type: "uint256"
            }, {
                internalType: "uint256",
                name: "expiry",
                type: "uint256"
            }, {
                internalType: "uint8",
                name: "v",
                type: "uint8"
            }, {
                internalType: "bytes32",
                name: "r",
                type: "bytes32"
            }, {
                internalType: "bytes32",
                name: "s",
                type: "bytes32"
            }],
            name: "selfPermitAllowedIfNecessary",
            outputs: [],
            stateMutability: "payable",
            type: "function"
        }, {
            inputs: [{
                internalType: "address",
                name: "token",
                type: "address"
            }, {
                internalType: "uint256",
                name: "value",
                type: "uint256"
            }, {
                internalType: "uint256",
                name: "deadline",
                type: "uint256"
            }, {
                internalType: "uint8",
                name: "v",
                type: "uint8"
            }, {
                internalType: "bytes32",
                name: "r",
                type: "bytes32"
            }, {
                internalType: "bytes32",
                name: "s",
                type: "bytes32"
            }],
            name: "selfPermitIfNecessary",
            outputs: [],
            stateMutability: "payable",
            type: "function"
        }, {
            inputs: [{
                internalType: "address",
                name: "_factory",
                type: "address"
            }, {
                internalType: "address",
                name: "_info",
                type: "address"
            }],
            name: "setStableSwap",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function"
        }, {
            inputs: [],
            name: "stableSwapFactory",
            outputs: [{
                internalType: "address",
                name: "",
                type: "address"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [],
            name: "stableSwapInfo",
            outputs: [{
                internalType: "address",
                name: "",
                type: "address"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [{
                internalType: "uint256",
                name: "amountIn",
                type: "uint256"
            }, {
                internalType: "uint256",
                name: "amountOutMin",
                type: "uint256"
            }, {
                internalType: "address[]",
                name: "path",
                type: "address[]"
            }, {
                internalType: "address",
                name: "to",
                type: "address"
            }],
            name: "swapExactTokensForTokens",
            outputs: [{
                internalType: "uint256",
                name: "amountOut",
                type: "uint256"
            }],
            stateMutability: "payable",
            type: "function"
        }, {
            inputs: [{
                internalType: "uint256",
                name: "amountOut",
                type: "uint256"
            }, {
                internalType: "uint256",
                name: "amountInMax",
                type: "uint256"
            }, {
                internalType: "address[]",
                name: "path",
                type: "address[]"
            }, {
                internalType: "address",
                name: "to",
                type: "address"
            }],
            name: "swapTokensForExactTokens",
            outputs: [{
                internalType: "uint256",
                name: "amountIn",
                type: "uint256"
            }],
            stateMutability: "payable",
            type: "function"
        }, {
            inputs: [{
                internalType: "address",
                name: "token",
                type: "address"
            }, {
                internalType: "uint256",
                name: "amountMinimum",
                type: "uint256"
            }, {
                internalType: "address",
                name: "recipient",
                type: "address"
            }],
            name: "sweepToken",
            outputs: [],
            stateMutability: "payable",
            type: "function"
        }, {
            inputs: [{
                internalType: "address",
                name: "token",
                type: "address"
            }, {
                internalType: "uint256",
                name: "amountMinimum",
                type: "uint256"
            }],
            name: "sweepToken",
            outputs: [],
            stateMutability: "payable",
            type: "function"
        }, {
            inputs: [{
                internalType: "address",
                name: "token",
                type: "address"
            }, {
                internalType: "uint256",
                name: "amountMinimum",
                type: "uint256"
            }, {
                internalType: "uint256",
                name: "feeBips",
                type: "uint256"
            }, {
                internalType: "address",
                name: "feeRecipient",
                type: "address"
            }],
            name: "sweepTokenWithFee",
            outputs: [],
            stateMutability: "payable",
            type: "function"
        }, {
            inputs: [{
                internalType: "address",
                name: "token",
                type: "address"
            }, {
                internalType: "uint256",
                name: "amountMinimum",
                type: "uint256"
            }, {
                internalType: "address",
                name: "recipient",
                type: "address"
            }, {
                internalType: "uint256",
                name: "feeBips",
                type: "uint256"
            }, {
                internalType: "address",
                name: "feeRecipient",
                type: "address"
            }],
            name: "sweepTokenWithFee",
            outputs: [],
            stateMutability: "payable",
            type: "function"
        }, {
            inputs: [{
                internalType: "address",
                name: "newOwner",
                type: "address"
            }],
            name: "transferOwnership",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function"
        }, {
            inputs: [{
                internalType: "uint256",
                name: "amountMinimum",
                type: "uint256"
            }, {
                internalType: "address",
                name: "recipient",
                type: "address"
            }],
            name: "unwrapWETH9",
            outputs: [],
            stateMutability: "payable",
            type: "function"
        }, {
            inputs: [{
                internalType: "uint256",
                name: "amountMinimum",
                type: "uint256"
            }, {
                internalType: "address",
                name: "recipient",
                type: "address"
            }, {
                internalType: "uint256",
                name: "feeBips",
                type: "uint256"
            }, {
                internalType: "address",
                name: "feeRecipient",
                type: "address"
            }],
            name: "unwrapWETH9WithFee",
            outputs: [],
            stateMutability: "payable",
            type: "function"
        }, {
            inputs: [{
                internalType: "uint256",
                name: "amountMinimum",
                type: "uint256"
            }, {
                internalType: "uint256",
                name: "feeBips",
                type: "uint256"
            }, {
                internalType: "address",
                name: "feeRecipient",
                type: "address"
            }],
            name: "unwrapWETH9WithFee",
            outputs: [],
            stateMutability: "payable",
            type: "function"
        }, {
            inputs: [{
                internalType: "uint256",
                name: "value",
                type: "uint256"
            }],
            name: "wrapETH",
            outputs: [],
            stateMutability: "payable",
            type: "function"
        }, {
            stateMutability: "payable",
            type: "receive"
        }])
    },
    92163: function(e, t, n) {
        "use strict";
        n.d(t, {
            Bz: function() {
                return b
            },
            CD: function() {
                return F
            },
            Le: function() {
                return D
            },
            Nk: function() {
                return q
            },
            VV: function() {
                return g
            },
            WU: function() {
                return N
            },
            Xh: function() {
                return p
            },
            YG: function() {
                return m
            },
            YL: function() {
                return c
            },
            Yp: function() {
                return O
            },
            _b: function() {
                return M
            },
            cW: function() {
                return L
            },
            gG: function() {
                return S
            },
            i2: function() {
                return y
            },
            iA: function() {
                return k
            },
            ih: function() {
                return P
            },
            mL: function() {
                return d
            },
            oc: function() {
                return U
            },
            ry: function() {
                return h
            },
            tA: function() {
                return B
            },
            xE: function() {
                return f
            }
        });
        var r, i, a, o = n(61829), s = n(58084), u = n(37352), l = n(17228), c = ((r = c || {})[r.EXACT_INPUT = 0] = "EXACT_INPUT",
        r[r.EXACT_OUTPUT = 1] = "EXACT_OUTPUT",
        r), d = ((i = d || {})[i.ROUND_DOWN = 0] = "ROUND_DOWN",
        i[i.ROUND_HALF_UP = 1] = "ROUND_HALF_UP",
        i[i.ROUND_UP = 2] = "ROUND_UP",
        i), p = 1000n, f = 0n, h = 1n, m = 5n, y = 9975n, g = 10000n, b = BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"), v = ((a = v || {}).uint8 = "uint8",
        a.uint256 = "uint256",
        a);
        BigInt("0xff"),
        BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
        var w = class {
            constructor(e, t, n, r) {
                (0,
                o.Z)(Number.isSafeInteger(e), "CHAIN_ID"),
                (0,
                o.Z)(t >= 0 && t < 255 && Number.isInteger(t), "DECIMALS"),
                this.chainId = e,
                this.decimals = t,
                this.symbol = n,
                this.name = r
            }
        }
          , T = l(s)
          , E = l(u)
          , A = {
            0: T.ROUND_DOWN,
            1: T.ROUND_HALF_UP,
            2: T.ROUND_UP
        }
          , x = {
            0: 0,
            1: 1,
            2: 3
        }
          , k = class {
            static tryParseFraction(e) {
                if ("bigint" == typeof e || "number" == typeof e || "string" == typeof e)
                    return new k(e);
                if ("numerator"in e && "denominator"in e)
                    return e;
                throw Error("Could not parse fraction")
            }
            get quotient() {
                return this.numerator / this.denominator
            }
            get remainder() {
                return new k(this.numerator % this.denominator,this.denominator)
            }
            invert() {
                return new k(this.denominator,this.numerator)
            }
            add(e) {
                let t = k.tryParseFraction(e);
                return this.denominator === t.denominator ? new k(this.numerator + t.numerator,this.denominator) : new k(this.numerator * t.denominator + t.numerator * this.denominator,this.denominator * t.denominator)
            }
            subtract(e) {
                let t = k.tryParseFraction(e);
                return this.denominator === t.denominator ? new k(this.numerator - t.numerator,this.denominator) : new k(this.numerator * t.denominator - t.numerator * this.denominator,this.denominator * t.denominator)
            }
            lessThan(e) {
                let t = k.tryParseFraction(e);
                return this.numerator * t.denominator < t.numerator * this.denominator
            }
            equalTo(e) {
                let t = k.tryParseFraction(e);
                return this.numerator * t.denominator == t.numerator * this.denominator
            }
            greaterThan(e) {
                let t = k.tryParseFraction(e);
                return this.numerator * t.denominator > t.numerator * this.denominator
            }
            multiply(e) {
                let t = k.tryParseFraction(e);
                return new k(this.numerator * t.numerator,this.denominator * t.denominator)
            }
            divide(e) {
                let t = k.tryParseFraction(e);
                return new k(this.numerator * t.denominator,this.denominator * t.numerator)
            }
            toSignificant(e) {
                let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {
                    groupSeparator: ""
                }
                  , n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 1;
                (0,
                o.Z)(Number.isInteger(e), `${e} is not an integer.`),
                (0,
                o.Z)(e > 0, `${e} is not positive.`),
                T.set({
                    precision: e + 1,
                    rounding: A[n]
                });
                let r = new T(this.numerator.toString()).div(this.denominator.toString()).toSignificantDigits(e);
                return r.toFormat(r.decimalPlaces(), t)
            }
            toFixed(e) {
                let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {
                    groupSeparator: ""
                }
                  , n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 1;
                return (0,
                o.Z)(Number.isInteger(e), `${e} is not an integer.`),
                (0,
                o.Z)(e >= 0, `${e} is negative.`),
                E.DP = e,
                E.RM = x[n],
                new E(this.numerator.toString()).div(this.denominator.toString()).toFormat(e, t)
            }
            get asFraction() {
                return new k(this.numerator,this.denominator)
            }
            constructor(e, t=1n) {
                this.numerator = BigInt(e),
                this.denominator = BigInt(t)
            }
        }
          , C = new k(100n);
        function _(e) {
            return new S(e.numerator,e.denominator)
        }
        var S = class extends k {
            add(e) {
                return _(super.add(e))
            }
            subtract(e) {
                return _(super.subtract(e))
            }
            multiply(e) {
                return _(super.multiply(e))
            }
            divide(e) {
                return _(super.divide(e))
            }
            toSignificant() {
                let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 5
                  , t = arguments.length > 1 ? arguments[1] : void 0
                  , n = arguments.length > 2 ? arguments[2] : void 0;
                return super.multiply(C).toSignificant(e, t, n)
            }
            toFixed() {
                let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 2
                  , t = arguments.length > 1 ? arguments[1] : void 0
                  , n = arguments.length > 2 ? arguments[2] : void 0;
                return super.multiply(C).toFixed(e, t, n)
            }
            constructor() {
                super(...arguments),
                this.isPercent = !0
            }
        }
          , I = l(u)
          , P = class extends k {
            static fromRawAmount(e, t) {
                return new P(e,t)
            }
            static fromFractionalAmount(e, t, n) {
                return new P(e,t,n)
            }
            add(e) {
                (0,
                o.Z)(this.currency.equals(e.currency), "CURRENCY");
                let t = super.add(e);
                return P.fromFractionalAmount(this.currency, t.numerator, t.denominator)
            }
            subtract(e) {
                (0,
                o.Z)(this.currency.equals(e.currency), "CURRENCY");
                let t = super.subtract(e);
                return P.fromFractionalAmount(this.currency, t.numerator, t.denominator)
            }
            multiply(e) {
                let t = super.multiply(e);
                return P.fromFractionalAmount(this.currency, t.numerator, t.denominator)
            }
            divide(e) {
                let t = super.divide(e);
                return P.fromFractionalAmount(this.currency, t.numerator, t.denominator)
            }
            toSignificant() {
                let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 6
                  , t = arguments.length > 1 ? arguments[1] : void 0
                  , n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0;
                return super.divide(this.decimalScale).toSignificant(e, t, n)
            }
            toFixed() {
                let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.currency.decimals
                  , t = arguments.length > 1 ? arguments[1] : void 0
                  , n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0;
                return (0,
                o.Z)(e <= this.currency.decimals, "DECIMALS"),
                super.divide(this.decimalScale).toFixed(e, t, n)
            }
            toExact() {
                let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {
                    groupSeparator: ""
                };
                return I.DP = this.currency.decimals,
                new I(this.quotient.toString()).div(this.decimalScale.toString()).toFormat(e)
            }
            get wrapped() {
                return this.currency.isToken ? this : P.fromFractionalAmount(this.currency.wrapped, this.numerator, this.denominator)
            }
            constructor(e, t, n) {
                super(t, n),
                (0,
                o.Z)(this.quotient <= b, "AMOUNT"),
                this.currency = e,
                this.decimalScale = 10n ** BigInt(e.decimals)
            }
        }
          , B = class extends k {
            invert() {
                return new B(this.quoteCurrency,this.baseCurrency,this.numerator,this.denominator)
            }
            multiply(e) {
                (0,
                o.Z)(this.quoteCurrency.equals(e.baseCurrency), "TOKEN");
                let t = super.multiply(e);
                return new B(this.baseCurrency,e.quoteCurrency,t.denominator,t.numerator)
            }
            quote(e) {
                (0,
                o.Z)(e.currency.equals(this.baseCurrency), "TOKEN");
                let t = super.multiply(e);
                return P.fromFractionalAmount(this.quoteCurrency, t.numerator, t.denominator)
            }
            get adjustedForDecimals() {
                return super.multiply(this.scalar)
            }
            toSignificant() {
                let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 6
                  , t = arguments.length > 1 ? arguments[1] : void 0
                  , n = arguments.length > 2 ? arguments[2] : void 0;
                return this.adjustedForDecimals.toSignificant(e, t, n)
            }
            toFixed() {
                let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 4
                  , t = arguments.length > 1 ? arguments[1] : void 0
                  , n = arguments.length > 2 ? arguments[2] : void 0;
                return this.adjustedForDecimals.toFixed(e, t, n)
            }
            constructor(...e) {
                let t, n, r, i;
                if (4 === e.length)
                    [t,n,r,i] = e;
                else {
                    let a = e[0].quoteAmount.divide(e[0].baseAmount);
                    [t,n,r,i] = [e[0].baseAmount.currency, e[0].quoteAmount.currency, a.denominator, a.numerator]
                }
                super(i, r),
                this.baseCurrency = t,
                this.quoteCurrency = n,
                this.scalar = new k(10n ** BigInt(t.decimals),10n ** BigInt(n.decimals))
            }
        }
          , O = class extends w {
            constructor() {
                super(...arguments),
                this.isNative = !0,
                this.isToken = !1
            }
        }
          , N = class extends w {
            equals(e) {
                return e.isToken && this.chainId === e.chainId && this.address === e.address
            }
            sortsBefore(e) {
                return (0,
                o.Z)(this.chainId === e.chainId, "CHAIN_IDS"),
                (0,
                o.Z)(this.address !== e.address, "ADDRESSES"),
                this.address.toLowerCase() < e.address.toLowerCase()
            }
            get wrapped() {
                return this
            }
            get serialize() {
                return {
                    address: this.address,
                    chainId: this.chainId,
                    decimals: this.decimals,
                    symbol: this.symbol,
                    name: this.name,
                    projectLink: this.projectLink
                }
            }
            constructor(e, t, n, r, i, a) {
                super(e, n, r, i),
                this.isNative = !1,
                this.isToken = !0,
                this.address = t,
                this.projectLink = a
            }
        }
          , R = "setPrototypeOf"in Object
          , F = class extends Error {
            constructor() {
                super(),
                this.isInsufficientReservesError = !0,
                this.name = this.constructor.name,
                R && Object.setPrototypeOf(this, new.target.prototype)
            }
        }
          , D = class extends Error {
            constructor() {
                super(),
                this.isInsufficientInputAmountError = !0,
                this.name = this.constructor.name,
                R && Object.setPrototypeOf(this, new.target.prototype)
            }
        }
        ;
        function M(e) {
            let t;
            (0,
            o.Z)(e >= f, "NEGATIVE");
            let n = f;
            if (e > 3n)
                for (n = e,
                t = e / 2n + h; t < n; )
                    n = t,
                    t = (e / t + t) / 2n;
            else
                e !== f && (n = h);
            return n
        }
        function L(e, t, n, r) {
            if ((0,
            o.Z)(n > 0, "MAX_SIZE_ZERO"),
            (0,
            o.Z)(e.length <= n, "ITEMS_SIZE"),
            0 === e.length)
                return e.push(t),
                null;
            {
                let i = e.length === n;
                if (i && 0 >= r(e[e.length - 1], t))
                    return t;
                let a = 0
                  , o = e.length;
                for (; a < o; ) {
                    let n = a + o >>> 1;
                    0 >= r(e[n], t) ? a = n + 1 : o = n
                }
                return e.splice(a, 0, t),
                i ? e.pop() : null
            }
        }
        function U(e, t, n) {
            let r = e.quote(t)
              , i = r.subtract(n).divide(r);
            return new S(i.numerator,i.denominator)
        }
        function q(e) {
            return function(t, n) {
                let r = e[t.address]
                  , i = e[n.address]
                  , a = r && i ? r.greaterThan(i) ? -1 : r.equalTo(i) ? 0 : 1 : r && r.greaterThan("0") ? -1 : i && i.greaterThan("0") ? 1 : 0;
                return 0 !== a ? a : t.symbol && n.symbol ? t.symbol.toLowerCase() < n.symbol.toLowerCase() ? -1 : 1 : t.symbol ? -1 : n.symbol ? -1 : 0
            }
        }
    },
    57917: function(e, t, n) {
        "use strict";
        n.d(t, {
            $v: function() {
                return v
            },
            B5: function() {
                return T
            },
            Bz: function() {
                return i.Bz
            },
            F0: function() {
                return N
            },
            FX: function() {
                return w
            },
            Nk: function() {
                return i.Nk
            },
            WU: function() {
                return i.WU
            },
            YL: function() {
                return i.YL
            },
            Z$: function() {
                return c
            },
            _B: function() {
                return E
            },
            _b: function() {
                return i._b
            },
            _r: function() {
                return B
            },
            a_: function() {
                return d
            },
            fI: function() {
                return p
            },
            g9: function() {
                return b
            },
            gG: function() {
                return i.gG
            },
            ho: function() {
                return I
            },
            iA: function() {
                return i.iA
            },
            ih: function() {
                return i.ih
            },
            mL: function() {
                return i.mL
            },
            oc: function() {
                return i.oc
            },
            qn: function() {
                return l
            },
            ry: function() {
                return i.ry
            },
            sO: function() {
                return C
            },
            tA: function() {
                return i.tA
            },
            xE: function() {
                return i.xE
            },
            yC: function() {
                return f
            }
        });
        var r, i = n(92163), a = n(34130), o = n(61829), s = n(73248), u = n(65146);
        function l(e) {
            try {
                let t = (0,
                a.getAddress)(e);
                return (0,
                s.Z)(e === t, `${e} is not checksummed.`),
                t
            } catch (t) {
                (0,
                o.Z)(!1, `${e} is not a valid address.`)
            }
        }
        var c = class extends i.WU {
            constructor(e, t, n, r, i, a) {
                super(e, l(t), n, r, i, a)
            }
        }
          , d = ((r = d || {})[r.ETHEREUM = 1] = "ETHEREUM",
        r[r.GOERLI = 5] = "GOERLI",
        r[r.BSC = 56] = "BSC",
        r[r.BSC_TESTNET = 97] = "BSC_TESTNET",
        r)
          , p = new i.gG("0")
          , f = new i.gG("1")
          , h = "0x1097053Fd2ea711dad45caCcc45EfF7548fCB362"
          , m = {
            1: h,
            5: h,
            56: "0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73",
            97: "0x6725f303b657a9451d8ba641348b6761a6cc7a17"
        }
          , y = "0x57224589c67f3f30a6b0d7a1b54cf3153ab84563bc609ef41dfb34f8b2974d2d"
          , g = {
            1: y,
            5: y,
            56: "0x00fb7f630766e6a796048ea87d01acd3068e8ff67d078148a3fa3f4a84f69bd5",
            97: "0xd0d4c4cd0848c93cb4fd1f498d7013ee6bfb25783ea21593d5834f5d250ece66"
        }
          , b = {
            1: new c(1,"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",18,"WETH","Wrapped Ether","https://weth.io"),
            5: new c(5,"0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6",18,"WETH","Wrapped Ether","https://weth.io"),
            56: new c(56,"0x2170Ed0880ac9A755fd29B2688956BD959F933F8",18,"ETH","Binance-Peg Ethereum Token","https://ethereum.org"),
            97: new c(56,"0xE7bCB9e341D546b66a46298f4893f5650a56e99E",18,"ETH","ETH","https://ethereum.org")
        }
          , v = {
            1: new c(1,"0x418D75f65a02b3D53B2418FB8E1fe493759c7605",18,"WBNB","Wrapped BNB","https://www.binance.org"),
            56: new c(56,"0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c",18,"WBNB","Wrapped BNB","https://www.binance.org"),
            97: new c(97,"0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd",18,"WBNB","Wrapped BNB","https://www.binance.org")
        }
          , w = {
            1: b[1],
            5: b[5],
            56: v[56],
            97: v[97]
        }
          , T = {
            1: {
                name: "Ether",
                symbol: "ETH",
                decimals: 18
            },
            5: {
                name: "Goerli Ether",
                symbol: "GOR",
                decimals: 18
            },
            56: {
                name: "Binance Chain Native Token",
                symbol: "BNB",
                decimals: 18
            },
            97: {
                name: "Binance Chain Native Token",
                symbol: "tBNB",
                decimals: 18
            }
        };
        function E(e, t) {
            let n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : p;
            if (e && !t)
                return !1;
            if (t && !e)
                return !0;
            if (e && t) {
                if (e.tradeType !== t.tradeType || !e.inputAmount.currency.equals(t.inputAmount.currency) || !e.outputAmount.currency.equals(t.outputAmount.currency))
                    throw Error("Trades are not comparable");
                return n.equalTo(p) ? e.executionPrice.lessThan(t.executionPrice) : e.executionPrice.asFraction.multiply(n.add(f)).lessThan(t.executionPrice)
            }
        }
        var A = {}
          , x = (e,t)=>`${e.chainId}-${e.address}-${t.address}`
          , k = e=>{
            let {factoryAddress: t, tokenA: n, tokenB: r} = e
              , [i,o] = n.sortsBefore(r) ? [n, r] : [r, n]
              , s = x(i, o);
            return (null == A ? void 0 : A[s]) === void 0 && (A = {
                ...A,
                [s]: (0,
                a.getCreate2Address)(t, (0,
                a.solidityKeccak256)(["bytes"], [(0,
                a.solidityPack)(["address", "address"], [i.address, o.address])]), g[i.chainId])
            }),
            A[s]
        }
          , C = class {
            static getAddress(e, t) {
                return k({
                    factoryAddress: m[e.chainId],
                    tokenA: e,
                    tokenB: t
                })
            }
            involvesToken(e) {
                return e.equals(this.token0) || e.equals(this.token1)
            }
            get token0Price() {
                let e = this.tokenAmounts[1].divide(this.tokenAmounts[0]);
                return new i.tA(this.token0,this.token1,e.denominator,e.numerator)
            }
            get token1Price() {
                let e = this.tokenAmounts[0].divide(this.tokenAmounts[1]);
                return new i.tA(this.token1,this.token0,e.denominator,e.numerator)
            }
            priceOf(e) {
                return (0,
                o.Z)(this.involvesToken(e), "TOKEN"),
                e.equals(this.token0) ? this.token0Price : this.token1Price
            }
            get chainId() {
                return this.token0.chainId
            }
            get token0() {
                return this.tokenAmounts[0].currency
            }
            get token1() {
                return this.tokenAmounts[1].currency
            }
            get reserve0() {
                return this.tokenAmounts[0]
            }
            get reserve1() {
                return this.tokenAmounts[1]
            }
            reserveOf(e) {
                return (0,
                o.Z)(this.involvesToken(e), "TOKEN"),
                e.equals(this.token0) ? this.reserve0 : this.reserve1
            }
            getOutputAmount(e) {
                if ((0,
                o.Z)(this.involvesToken(e.currency), "TOKEN"),
                this.reserve0.quotient === i.xE || this.reserve1.quotient === i.xE)
                    throw new i.CD;
                let t = this.reserveOf(e.currency)
                  , n = this.reserveOf(e.currency.equals(this.token0) ? this.token1 : this.token0)
                  , r = e.quotient * i.i2
                  , a = r * n.quotient
                  , s = t.quotient * i.VV + r
                  , u = i.ih.fromRawAmount(e.currency.equals(this.token0) ? this.token1 : this.token0, a / s);
                if (u.quotient === i.xE)
                    throw new i.Le;
                return [u, new C(t.add(e),n.subtract(u))]
            }
            getInputAmount(e) {
                if ((0,
                o.Z)(this.involvesToken(e.currency), "TOKEN"),
                this.reserve0.quotient === i.xE || this.reserve1.quotient === i.xE || e.quotient >= this.reserveOf(e.currency).quotient)
                    throw new i.CD;
                let t = this.reserveOf(e.currency)
                  , n = this.reserveOf(e.currency.equals(this.token0) ? this.token1 : this.token0)
                  , r = n.quotient * e.quotient * i.VV
                  , a = (t.quotient - e.quotient) * i.i2
                  , s = i.ih.fromRawAmount(e.currency.equals(this.token0) ? this.token1 : this.token0, r / a + i.ry);
                return [s, new C(n.add(s),t.subtract(e))]
            }
            getLiquidityMinted(e, t, n) {
                let r;
                (0,
                o.Z)(e.currency.equals(this.liquidityToken), "LIQUIDITY");
                let a = t.currency.sortsBefore(n.currency) ? [t, n] : [n, t];
                if ((0,
                o.Z)(a[0].currency.equals(this.token0) && a[1].currency.equals(this.token1), "TOKEN"),
                e.quotient === i.xE)
                    r = (0,
                    i._b)(a[0].quotient * a[1].quotient) - i.Xh;
                else {
                    let t = a[0].quotient * e.quotient / this.reserve0.quotient
                      , n = a[1].quotient * e.quotient / this.reserve1.quotient;
                    r = t <= n ? t : n
                }
                if (!(r > i.xE))
                    throw new i.Le;
                return i.ih.fromRawAmount(this.liquidityToken, r)
            }
            getLiquidityValue(e, t, n) {
                let r, a = arguments.length > 3 && void 0 !== arguments[3] && arguments[3], s = arguments.length > 4 ? arguments[4] : void 0;
                if ((0,
                o.Z)(this.involvesToken(e), "TOKEN"),
                (0,
                o.Z)(t.currency.equals(this.liquidityToken), "TOTAL_SUPPLY"),
                (0,
                o.Z)(n.currency.equals(this.liquidityToken), "LIQUIDITY"),
                (0,
                o.Z)(n.quotient <= t.quotient, "LIQUIDITY"),
                a) {
                    (0,
                    o.Z)(!!s, "K_LAST");
                    let e = BigInt(s);
                    if (e !== i.xE) {
                        let n = (0,
                        i._b)(this.reserve0.quotient * this.reserve1.quotient)
                          , a = (0,
                        i._b)(e);
                        if (n > a) {
                            let e = t.quotient * (n - a)
                              , o = n * i.YG + a;
                            r = t.add(i.ih.fromRawAmount(this.liquidityToken, e / o))
                        } else
                            r = t
                    } else
                        r = t
                } else
                    r = t;
                return i.ih.fromRawAmount(e, n.quotient * this.reserveOf(e).quotient / r.quotient)
            }
            constructor(e, t) {
                let n = e.currency.sortsBefore(t.currency) ? [e, t] : [t, e];
                this.liquidityToken = new c(n[0].currency.chainId,C.getAddress(n[0].currency, n[1].currency),18,"Cake-LP","Pancake LPs"),
                this.tokenAmounts = n
            }
        }
          , _ = class {
            get midPrice() {
                if (null !== this._midPrice)
                    return this._midPrice;
                let e = [];
                for (let[t,n] of this.pairs.entries())
                    e.push(this.path[t].equals(n.token0) ? new i.tA(n.reserve0.currency,n.reserve1.currency,n.reserve0.quotient,n.reserve1.quotient) : new i.tA(n.reserve1.currency,n.reserve0.currency,n.reserve1.quotient,n.reserve0.quotient));
                let t = e.slice(1).reduce((e,t)=>e.multiply(t), e[0]);
                return this._midPrice = new i.tA(this.input,this.output,t.denominator,t.numerator)
            }
            get chainId() {
                return this.pairs[0].chainId
            }
            constructor(e, t, n) {
                this._midPrice = null,
                (0,
                o.Z)(e.length > 0, "PAIRS");
                let {chainId: r} = e[0];
                (0,
                o.Z)(e.every(e=>e.chainId === r), "CHAIN_IDS");
                let i = t.wrapped;
                (0,
                o.Z)(e[0].involvesToken(i), "INPUT"),
                (0,
                o.Z)(void 0 === n || e[e.length - 1].involvesToken(n.wrapped), "OUTPUT");
                let a = [i];
                for (let[t,n] of e.entries()) {
                    let e = a[t];
                    (0,
                    o.Z)(e.equals(n.token0) || e.equals(n.token1), "PATH");
                    let r = e.equals(n.token0) ? n.token1 : n.token0;
                    a.push(r)
                }
                this.pairs = e,
                this.path = a,
                this.input = t,
                this.output = n
            }
        }
        ;
        function S(e, t) {
            let n = ((0,
            o.Z)(e.inputAmount.currency.equals(t.inputAmount.currency), "INPUT_CURRENCY"),
            (0,
            o.Z)(e.outputAmount.currency.equals(t.outputAmount.currency), "OUTPUT_CURRENCY"),
            e.outputAmount.equalTo(t.outputAmount)) ? e.inputAmount.equalTo(t.inputAmount) ? 0 : e.inputAmount.lessThan(t.inputAmount) ? -1 : 1 : e.outputAmount.lessThan(t.outputAmount) ? 1 : -1;
            return 0 !== n ? n : e.priceImpact.lessThan(t.priceImpact) ? -1 : e.priceImpact.greaterThan(t.priceImpact) ? 1 : e.route.path.length - t.route.path.length
        }
        var I = class {
            static exactIn(e, t) {
                return new I(e,t,i.YL.EXACT_INPUT)
            }
            static exactOut(e, t) {
                return new I(e,t,i.YL.EXACT_OUTPUT)
            }
            minimumAmountOut(e) {
                if ((0,
                o.Z)(!e.lessThan(i.xE), "SLIPPAGE_TOLERANCE"),
                this.tradeType === i.YL.EXACT_OUTPUT)
                    return this.outputAmount;
                let t = new i.iA(i.ry).add(e).invert().multiply(this.outputAmount.quotient).quotient;
                return i.ih.fromRawAmount(this.outputAmount.currency, t)
            }
            maximumAmountIn(e) {
                if ((0,
                o.Z)(!e.lessThan(i.xE), "SLIPPAGE_TOLERANCE"),
                this.tradeType === i.YL.EXACT_INPUT)
                    return this.inputAmount;
                let t = new i.iA(i.ry).add(e).multiply(this.inputAmount.quotient).quotient;
                return i.ih.fromRawAmount(this.inputAmount.currency, t)
            }
            static bestTradeExactIn(e, t, n) {
                let {maxNumResults: r=3, maxHops: a=3} = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : {}
                  , s = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : []
                  , u = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : t
                  , l = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : [];
                (0,
                o.Z)(e.length > 0, "PAIRS"),
                (0,
                o.Z)(a > 0, "MAX_HOPS"),
                (0,
                o.Z)(t === u || s.length > 0, "INVALID_RECURSION");
                let c = u.wrapped
                  , d = n.wrapped;
                for (let o = 0; o < e.length; o++) {
                    let u;
                    let p = e[o];
                    if ((p.token0.equals(c.currency) || p.token1.equals(c.currency)) && !(p.reserve0.equalTo(i.xE) || p.reserve1.equalTo(i.xE))) {
                        try {
                            [u] = p.getOutputAmount(c)
                        } catch (e) {
                            if (e.isInsufficientInputAmountError)
                                continue;
                            throw e
                        }
                        if (u.currency.equals(d))
                            (0,
                            i.cW)(l, new I(new _([...s, p],t.currency,n),t,i.YL.EXACT_INPUT), r, S);
                        else if (a > 1 && e.length > 1) {
                            let i = e.slice(0, o).concat(e.slice(o + 1, e.length));
                            I.bestTradeExactIn(i, t, n, {
                                maxNumResults: r,
                                maxHops: a - 1
                            }, [...s, p], u, l)
                        }
                    }
                }
                return l
            }
            worstExecutionPrice(e) {
                return new i.tA(this.inputAmount.currency,this.outputAmount.currency,this.maximumAmountIn(e).quotient,this.minimumAmountOut(e).quotient)
            }
            static bestTradeExactOut(e, t, n) {
                let {maxNumResults: r=3, maxHops: a=3} = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : {}
                  , s = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : []
                  , u = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : n
                  , l = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : [];
                (0,
                o.Z)(e.length > 0, "PAIRS"),
                (0,
                o.Z)(a > 0, "MAX_HOPS"),
                (0,
                o.Z)(n === u || s.length > 0, "INVALID_RECURSION");
                let c = u.wrapped
                  , d = t.wrapped;
                for (let o = 0; o < e.length; o++) {
                    let u;
                    let p = e[o];
                    if ((p.token0.equals(c.currency) || p.token1.equals(c.currency)) && !(p.reserve0.equalTo(i.xE) || p.reserve1.equalTo(i.xE))) {
                        try {
                            [u] = p.getInputAmount(c)
                        } catch (e) {
                            if (e.isInsufficientReservesError)
                                continue;
                            throw e
                        }
                        if (u.currency.equals(d))
                            (0,
                            i.cW)(l, new I(new _([p, ...s],t,n.currency),n,i.YL.EXACT_OUTPUT), r, S);
                        else if (a > 1 && e.length > 1) {
                            let i = e.slice(0, o).concat(e.slice(o + 1, e.length));
                            I.bestTradeExactOut(i, t, n, {
                                maxNumResults: r,
                                maxHops: a - 1
                            }, [p, ...s], u, l)
                        }
                    }
                }
                return l
            }
            constructor(e, t, n) {
                this.route = e,
                this.tradeType = n;
                let r = Array(e.path.length);
                if (n === i.YL.EXACT_INPUT) {
                    (0,
                    o.Z)(t.currency.equals(e.input), "INPUT"),
                    r[0] = t.wrapped;
                    for (let t = 0; t < e.path.length - 1; t++) {
                        let n = e.pairs[t]
                          , [i] = n.getOutputAmount(r[t]);
                        r[t + 1] = i
                    }
                    this.inputAmount = i.ih.fromFractionalAmount(e.input, t.numerator, t.denominator),
                    this.outputAmount = i.ih.fromFractionalAmount(e.output, r[r.length - 1].numerator, r[r.length - 1].denominator)
                } else {
                    (0,
                    o.Z)(t.currency.equals(e.output), "OUTPUT"),
                    r[r.length - 1] = t.wrapped;
                    for (let t = e.path.length - 1; t > 0; t--) {
                        let n = e.pairs[t - 1]
                          , [i] = n.getInputAmount(r[t]);
                        r[t - 1] = i
                    }
                    this.inputAmount = i.ih.fromFractionalAmount(e.input, r[0].numerator, r[0].denominator),
                    this.outputAmount = i.ih.fromFractionalAmount(e.output, t.numerator, t.denominator)
                }
                this.executionPrice = new i.tA(this.inputAmount.currency,this.outputAmount.currency,this.inputAmount.quotient,this.outputAmount.quotient),
                this.priceImpact = (0,
                i.oc)(e.midPrice, this.inputAmount, this.outputAmount)
            }
        }
          , P = class extends i.Yp {
            get wrapped() {
                let e = w[this.chainId];
                return (0,
                o.Z)(!!e, "WRAPPED"),
                e
            }
            static onChain(e) {
                if (e in this.cache)
                    return this.cache[e];
                (0,
                o.Z)(!!T[e], "NATIVE_CURRENCY");
                let {decimals: t, name: n, symbol: r} = T[e];
                return this.cache[e] = new P({
                    chainId: e,
                    decimals: t,
                    symbol: r,
                    name: n
                })
            }
            equals(e) {
                return e.isNative && e.chainId === this.chainId
            }
            constructor({chainId: e, decimals: t, name: n, symbol: r}) {
                super(e, t, r, n)
            }
        }
          , B = P;
        function O(e) {
            return `0x ${e.quotient.toString(16)}`
        }
        B.cache = {};
        var N = class {
            static swapCallParameters(e, t) {
                let n, r, a;
                let s = e.inputAmount.currency.isNative
                  , u = e.outputAmount.currency.isNative;
                (0,
                o.Z)(!(s && u), "ETHER_IN_OUT"),
                (0,
                o.Z)(!("ttl"in t) || t.ttl > 0, "TTL");
                let c = l(t.recipient)
                  , d = O(e.maximumAmountIn(t.allowedSlippage))
                  , p = O(e.minimumAmountOut(t.allowedSlippage))
                  , f = e.route.path.map(e=>e.address)
                  , h = "ttl"in t ? `0x ${(Math.floor(new Date().getTime() / 1e3) + t.ttl).toString(16)}` : `0x ${t.deadline.toString(16)}`
                  , m = !!t.feeOnTransfer;
                switch (e.tradeType) {
                case i.YL.EXACT_INPUT:
                    s ? (n = m ? "swapExactETHForTokensSupportingFeeOnTransferTokens" : "swapExactETHForTokens",
                    r = [p, f, c, h],
                    a = d) : u ? (n = m ? "swapExactTokensForETHSupportingFeeOnTransferTokens" : "swapExactTokensForETH",
                    r = [d, p, f, c, h],
                    a = "0x0") : (n = m ? "swapExactTokensForTokensSupportingFeeOnTransferTokens" : "swapExactTokensForTokens",
                    r = [d, p, f, c, h],
                    a = "0x0");
                    break;
                case i.YL.EXACT_OUTPUT:
                    (0,
                    o.Z)(!m, "EXACT_OUT_FOT"),
                    s ? (n = "swapETHForExactTokens",
                    r = [p, f, c, h],
                    a = d) : u ? (n = "swapTokensForExactETH",
                    r = [p, d, f, c, h],
                    a = "0x0") : (n = "swapTokensForExactTokens",
                    r = [p, d, f, c, h],
                    a = "0x0")
                }
                return {
                    methodName: n,
                    args: r,
                    value: a
                }
            }
        }
          , R = class extends i.Yp {
            get wrapped() {
                let e = b[this.chainId];
                return (0,
                o.Z)(!!e, "WRAPPED"),
                e
            }
            static onChain(e) {
                return this._etherCache[e] || (this._etherCache[e] = new R(e)),
                this._etherCache[e]
            }
            equals(e) {
                return e.isNative && e.chainId === this.chainId
            }
            constructor(e) {
                super(e, 18, "ETH", "Ether")
            }
        }
        ;
        R._etherCache = {};
        var {getNetwork: F, getDefaultProvider: D} = u
    },
    98286: function(e, t, n) {
        "use strict";
        n.d(t, {
            Cr: function() {
                return p
            },
            EZ: function() {
                return d
            },
            ih: function() {
                return c
            }
        });
        var r = Object.defineProperty
          , i = Object.defineProperties
          , a = Object.getOwnPropertyDescriptors
          , o = Object.getOwnPropertySymbols
          , s = Object.prototype.hasOwnProperty
          , u = Object.prototype.propertyIsEnumerable
          , l = (e,t,n)=>t in e ? r(e, t, {
            enumerable: !0,
            configurable: !0,
            writable: !0,
            value: n
        }) : e[t] = n
          , c = (e,t)=>{
            for (var n in t || (t = {}))
                s.call(t, n) && l(e, n, t[n]);
            if (o)
                for (var n of o(t))
                    u.call(t, n) && l(e, n, t[n]);
            return e
        }
          , d = (e,t)=>i(e, a(t))
          , p = (e,t,n)=>new Promise((r,i)=>{
            var a = e=>{
                try {
                    s(n.next(e))
                } catch (e) {
                    i(e)
                }
            }
              , o = e=>{
                try {
                    s(n.throw(e))
                } catch (e) {
                    i(e)
                }
            }
              , s = e=>e.done ? r(e.value) : Promise.resolve(e.value).then(a, o);
            s((n = n.apply(e, t)).next())
        }
        )
    },
    27302: function(e, t, n) {
        "use strict";
        n.d(t, {
            DT: function() {
                return a
            },
            Q0: function() {
                return s
            },
            SR: function() {
                return l
            },
            X0: function() {
                return u
            },
            iG: function() {
                return o
            }
        });
        var r, i = n(92163), a = class extends i.WU {
            get serialize() {
                return {
                    address: this.address,
                    chainId: this.chainId,
                    decimals: this.decimals,
                    symbol: this.symbol,
                    name: this.name,
                    projectLink: this.projectLink,
                    logoURI: this.logoURI
                }
            }
            constructor(e) {
                super(e.chainId, e.address, e.decimals, e.symbol, e.name),
                this.logoURI = e.logoURI
            }
        }
        ;
        function o(e) {
            return e.logoURI ? new a({
                chainId: e.chainId,
                address: e.address,
                decimals: e.decimals,
                symbol: e.symbol || "Unknown",
                name: e.name || "Unknown",
                logoURI: e.logoURI
            }) : new i.WU(e.chainId,e.address,e.decimals,e.symbol,e.name,e.projectLink)
        }
        var s = ((r = s || {})[r.NONE = 0] = "NONE",
        r[r.PATCH = 1] = "PATCH",
        r[r.MINOR = 2] = "MINOR",
        r[r.MAJOR = 3] = "MAJOR",
        r);
        function u(e, t) {
            return t.major > e.major ? 3 : t.major < e.major ? 0 : t.minor > e.minor ? 2 : t.minor < e.minor ? 0 : t.patch > e.patch ? 1 : 0
        }
        function l(e, t) {
            if (t(e)) {
                let t = e.toLowerCase();
                return e=>"address"in e && t === e.address.toLowerCase()
            }
            let n = e.toLowerCase().split(/\s+/).filter(e=>e.length > 0);
            if (0 === n.length)
                return ()=>!0;
            let r = e=>{
                let t = e.toLowerCase().split(/\s+/).filter(e=>e.length > 0);
                return n.every(e=>0 === e.length || t.some(t=>t.startsWith(e) || t.endsWith(e)))
            }
            ;
            return e=>{
                let {symbol: t, name: n} = e;
                return !!(t && r(t) || n && r(n))
            }
        }
    },
    51279: function(e, t, n) {
        "use strict";
        n.r(t),
        n.d(t, {
            default: function() {
                return o
            },
            tokenListValidator: function() {
                return a
            }
        });
        var r = n(98286)
          , i = n(38265)
          , a = new (n(5185))({
            allErrors: !0
        }).compile({
            $schema: "http://json-schema.org/draft-07/schema#",
            $id: "pancakeswap",
            title: "PancakeSwap Token List",
            description: "Schema for lists of tokens compatible with the PancakeSwap Interface, including Uniswap standard and PancakeSwap Aptos",
            definitions: {
                Version: {
                    type: "object",
                    description: "The version of the list, used in change detection",
                    examples: [{
                        major: 1,
                        minor: 0,
                        patch: 0
                    }],
                    additionalProperties: !1,
                    properties: {
                        major: {
                            type: "integer",
                            description: "The major version of the list. Must be incremented when tokens are removed from the list or token addresses are changed.",
                            minimum: 0,
                            examples: [1, 2]
                        },
                        minor: {
                            type: "integer",
                            description: "The minor version of the list. Must be incremented when tokens are added to the list.",
                            minimum: 0,
                            examples: [0, 1]
                        },
                        patch: {
                            type: "integer",
                            description: "The patch version of the list. Must be incremented for any changes to the list.",
                            minimum: 0,
                            examples: [0, 1]
                        }
                    },
                    required: ["major", "minor", "patch"]
                },
                TagIdentifier: {
                    type: "string",
                    description: "The unique identifier of a tag",
                    minLength: 1,
                    maxLength: 10,
                    pattern: "^[\\w]+$",
                    examples: ["compound", "stablecoin"]
                },
                ExtensionIdentifier: {
                    type: "string",
                    description: "The name of a token extension property",
                    minLength: 1,
                    maxLength: 40,
                    pattern: "^[\\w]+$",
                    examples: ["color", "is_fee_on_transfer", "aliases"]
                },
                ExtensionMap: {
                    type: "object",
                    description: "An object containing any arbitrary or vendor-specific token metadata",
                    maxProperties: 10,
                    propertyNames: {
                        $ref: "#/definitions/ExtensionIdentifier"
                    },
                    additionalProperties: {
                        $ref: "#/definitions/ExtensionValue"
                    },
                    examples: [{
                        color: "#000000",
                        is_verified_by_me: !0
                    }, {
                        "x-bridged-addresses-by-chain": {
                            1: {
                                bridgeAddress: "0x4200000000000000000000000000000000000010",
                                tokenAddress: "0x4200000000000000000000000000000000000010"
                            }
                        }
                    }]
                },
                ExtensionPrimitiveValue: {
                    anyOf: [{
                        type: "string",
                        minLength: 1,
                        maxLength: 42,
                        examples: ["#00000"]
                    }, {
                        type: "boolean",
                        examples: [!0]
                    }, {
                        type: "number",
                        examples: [15]
                    }, {
                        type: "null"
                    }]
                },
                ExtensionValue: {
                    anyOf: [{
                        $ref: "#/definitions/ExtensionPrimitiveValue"
                    }, {
                        type: "object",
                        maxProperties: 10,
                        propertyNames: {
                            $ref: "#/definitions/ExtensionIdentifier"
                        },
                        additionalProperties: {
                            $ref: "#/definitions/ExtensionValueInner0"
                        }
                    }]
                },
                ExtensionValueInner0: {
                    anyOf: [{
                        $ref: "#/definitions/ExtensionPrimitiveValue"
                    }, {
                        type: "object",
                        maxProperties: 10,
                        propertyNames: {
                            $ref: "#/definitions/ExtensionIdentifier"
                        },
                        additionalProperties: {
                            $ref: "#/definitions/ExtensionValueInner1"
                        }
                    }]
                },
                ExtensionValueInner1: {
                    anyOf: [{
                        $ref: "#/definitions/ExtensionPrimitiveValue"
                    }]
                },
                TagDefinition: {
                    type: "object",
                    description: "Definition of a tag that can be associated with a token via its identifier",
                    additionalProperties: !1,
                    properties: {
                        name: {
                            type: "string",
                            description: "The name of the tag",
                            pattern: "^[ \\w]+$",
                            minLength: 1,
                            maxLength: 20
                        },
                        description: {
                            type: "string",
                            description: "A user-friendly description of the tag",
                            pattern: "^[ \\w\\.,:]+$",
                            minLength: 1,
                            maxLength: 200
                        }
                    },
                    required: ["name", "description"],
                    examples: [{
                        name: "Stablecoin",
                        description: "A token with value pegged to another asset"
                    }]
                },
                TokenInfo: {
                    type: "object",
                    description: "Metadata for a single token in a token list",
                    additionalProperties: !1,
                    properties: {
                        chainId: {
                            type: "integer",
                            description: "The chain ID of the Ethereum network where this token is deployed",
                            minimum: 1,
                            examples: [1, 42]
                        },
                        address: {
                            type: "string",
                            description: "The checksummed address of the token on the specified chain ID",
                            pattern: "^0x[a-fA-F0-9]{40}$",
                            examples: ["0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48"]
                        },
                        decimals: {
                            type: "integer",
                            description: "The number of decimals for the token balance",
                            minimum: 0,
                            maximum: 255,
                            examples: [18]
                        },
                        name: {
                            type: "string",
                            description: "The name of the token",
                            minLength: 1,
                            maxLength: 40,
                            pattern: "^[ \\w.'+\\-%/\xc0-\xd6\xd8-\xf6\xf8-\xff:&\\[\\]\\(\\)]+$",
                            examples: ["USD Coin"]
                        },
                        symbol: {
                            type: "string",
                            description: "The symbol for the token; must be alphanumeric",
                            pattern: "^[a-zA-Z0-9+\\-%/$.]+$",
                            minLength: 1,
                            maxLength: 20,
                            examples: ["USDC"]
                        },
                        logoURI: {
                            type: "string",
                            description: "A URI to the token logo asset; if not set, interface will attempt to find a logo based on the token address; suggest SVG or PNG of size 64x64",
                            format: "uri",
                            examples: ["ipfs://QmXfzKRvjZz3u5JRgC4v5mGVbm9ahrUiB4DgzHBsnWbTMM"]
                        },
                        tags: {
                            type: "array",
                            description: "An array of tag identifiers associated with the token; tags are defined at the list level",
                            items: {
                                $ref: "#/definitions/TagIdentifier"
                            },
                            maxItems: 10,
                            examples: ["stablecoin", "compound"]
                        },
                        extensions: {
                            $ref: "#/definitions/ExtensionMap"
                        }
                    },
                    required: ["chainId", "address", "decimals", "name", "symbol"]
                },
                AptosTokenInfo: {
                    type: "object",
                    description: "Metadata for a single token in a token list",
                    additionalProperties: !1,
                    properties: {
                        chainId: {
                            type: "integer",
                            description: "The chain ID of the Aptos network where this token is deployed, 0 is devent",
                            minimum: 0,
                            examples: [1, 42]
                        },
                        address: {
                            type: "string",
                            description: "The address of the coin on the specified chain ID",
                            examples: ["0x1::aptos_coin::AptosCoin"]
                        },
                        decimals: {
                            type: "integer",
                            description: "The number of decimals for the token balance",
                            minimum: 0,
                            maximum: 255,
                            examples: [18]
                        },
                        name: {
                            type: "string",
                            description: "The name of the token",
                            minLength: 1,
                            maxLength: 40,
                            pattern: "^[ \\w.'+\\-%/\xc0-\xd6\xd8-\xf6\xf8-\xff:&\\[\\]\\(\\)]+$",
                            examples: ["USD Coin"]
                        },
                        symbol: {
                            type: "string",
                            description: "The symbol for the token; must be alphanumeric",
                            pattern: "^[a-zA-Z0-9+\\-%/$.]+$",
                            minLength: 1,
                            maxLength: 20,
                            examples: ["USDC"]
                        },
                        logoURI: {
                            type: "string",
                            description: "A URI to the token logo asset; if not set, interface will attempt to find a logo based on the token address; suggest SVG or PNG of size 64x64",
                            format: "uri",
                            examples: ["ipfs://QmXfzKRvjZz3u5JRgC4v5mGVbm9ahrUiB4DgzHBsnWbTMM"]
                        },
                        tags: {
                            type: "array",
                            description: "An array of tag identifiers associated with the token; tags are defined at the list level",
                            items: {
                                $ref: "#/definitions/TagIdentifier"
                            },
                            maxItems: 10,
                            examples: ["stablecoin", "compound"]
                        },
                        extensions: {
                            $ref: "#/definitions/ExtensionMap"
                        }
                    },
                    required: ["chainId", "address", "decimals", "name", "symbol"]
                }
            },
            type: "object",
            additionalProperties: !1,
            properties: {
                name: {
                    type: "string",
                    description: "The name of the token list",
                    minLength: 1,
                    maxLength: 30,
                    pattern: "^[\\w ]+$",
                    examples: ["My Token List"]
                },
                timestamp: {
                    type: "string",
                    format: "date-time",
                    description: "The timestamp of this list version; i.e. when this immutable version of the list was created"
                },
                schema: {
                    type: "string"
                },
                version: {
                    $ref: "#/definitions/Version"
                },
                tokens: {
                    type: "array",
                    description: "The list of tokens included in the list",
                    minItems: 1,
                    maxItems: 1e4
                },
                keywords: {
                    type: "array",
                    description: "Keywords associated with the contents of the list; may be used in list discoverability",
                    items: {
                        type: "string",
                        description: "A keyword to describe the contents of the list",
                        minLength: 1,
                        maxLength: 20,
                        pattern: "^[\\w ]+$",
                        examples: ["compound", "lending", "personal tokens"]
                    },
                    maxItems: 20,
                    uniqueItems: !0
                },
                tags: {
                    type: "object",
                    description: "A mapping of tag identifiers to their name and description",
                    propertyNames: {
                        $ref: "#/definitions/TagIdentifier"
                    },
                    additionalProperties: {
                        $ref: "#/definitions/TagDefinition"
                    },
                    maxProperties: 20,
                    examples: [{
                        stablecoin: {
                            name: "Stablecoin",
                            description: "A token with value pegged to another asset"
                        }
                    }]
                },
                logoURI: {
                    type: "string",
                    description: "A URI for the logo of the token list; prefer SVG or PNG of size 256x256",
                    format: "uri",
                    examples: ["ipfs://QmXfzKRvjZz3u5JRgC4v5mGVbm9ahrUiB4DgzHBsnWbTMM"]
                }
            },
            if: {
                properties: {
                    schema: {
                        const: "aptos"
                    }
                },
                required: ["name", "timestamp", "version", "tokens", "schema"]
            },
            then: {
                properties: {
                    tokens: {
                        items: {
                            $ref: "#/definitions/AptosTokenInfo"
                        },
                        type: "array",
                        description: "The list of tokens included in the list",
                        minItems: 1,
                        maxItems: 1e4
                    }
                }
            },
            else: {
                properties: {
                    tokens: {
                        items: {
                            $ref: "#/definitions/TokenInfo"
                        },
                        type: "array",
                        description: "The list of tokens included in the list",
                        minItems: 1,
                        maxItems: 1e4
                    }
                }
            },
            required: ["name", "timestamp", "version", "tokens"]
        });
        function o(e) {
            return (0,
            r.Cr)(this, null, function*() {
                var t, n;
                let r = function(e) {
                    var t, n;
                    let r = e.split(":")[0].toLowerCase();
                    switch (r) {
                    case "https":
                        return [e];
                    case "http":
                        return [`https ${e.substring(4)}`, e];
                    case "ipfs":
                        let i = null == (t = e.match(/^ipfs:(\/\/)?(.*)$/i)) ? void 0 : t[2];
                        return [`https://cloudflare-ipfs.com/ipfs/${i}/`, `https://ipfs.io/ipfs/${i}/`];
                    case "ipns":
                        let a = null == (n = e.match(/^ipns:(\/\/)?(.*)$/i)) ? void 0 : n[2];
                        return [`https://cloudflare-ipfs.com/ipns/${a}/`, `https://ipfs.io/ipns/${a}/`];
                    default:
                        return []
                    }
                }(e);
                for (let o = 0; o < r.length; o++) {
                    let s;
                    let u = r[o]
                      , l = o === r.length - 1;
                    try {
                        s = yield fetch(u)
                    } catch (t) {
                        if (console.error("Failed to fetch list", e, t),
                        l)
                            throw Error(`Failed to download list ${e}`);
                        continue
                    }
                    if (!s.ok) {
                        if (l)
                            throw Error(`Failed to download list ${e}`);
                        continue
                    }
                    let c = yield s.json();
                    if (c.tokens && i(c.tokens, e=>!e.symbol || 0 === e.symbol.length),
                    !a(c)) {
                        let e = null != (n = null == (t = a.errors) ? void 0 : t.reduce((e,t)=>{
                            var n;
                            let r = `${t.dataPath} ${null != (n = t.message) ? n : ""}`;
                            return e.length > 0 ? `${e}; ${r}` : `${r}`
                        }
                        , "")) ? n : "unknown error";
                        throw Error(`Token list failed validation: ${e}`)
                    }
                    return c
                }
                throw Error("Unrecognized list URL protocol.")
            })
        }
    },
    62385: function(e, t, n) {
        "use strict";
        n.d(t, {
            DT: function() {
                return r.DT
            },
            Q0: function() {
                return r.Q0
            },
            SR: function() {
                return r.SR
            },
            X0: function() {
                return r.X0
            },
            iG: function() {
                return r.iG
            }
        });
        var r = n(27302);
        n(98286)
    },
    3013: function(e, t, n) {
        "use strict";
        n.d(t, {
            J_: function() {
                return f
            },
            K$: function() {
                return m
            },
            Lr: function() {
                return g
            },
            Pu: function() {
                return b
            },
            g6: function() {
                return v
            },
            ic: function() {
                return h
            },
            jn: function() {
                return E
            },
            jy: function() {
                return T
            },
            xJ: function() {
                return y
            }
        });
        var r = n(27302)
          , i = n(98286)
          , a = n(75766);
        if (2272 == n.j)
            var o = n(17076);
        if (2272 == n.j)
            var s = n(53223);
        if (2272 == n.j)
            var u = n(77023);
        var l = n(83680)
          , c = n(52983)
          , d = {
            pending: (0,
            a.PH)("lists/fetchTokenList/pending"),
            fulfilled: (0,
            a.PH)("lists/fetchTokenList/fulfilled"),
            rejected: (0,
            a.PH)("lists/fetchTokenList/rejected")
        }
          , p = (0,
        a.PH)("lists/addList")
          , f = (0,
        a.PH)("lists/removeList")
          , h = (0,
        a.PH)("lists/enableList")
          , m = (0,
        a.PH)("lists/disableList")
          , y = (0,
        a.PH)("lists/acceptListUpdate");
        (0,
        a.PH)("lists/rejectVersionUpdate");
        var g = (0,
        a.PH)("lists/updateListVersion")
          , b = {
            error: null,
            current: null,
            loadingRequestId: null,
            pendingUpdate: null
        }
          , v = (e,t,n)=>(0,
        a.Lq)(e, a=>a.addCase(d.pending, (e,t)=>{
            var n, r, i, a;
            let {payload: {requestId: o, url: s}} = t
              , u = null != (r = null == (n = e.byUrl[s]) ? void 0 : n.current) ? r : null
              , l = null != (a = null == (i = e.byUrl[s]) ? void 0 : i.pendingUpdate) ? a : null;
            e.byUrl[s] = {
                current: u,
                pendingUpdate: l,
                loadingRequestId: o,
                error: null
            }
        }
        ).addCase(d.fulfilled, (e,t)=>{
            var a, o;
            let {payload: {requestId: s, tokenList: u, url: l}} = t
              , c = null == (a = e.byUrl[l]) ? void 0 : a.current
              , d = null == (o = e.byUrl[l]) ? void 0 : o.loadingRequestId;
            if (c) {
                let t = (0,
                r.X0)(c.version, u.version);
                if (0 === t)
                    return;
                (null === d || d === s) && (e.byUrl[l] = (0,
                i.EZ)((0,
                i.ih)({}, e.byUrl[l]), {
                    loadingRequestId: null,
                    error: null,
                    current: c,
                    pendingUpdate: u
                }))
            } else
                n.includes(l) && e.activeListUrls && !e.activeListUrls.includes(l) && e.activeListUrls.push(l),
                e.byUrl[l] = (0,
                i.EZ)((0,
                i.ih)({}, e.byUrl[l]), {
                    loadingRequestId: null,
                    error: null,
                    current: u,
                    pendingUpdate: null
                })
        }
        ).addCase(d.rejected, (e,t)=>{
            var n;
            let {payload: {url: r, requestId: a, errorMessage: o}} = t;
            (null == (n = e.byUrl[r]) ? void 0 : n.loadingRequestId) === a && (e.byUrl[r] = (0,
            i.EZ)((0,
            i.ih)({}, e.byUrl[r]), {
                loadingRequestId: null,
                error: o,
                current: null,
                pendingUpdate: null
            }))
        }
        ).addCase(p, (e,t)=>{
            let {payload: n} = t;
            e.byUrl[n] || (e.byUrl[n] = b)
        }
        ).addCase(f, (e,t)=>{
            let {payload: n} = t;
            e.byUrl[n] && delete e.byUrl[n],
            e.activeListUrls && e.activeListUrls.includes(n) && (e.activeListUrls = e.activeListUrls.filter(e=>e !== n))
        }
        ).addCase(h, (e,t)=>{
            let {payload: n} = t;
            e.byUrl[n] || (e.byUrl[n] = b),
            e.activeListUrls && !e.activeListUrls.includes(n) && e.activeListUrls.push(n),
            e.activeListUrls || (e.activeListUrls = [n])
        }
        ).addCase(m, (e,t)=>{
            let {payload: n} = t;
            e.activeListUrls && e.activeListUrls.includes(n) && (e.activeListUrls = e.activeListUrls.filter(e=>e !== n))
        }
        ).addCase(y, (e,t)=>{
            var n;
            let {payload: r} = t;
            if (!(null == (n = e.byUrl[r]) ? void 0 : n.pendingUpdate))
                throw Error("accept list update called without pending update");
            e.byUrl[r] = (0,
            i.EZ)((0,
            i.ih)({}, e.byUrl[r]), {
                pendingUpdate: null,
                current: e.byUrl[r].pendingUpdate
            })
        }
        ).addCase(g, r=>{
            if (r.lastInitializedDefaultListOfLists) {
                if (r.lastInitializedDefaultListOfLists) {
                    let e = r.lastInitializedDefaultListOfLists.reduce((e,t)=>e.add(t), new Set)
                      , n = t.reduce((e,t)=>e.add(t), new Set);
                    t.forEach(t=>{
                        e.has(t) || (r.byUrl[t] = b)
                    }
                    ),
                    r.lastInitializedDefaultListOfLists.forEach(e=>{
                        n.has(e) || delete r.byUrl[e]
                    }
                    )
                }
            } else
                r.byUrl = e.byUrl,
                r.activeListUrls = e.activeListUrls;
            r.lastInitializedDefaultListOfLists = t,
            r.activeListUrls || (r.activeListUrls = n,
            n.forEach(e=>(r.byUrl[e] || (r.byUrl[e] = b),
            !0)))
        }
        ))
          , w = Symbol()
          , T = (e,t,n)=>{
            let r = (0,
            u.O4)("lists", w, function(t) {
                {
                    let r = l.createInstance({
                        name: t,
                        storeName: e
                    });
                    return {
                        db: r,
                        getItem: e=>(0,
                        i.Cr)(this, null, function*() {
                            let t = yield r.getItem(e);
                            return t || n
                        }),
                        setItem: (e,t)=>{
                            if (t !== w)
                                return r.setItem(e, t)
                        }
                        ,
                        removeItem: r.removeItem
                    }
                }
            }("lists"))
              , a = (0,
            o.cn)(e=>{
                let t = e(r);
                return t === w ? n : t
            }
            , (e,n,i)=>{
                n(r, t(e(a), i))
            }
            )
              , c = (0,
            o.cn)(e=>e(r) !== w);
            return {
                listsAtom: a,
                useListStateReady: function() {
                    return (0,
                    s.Dv)(c)
                },
                useListState: function() {
                    return (0,
                    s.KO)(a)
                }
            }
        }
          , E = 2272 == n.j ? function(e) {
            var t = this;
            return (0,
            c.useCallback)(function(r) {
                let o = !(arguments.length > 1) || void 0 === arguments[1] || arguments[1];
                return (0,
                i.Cr)(t, null, function*() {
                    let t = (0,
                    a.x0)();
                    o && e(d.pending({
                        requestId: t,
                        url: r
                    }));
                    let i = (yield Promise.all([n.e(6723), n.e(5185)]).then(n.bind(n, 51279))).default;
                    return i(r).then(n=>(o && e(d.fulfilled({
                        url: r,
                        tokenList: n,
                        requestId: t
                    })),
                    n)).catch(n=>{
                        throw console.error(`Failed to get list at url ${r}`, n),
                        o && e(d.rejected({
                            url: r,
                            requestId: t,
                            errorMessage: n.message
                        })),
                        n
                    }
                    )
                })
            }, [e])
        }
        : null
    },
    37784: function(e, t, n) {
        "use strict";
        n.d(t, {
            AA: function() {
                return v
            },
            E9: function() {
                return f
            },
            On: function() {
                return A
            },
            PH: function() {
                return T
            },
            Zn: function() {
                return w
            },
            cr: function() {
                return g
            },
            dI: function() {
                return k
            },
            ds: function() {
                return x
            },
            gn: function() {
                return b
            },
            lz: function() {
                return y
            },
            rP: function() {
                return E
            },
            uR: function() {
                return C
            }
        });
        var r = n(57917)
          , i = new r.Z$(r.a_.BSC,"0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82",18,"CAKE","PancakeSwap Token","https://pancakeswap.finance/")
          , a = new r.Z$(r.a_.BSC_TESTNET,"0xFa60D973F7642B748046464e165A65B7323b0DEE",18,"CAKE","PancakeSwap Token","https://pancakeswap.finance/")
          , o = new r.Z$(r.a_.BSC,"0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d",18,"USDC","Binance-Peg USD Coin","https://www.centre.io/usdc")
          , s = new r.Z$(r.a_.BSC_TESTNET,"0x64544969ed7EBf5f083679233325356EbE738930",18,"USDC","Binance-Peg USD Coin","https://www.centre.io/usdc")
          , u = new r.Z$(r.a_.ETHEREUM,"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",6,"USDC","USD Coin")
          , l = new r.Z$(r.a_.GOERLI,"0x07865c6E87B9F70255377e024ace6630C1Eaa37F",6,"tUSDC","test USD Coin")
          , c = new r.Z$(r.a_.BSC,"0x55d398326f99059fF775485246999027B3197955",18,"USDT","Tether USD","https://tether.to/")
          , d = new r.Z$(r.a_.ETHEREUM,"0xdAC17F958D2ee523a2206206994597C13D831ec7",6,"USDT","Tether USD","https://tether.to/")
          , p = new r.Z$(r.a_.BSC,"0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56",18,"BUSD","Binance USD","https://www.paxos.com/busd/")
          , f = new r.Z$(r.a_.BSC_TESTNET,"0xaB1a4d4f1D656d2450692D237fdD6C7f9146e814",18,"BUSD","Binance USD","https://www.paxos.com/busd/")
          , h = new r.Z$(r.a_.ETHEREUM,"0x4Fabb145d64652a948d72533023f6E7A623C7C53",18,"BUSD","Binance USD","https://www.paxos.com/busd/")
          , m = new r.Z$(r.a_.GOERLI,"0xb809b9B2dc5e93CB863176Ea2D565425B03c0540",18,"BUSD","Binance USD","https://www.paxos.com/busd/")
          , y = {
            [r.a_.ETHEREUM]: h,
            [r.a_.GOERLI]: m,
            [r.a_.BSC]: p,
            [r.a_.BSC_TESTNET]: f
        }
          , g = {
            [r.a_.ETHEREUM]: new r.Z$(r.a_.ETHEREUM,"0x152649eA73beAb28c5b49B26eb48f7EAD6d4c898",18,"CAKE","PancakeSwap Token","https://pancakeswap.finance/"),
            [r.a_.GOERLI]: new r.Z$(r.a_.GOERLI,"0xc2C3eAbE0368a2Ea97f485b03D1098cdD7d0c081",18,"CAKE","PancakeSwap Token","https://pancakeswap.finance/"),
            [r.a_.BSC]: i,
            [r.a_.BSC_TESTNET]: a
        }
          , b = {
            [r.a_.BSC]: o,
            [r.a_.BSC_TESTNET]: s,
            [r.a_.ETHEREUM]: u,
            [r.a_.GOERLI]: l
        }
          , v = {
            [r.a_.BSC]: c,
            [r.a_.ETHEREUM]: d
        }
          , w = new r.Z$(r.a_.ETHEREUM,"0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599",8,"WBTC","Wrapped BTC")
          , T = {
            [r.a_.ETHEREUM]: v[r.a_.ETHEREUM],
            [r.a_.GOERLI]: b[r.a_.GOERLI],
            [r.a_.BSC]: v[r.a_.BSC],
            [r.a_.BSC_TESTNET]: y[r.a_.BSC_TESTNET]
        }
          , E = {
            [r.a_.ETHEREUM]: {},
            [r.a_.GOERLI]: {},
            [r.a_.BSC]: {},
            [r.a_.BSC_TESTNET]: {}
        }
          , A = {
            weth: r.g9[r.a_.GOERLI],
            celr: new r.Z$(r.a_.GOERLI,"0x5D3c0F4cA5EE99f8E8F59Ff9A5fAb04F6a7e007f",18,"CELR","CelerToken",""),
            leet: new r.Z$(r.a_.GOERLI,"0xBd509651E6374c327d24b9d7E3Ea46704f6F31E8",18,"LEET","Leet Token",""),
            usdc: l,
            mockB: new r.Z$(r.a_.GOERLI,"0xB8DA084D035C9c38518D86A9D079ba6A0Aec4327",18,"MOCK B","MOCK B"),
            mockA: new r.Z$(r.a_.GOERLI,"0xD134B434682dF091E398a844Dc3c613fe728cE2D",18,"MOCK A","MOCK A")
        }
          , x = {
            wbnb: r.$v[r.a_.BSC],
            bnb: new r.Z$(r.a_.BSC,"0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c",18,"BNB","BNB","https://www.binance.com/"),
            cake: i,
            gmi: new r.Z$(r.a_.BSC,"0x93D8d25E3C9A847a5Da79F79ecaC89461FEcA846",18,"GMI","Gamifi","https://gamifi.gg/"),
            tlos: new r.Z$(r.a_.BSC,"0xb6C53431608E626AC81a9776ac3e999c5556717c",18,"TLOS","Telos","https://www.telos.net/"),
            beta: new r.Z$(r.a_.BSC,"0xBe1a001FE942f96Eea22bA08783140B9Dcc09D28",18,"BETA","Beta Finance","https://betafinance.org"),
            nft: new r.Z$(r.a_.BSC,"0x1fC9004eC7E5722891f5f38baE7678efCB11d34D",6,"NFT","APENFT","https://apenft.org"),
            stephero: new r.Z$(r.a_.BSC,"0xE8176d414560cFE1Bf82Fd73B986823B89E4F545",18,"HERO","StepHero","https://stephero.io/"),
            pros: new r.Z$(r.a_.BSC,"0xEd8c8Aa8299C10f067496BB66f8cC7Fb338A3405",18,"PROS","Prosper","https://prosper.so/"),
            qbt: new r.Z$(r.a_.BSC,"0x17B7163cf1Dbd286E262ddc68b553D899B93f526",18,"QBT","Qubit Token","https://qbt.fi/"),
            cvp: new r.Z$(r.a_.BSC,"0x5Ec3AdBDae549Dce842e24480Eb2434769e22B2E",18,"CVP","Concentrated Voting Power Token","https://powerpool.finance/"),
            bscdefi: new r.Z$(r.a_.BSC,"0x40E46dE174dfB776BB89E04dF1C47d8a66855EB3",18,"BSCDEFI","ChainId.BSC Defi blue chips token","https://powerpool.finance/"),
            busd: p,
            dai: new r.Z$(r.a_.BSC,"0x1AF3F329e8BE154074D8769D1FFa4eE058B1DBc3",18,"DAI","Dai Stablecoin","https://www.makerdao.com/"),
            usdt: c,
            btcb: new r.Z$(r.a_.BSC,"0x7130d2A12B9BCbFAe4f2634d864A1Ee1Ce3Ead9c",18,"BTCB","Binance BTC","https://bitcoin.org/"),
            ust: new r.Z$(r.a_.BSC,"0x23396cF899Ca06c4472205fC903bDB4de249D6fC",18,"UST","Wrapped UST Token","https://mirror.finance/"),
            eth: new r.Z$(r.a_.BSC,"0x2170Ed0880ac9A755fd29B2688956BD959F933F8",18,"ETH","Binance-Peg Ethereum Token","https://ethereum.org/en/"),
            usdc: new r.Z$(r.a_.BSC,"0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d",18,"USDC","Binance-Peg USD Coin","https://www.centre.io/usdc"),
            kalm: new r.Z$(r.a_.BSC,"0x4BA0057f784858a48fe351445C672FF2a3d43515",18,"KALM","Kalmar Token","https://kalmar.io/"),
            dkt: new r.Z$(r.a_.BSC,"0x7Ceb519718A80Dd78a8545AD8e7f401dE4f2faA7",18,"DKT","Duelist King","https://duelistking.com/"),
            hotcross: new r.Z$(r.a_.BSC,"0x4FA7163E153419E0E1064e418dd7A99314Ed27b6",18,"HOTCROSS","Hotcross Token","https://www.hotcross.com/"),
            belt: new r.Z$(r.a_.BSC,"0xE0e514c71282b6f4e823703a39374Cf58dc3eA4f",18,"BELT","Belt Token","https://beta.belt.fi/"),
            watch: new r.Z$(r.a_.BSC,"0x7A9f28EB62C791422Aa23CeAE1dA9C847cBeC9b0",18,"WATCH","Yieldwatch Token","https://yieldwatch.net/"),
            bry: new r.Z$(r.a_.BSC,"0xf859Bf77cBe8699013d6Dbc7C2b926Aaf307F830",18,"BRY","Berry Token","https://berrydata.co/"),
            wsote: new r.Z$(r.a_.BSC,"0x541E619858737031A1244A5d0Cd47E5ef480342c",18,"wSOTE","Soteria Token","https://soteria.finance/"),
            helmet: new r.Z$(r.a_.BSC,"0x948d2a81086A075b3130BAc19e4c6DEe1D2E3fE8",18,"Helmet","Helmet Token","https://www.helmet.insure/"),
            ten: new r.Z$(r.a_.BSC,"0xdFF8cb622790b7F92686c722b02CaB55592f152C",18,"TEN","Tenet Token","https://www.tenet.farm/"),
            ditto: new r.Z$(r.a_.BSC,"0x233d91A0713155003fc4DcE0AFa871b508B3B715",9,"DITTO","Ditto Token","https://ditto.money/"),
            blink: new r.Z$(r.a_.BSC,"0x63870A18B6e42b01Ef1Ad8A2302ef50B7132054F",6,"BLINK","Blink Token","https://blink.wink.org"),
            syrup: new r.Z$(r.a_.BSC,"0x009cF7bC57584b7998236eff51b98A168DceA9B0",18,"SYRUP","SyrupBar Token","https://pancakeswap.finance/"),
            pha: new r.Z$(r.a_.BSC,"0x0112e557d400474717056C4e6D40eDD846F38351",18,"PHA","Phala Token","https://phala.network"),
            babycake: new r.Z$(r.a_.BSC,"0xdB8D30b74bf098aF214e862C90E647bbB1fcC58c",18,"BABYCAKE","Baby Cake Token","https://babycake.app/"),
            bmon: new r.Z$(r.a_.BSC,"0x08ba0619b1e7A582E0BCe5BBE9843322C954C340",18,"BMON","Binamon Token","https://binamon.org/"),
            hero: new r.Z$(r.a_.BSC,"0xD40bEDb44C081D2935eebA6eF5a3c8A31A1bBE13",18,"HERO","Metahero Token","https://metahero.io/"),
            wsg: new r.Z$(r.a_.BSC,"0xA58950F05FeA2277d2608748412bf9F802eA4901",18,"WSG","Wall Street Games Token","https://wsg.gg/"),
            mcrn: new r.Z$(r.a_.BSC,"0xacb2d47827C9813AE26De80965845D80935afd0B",18,"MCRN","Macaronswap Token","https://www.macaronswap.finance/"),
            revv: new r.Z$(r.a_.BSC,"0x833F307aC507D47309fD8CDD1F835BeF8D702a93",18,"REVV","REVV Token","https://revvmotorsport.com/"),
            skill: new r.Z$(r.a_.BSC,"0x154A9F9cbd3449AD22FDaE23044319D6eF2a1Fab",18,"SKILL","Cryptoblades Token","https://www.cryptoblades.io/"),
            if: new r.Z$(r.a_.BSC,"0xB0e1fc65C1a741b4662B813eB787d369b8614Af1",18,"IF","Impossible Finance Token","https://impossible.finance/"),
            sps: new r.Z$(r.a_.BSC,"0x1633b7157e7638C4d6593436111Bf125Ee74703F",18,"SPS","Splinterlands Token","https://splinterlands.com"),
            chess: new r.Z$(r.a_.BSC,"0x20de22029ab63cf9A7Cf5fEB2b737Ca1eE4c82A6",18,"CHESS","Chess Token","https://tranchess.com/"),
            titan: new r.Z$(r.a_.BSC,"0xe898EDc43920F357A93083F1d4460437dE6dAeC2",18,"TITAN","Titanswap Token","https://titanswap.org"),
            harmony: new r.Z$(r.a_.BSC,"0x03fF0ff224f904be3118461335064bB48Df47938",18,"ONE","Harmony ONE Token","https://www.harmony.one/"),
            mask: new r.Z$(r.a_.BSC,"0x2eD9a5C8C13b93955103B9a7C167B67Ef4d568a3",18,"MASK","Mask Token","https://mask.io/"),
            dvi: new r.Z$(r.a_.BSC,"0x758FB037A375F17c7e195CC634D77dA4F554255B",18,"DVI","Dvision Network Token","https://dvision.network/"),
            adx: new r.Z$(r.a_.BSC,"0x6bfF4Fb161347ad7de4A625AE5aa3A1CA7077819",18,"ADX","Adex Network Token","https://www.adex.network"),
            bscpad: new r.Z$(r.a_.BSC,"0x5A3010d4d8D3B5fB49f8B6E57FB9E48063f16700",18,"BSCPAD","Bscpad Token","https://bscpad.com/"),
            rabbit: new r.Z$(r.a_.BSC,"0x95a1199EBA84ac5f19546519e287d43D2F0E1b41",18,"RABBIT","Rabbit Finance Token","https://rabbitfinance.io/earn"),
            form: new r.Z$(r.a_.BSC,"0x25A528af62e56512A19ce8c3cAB427807c28CC19",18,"FORM","Formation Token","https://formation.fi/"),
            txl: new r.Z$(r.a_.BSC,"0x1FFD0b47127fdd4097E54521C9E2c7f0D66AafC5",18,"TXL","Tixl Token","https://tixl.org/"),
            orbs: new r.Z$(r.a_.BSC,"0xeBd49b26169e1b52c04cFd19FCf289405dF55F80",18,"ORBS","Orbs Token","https://www.orbs.com/"),
            cos: new r.Z$(r.a_.BSC,"0x96Dd399F9c3AFda1F194182F71600F1B65946501",18,"COS","Contentos Token","https://www.contentos.io/"),
            bunny: new r.Z$(r.a_.BSC,"0xC9849E6fdB743d08fAeE3E34dd2D1bc69EA11a51",18,"BUNNY","Pancakebunny Token","https://pancakebunny.finance/"),
            alice: new r.Z$(r.a_.BSC,"0xAC51066d7bEC65Dc4589368da368b212745d63E8",6,"ALICE","My Neighbor Alice Token","https://www.myneighboralice.com/"),
            for: new r.Z$(r.a_.BSC,"0x658A109C5900BC6d2357c87549B651670E5b0539",18,"FOR","Fortube Token","https://www.for.tube/home"),
            bux: new r.Z$(r.a_.BSC,"0x211FfbE424b90e25a15531ca322adF1559779E45",18,"BUX","Bux Crypto Token","https://getbux.com/bux-crypto/"),
            nuls: new r.Z$(r.a_.BSC,"0x8CD6e29d3686d24d3C2018CEe54621eA0f89313B",8,"NULS","Nuls Token","https://www.nuls.io/"),
            ramp: new r.Z$(r.a_.BSC,"0x8519EA49c997f50cefFa444d240fB655e89248Aa",18,"RAMP","RAMP DEFI Token","https://rampdefi.com/"),
            bfi: new r.Z$(r.a_.BSC,"0x81859801b01764D4f0Fa5E64729f5a6C3b91435b",18,"BFI","bearn.fi Token","https://bearn.fi/"),
            dexe: new r.Z$(r.a_.BSC,"0x039cB485212f996A9DBb85A9a75d898F94d38dA6",18,"DEXE","DeXe Token","https://dexe.network/"),
            bel: new r.Z$(r.a_.BSC,"0x8443f091997f06a61670B735ED92734F5628692F",18,"BEL","Bella Protocol Token","https://bella.fi/"),
            tpt: new r.Z$(r.a_.BSC,"0xECa41281c24451168a37211F0bc2b8645AF45092",4,"TPT","Tokenpocket Token","https://www.tokenpocket.pro/"),
            xmark: new r.Z$(r.a_.BSC,"0x26A5dFab467d4f58fB266648CAe769503CEC9580",9,"xMARK","Benchmark Protocol Token","https://benchmarkprotocol.finance/"),
            bmxx: new r.Z$(r.a_.BSC,"0x4131b87F74415190425ccD873048C708F8005823",18,"bMXX","Multiplier Token","https://multiplier.finance/"),
            iotx: new r.Z$(r.a_.BSC,"0x9678E42ceBEb63F23197D726B29b1CB20d0064E5",18,"IOTX","Binance-Peg IoTeX Network Token","https://iotex.io/"),
            bor: new r.Z$(r.a_.BSC,"0x92D7756c60dcfD4c689290E8A9F4d263b3b32241",18,"BOR","BoringDAO Token","https://www.boringdao.com/"),
            bopen: new r.Z$(r.a_.BSC,"0xF35262a9d427F96d2437379eF090db986eaE5d42",18,"bOPEN","OPEN Governance Token","https://opendao.io/"),
            dodo: new r.Z$(r.a_.BSC,"0x67ee3Cb086F8a16f34beE3ca72FAD36F7Db929e2",18,"DODO","Dodo Token","https://dodoex.io/"),
            swingby: new r.Z$(r.a_.BSC,"0x71DE20e0C4616E7fcBfDD3f875d568492cBE4739",18,"SWINGBY","Swingby Network Token","https://swingby.network/"),
            zee: new r.Z$(r.a_.BSC,"0x44754455564474A89358B2C2265883DF993b12F0",18,"ZEE","Zeroswap Token","https://zeroswap.io/"),
            swgb: new r.Z$(r.a_.BSC,"0xE40255C5d7fa7ceEc5120408C78C787CECB4cfdb",18,"SWGb","SWGb Token","https://swirgepay.com/"),
            swg: new r.Z$(r.a_.BSC,"0xe792f64C582698b8572AAF765bDC426AC3aEfb6B",18,"SWG","SWG Token","https://swirgepay.com/"),
            sfp: new r.Z$(r.a_.BSC,"0xD41FDb03Ba84762dD66a0af1a6C8540FF1ba5dfb",18,"SFP","Safepal Token","https://www.safepal.io/"),
            lina: new r.Z$(r.a_.BSC,"0x762539b45A1dCcE3D36d080F74d1AED37844b878",18,"LINA","Linear Finance Token","https://linear.finance/"),
            lit: new r.Z$(r.a_.BSC,"0xb59490aB09A0f526Cc7305822aC65f2Ab12f9723",18,"LIT","Litentry Token","https://www.litentry.com/"),
            hget: new r.Z$(r.a_.BSC,"0xC7d8D35EBA58a0935ff2D5a33Df105DD9f071731",6,"HGET","Hedget Token","https://www.hedget.com/"),
            bdo: new r.Z$(r.a_.BSC,"0x190b589cf9Fb8DDEabBFeae36a813FFb2A702454",18,"BDO","Bdollar Token","https://bdollar.fi/"),
            egld: new r.Z$(r.a_.BSC,"0xbF7c81FFF98BbE61B40Ed186e4AfD6DDd01337fe",18,"EGLD","Elrond Token","https://elrond.com/"),
            front: new r.Z$(r.a_.BSC,"0x928e55daB735aa8260AF3cEDadA18B5f70C72f1b",18,"FRONT","Frontier Token","https://frontier.xyz/"),
            btcst: new r.Z$(r.a_.BSC,"0x78650B139471520656b9E7aA7A5e9276814a38e9",17,"BTCST","StandardBTCHashrate Token","https://www.1-b.tc/"),
            bscx: new r.Z$(r.a_.BSC,"0x5Ac52EE5b2a633895292Ff6d8A89bB9190451587",18,"BSCX","BSCX Token","https://bscex.org/"),
            balbt: new r.Z$(r.a_.BSC,"0x72fAa679E1008Ad8382959FF48E392042A8b06f7",18,"bALBT","AllianceBlock Token","https://allianceblock.io/"),
            asr: new r.Z$(r.a_.BSC,"0x80D5f92C2c8C682070C95495313dDB680B267320",2,"ASR","AS Roma Token","https://www.chiliz.com"),
            atm: new r.Z$(r.a_.BSC,"0x25E9d05365c867E59C1904E7463Af9F312296f9E",2,"ATM","Athletico Madrid Token","https://www.chiliz.com"),
            og: new r.Z$(r.a_.BSC,"0xf05E45aD22150677a017Fbd94b84fBB63dc9b44c",2,"OG","OG Nice Token","https://www.chiliz.com"),
            reef: new r.Z$(r.a_.BSC,"0xF21768cCBC73Ea5B6fd3C687208a7c2def2d966e",18,"REEF","Reef.finance Token","https://reef.finance/"),
            juv: new r.Z$(r.a_.BSC,"0xC40C9A843E1c6D01b7578284a9028854f6683b1B",2,"JUV","Juventus Token","https://www.chiliz.com"),
            psg: new r.Z$(r.a_.BSC,"0xBc5609612b7C44BEf426De600B5fd1379DB2EcF1",2,"PSG","Paris Saint-Germain Token","https://www.chiliz.com"),
            vai: new r.Z$(r.a_.BSC,"0x4BD17003473389A42DAF6a0a729f6Fdb328BbBd7",18,"VAI","VAI Stablecoin","0x4BD17003473389A42DAF6a0a729f6Fdb328BbBd7"),
            unfi: new r.Z$(r.a_.BSC,"0x728C5baC3C3e370E372Fc4671f9ef6916b814d8B",18,"UNFI","UNFI Token","https://unifiprotocol.com"),
            twt: new r.Z$(r.a_.BSC,"0x4B0F1812e5Df2A09796481Ff14017e6005508003",18,"TWT","Trust Wallet Token","https://trustwallet.com/"),
            hard: new r.Z$(r.a_.BSC,"0xf79037F6f6bE66832DE4E7516be52826BC3cBcc4",6,"HARD","HARD Token","https://hard.kava.io"),
            broobee: new r.Z$(r.a_.BSC,"0xE64F5Cb844946C1F102Bd25bBD87a5aB4aE89Fbe",18,"bROOBEE","ROOBEE Token","https://roobee.io/"),
            stax: new r.Z$(r.a_.BSC,"0x0Da6Ed8B13214Ff28e9Ca979Dd37439e8a88F6c4",18,"STAX","StableX Token","https://stablexswap.com/"),
            nar: new r.Z$(r.a_.BSC,"0xA1303E6199b319a891b79685F0537D289af1FC83",18,"NAR","Narwhalswap Token","https://narwhalswap.org/"),
            nya: new r.Z$(r.a_.BSC,"0xbFa0841F7a90c4CE6643f651756EE340991F99D5",18,"NYA","Nyanswop Token","https://nyanswop.org/"),
            ctk: new r.Z$(r.a_.BSC,"0xA8c2B8eec3d368C0253ad3dae65a5F2BBB89c929",6,"CTK","Certik Token","https://www.certik.foundation/"),
            inj: new r.Z$(r.a_.BSC,"0xa2B726B1145A4773F68593CF171187d8EBe4d495",18,"INJ","Injective Protocol Token","https://injectiveprotocol.com/"),
            sxp: new r.Z$(r.a_.BSC,"0x47BEAd2563dCBf3bF2c9407fEa4dC236fAbA485A",18,"SXP","Swipe Token","https://swipe.io/"),
            alpha: new r.Z$(r.a_.BSC,"0xa1faa113cbE53436Df28FF0aEe54275c13B40975",18,"ALPHA","Alpha Finance Token","https://alphafinance.io/"),
            xvs: new r.Z$(r.a_.BSC,"0xcF6BB5389c92Bdda8a3747Ddb454cB7a64626C63",18,"XVS","Venus Token","https://venus.io/"),
            sushi: new r.Z$(r.a_.BSC,"0x947950BcC74888a40Ffa2593C5798F11Fc9124C4",18,"SUSHI","Binance-Peg SushiToken","https://sushi.com/"),
            comp: new r.Z$(r.a_.BSC,"0x52CE071Bd9b1C4B00A0b92D298c512478CaD67e8",18,"COMP","Compound Finance Token","https://compound.finance/"),
            bifi: new r.Z$(r.a_.BSC,"0xCa3F508B8e4Dd382eE878A314789373D80A5190A",18,"BIFI","Beefy Finance Token","https://beefy.finance/"),
            dusk: new r.Z$(r.a_.BSC,"0xB2BD0749DBE21f623d9BABa856D3B0f0e1BFEc9C",18,"DUSK","Dusk Network Token","https://dusk.network/"),
            beth: new r.Z$(r.a_.BSC,"0x250632378E573c6Be1AC2f97Fcdf00515d0Aa91B",18,"BETH","Binance Beacon ETH","https://ethereum.org/en/eth2/beacon-chain/"),
            mamzn: new r.Z$(r.a_.BSC,"0x3947B992DC0147D2D89dF0392213781b04B25075",18,"mAMZN","Wrapped Mirror AMZN Token","https://mirror.finance/"),
            mgoogl: new r.Z$(r.a_.BSC,"0x62D71B23bF15218C7d2D7E48DBbD9e9c650B173f",18,"mGOOGL","Wrapped Mirror GOOGL Token","https://mirror.finance/"),
            mnflx: new r.Z$(r.a_.BSC,"0xa04F060077D90Fe2647B61e4dA4aD1F97d6649dc",18,"mNFLX","Wrapped Mirror NFLX Token","https://mirror.finance/"),
            mtsla: new r.Z$(r.a_.BSC,"0xF215A127A196e3988C09d052e16BcFD365Cd7AA3",18,"mTSLA","Wrapped Mirror TSLA Token","https://mirror.finance/"),
            ltc: new r.Z$(r.a_.BSC,"0x4338665CBB7B2485A8855A139b75D5e34AB0DB94",18,"LTC","Binance-Peg Litecoin Token","https://litecoin.org/"),
            ada: new r.Z$(r.a_.BSC,"0x3EE2200Efb3400fAbB9AacF31297cBdD1d435D47",18,"ADA","Binance-Peg Cardano Token","https://www.cardano.org/"),
            band: new r.Z$(r.a_.BSC,"0xAD6cAEb32CD2c308980a548bD0Bc5AA4306c6c18",18,"BAND","Binance-Peg Band Protocol Token","https://bandprotocol.com/"),
            dot: new r.Z$(r.a_.BSC,"0x7083609fCE4d1d8Dc0C979AAb8c869Ea2C873402",18,"DOT","Binance-Peg Polkadot Token","https://polkadot.network/"),
            eos: new r.Z$(r.a_.BSC,"0x56b6fB708fC5732DEC1Afc8D8556423A2EDcCbD6",18,"EOS","Binance-Peg EOS Token","https://eos.io/"),
            link: new r.Z$(r.a_.BSC,"0xF8A0BF9cF54Bb92F17374d9e9A321E6a111a51bD",18,"LINK","Binance-Peg Chainlink Token","https://chain.link/"),
            xrp: new r.Z$(r.a_.BSC,"0x1D2F0da169ceB9fC7B3144628dB156f3F6c60dBE",18,"XRP","Binance-Peg XRP Token","https://ripple.com/xrp/"),
            atom: new r.Z$(r.a_.BSC,"0x0Eb3a705fc54725037CC9e008bDede697f62F335",18,"ATOM","Binance-Peg Cosmos Token","https://cosmos.network/"),
            yfii: new r.Z$(r.a_.BSC,"0x7F70642d88cf1C4a3a7abb072B53B929b653edA5",18,"YFII","Binance-Peg YFII.finance Token","https://dfi.money/#/"),
            xtz: new r.Z$(r.a_.BSC,"0x16939ef78684453bfDFb47825F8a5F714f12623a",18,"XTZ","Binance-Peg Tezos Token","https://www.tezos.com/"),
            bch: new r.Z$(r.a_.BSC,"0x8fF795a6F4D97E7887C79beA79aba5cc76444aDf",18,"BCH","Binance-Peg Bitcoin Cash Token","https://bch.info/"),
            yfi: new r.Z$(r.a_.BSC,"0x88f1A5ae2A3BF98AEAF342D26B30a79438c9142e",18,"YFI","Binance-Peg yearn.finance Token","https://yearn.finance/"),
            uni: new r.Z$(r.a_.BSC,"0xBf5140A22578168FD562DCcF235E5D43A02ce9B1",18,"UNI","Binance-Peg Uniswap Token","https://uniswap.org/"),
            fil: new r.Z$(r.a_.BSC,"0x0D8Ce2A99Bb6e3B7Db580eD848240e4a0F9aE153",18,"FIL","Binance-Peg Filecoin Token","https://filecoin.io/"),
            bake: new r.Z$(r.a_.BSC,"0xE02dF9e3e622DeBdD69fb838bB799E3F168902c5",18,"BAKE","Bakeryswap Token","https://www.bakeryswap.org/"),
            burger: new r.Z$(r.a_.BSC,"0xAe9269f27437f0fcBC232d39Ec814844a51d6b8f",18,"BURGER","Burgerswap Token","https://burgerswap.org/"),
            bdigg: new r.Z$(r.a_.BSC,"0x5986D5c77c65e5801a5cAa4fAE80089f870A71dA",18,"bDIGG","Badger Sett Digg Token","https://badger.finance/"),
            bbadger: new r.Z$(r.a_.BSC,"0x1F7216fdB338247512Ec99715587bb97BBf96eae",18,"bBadger","Badger Sett Badger Token","https://badger.finance/"),
            trade: new r.Z$(r.a_.BSC,"0x7af173F350D916358AF3e218Bdf2178494Beb748",18,"TRADE","Unitrade Token","https://unitrade.app/"),
            pnt: new r.Z$(r.a_.BSC,"0xdaacB0Ab6Fb34d24E8a67BfA14BF4D95D4C7aF92",18,"PNT","pNetwork Token","https://ptokens.io/"),
            mir: new r.Z$(r.a_.BSC,"0x5B6DcF557E2aBE2323c48445E8CC948910d8c2c9",18,"MIR","Mirror Protocol Token","https://mirror.finance/"),
            pbtc: new r.Z$(r.a_.BSC,"0xeD28A457A5A76596ac48d87C0f577020F6Ea1c4C",18,"pBTC","pTokens BTC Token","https://ptokens.io/"),
            lto: new r.Z$(r.a_.BSC,"0x857B222Fc79e1cBBf8Ca5f78CB133d1b7CF34BBd",18,"LTO","LTO Network Token","https://ltonetwork.com/"),
            pcws: new r.Z$(r.a_.BSC,"0xbcf39F0EDDa668C58371E519AF37CA705f2bFcbd",18,"pCWS","PolyCrowns Token","https://game.seascape.network/"),
            zil: new r.Z$(r.a_.BSC,"0xb86AbCb37C3A4B64f74f59301AFF131a1BEcC787",12,"ZIL","Zilliqa Token","https://www.zilliqa.com/"),
            lien: new r.Z$(r.a_.BSC,"0x5d684ADaf3FcFe9CFb5ceDe3abf02F0Cdd1012E3",8,"LIEN","Lien Finance Token","https://lien.finance/"),
            swth: new r.Z$(r.a_.BSC,"0x250b211EE44459dAd5Cd3bCa803dD6a7EcB5d46C",8,"SWTH","Switcheo Network Token","https://switcheo.network/"),
            dft: new r.Z$(r.a_.BSC,"0x42712dF5009c20fee340B245b510c0395896cF6e",18,"DFT","Dfuture Token","https://www.dfuture.com/home"),
            gum: new r.Z$(r.a_.BSC,"0xc53708664b99DF348dd27C3Ac0759d2DA9c40462",18,"GUM","GourmetGalaxy Token","https://gourmetgalaxy.io/"),
            dego: new r.Z$(r.a_.BSC,"0x3FdA9383A84C05eC8f7630Fe10AdF1fAC13241CC",18,"DEGO","Dego Finance Token","https://bsc.dego.finance/home"),
            nrv: new r.Z$(r.a_.BSC,"0x42F6f551ae042cBe50C739158b4f0CAC0Edb9096",18,"NRV","Nerve Finance Token","https://nerve.fi/"),
            easy: new r.Z$(r.a_.BSC,"0x7C17c8bED8d14bAccE824D020f994F4880D6Ab3B",18,"EASY","EASY Token","https://easyfi.network/"),
            oddz: new r.Z$(r.a_.BSC,"0xCD40F2670CF58720b694968698A5514e924F742d",18,"ODDZ","Oddz Token","https://oddz.fi/"),
            hoo: new r.Z$(r.a_.BSC,"0xE1d1F66215998786110Ba0102ef558b22224C016",8,"HOO","Hoo Token","https://hoo.com/"),
            apys: new r.Z$(r.a_.BSC,"0x37dfACfaeDA801437Ff648A1559d73f4C40aAcb7",18,"APYS","APY Swap Token","https://apyswap.com/"),
            bondly: new r.Z$(r.a_.BSC,"0x96058f8C3e16576D9BD68766f3836d9A33158f89",18,"BONDLY","Bondly Token","https://www.bondly.finance/"),
            tko: new r.Z$(r.a_.BSC,"0x9f589e3eabe42ebC94A44727b3f3531C0c877809",18,"TKO","Tokocrypto Token","https://www.tokocrypto.com/"),
            itam: new r.Z$(r.a_.BSC,"0x04C747b40Be4D535fC83D09939fb0f626F32800B",18,"ITAM","Itam Network Token","https://itam.network/"),
            arpa: new r.Z$(r.a_.BSC,"0x6F769E65c14Ebd1f68817F5f1DcDb61Cfa2D6f7e",18,"ARPA","Arpachain Token","https://arpachain.io/"),
            eps: new r.Z$(r.a_.BSC,"0xA7f552078dcC247C2684336020c03648500C6d9F",18,"EPS","Ellipsis Finance Token","https://ellipsis.finance/"),
            jgn: new r.Z$(r.a_.BSC,"0xC13B7a43223BB9Bf4B69BD68Ab20ca1B79d81C75",18,"JGN","Juggernaut DeFi Token","https://jgndefi.com/"),
            tlm: new r.Z$(r.a_.BSC,"0x2222227E22102Fe3322098e4CBfE18cFebD57c95",4,"TLM","Alien Worlds Trilium Token","https://alienworlds.io/"),
            perl: new r.Z$(r.a_.BSC,"0x0F9E4D49f25de22c2202aF916B681FBB3790497B",18,"PERL","Perlin","https://perlinx.finance/"),
            alpa: new r.Z$(r.a_.BSC,"0xc5E6689C9c8B02be7C49912Ef19e79cF24977f03",18,"ALPA","AlpaToken","https://bsc.alpaca.city/"),
            hzn: new r.Z$(r.a_.BSC,"0xC0eFf7749b125444953ef89682201Fb8c6A917CD",18,"HZN","Horizon Protocol Token","https://horizonprotocol.com/"),
            suter: new r.Z$(r.a_.BSC,"0x4CfbBdfBd5BF0814472fF35C72717Bd095ADa055",18,"SUTER","Suterusu Token","https://shield.suterusu.io/"),
            cgg: new r.Z$(r.a_.BSC,"0x1613957159E9B0ac6c80e824F7Eea748a32a0AE2",18,"CGG","pTokens CGG Token","https://chainguardians.io/"),
            mix: new r.Z$(r.a_.BSC,"0xB67754f5b4C704A24d2db68e661b2875a4dDD197",18,"MIX","Mix Token","https://mixie.chainguardians.io/"),
            hakka: new r.Z$(r.a_.BSC,"0x1D1eb8E8293222e1a29d2C0E4cE6C0Acfd89AaaC",18,"HAKKA","Hakka Token","https://hakka.finance/"),
            xed: new r.Z$(r.a_.BSC,"0x5621b5A3f4a8008c4CCDd1b942B121c8B1944F1f",18,"XED","Exeedme Token","https://www.exeedme.com/"),
            τbtc: new r.Z$(r.a_.BSC,"0x2cD1075682b0FCCaADd0Ca629e138E64015Ba11c",9,"τBTC","τBitcoin Token","https://www.btcst.finance/"),
            alpaca: new r.Z$(r.a_.BSC,"0x8F0528cE5eF7B51152A59745bEfDD91D97091d2F",18,"ALPACA","AlpacaToken","https://www.alpacafinance.org/"),
            dfd: new r.Z$(r.a_.BSC,"0x9899a98b222fCb2f3dbee7dF45d943093a4ff9ff",18,"DFD","DefiDollar DAO","https://dusd.finance/"),
            lmt: new r.Z$(r.a_.BSC,"0x9617857E191354dbEA0b714d78Bc59e57C411087",18,"LMT","Lympo Market Token","https://lympo.io/lmt/"),
            bttold: new r.Z$(r.a_.BSC,"0x8595F9dA7b868b1822194fAEd312235E43007b49",18,"BTTOLD","Binance-Peg BitTorrent Token (Old)","https://www.bittorrent.com/"),
            trx: new r.Z$(r.a_.BSC,"0x85EAC5Ac2F758618dFa09bDbe0cf174e7d574D5B",18,"TRX","TRON Token","https://tron.network/"),
            win: new r.Z$(r.a_.BSC,"0xaeF0d72a118ce24feE3cD1d43d383897D05B4e99",18,"WIN","WIN Token","https://winklink.org/"),
            mcoin: new r.Z$(r.a_.BSC,"0x49022089e78a8D46Ec87A3AF86a1Db6c189aFA6f",18,"MCOIN","Wrapped Mirror COIN Token","https://mirror.finance/"),
            math: new r.Z$(r.a_.BSC,"0xF218184Af829Cf2b0019F8E6F0b2423498a36983",18,"MATH","MATH Token","https://mathwallet.org/"),
            kun: new r.Z$(r.a_.BSC,"0x1A2fb0Af670D0234c2857FaD35b789F8Cb725584",18,"KUN","QIAN governance token","https://chemix.io/home"),
            qsd: new r.Z$(r.a_.BSC,"0x07AaA29E63FFEB2EBf59B33eE61437E1a91A3bb2",18,"QSD","QIAN second generation dollar","https://chemix.io/home"),
            hyfi: new r.Z$(r.a_.BSC,"0x9a319b959e33369C5eaA494a770117eE3e585318",18,"HYFI","HYFI Token","https://hyfi.pro/#/"),
            oin: new r.Z$(r.a_.BSC,"0x658E64FFcF40D240A43D52CA9342140316Ae44fA",8,"OIN","oinfinance Token","https://oin.finance/"),
            doge: new r.Z$(r.a_.BSC,"0xbA2aE424d960c26247Dd6c32edC70B295c744C43",8,"DOGE","Binance-Peg Dogecoin","https://dogecoin.com/"),
            fine: new r.Z$(r.a_.BSC,"0x4e6415a5727ea08aAE4580057187923aeC331227",18,"FINE","Refinable Token","https://refinable.com/"),
            one: new r.Z$(r.a_.BSC,"0x04BAf95Fd4C52fd09a56D840bAEe0AB8D7357bf0",18,"ONE","BigONE Token","https://www.bigone.com/"),
            pmon: new r.Z$(r.a_.BSC,"0x1796ae0b0fa4862485106a0de9b654eFE301D0b2",18,"PMON","Polkamon Token","https://polkamon.com/"),
            τdoge: new r.Z$(r.a_.BSC,"0xe550a593d09FBC8DCD557b5C88Cea6946A8b404A",8,"τDOGE","τDogecoin","https://www.btcst.finance/"),
            btr: new r.Z$(r.a_.BSC,"0x5a16E8cE8cA316407c6E6307095dc9540a8D62B3",18,"BTR","Bitrue Token","https://www.bitrue.com/"),
            ubxt: new r.Z$(r.a_.BSC,"0xBbEB90cFb6FAFa1F69AA130B7341089AbeEF5811",18,"UBXT","UpBots Token","https://upbots.com/"),
            wmass: new r.Z$(r.a_.BSC,"0x7e396BfC8a2f84748701167c2d622F041A1D7a17",8,"WMASS","Wrapped MASS Token","https://massnet.org/en/"),
            rfox: new r.Z$(r.a_.BSC,"0x0a3A21356793B49154Fd3BbE91CBc2A16c0457f5",18,"RFOX","RFOX Token","https://www.redfoxlabs.io/"),
            xend: new r.Z$(r.a_.BSC,"0x4a080377f83D669D7bB83B3184a8A5E61B500608",18,"XEND","XEND Token","https://xend.finance/"),
            cyc: new r.Z$(r.a_.BSC,"0x810EE35443639348aDbbC467b33310d2AB43c168",18,"CYC","CYC Token","https://cyclone.xyz/"),
            chr: new r.Z$(r.a_.BSC,"0xf9CeC8d50f6c8ad3Fb6dcCEC577e05aA32B224FE",6,"CHR","Chroma Token","https://chromia.com/"),
            deri: new r.Z$(r.a_.BSC,"0xe60eaf5A997DFAe83739e035b005A33AfdCc6df5",18,"DERI","Deri Token","https://deri.finance/#/index"),
            well: new r.Z$(r.a_.BSC,"0xf07a32Eb035b786898c00bB1C64d8c6F8E7a46D5",18,"WELL","BitWell Token","https://www.bitwellex.com/"),
            wex: new r.Z$(r.a_.BSC,"0xa9c41A46a6B3531d28d5c32F6633dd2fF05dFB90",18,"WEX","WaultSwap Token","https://wault.finance/"),
            waultx: new r.Z$(r.a_.BSC,"0xB64E638E60D154B43f660a6BF8fD8a3b249a6a21",18,"WAULTx","Wault Token","https://wault.finance/"),
            popen: new r.Z$(r.a_.BSC,"0xaBaE871B7E3b67aEeC6B46AE9FE1A91660AadAC5",18,"pOPEN","OPEN Governance Token","https://opendao.io/"),
            ez: new r.Z$(r.a_.BSC,"0x5512014efa6Cd57764Fa743756F7a6Ce3358cC83",18,"EZ","Easy V2 Token","https://easyfi.network/"),
            vrt: new r.Z$(r.a_.BSC,"0x5F84ce30DC3cF7909101C69086c50De191895883",18,"VRT","Venus Reward Token","https://venus.io/"),
            tusd: new r.Z$(r.a_.BSC,"0x14016E85a25aeb13065688cAFB43044C2ef86784",18,"TUSD","Binance-Peg TrueUSD Token","https://www.trueusd.com/"),
            mtrg: new r.Z$(r.a_.BSC,"0xBd2949F67DcdC549c6Ebe98696449Fa79D988A9F",18,"MTRG","Wrapped MTRG Token","https://www.meter.io/"),
            ktn: new r.Z$(r.a_.BSC,"0xDAe6c2A48BFAA66b43815c5548b10800919c993E",18,"KTN","Kattana Token","https://kattana.io/"),
            qkc: new r.Z$(r.a_.BSC,"0xA1434F1FC3F437fa33F7a781E041961C0205B5Da",18,"QKC","QuarkChain Token","https://quarkchain.io/"),
            bcfx: new r.Z$(r.a_.BSC,"0x045c4324039dA91c52C55DF5D785385Aab073DcF",18,"bCFX","ChainId.BSC Conflux Token","https://www.confluxnetwork.org/"),
            mx: new r.Z$(r.a_.BSC,"0x9F882567A62a5560d147d64871776EeA72Df41D3",18,"MX","MX Token","https://www.mxc.com/"),
            ata: new r.Z$(r.a_.BSC,"0xA2120b9e674d3fC3875f415A7DF52e382F141225",18,"ATA","Automata Token","https://www.ata.network/"),
            mbox: new r.Z$(r.a_.BSC,"0x3203c9E46cA618C8C1cE5dC67e7e9D75f5da2377",18,"MBOX","Mobox Token","https://www.mobox.io/#/"),
            boring: new r.Z$(r.a_.BSC,"0xffEecbf8D7267757c2dc3d13D730E97E15BfdF7F",18,"BORING","BoringDAO Token","https://www.boringdao.com/"),
            marsh: new r.Z$(r.a_.BSC,"0x2FA5dAF6Fe0708fBD63b1A7D1592577284f52256",18,"MARSH","Unmarshal Token","https://unmarshal.io/"),
            ampl: new r.Z$(r.a_.BSC,"0xDB021b1B247fe2F1fa57e0A87C748Cc1E321F07F",9,"AMPL","AMPL Token","https://www.ampleforth.org/"),
            o3: new r.Z$(r.a_.BSC,"0xEe9801669C6138E84bD50dEB500827b776777d28",18,"O3","O3 Swap Token","https://o3swap.com/"),
            hai: new r.Z$(r.a_.BSC,"0xaA9E582e5751d703F85912903bacADdFed26484C",8,"HAI","Hacken Token","https://hacken.io/"),
            htb: new r.Z$(r.a_.BSC,"0x4e840AADD28DA189B9906674B4Afcb77C128d9ea",18,"HTB","Hotbit Token","https://www.hotbit.io/"),
            woo: new r.Z$(r.a_.BSC,"0x4691937a7508860F876c9c0a2a617E7d9E945D4B",18,"WOO","Wootrade Network Token","https://woo.network/"),
            $dg: new r.Z$(r.a_.BSC,"0x9Fdc3ae5c814b79dcA2556564047C5e7e5449C19",18,"$DG","Decentral Games Token","https://decentral.games/"),
            axs: new r.Z$(r.a_.BSC,"0x715D400F88C167884bbCc41C5FeA407ed4D2f8A0",18,"AXS","Binance-Pegged Axie Infinity Shard","https://axieinfinity.com/"),
            c98: new r.Z$(r.a_.BSC,"0xaEC945e04baF28b135Fa7c640f624f8D90F1C3a6",18,"c98","Coin98 Token","https://coin98.com/"),
            pots: new r.Z$(r.a_.BSC,"0x3Fcca8648651E5b974DD6d3e50F61567779772A8",18,"POTS","Moonpot Token","https://moonpot.com/"),
            gnt: new r.Z$(r.a_.BSC,"0xF750A26EB0aCf95556e8529E72eD530f3b60f348",18,"GNT","GreenTrust Token","https://www.greentrusttoken.com/"),
            rusd: new r.Z$(r.a_.BSC,"0x07663837218A003e66310a01596af4bf4e44623D",18,"rUSD","rUSD Token","https://appv2.rampdefi.com/#/"),
            bp: new r.Z$(r.a_.BSC,"0xACB8f52DC63BB752a51186D1c55868ADbFfEe9C1",18,"BP","BunnyPark Token","https://www.bunnypark.com/"),
            sfund: new r.Z$(r.a_.BSC,"0x477bC8d23c634C154061869478bce96BE6045D12",18,"SFUND","Seedify Fund Token","https://seedify.fund/"),
            naos: new r.Z$(r.a_.BSC,"0x758d08864fB6cCE3062667225ca10b8F00496cc2",18,"NAOS","NAOSToken","https://naos.finance/"),
            cart: new r.Z$(r.a_.BSC,"0x5C8C8D560048F34E5f7f8ad71f2f81a89DBd273e",18,"CART","CryptoArt.ai","https://cryptoart.ai/"),
            light: new r.Z$(r.a_.BSC,"0x037838b556d9c9d654148a284682C55bB5f56eF4",18,"LIGHT","Lightning","https://lightningprotocol.finance/"),
            rpg: new r.Z$(r.a_.BSC,"0xc2098a8938119A52B1F7661893c0153A6CB116d5",18,"RPG","Rangers Protocol","https://www.rangersprotocol.com/"),
            mcb: new r.Z$(r.a_.BSC,"0x5fE80d2CD054645b9419657d3d10d26391780A7B",18,"MCB","MCDEX","https://mcdex.io/homepage/"),
            lazio: new r.Z$(r.a_.BSC,"0x77d547256A2cD95F32F67aE0313E450Ac200648d",8,"LAZIO","FC Lazio Fan Token","https://launchpad.binance.com/en/subscription/LAZIO_BNB"),
            arv: new r.Z$(r.a_.BSC,"0x6679eB24F59dFe111864AEc72B443d1Da666B360",8,"ARV","ARIVA","https://ariva.digital"),
            moni: new r.Z$(r.a_.BSC,"0x9573c88aE3e37508f87649f87c4dd5373C9F31e0",18,"MONI","Monsta Infinite","https://monstainfinite.com/"),
            xms: new r.Z$(r.a_.BSC,"0x7859B01BbF675d67Da8cD128a50D155cd881B576",18,"XMS","Mars Ecosystem","https://marsecosystem.com/"),
            zoo: new r.Z$(r.a_.BSC,"0x1D229B958D5DDFca92146585a8711aECbE56F095",18,"ZOO","ZOO Crypto World","https://zoogame.finance/"),
            fina: new r.Z$(r.a_.BSC,"0x426c72701833fdDBdFc06c944737C6031645c708",18,"FINA","Defina Finance","https://defina.finance/"),
            dar: new r.Z$(r.a_.BSC,"0x23CE9e926048273eF83be0A3A8Ba9Cb6D45cd978",6,"DAR","Mines of Dalarnia","https://www.minesofdalarnia.com/"),
            xwg: new r.Z$(r.a_.BSC,"0x6b23C89196DeB721e6Fd9726E6C76E4810a464bc",18,"XWG","X World Games","https://xwg.games/"),
            eternal: new r.Z$(r.a_.BSC,"0xD44FD09d74cd13838F137B590497595d6b3FEeA4",18,"ETERNAL","CryptoMines Eternal","https://cryptomines.app/"),
            porto: new r.Z$(r.a_.BSC,"0x49f2145d6366099e13B10FbF80646C0F377eE7f6",8,"PORTO","FC Porto Fan Token","https://launchpad.binance.com/en/subscription/PORTO_BNB"),
            kart: new r.Z$(r.a_.BSC,"0x8BDd8DBcBDf0C066cA5f3286d33673aA7A553C10",18,"KART","Dragon Kart","https://dragonkart.com/"),
            qi: new r.Z$(r.a_.BSC,"0x8729438EB15e2C8B576fCc6AeCdA6A148776C0F5",18,"QI","BENQI","https://benqi.fi/"),
            sheesha: new r.Z$(r.a_.BSC,"0x232FB065D9d24c34708eeDbF03724f2e95ABE768",18,"SHEESHA","Sheesha Finance","https://www.sheeshafinance.io/"),
            bcoin: new r.Z$(r.a_.BSC,"0x00e1656e45f18ec6747F5a8496Fd39B50b38396D",18,"BCOIN","Bomb Crypto","https://bombcrypto.io/"),
            quidd: new r.Z$(r.a_.BSC,"0x7961Ade0a767c0E5B67Dd1a1F78ba44F727642Ed",18,"QUIDD","Quidd Token","https://www.quiddtoken.com/"),
            santos: new r.Z$(r.a_.BSC,"0xA64455a4553C9034236734FadDAddbb64aCE4Cc7",8,"SANTOS","FC Santos Fan Token","https://launchpad.binance.com/en/launchpool/SANTOS_BNB"),
            nabox: new r.Z$(r.a_.BSC,"0x755f34709E369D37C6Fa52808aE84A32007d1155",18,"NABOX","Nabox Token","https://nabox.io/"),
            xcv: new r.Z$(r.a_.BSC,"0x4be63a9b26EE89b9a3a13fd0aA1D0b2427C135f8",18,"XCV","XCarnival","https://xcarnival.fi/"),
            idia: new r.Z$(r.a_.BSC,"0x0b15Ddf19D47E6a86A56148fb4aFFFc6929BcB89",18,"IDIA","Impossible Decentralized Incubator Access Token","https://impossible.finance/"),
            tt: new r.Z$(r.a_.BSC,"0x990E7154bB999FAa9b2fa5Ed29E822703311eA85",18,"TT","ThunderCore","https://www.thundercore.com/"),
            gmee: new r.Z$(r.a_.BSC,"0x84e9a6F9D240FdD33801f7135908BfA16866939A",18,"GMEE","GAMEE","https://www.gamee.com/token"),
            htd: new r.Z$(r.a_.BSC,"0x5E2689412Fae5c29BD575fbe1d5C1CD1e0622A8f",18,"HTD","HeroesTD","https://heroestd.io/"),
            dpt: new r.Z$(r.a_.BSC,"0xE69cAef10A488D7AF31Da46c89154d025546e990",18,"DPT","Diviner Protocol","https://diviner.finance/"),
            thg: new r.Z$(r.a_.BSC,"0x9fD87aEfe02441B123c3c32466cD9dB4c578618f",18,"THG","Thetan Gem","https://thetanarena.com/"),
            ccar: new r.Z$(r.a_.BSC,"0x50332bdca94673F33401776365b66CC4e81aC81d",18,"CCAR","CryptoCars","https://cryptocars.me/"),
            high: new r.Z$(r.a_.BSC,"0x5f4Bde007Dc06b867f86EBFE4802e34A1fFEEd63",18,"HIGH","Highstreet Token","https://highstreet.market/"),
            sdao: new r.Z$(r.a_.BSC,"0x90Ed8F1dc86388f14b64ba8fb4bbd23099f18240",18,"SDAO","Singularity Dao","https://app.singularitydao.ai/"),
            antex: new r.Z$(r.a_.BSC,"0xCA1aCAB14e85F30996aC83c64fF93Ded7586977C",8,"ANTEX","Antex","https://antex.org/"),
            bbt: new r.Z$(r.a_.BSC,"0xD48474E7444727bF500a32D5AbE01943f3A59A64",8,"BBT","BitBook","https://www.bitbook.network/"),
            woop: new r.Z$(r.a_.BSC,"0x8b303d5BbfBbf46F1a4d9741E491e06986894e18",18,"WOOP","Woonkly Power","https://www.woonkly.com/"),
            gm: new r.Z$(r.a_.BSC,"0xe2604C9561D490624AA35e156e65e590eB749519",18,"GM","GoldMiner","https://goldminer.games/"),
            aog: new r.Z$(r.a_.BSC,"0x40C8225329Bd3e28A043B029E0D07a5344d2C27C",18,"AOG","AgeOfGods","https://ageofgods.net/"),
            "8pay": new r.Z$(r.a_.BSC,"0xFeea0bDd3D07eb6FE305938878C0caDBFa169042",18,"8PAY","8PAY Network","https://8pay.network/"),
            bath: new r.Z$(r.a_.BSC,"0x0bc89aa98Ad94E6798Ec822d0814d934cCD0c0cE",18,"BATH","Battle Hero","https://battlehero.io/"),
            insur: new r.Z$(r.a_.BSC,"0x3192CCDdf1CDcE4Ff055EbC80f3F0231b86A7E30",18,"INSUR","Bsc-Peg INSUR Token","https://www.insurace.io/"),
            froyo: new r.Z$(r.a_.BSC,"0xe369fec23380f9F14ffD07a1DC4b7c1a9fdD81c9",18,"FROYO","Froyo Games","https://froyo.games/"),
            apx: new r.Z$(r.a_.BSC,"0x78F5d389F5CDCcFc41594aBaB4B0Ed02F31398b3",18,"APX","ApolloX Token","https://www.apollox.finance/"),
            prl: new r.Z$(r.a_.BSC,"0xd07e82440A395f3F3551b42dA9210CD1Ef4f8B24",18,"PRL","Parallel Token","https://theparallel.io"),
            fuse: new r.Z$(r.a_.BSC,"0x5857c96DaE9cF8511B08Cb07f85753C472D36Ea3",18,"FUSE","Fuse Token","https://fuse.io/"),
            ertha: new r.Z$(r.a_.BSC,"0x62823659d09F9F9D2222058878f89437425eB261",18,"ERTHA","Ertha Token","https://ertha.io/"),
            raca: new r.Z$(r.a_.BSC,"0x12BB890508c125661E03b09EC06E404bc9289040",18,"RACA","Radio Caca V2","https://www.radiocaca.com/#/home"),
            gear: new r.Z$(r.a_.BSC,"0xb4404DaB7C0eC48b428Cf37DeC7fb628bcC41B36",18,"GEAR","MetaGear Token","https://metagear.game/"),
            ach: new r.Z$(r.a_.BSC,"0xBc7d6B50616989655AfD682fb42743507003056D",8,"ACH","Alchemy Token","https://alchemytech.io/"),
            btt: new r.Z$(r.a_.BSC,"0x352Cb5E19b12FC216548a2677bD0fce83BaE434B",18,"BTT","BitTorrent","https://bittorrent.com/"),
            era: new r.Z$(r.a_.BSC,"0x6f9F0c4ad9Af7EbD61Ac5A1D4e0F2227F7B0E5f9",18,"ERA","Era Token","https://www.era7.io/"),
            fight: new r.Z$(r.a_.BSC,"0x4f39c3319188A723003670c3F9B9e7EF991E52F3",18,"FIGHT","Fight Token","https://www.cryptofightclub.io/"),
            loa: new r.Z$(r.a_.BSC,"0x94b69263FCA20119Ae817b6f783Fc0F13B02ad50",18,"LOA","League Of Ancients","https://www.leagueofancients.com/"),
            duet: new r.Z$(r.a_.BSC,"0x95EE03e1e2C5c4877f9A298F1C0D6c98698FAB7B",18,"DUET","Duet Governance Token","https://duet.finance"),
            gmt: new r.Z$(r.a_.BSC,"0x3019BF2a2eF8040C242C9a4c5c4BD4C81678b2A1",8,"GMT","Green Metaverse Token","https://www.stepn.com/"),
            bsw: new r.Z$(r.a_.BSC,"0x965F527D9159dCe6288a2219DB51fc6Eef120dD1",18,"BSW","Biswap","https://biswap.org/"),
            tem: new r.Z$(r.a_.BSC,"0x19e6BfC1A6e4B042Fb20531244D47E252445df01",9,"TEM","TemplarDAO","https://templar.finance/"),
            pex: new r.Z$(r.a_.BSC,"0x6a0b66710567b6beb81A71F7e9466450a91a384b",18,"PEX","PearDAO","https://peardao.io/"),
            yel: new r.Z$(r.a_.BSC,"0xD3b71117E6C1558c1553305b44988cd944e97300",18,"YEL","YEL","https://yel.finance/"),
            tinc: new r.Z$(r.a_.BSC,"0x05aD6E30A855BE07AfA57e08a4f30d00810a402e",18,"TINC","Tiny Coin","https://tinyworlds.io/"),
            happy: new r.Z$(r.a_.BSC,"0xF5d8A096CcCb31b9D7bcE5afE812BE23e3D4690d",18,"Happy","HappyFans","https://happyfans.club/"),
            wzrd: new r.Z$(r.a_.BSC,"0xFa40d8FC324bcdD6Bbae0e086De886c571C225d4",18,"WZRD","Wizardia Token","https://wizardia.io/"),
            ceek: new r.Z$(r.a_.BSC,"0xe0F94Ac5462997D2BC57287Ac3a3aE4C31345D66",18,"CEEK","CEEK","https://www.ceek.com/"),
            abnbc: new r.Z$(r.a_.BSC,"0xE85aFCcDaFBE7F2B096f268e31ccE3da8dA2990A",18,"aBNBc","Ankr BNB Reward Bearing Certificate","https://www.ankr.com/"),
            ankr: new r.Z$(r.a_.BSC,"0xf307910A4c7bbc79691fD374889b36d8531B08e3",18,"ANKR","Ankr","https://www.ankr.com/"),
            gal: new r.Z$(r.a_.BSC,"0xe4Cc45Bb5DBDA06dB6183E8bf016569f40497Aa5",18,"GAL","Galxe","https://galaxy.eco/"),
            xcn: new r.Z$(r.a_.BSC,"0x7324c7C0d95CEBC73eEa7E85CbAac0dBdf88a05b",18,"XCN","Chain","https://chain.com/"),
            metis: new r.Z$(r.a_.BSC,"0xe552Fb52a4F19e44ef5A967632DBc320B0820639",18,"Metis","Metis Token","https://www.metis.io/"),
            MIX: new r.Z$(r.a_.BSC,"0x398f7827DcCbeFe6990478876bBF3612D93baF05",18,"MIX","MixMarvel Token","https://www.mixmarvel.com/"),
            peak: new r.Z$(r.a_.BSC,"0x630d98424eFe0Ea27fB1b3Ab7741907DFFEaAd78",8,"PEAK","PEAKDEFI","https://peakdefi.com/"),
            nbt: new r.Z$(r.a_.BSC,"0x1D3437E570e93581Bd94b2fd8Fbf202d4a65654A",18,"NBT","NanoByte Token","https://www.nanobyte.finance/"),
            trivia: new r.Z$(r.a_.BSC,"0xb465f3cb6Aba6eE375E12918387DE1eaC2301B05",3,"TRIVIA","Trivian Token","https://trivians.io/"),
            mhunt: new r.Z$(r.a_.BSC,"0x2C717059b366714d267039aF8F59125CAdce6D8c",18,"MHUNT","MetaShooter","https://metashooter.gg/"),
            ole: new r.Z$(r.a_.BSC,"0xa865197A84E780957422237B5D152772654341F3",18,"OLE","OpenLeverage","https://openleverage.finance/"),
            xcad: new r.Z$(r.a_.BSC,"0xa026Ad2ceDa16Ca5FC28fd3C72f99e2C332c8a26",18,"XCAD","Chainport.io-Peg XCAD Token","https://xcadnetwork.com/"),
            shell: new r.Z$(r.a_.BSC,"0x208cfEc94d2BA8B8537da7A9BB361c6baAD77272",18,"SHELL","Meta Apes Shell","https://metaapesgame.com/"),
            peel: new r.Z$(r.a_.BSC,"0x734548a9e43d2D564600b1B2ed5bE9C2b911c6aB",18,"PEEL","Meta Apes Peel","https://metaapesgame.com/"),
            stkbnb: new r.Z$(r.a_.BSC,"0xc2E9d07F66A89c44062459A47a0D2Dc038E4fb16",18,"stkBNB","Staked BNB","https://pstake.finance/bnb"),
            pstake: new r.Z$(r.a_.BSC,"0x4C882ec256823eE773B25b414d36F92ef58a7c0C",18,"PSTAKE","pStake Finance","https://pstake.finance/"),
            wom: new r.Z$(r.a_.BSC,"0xAD6742A35fB341A9Cc6ad674738Dd8da98b94Fb1",18,"WOM","Wombat Token","https://www.wombat.exchange/"),
            hay: new r.Z$(r.a_.BSC,"0x0782b6d8c4551B9760e74c0545a9bCD90bdc41E5",18,"HAY","Hay Destablecoin","https://helio.money/"),
            spin: new r.Z$(r.a_.BSC,"0x6AA217312960A21aDbde1478DC8cBCf828110A67",18,"SPIN","Spintop","https://spintop.network/"),
            snfts: new r.Z$(r.a_.BSC,"0x6f51A1674BEFDD77f7ab1246b83AdB9f13613762",18,"SNFTS","Seedify NFT Space","https://snfts.seedify.fund/"),
            gq: new r.Z$(r.a_.BSC,"0xF700D4c708C2be1463E355F337603183D20E0808",18,"GQ","Galactic Quadrant","https://outerringmmo.com/"),
            hoop: new r.Z$(r.a_.BSC,"0xF19cfb40B3774dF6Eed83169Ad5aB0Aaf6865F25",18,"HOOP","Chibi Dinos","https://www.chibidinos.io/"),
            co: new r.Z$(r.a_.BSC,"0x936B6659Ad0C1b244Ba8Efe639092acae30dc8d6",6,"CO","CO","https://corite.com/"),
            krs: new r.Z$(r.a_.BSC,"0x37b53894e7429f794B56F22a32E1695567Ee9913",18,"KRS","Kingdom Raids","https://kingdomraids.io/"),
            wmx: new r.Z$(r.a_.BSC,"0xa75d9ca2a0a1D547409D82e1B06618EC284A2CeD",18,"WMX","Wombex Token","https://wombex.finance/"),
            mgp: new r.Z$(r.a_.BSC,"0xD06716E1Ff2E492Cc5034c2E81805562dd3b45fa",18,"MGP","Magpie Token","https://www.magpiexyz.io/"),
            hook: new r.Z$(r.a_.BSC,"0xa260E12d2B924cb899AE80BB58123ac3fEE1E2F0",18,"HOOK","Hook Token","https://hooked.io/"),
            hft: new r.Z$(r.a_.BSC,"0x44Ec807ce2F4a6F2737A92e985f318d035883e47",18,"HFT","Hashflow","https://www.hashflow.com/"),
            squad: new r.Z$(r.a_.BSC,"0x724A32dFFF9769A0a0e1F0515c0012d1fB14c3bd",18,"SQUAD","Token SQUAD","https://ssquad.games/"),
            zbc: new r.Z$(r.a_.BSC,"0x37a56cdcD83Dce2868f721De58cB3830C44C6303",9,"ZBC","ZEBEC","https://zebec.io/"),
            primal: new r.Z$(r.a_.BSC,"0xCb5327Ed4649548e0d73E70b633cdfd99aF6Da87",18,"PRIMAL","PRIMAL Token","https://www.getprimal.com/"),
            ankrbnb: new r.Z$(r.a_.BSC,"0x52F24a5e03aee338Da5fd9Df68D2b6FAe1178827",18,"ankrBNB","Ankr Staked BNB","https://www.ankr.com/staking-crypto/"),
            arena: new r.Z$(r.a_.BSC,"0xCfFD4D3B517b77BE32C76DA768634dE6C738889B",18,"ARENA","ESPL ARENA","https://espl.co/"),
            champ: new r.Z$(r.a_.BSC,"0x7e9AB560d37E62883E882474b096643caB234B65",18,"CHAMP","Ultimate Champions Token","https://beta.ultimate-champions.com/"),
            axlusdc: new r.Z$(r.a_.BSC,"0x4268B8F0B87b6Eae5d897996E6b845ddbD99Adf3",6,"axlUSDC","Axelar Wrapped USDC","https://axelarscan.io/assets/"),
            csix: new r.Z$(r.a_.BSC,"0x04756126F044634C9a0f0E985e60c88a51ACC206",18,"CSIX","Carbon","https://carbon.website/"),
            bnbx: new r.Z$(r.a_.BSC,"0x1bdd3Cf7F79cfB8EdbB955f20ad99211551BA275",18,"BNBx","Liquid Staking BNB","https://www.staderlabs.com/bnb/liquid-staking/bnbx/"),
            sd: new r.Z$(r.a_.BSC,"0x3BC5AC0dFdC871B365d159f728dd1B9A0B5481E8",18,"SD","Stader (Wormhole)","https://www.staderlabs.com/"),
            ageur: new r.Z$(r.a_.BSC,"0x12f31B73D812C6Bb0d735a218c086d44D5fe5f89",18,"agEUR","agEUR","https://app.angle.money/#/"),
            caps: new r.Z$(r.a_.BSC,"0xFfBa7529AC181c2Ee1844548e6D7061c9A597dF4",18,"CAPS","Capsule Coin","https://www.ternoa.network/en"),
            lvl: new r.Z$(r.a_.BSC,"0xB64E280e9D1B5DbEc4AcceDb2257A87b400DB149",18,"LVL","Level Token","https://level.finance/"),
            unw: new r.Z$(r.a_.BSC,"0x5b65cd9feb54F1Df3D0C60576003344079f8Dc06",18,"UNW","Uniwhale Token","https://www.uniwhale.co/"),
            id: new r.Z$(r.a_.BSC,"0x2dfF88A56767223A5529eA5960Da7A3F5f766406",18,"ID","SPACE ID","https://space.id/"),
            rdnt: new r.Z$(r.a_.BSC,"0xf7DE7E8A6bd59ED41a4b5fe50278b3B7f31384dF",18,"RDNT","Radiant","https://radiant.capital/"),
            sis: new r.Z$(r.a_.BSC,"0xF98b660AdF2ed7d9d9D9dAACC2fb0CAce4F21835",18,"SIS","Symbiosis","https://symbiosis.finance/"),
            ankrETH: new r.Z$(r.a_.BSC,"0xe05A08226c49b636ACf99c40Da8DC6aF83CE5bB3",18,"ankrETH","Ankr Staked ETH","https://www.ankr.com/"),
            axl: new r.Z$(r.a_.BSC,"0x8b1f4432F943c465A973FeDC6d7aa50Fc96f1f65",6,"AXL","Axelar","https://axelar.network/"),
            ush: new r.Z$(r.a_.BSC,"0x91d6d6aF7635B7b23A8CED9508117965180e2362",18,"USH","unshETHing_Token","https://unsheth.xyz/"),
            unshETH: new r.Z$(r.a_.BSC,"0x0Ae38f7E10A43B5b2fB064B42a2f4514cbA909ef",18,"unshETH","unshETH Ether","https://unsheth.xyz/"),
            wbeth: new r.Z$(r.a_.BSC,"0xa2E3356610840701BDf5611a53974510Ae27E2e1",18,"wBETH","Wrapped Binance Beacon ETH","https://ethereum.org/en/roadmap/beacon-chain/"),
            edu: new r.Z$(r.a_.BSC,"0xBdEAe1cA48894A1759A8374D63925f21f2Ee2639",18,"EDU","EDU Coin","https://www.opencampus.xyz/"),
            up: new r.Z$(r.a_.BSC,"0xf84Fd783E7C38A3C99030535919fB89350387502",18,"UP","UP Coin","https://upfrontprotocol.io/")
        }
          , k = {
            wbnb: r.$v[r.a_.BSC_TESTNET],
            cake: a,
            busd: f,
            syrup: new r.Z$(r.a_.BSC_TESTNET,"0xfE1e507CeB712BDe086f3579d2c03248b2dB77f9",18,"SYRUP","SyrupBar Token","https://pancakeswap.finance/"),
            hbtc: new r.Z$(r.a_.BSC_TESTNET,"0x3Fb6a6C06c7486BD194BB99a078B89B9ECaF4c82",18,"HBTC","Huobi BTC"),
            wbtc: new r.Z$(r.a_.BSC_TESTNET,"0xfC8bFbe9644e1BC836b8821660593e7de711e564",8,"WBTC","Wrapped BTC"),
            usdc: new r.Z$(r.a_.BSC_TESTNET,"0xCA8eB2dec4Fe3a5abbFDc017dE48E461A936623D",18,"USDC","Binance-Peg USD Coin"),
            usdt: new r.Z$(r.a_.BSC_TESTNET,"0x0fB5D7c73FA349A90392f873a4FA1eCf6a3d0a96",18,"USDT","Tether USD"),
            mockBusd: new r.Z$(r.a_.BSC_TESTNET,"0x3304dd20f6Fe094Cb0134a6c8ae07EcE26c7b6A7",18,"BUSD","Binance USD"),
            mockB: new r.Z$(r.a_.BSC_TESTNET,"0x828E3FC56dD48E072e3B6F3C4FD4DDB4733c2C5e",18,"MOCK B","MOCK B"),
            mockA: new r.Z$(r.a_.BSC_TESTNET,"0xc1eD9955C11585F47d0d6BfBC29034349A746a81",18,"MOCK A","MOCK A"),
            msix: new r.Z$(r.a_.BSC_TESTNET,"0xE4a9f36B61a84Dc2495dAf46417bd258a56bDfdD",6,"MSIX","MSIX"),
            cake2: new r.Z$(r.a_.BSC_TESTNET,"0x8d008B313C1d6C7fE2982F62d32Da7507cF43551",18,"CAKE2","PancakeSwap Token","https://pancakeswap.finance/"),
            up: new r.Z$(r.a_.BSC_TESTNET,"0xAAE310171978d027bbed16A89A9CDf08E302dF8e",18,"UP","Limitless Token","https://upfrontprotocol.io/")
        }
          , C = {
            weth: r.g9[r.a_.ETHEREUM],
            usdt: v[r.a_.ETHEREUM],
            usdc: b[r.a_.ETHEREUM],
            wbtc: w,
            sdao: new r.Z$(r.a_.ETHEREUM,"0x993864E43Caa7F7F12953AD6fEb1d1Ca635B875F",18,"SDAO","Singularity Dao","https://www.singularitydao.ai/"),
            stg: new r.Z$(r.a_.ETHEREUM,"0xAf5191B0De278C7286d6C7CC6ab6BB8A73bA2Cd6",18,"STG","StargateToken","https://stargate.finance/"),
            fuse: new r.Z$(r.a_.ETHEREUM,"0x970B9bB2C0444F5E81e9d0eFb84C8ccdcdcAf84d",18,"FUSE","Fuse Token","https://fuse.io/"),
            caps: new r.Z$(r.a_.ETHEREUM,"0x03Be5C903c727Ee2C8C4e9bc0AcC860Cca4715e2",18,"CAPS","Capsule Coin","https://www.ternoa.network/en"),
            cake: g[r.a_.ETHEREUM],
            dai: new r.Z$(r.a_.ETHEREUM,"0x6B175474E89094C44Da98b954EedeAC495271d0F",18,"DAI","Dai Stablecoin","https://www.makerdao.com/"),
            ldo: new r.Z$(r.a_.ETHEREUM,"0x5A98FcBEA516Cf06857215779Fd812CA3beF1B32",18,"LDO","Lido DAO Token","https://lido.fi/"),
            wstETH: new r.Z$(r.a_.ETHEREUM,"0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0",18,"wstETH","Wrapped liquid staked Ether 2.0","https://lido.fi/"),
            link: new r.Z$(r.a_.ETHEREUM,"0x514910771AF9Ca656af840dff83E8264EcF986CA",18,"LINK","ChainLink Token","https://chain.link/"),
            matic: new r.Z$(r.a_.ETHEREUM,"0x7D1AfA7B718fb893dB30A3aBc0Cfc608AaCfeBB0",18,"MATIC","Matic Token","https://polygon.technology/"),
            cbEth: new r.Z$(r.a_.ETHEREUM,"0xBe9895146f7AF43049ca1c1AE358B0541Ea49704",18,"cbETH","Coinbase Wrapped Staked ETH","https://www.coinbase.com/cbeth"),
            ape: new r.Z$(r.a_.ETHEREUM,"0x4d224452801ACEd8B2F0aebE155379bb5D594381",18,"APE","ApeCoin","https://apecoin.com/"),
            alcx: new r.Z$(r.a_.ETHEREUM,"0xdBdb4d16EdA451D0503b854CF79D55697F90c8DF",18,"ALCX","Alchemix","https://alchemix.fi/"),
            alETH: new r.Z$(r.a_.ETHEREUM,"0x0100546F2cD4C9D97f798fFC9755E47865FF7Ee6",18,"alETH","Alchemix ETH","https://alchemix.fi/"),
            fxs: new r.Z$(r.a_.ETHEREUM,"0x3432B6A60D23Ca0dFCa7761B7ab56459D9C964D0",18,"FXS","Frax Share","https://frax.finance/"),
            frxETH: new r.Z$(r.a_.ETHEREUM,"0x5E8422345238F34275888049021821E8E08CAa1f",18,"frxETH","Frax Ether","https://frax.finance/"),
            rpl: new r.Z$(r.a_.ETHEREUM,"0xD33526068D116cE69F19A9ee46F0bd304F21A51f",18,"RPL","Rocket Pool","https://rocketpool.net/"),
            rETH: new r.Z$(r.a_.ETHEREUM,"0xae78736Cd615f374D3085123A210448E74Fc6393",18,"rETH","Rocket Pool ETH","https://rocketpool.net/"),
            ankrETH: new r.Z$(r.a_.ETHEREUM,"0xE95A203B1a91a908F9B9CE46459d101078c2c3cb",18,"ankrETH","Ankr Staked ETH","https://www.ankr.com/"),
            axl: new r.Z$(r.a_.ETHEREUM,"0x467719aD09025FcC6cF6F8311755809d45a5E5f3",6,"AXL","Axelar","https://axelar.network/"),
            mask: new r.Z$(r.a_.ETHEREUM,"0x69af81e73A73B40adF4f3d4223Cd9b1ECE623074",18,"MASK","Mask Network","https://mask.io/"),
            wncg: new r.Z$(r.a_.ETHEREUM,"0xf203Ca1769ca8e9e8FE1DA9D147DB68B6c919817",18,"WNCG","Wrapped NCG","https://nine-chronicles.com/"),
            ush: new r.Z$(r.a_.ETHEREUM,"0xE60779CC1b2c1d0580611c526a8DF0E3f870EC48",18,"USH","unshETHing_Token","https://unsheth.xyz/"),
            unshETH: new r.Z$(r.a_.ETHEREUM,"0x0Ae38f7E10A43B5b2fB064B42a2f4514cbA909ef",18,"unshETH","unshETH Ether","https://unsheth.xyz/"),
            wbeth: new r.Z$(r.a_.ETHEREUM,"0xa2E3356610840701BDf5611a53974510Ae27E2e1",18,"wBETH","Wrapped Binance Beacon ETH","https://ethereum.org/en/roadmap/beacon-chain/"),
            pepe: new r.Z$(r.a_.ETHEREUM,"0x6982508145454Ce325dDbE47a25d4ec3d2311933",18,"PEPE","Pepe","https://www.pepe.vip/"),
            blur: new r.Z$(r.a_.ETHEREUM,"0x5283D291DBCF85356A21bA090E6db59121208b44",18,"BLUR","Blur","https://blur.io/"),
            ens: new r.Z$(r.a_.ETHEREUM,"0xC18360217D8F7Ab5e7c516566761Ea12Ce7F9D72",18,"ENS","Ethereum Name Service","https://ens.domains/")
        }
    },
    93348: function(e, t, n) {
        "use strict";
        n.d(t, {
            BS: function() {
                return K
            },
            CB: function() {
                return G
            },
            Gp: function() {
                return j
            },
            H4: function() {
                return ec
            },
            Im: function() {
                return eu
            },
            Kg: function() {
                return ee
            },
            LX: function() {
                return p
            },
            Ly: function() {
                return et
            },
            Vm: function() {
                return Z
            },
            _s: function() {
                return R
            },
            cK: function() {
                return eh
            },
            dR: function() {
                return J
            },
            d_: function() {
                return v
            },
            e5: function() {
                return ew
            },
            je: function() {
                return c
            },
            jv: function() {
                return D
            },
            l$: function() {
                return N
            },
            lk: function() {
                return d
            },
            mG: function() {
                return eo
            },
            pk: function() {
                return I
            },
            u8: function() {
                return X
            },
            zF: function() {
                return l
            },
            zz: function() {
                return $
            }
        });
        var r, i = n(57917), a = n(61829), o = n(92163), s = n(34130), u = "0x41ff9AA7e16B8B1a8a8dc4f0eFacd93D02d071c9", l = {
            [i.a_.ETHEREUM]: u,
            [i.a_.GOERLI]: u,
            [i.a_.BSC]: u,
            [i.a_.BSC_TESTNET]: u
        }, c = "0x0000000000000000000000000000000000000000", d = ((r = d || {})[r.LOWEST = 100] = "LOWEST",
        r[r.LOW = 500] = "LOW",
        r[r.MEDIUM = 2500] = "MEDIUM",
        r[r.HIGH = 1e4] = "HIGH",
        r), p = {
            100: 1,
            500: 10,
            2500: 50,
            1e4: 200
        }, f = BigInt(-1), h = 2n ** 96n, m = h ** 2n, y = 10n ** 6n, g = new o.gG("1"), b = new o.gG("0");
        function v(e) {
            let {deployerAddress: t, tokenA: n, tokenB: r, fee: i, initCodeHashManualOverride: a} = e
              , [o,u] = n.sortsBefore(r) ? [n, r] : [r, n];
            return (0,
            s.getCreate2Address)(t, (0,
            s.solidityKeccak256)(["bytes"], [s.defaultAbiCoder.encode(["address", "address", "uint24"], [o.address, u.address, i])]), null != a ? a : "0x6ce8eb472fa82df5469c6ab6d485f17c3ad13c8cd7af59b3d4a8026c5ce0f7e2")
        }
        var w = class {
            static addDelta(e, t) {
                return t < 0n ? e - t * f : e + t
            }
            constructor() {}
        }
          , T = class {
            static mulDivRoundingUp(e, t, n) {
                let r = e * t
                  , i = r / n;
                return r % n !== 0n && (i += 1n),
                i
            }
            constructor() {}
        }
          , E = 2n ** 160n - 1n
          , A = class {
            static getAmount0Delta(e, t, n, r) {
                e > t && (t = e = t);
                let i = n << 96n
                  , a = t - e;
                return r ? T.mulDivRoundingUp(T.mulDivRoundingUp(i, a, t), 1n, e) : i * a / t / e
            }
            static getAmount1Delta(e, t, n, r) {
                return e > t && (t = e = t),
                r ? T.mulDivRoundingUp(n, t - e, h) : n * (t - e) / h
            }
            static getNextSqrtPriceFromInput(e, t, n, r) {
                return (0,
                a.Z)(e > 0n),
                (0,
                a.Z)(t > 0n),
                r ? this.getNextSqrtPriceFromAmount0RoundingUp(e, t, n, !0) : this.getNextSqrtPriceFromAmount1RoundingDown(e, t, n, !0)
            }
            static getNextSqrtPriceFromOutput(e, t, n, r) {
                return (0,
                a.Z)(e > 0n),
                (0,
                a.Z)(t > 0n),
                r ? this.getNextSqrtPriceFromAmount1RoundingDown(e, t, n, !1) : this.getNextSqrtPriceFromAmount0RoundingUp(e, t, n, !1)
            }
            static getNextSqrtPriceFromAmount0RoundingUp(e, t, n, r) {
                if (0n === n)
                    return e;
                let o = t << 96n;
                if (r) {
                    let t = n * e & i.Bz;
                    if (t / n === e) {
                        let n = o + t & i.Bz;
                        if (n >= o)
                            return T.mulDivRoundingUp(o, e, n)
                    }
                    return T.mulDivRoundingUp(o, 1n, o / e + n)
                }
                let s = n * e & i.Bz;
                return (0,
                a.Z)(s / n === e),
                (0,
                a.Z)(o > s),
                T.mulDivRoundingUp(o, e, o - s)
            }
            static getNextSqrtPriceFromAmount1RoundingDown(e, t, n, r) {
                if (r)
                    return e + (n <= E ? (n << 96n) / t : n * h / t);
                let i = T.mulDivRoundingUp(n, h, t);
                return (0,
                a.Z)(e > i),
                e - i
            }
            constructor() {}
        }
          , x = class {
            static computeSwapStep(e, t, n, r, i) {
                let a = {}
                  , o = e >= t
                  , s = r >= 0n;
                if (s) {
                    let s = r * (y - BigInt(i)) / y;
                    a.amountIn = o ? A.getAmount0Delta(t, e, n, !0) : A.getAmount1Delta(e, t, n, !0),
                    s >= a.amountIn ? a.sqrtRatioNextX96 = t : a.sqrtRatioNextX96 = A.getNextSqrtPriceFromInput(e, n, s, o)
                } else
                    a.amountOut = o ? A.getAmount1Delta(t, e, n, !1) : A.getAmount0Delta(e, t, n, !1),
                    r * f >= a.amountOut ? a.sqrtRatioNextX96 = t : a.sqrtRatioNextX96 = A.getNextSqrtPriceFromOutput(e, n, r * f, o);
                let u = t === a.sqrtRatioNextX96;
                return o ? (a.amountIn = u && s ? a.amountIn : A.getAmount0Delta(a.sqrtRatioNextX96, e, n, !0),
                a.amountOut = u && !s ? a.amountOut : A.getAmount1Delta(a.sqrtRatioNextX96, e, n, !1)) : (a.amountIn = u && s ? a.amountIn : A.getAmount1Delta(e, a.sqrtRatioNextX96, n, !0),
                a.amountOut = u && !s ? a.amountOut : A.getAmount0Delta(e, a.sqrtRatioNextX96, n, !1)),
                !s && a.amountOut > r * f && (a.amountOut = r * f),
                s && a.sqrtRatioNextX96 !== t ? a.feeAmount = r - a.amountIn : a.feeAmount = T.mulDivRoundingUp(a.amountIn, BigInt(i), y - BigInt(i)),
                [a.sqrtRatioNextX96, a.amountIn, a.amountOut, a.feeAmount]
            }
            constructor() {}
        }
          , k = [128, 64, 32, 16, 8, 4, 2, 1].map(e=>[e, 2n ** BigInt(e)]);
        function C(e, t) {
            return e * BigInt(t) >> 128n
        }
        var _ = 2n ** 32n
          , S = class {
            static getSqrtRatioAtTick(e) {
                (0,
                a.Z)(e >= S.MIN_TICK && e <= S.MAX_TICK && Number.isInteger(e), "TICK");
                let t = e < 0 ? -1 * e : e
                  , n = (1 & t) != 0 ? BigInt("0xfffcb933bd6fad37aa2d162d1a594001") : BigInt("0x100000000000000000000000000000000");
                return (2 & t) != 0 && (n = C(n, "0xfff97272373d413259a46990580e213a")),
                (4 & t) != 0 && (n = C(n, "0xfff2e50f5f656932ef12357cf3c7fdcc")),
                (8 & t) != 0 && (n = C(n, "0xffe5caca7e10e4e61c3624eaa0941cd0")),
                (16 & t) != 0 && (n = C(n, "0xffcb9843d60f6159c9db58835c926644")),
                (32 & t) != 0 && (n = C(n, "0xff973b41fa98c081472e6896dfb254c0")),
                (64 & t) != 0 && (n = C(n, "0xff2ea16466c96a3843ec78b326b52861")),
                (128 & t) != 0 && (n = C(n, "0xfe5dee046a99a2a811c461f1969c3053")),
                (256 & t) != 0 && (n = C(n, "0xfcbe86c7900a88aedcffc83b479aa3a4")),
                (512 & t) != 0 && (n = C(n, "0xf987a7253ac413176f2b074cf7815e54")),
                (1024 & t) != 0 && (n = C(n, "0xf3392b0822b70005940c7a398e4b70f3")),
                (2048 & t) != 0 && (n = C(n, "0xe7159475a2c29b7443b29c7fa6e889d9")),
                (4096 & t) != 0 && (n = C(n, "0xd097f3bdfd2022b8845ad8f792aa5825")),
                (8192 & t) != 0 && (n = C(n, "0xa9f746462d870fdf8a65dc1f90e061e5")),
                (16384 & t) != 0 && (n = C(n, "0x70d869a156d2a1b890bb3df62baf32f7")),
                (32768 & t) != 0 && (n = C(n, "0x31be135f97d08fd981231505542fcfa6")),
                (65536 & t) != 0 && (n = C(n, "0x9aa508b5b7a84e1c677de54f3e99bc9")),
                (131072 & t) != 0 && (n = C(n, "0x5d6af8dedb81196699c329225ee604")),
                (262144 & t) != 0 && (n = C(n, "0x2216e584f5fa1ea926041bedfe98")),
                (524288 & t) != 0 && (n = C(n, "0x48a170391f7dc42444e8fa2")),
                e > 0 && (n = i.Bz / n),
                n % _ > 0n ? n / _ + 1n : n / _
            }
            static getTickAtSqrtRatio(e) {
                let t;
                (0,
                a.Z)(e >= S.MIN_SQRT_RATIO && e < S.MAX_SQRT_RATIO, "SQRT_RATIO");
                let n = e << 32n
                  , r = function(e) {
                    (0,
                    a.Z)(e > 0n, "ZERO"),
                    (0,
                    a.Z)(e <= i.Bz, "MAX");
                    let t = 0;
                    for (let[n,r] of k)
                        e >= r && (e >>= BigInt(n),
                        t += n);
                    return t
                }(n);
                t = BigInt(r) >= 128n ? n >> BigInt(r - 127) : n << BigInt(127 - r);
                let o = BigInt(r) - 128n << 64n;
                for (let e = 0; e < 14; e++) {
                    t = t * t >> 127n;
                    let n = t >> 128n;
                    o |= n << BigInt(63 - e),
                    t >>= n
                }
                let s = 0x3627a301d71055774c85n * o
                  , u = Number(s - 0x28f6481ab7f045a5af012a19d003aaan >> 128n)
                  , l = Number(s + 0xdb2df09e81959a81455e260799a0632fn >> 128n);
                return u === l ? u : S.getSqrtRatioAtTick(l) <= e ? l : u
            }
            constructor() {}
        }
          , I = S;
        I.MIN_TICK = -887272,
        I.MAX_TICK = -S.MIN_TICK,
        I.MIN_SQRT_RATIO = 4295128739n,
        I.MAX_SQRT_RATIO = 0xfffd8963efd1fc6a506488495d951d5263988d26n;
        var P = class {
            async getTick(e) {
                throw Error(P.ERROR_MESSAGE)
            }
            async nextInitializedTickWithinOneWord(e, t, n) {
                throw Error(P.ERROR_MESSAGE)
            }
        }
          , B = P;
        function O(e, t) {
            return e.index - t.index
        }
        B.ERROR_MESSAGE = "No tick data provider was given";
        var N = class {
            static validateList(e, t) {
                (0,
                a.Z)(t > 0, "TICK_SPACING_NONZERO"),
                (0,
                a.Z)(e.every(e=>{
                    let {index: n} = e;
                    return n % t == 0
                }
                ), "TICK_SPACING"),
                (0,
                a.Z)(0n === e.reduce((e,t)=>{
                    let {liquidityNet: n} = t;
                    return e + n
                }
                , 0n), "ZERO_NET"),
                (0,
                a.Z)(function(e, t) {
                    for (let n = 0; n < e.length - 1; n++)
                        if (t(e[n], e[n + 1]) > 0)
                            return !1;
                    return !0
                }(e, O), "SORTED")
            }
            static isBelowSmallest(e, t) {
                return (0,
                a.Z)(e.length > 0, "LENGTH"),
                t < e[0].index
            }
            static isAtOrAboveLargest(e, t) {
                return (0,
                a.Z)(e.length > 0, "LENGTH"),
                t >= e[e.length - 1].index
            }
            static getTick(e, t) {
                let n = e[this.binarySearch(e, t)];
                return (0,
                a.Z)(n.index === t, "NOT_CONTAINED"),
                n
            }
            static binarySearch(e, t) {
                let n;
                (0,
                a.Z)(!this.isBelowSmallest(e, t), "BELOW_SMALLEST");
                let r = 0
                  , i = e.length - 1;
                for (; ; ) {
                    if (e[n = Math.floor((r + i) / 2)].index <= t && (n === e.length - 1 || e[n + 1].index > t))
                        return n;
                    e[n].index < t ? r = n + 1 : i = n - 1
                }
            }
            static nextInitializedTick(e, t, n) {
                if (n) {
                    if ((0,
                    a.Z)(!N.isBelowSmallest(e, t), "BELOW_SMALLEST"),
                    N.isAtOrAboveLargest(e, t))
                        return e[e.length - 1];
                    let n = this.binarySearch(e, t);
                    return e[n]
                }
                if ((0,
                a.Z)(!this.isAtOrAboveLargest(e, t), "AT_OR_ABOVE_LARGEST"),
                this.isBelowSmallest(e, t))
                    return e[0];
                let r = this.binarySearch(e, t);
                return e[r + 1]
            }
            static nextInitializedTickWithinOneWord(e, t, n, r) {
                let i = Math.floor(t / r);
                if (n) {
                    let a = (i >> 8 << 8) * r;
                    if (N.isBelowSmallest(e, t))
                        return [a, !1];
                    let {index: o} = N.nextInitializedTick(e, t, n)
                      , s = Math.max(a, o);
                    return [s, s === o]
                }
                let a = (((i + 1 >> 8) + 1 << 8) - 1) * r;
                if (this.isAtOrAboveLargest(e, t))
                    return [a, !1];
                let {index: o} = this.nextInitializedTick(e, t, n)
                  , s = Math.min(a, o);
                return [s, s === o]
            }
            static countInitializedTicksCrossed(e, t, n) {
                if (t === n)
                    return 0;
                let r = this.binarySearch(e, t)
                  , i = this.binarySearch(e, n);
                return Math.abs(r - i)
            }
            constructor() {}
        }
        ;
        function R(e) {
            let t = BigInt(e)
              , n = t.toString(16);
            return n.length % 2 != 0 && (n = `0 ${n}`),
            `0x ${n}`
        }
        function F(e, t) {
            let n = e.input.wrapped
              , {path: r, types: i} = e.pools.reduce((e,t,n)=>{
                let {inputToken: r, path: i, types: a} = e
                  , o = t.token0.equals(r) ? t.token1 : t.token0;
                return 0 === n ? {
                    inputToken: o,
                    types: ["address", "uint24", "address"],
                    path: [r.address, t.fee, o.address]
                } : {
                    inputToken: o,
                    types: [...a, "uint24", "address"],
                    path: [...i, t.fee, o.address]
                }
            }
            , {
                inputToken: n,
                path: [],
                types: []
            });
            return t ? (0,
            s.solidityPack)(i.reverse(), r.reverse()) : (0,
            s.solidityPack)(i, r)
        }
        function D(e, t) {
            let n = BigInt(e) << 192n
              , r = BigInt(t);
            return (0,
            i._b)(n / r)
        }
        function M(e, t, n) {
            e > t && (t = e = t);
            let r = e * t / h;
            return BigInt(n) * r / (t - e)
        }
        function L(e, t, n) {
            e > t && (t = e = t);
            let r = BigInt(n) * e * t
              , i = h * (t - e);
            return r / i
        }
        function U(e, t, n) {
            return e > t && (t = e = t),
            BigInt(n) * h / (t - e)
        }
        function q(e, t, n, r, i, a) {
            t > n && (n = t = n);
            let o = a ? L : M;
            if (e <= t)
                return o(t, n, r);
            if (e < n) {
                let a = o(e, n, r)
                  , s = U(t, e, i);
                return a < s ? a : s
            }
            return U(t, n, i)
        }
        function j(e, t) {
            (0,
            a.Z)(Number.isInteger(e) && Number.isInteger(t), "INTEGERS"),
            (0,
            a.Z)(t > 0, "TICK_SPACING"),
            (0,
            a.Z)(e >= I.MIN_TICK && e <= I.MAX_TICK, "TICK_BOUND");
            let n = Math.round(e / t) * t;
            return n < I.MIN_TICK ? n + t : n > I.MAX_TICK ? n - t : n
        }
        function $(e, t, n) {
            let r = I.getSqrtRatioAtTick(n)
              , a = r * r;
            return e.sortsBefore(t) ? new i.tA(e,t,m,a) : new i.tA(e,t,a,m)
        }
        function Z(e) {
            let t = e.baseCurrency.sortsBefore(e.quoteCurrency)
              , n = t ? D(e.numerator, e.denominator) : D(e.denominator, e.numerator)
              , r = I.getTickAtSqrtRatio(n)
              , i = $(e.baseCurrency, e.quoteCurrency, r + 1);
            return t ? !e.lessThan(i) && r++ : !e.greaterThan(i) && r++,
            r
        }
        var H = {
            getToken0Amount: function(e, t, n, r, i) {
                return e < t ? A.getAmount0Delta(I.getSqrtRatioAtTick(t), I.getSqrtRatioAtTick(n), i, !1) : e < n ? A.getAmount0Delta(r, I.getSqrtRatioAtTick(n), i, !1) : 0n
            },
            getToken1Amount: function(e, t, n, r, i) {
                return e < t ? 0n : e < n ? A.getAmount1Delta(I.getSqrtRatioAtTick(t), r, i, !1) : A.getAmount1Delta(I.getSqrtRatioAtTick(t), I.getSqrtRatioAtTick(n), i, !1)
            }
        }
          , G = {
            getEstimatedLPFee: function(e) {
                let {amount: t, currency: n, ...r} = e;
                return z({
                    ...r,
                    amountA: t,
                    amountB: i.ih.fromRawAmount(n, i.Bz)
                })
            },
            getEstimatedLPFeeByAmounts: z,
            getLiquidityFromTick: function(e, t) {
                let n = i.xE;
                if (!(null == e ? void 0 : e.length) || t < e[0].index || t > e[e.length - 1].index)
                    return n;
                for (let i = 0; i < e.length - 1; ++i) {
                    var r;
                    n += e[i].liquidityNet;
                    let a = e[i].index
                      , o = null === (r = e[i + 1]) || void 0 === r ? void 0 : r.index;
                    if (a <= t && t <= o)
                        break
                }
                return n
            },
            getLiquidityFromSqrtRatioX96: function(e, t) {
                let n = I.getTickAtSqrtRatio(t);
                return G.getLiquidityFromTick(e, n)
            },
            getAverageLiquidity: function(e, t, n, r) {
                if ((0,
                a.Z)(n <= r, "INVALID_TICK_RANGE"),
                N.validateList(e, t),
                n === r)
                    return G.getLiquidityFromTick(e, n);
                let o = n < e[0].index
                  , s = o ? new J({
                    index: I.MIN_TICK,
                    liquidityNet: i.xE,
                    liquidityGross: i.xE
                }) : N.nextInitializedTick(e, n, !0)
                  , u = N.nextInitializedTick(e, n, !1)
                  , l = o ? i.xE : G.getLiquidityFromTick(e, u.index)
                  , c = i.xE
                  , d = e=>l * BigInt(e - Math.max(s.index, n));
                for (; u.index < r && (c += d(u.index),
                l += u.liquidityNet,
                s = u,
                u.index !== e[e.length - 1].index); )
                    u = N.nextInitializedTick(e, u.index, !1);
                return (c += d(r)) / BigInt(r - n)
            },
            getLiquidityBySingleAmount: function(e) {
                let {amount: t, currency: n, ...r} = e;
                return V({
                    amountA: t,
                    amountB: i.ih.fromRawAmount(n, i.Bz),
                    ...r
                })
            },
            getDependentAmount: function(e) {
                let {currency: t, amount: n, sqrtRatioX96: r, tickLower: a, tickUpper: o} = e
                  , s = I.getTickAtSqrtRatio(r)
                  , u = G.getLiquidityBySingleAmount(e)
                  , l = t.wrapped.sortsBefore(n.currency.wrapped)
                  , c = l ? H.getToken0Amount : H.getToken1Amount;
                return i.ih.fromRawAmount(t, c(s, a, o, r, u))
            },
            getLiquidityByAmountsAndPrice: V,
            getAmountsByLiquidityAndPrice: function(e) {
                let {currencyA: t, currencyB: n, liquidity: r, sqrtRatioX96: a, tickLower: o, tickUpper: s} = e
                  , u = I.getTickAtSqrtRatio(a)
                  , l = t.wrapped.sortsBefore(n.wrapped)
                  , c = H.getToken0Amount(u, o, s, a, r)
                  , d = H.getToken1Amount(u, o, s, a, r);
                return [i.ih.fromRawAmount(t, l ? c : d), i.ih.fromRawAmount(n, l ? d : c)]
            },
            getAmountsAtNewPrice: function(e) {
                let {newSqrtRatioX96: t, ...n} = e
                  , {tickLower: r, tickUpper: i, amountA: a, amountB: o} = n
                  , s = G.getLiquidityByAmountsAndPrice(n);
                return G.getAmountsByLiquidityAndPrice({
                    liquidity: s,
                    currencyA: a.currency,
                    currencyB: o.currency,
                    tickLower: r,
                    tickUpper: i,
                    sqrtRatioX96: t
                })
            }
        };
        function z(e) {
            let {protocolFee: t=b, ...n} = e;
            try {
                let e = function(e) {
                    let {amountA: t, amountB: n, volume24H: r, sqrtRatioX96: s, tickLower: u, tickUpper: l, mostActiveLiquidity: c, fee: d, insidePercentage: p=g} = e;
                    (0,
                    a.Z)(!Number.isNaN(d) && d >= 0, "INVALID_FEE");
                    let f = I.getTickAtSqrtRatio(s);
                    if (f < u || f > l)
                        return new i.iA(i.xE);
                    let h = G.getLiquidityByAmountsAndPrice({
                        amountA: t,
                        amountB: n,
                        tickUpper: l,
                        tickLower: u,
                        sqrtRatioX96: s
                    });
                    return p.multiply((function(e) {
                        let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 6
                          , n = 10 ** t;
                        return new o.iA(BigInt(Math.floor(e * n)),BigInt(n))
                    }
                    )(r).multiply(BigInt(d)).multiply(h)).divide(y * (h + c)).asFraction
                }(n);
                return g.subtract(t).multiply(e).asFraction
            } catch (e) {
                return console.error(e),
                new i.iA(i.xE)
            }
        }
        function V(e) {
            let {amountA: t, amountB: n, tickUpper: r, tickLower: i, sqrtRatioX96: a} = e
              , o = t.currency.wrapped.sortsBefore(n.currency.wrapped)
              , [s,u] = o ? [t.quotient, n.quotient] : [n.quotient, t.quotient]
              , l = I.getSqrtRatioAtTick(i)
              , c = I.getSqrtRatioAtTick(r);
            return q(a, l, c, s, u, !0)
        }
        var W = 10n ** 4n;
        function K(e) {
            let t = Number(e);
            if (Number.isNaN(t))
                throw Error(`Invalid fee protocol ${e}`);
            return [new i.gG(t % 65536,W), new i.gG(t >> 16,W)]
        }
        function X(e, t, n) {
            let r = e * e;
            return t.wrapped.sortsBefore(n.wrapped) ? new o.tA(t.wrapped,n.wrapped,m,r) : new o.tA(t.wrapped,n.wrapped,r,m)
        }
        var J = class {
            constructor({index: e, liquidityGross: t, liquidityNet: n}) {
                (0,
                a.Z)(e >= I.MIN_TICK && e <= I.MAX_TICK, "TICK"),
                this.index = e,
                this.liquidityGross = BigInt(t),
                this.liquidityNet = BigInt(n)
            }
        }
          , Q = class {
            async getTick(e) {
                return N.getTick(this.ticks, e)
            }
            async nextInitializedTickWithinOneWord(e, t, n) {
                return N.nextInitializedTickWithinOneWord(this.ticks, e, t, n)
            }
            constructor(e) {
                let t = e.map(e=>e instanceof J ? e : new J(e));
                this.ticks = t
            }
        }
          , Y = new B
          , ee = class {
            static getAddress(e, t, n, r, i) {
                return v({
                    deployerAddress: null != i ? i : l[e.chainId],
                    fee: n,
                    tokenA: e,
                    tokenB: t,
                    initCodeHashManualOverride: r
                })
            }
            involvesToken(e) {
                return e.equals(this.token0) || e.equals(this.token1)
            }
            get token0Price() {
                var e;
                return null !== (e = this._token0Price) && void 0 !== e ? e : this._token0Price = new i.tA(this.token0,this.token1,m,this.sqrtRatioX96 * this.sqrtRatioX96)
            }
            get token1Price() {
                var e;
                return null !== (e = this._token1Price) && void 0 !== e ? e : this._token1Price = new i.tA(this.token1,this.token0,this.sqrtRatioX96 * this.sqrtRatioX96,m)
            }
            priceOf(e) {
                return (0,
                a.Z)(this.involvesToken(e), "TOKEN"),
                e.equals(this.token0) ? this.token0Price : this.token1Price
            }
            get chainId() {
                return this.token0.chainId
            }
            async getOutputAmount(e, t) {
                (0,
                a.Z)(this.involvesToken(e.currency), "TOKEN");
                let n = e.currency.equals(this.token0)
                  , {amountCalculated: r, sqrtRatioX96: o, liquidity: s, tickCurrent: u} = await this.swap(n, e.quotient, t)
                  , l = n ? this.token1 : this.token0;
                return [i.ih.fromRawAmount(l, r * f), new ee(this.token0,this.token1,this.fee,o,s,u,this.tickDataProvider)]
            }
            async getInputAmount(e, t) {
                (0,
                a.Z)(e.currency.isToken && this.involvesToken(e.currency), "TOKEN");
                let n = e.currency.equals(this.token1)
                  , {amountSpecifiedRemaining: r, amountCalculated: o, sqrtRatioX96: s, liquidity: u, tickCurrent: l} = await this.swap(n, e.quotient * f, t);
                (0,
                a.Z)(0n === r, "INSUFICIENT_LIQUIDITY");
                let c = n ? this.token0 : this.token1;
                return [i.ih.fromRawAmount(c, o), new ee(this.token0,this.token1,this.fee,s,u,l,this.tickDataProvider)]
            }
            async swap(e, t, n) {
                n || (n = e ? I.MIN_SQRT_RATIO + 1n : I.MAX_SQRT_RATIO - 1n),
                e ? ((0,
                a.Z)(n > I.MIN_SQRT_RATIO, "RATIO_MIN"),
                (0,
                a.Z)(n < this.sqrtRatioX96, "RATIO_CURRENT")) : ((0,
                a.Z)(n < I.MAX_SQRT_RATIO, "RATIO_MAX"),
                (0,
                a.Z)(n > this.sqrtRatioX96, "RATIO_CURRENT"));
                let r = t >= 0n
                  , i = {
                    amountSpecifiedRemaining: t,
                    amountCalculated: 0n,
                    sqrtPriceX96: this.sqrtRatioX96,
                    tick: this.tickCurrent,
                    liquidity: this.liquidity
                };
                for (; 0n !== i.amountSpecifiedRemaining && i.sqrtPriceX96 != n; ) {
                    let t = {};
                    if (t.sqrtPriceStartX96 = i.sqrtPriceX96,
                    [t.tickNext,t.initialized] = await this.tickDataProvider.nextInitializedTickWithinOneWord(i.tick, e, this.tickSpacing),
                    t.tickNext < I.MIN_TICK ? t.tickNext = I.MIN_TICK : t.tickNext > I.MAX_TICK && (t.tickNext = I.MAX_TICK),
                    t.sqrtPriceNextX96 = I.getSqrtRatioAtTick(t.tickNext),
                    [i.sqrtPriceX96,t.amountIn,t.amountOut,t.feeAmount] = x.computeSwapStep(i.sqrtPriceX96, (e ? t.sqrtPriceNextX96 < n : t.sqrtPriceNextX96 > n) ? n : t.sqrtPriceNextX96, i.liquidity, i.amountSpecifiedRemaining, this.fee),
                    r ? (i.amountSpecifiedRemaining = i.amountSpecifiedRemaining - (t.amountIn + t.feeAmount),
                    i.amountCalculated = i.amountCalculated - t.amountOut) : (i.amountSpecifiedRemaining = i.amountSpecifiedRemaining + t.amountOut,
                    i.amountCalculated = i.amountCalculated + (t.amountIn + t.feeAmount)),
                    i.sqrtPriceX96 === t.sqrtPriceNextX96) {
                        if (t.initialized) {
                            let n = BigInt((await this.tickDataProvider.getTick(t.tickNext)).liquidityNet);
                            e && (n *= f),
                            i.liquidity = w.addDelta(i.liquidity, n)
                        }
                        i.tick = e ? t.tickNext - 1 : t.tickNext
                    } else
                        i.sqrtPriceX96 !== t.sqrtPriceStartX96 && (i.tick = I.getTickAtSqrtRatio(i.sqrtPriceX96))
                }
                return {
                    amountSpecifiedRemaining: i.amountSpecifiedRemaining,
                    amountCalculated: i.amountCalculated,
                    sqrtRatioX96: i.sqrtPriceX96,
                    liquidity: i.liquidity,
                    tickCurrent: i.tick
                }
            }
            get tickSpacing() {
                return p[this.fee]
            }
            constructor(e, t, n, r, i, o, s=Y) {
                (0,
                a.Z)(Number.isInteger(n) && n < 1e6, "FEE"),
                [this.token0,this.token1] = e.sortsBefore(t) ? [e, t] : [t, e],
                this.fee = n,
                this.sqrtRatioX96 = BigInt(r),
                this.liquidity = BigInt(i),
                this.tickCurrent = o,
                this.tickDataProvider = Array.isArray(s) ? new Q(s) : s
            }
        }
          , et = class {
            get token0PriceLower() {
                return $(this.pool.token0, this.pool.token1, this.tickLower)
            }
            get token0PriceUpper() {
                return $(this.pool.token0, this.pool.token1, this.tickUpper)
            }
            get amount0() {
                return null === this._token0Amount && (this._token0Amount = i.ih.fromRawAmount(this.pool.token0, H.getToken0Amount(this.pool.tickCurrent, this.tickLower, this.tickUpper, this.pool.sqrtRatioX96, this.liquidity))),
                this._token0Amount
            }
            get amount1() {
                return null === this._token1Amount && (this._token1Amount = i.ih.fromRawAmount(this.pool.token1, H.getToken1Amount(this.pool.tickCurrent, this.tickLower, this.tickUpper, this.pool.sqrtRatioX96, this.liquidity))),
                this._token1Amount
            }
            ratiosAfterSlippage(e) {
                let t = this.pool.token0Price.asFraction.multiply(new i.gG(1).subtract(e))
                  , n = this.pool.token0Price.asFraction.multiply(e.add(1))
                  , r = D(t.numerator, t.denominator);
                r <= I.MIN_SQRT_RATIO && (r = I.MIN_SQRT_RATIO + 1n);
                let a = D(n.numerator, n.denominator);
                return a >= I.MAX_SQRT_RATIO && (a = I.MAX_SQRT_RATIO - 1n),
                {
                    sqrtRatioX96Lower: r,
                    sqrtRatioX96Upper: a
                }
            }
            mintAmountsWithSlippage(e) {
                let {sqrtRatioX96Upper: t, sqrtRatioX96Lower: n} = this.ratiosAfterSlippage(e)
                  , r = new ee(this.pool.token0,this.pool.token1,this.pool.fee,n,0,I.getTickAtSqrtRatio(n))
                  , i = new ee(this.pool.token0,this.pool.token1,this.pool.fee,t,0,I.getTickAtSqrtRatio(t))
                  , a = et.fromAmounts({
                    pool: this.pool,
                    tickLower: this.tickLower,
                    tickUpper: this.tickUpper,
                    ...this.mintAmounts,
                    useFullPrecision: !1
                })
                  , {amount0: o} = new et({
                    pool: i,
                    liquidity: a.liquidity,
                    tickLower: this.tickLower,
                    tickUpper: this.tickUpper
                }).mintAmounts
                  , {amount1: s} = new et({
                    pool: r,
                    liquidity: a.liquidity,
                    tickLower: this.tickLower,
                    tickUpper: this.tickUpper
                }).mintAmounts;
                return {
                    amount0: o,
                    amount1: s
                }
            }
            burnAmountsWithSlippage(e) {
                let {sqrtRatioX96Upper: t, sqrtRatioX96Lower: n} = this.ratiosAfterSlippage(e)
                  , r = new ee(this.pool.token0,this.pool.token1,this.pool.fee,n,0,I.getTickAtSqrtRatio(n))
                  , i = new ee(this.pool.token0,this.pool.token1,this.pool.fee,t,0,I.getTickAtSqrtRatio(t))
                  , {amount0: a} = new et({
                    pool: i,
                    liquidity: this.liquidity,
                    tickLower: this.tickLower,
                    tickUpper: this.tickUpper
                })
                  , {amount1: o} = new et({
                    pool: r,
                    liquidity: this.liquidity,
                    tickLower: this.tickLower,
                    tickUpper: this.tickUpper
                });
                return {
                    amount0: a.quotient,
                    amount1: o.quotient
                }
            }
            get mintAmounts() {
                return null === this._mintAmounts ? this.pool.tickCurrent < this.tickLower ? {
                    amount0: A.getAmount0Delta(I.getSqrtRatioAtTick(this.tickLower), I.getSqrtRatioAtTick(this.tickUpper), this.liquidity, !0),
                    amount1: 0n
                } : this.pool.tickCurrent < this.tickUpper ? {
                    amount0: A.getAmount0Delta(this.pool.sqrtRatioX96, I.getSqrtRatioAtTick(this.tickUpper), this.liquidity, !0),
                    amount1: A.getAmount1Delta(I.getSqrtRatioAtTick(this.tickLower), this.pool.sqrtRatioX96, this.liquidity, !0)
                } : {
                    amount0: 0n,
                    amount1: A.getAmount1Delta(I.getSqrtRatioAtTick(this.tickLower), I.getSqrtRatioAtTick(this.tickUpper), this.liquidity, !0)
                } : this._mintAmounts
            }
            static fromAmounts(e) {
                let {pool: t, tickLower: n, tickUpper: r, amount0: i, amount1: a, useFullPrecision: o} = e
                  , s = I.getSqrtRatioAtTick(n)
                  , u = I.getSqrtRatioAtTick(r);
                return new et({
                    pool: t,
                    tickLower: n,
                    tickUpper: r,
                    liquidity: q(t.sqrtRatioX96, s, u, i, a, o)
                })
            }
            static fromAmount0(e) {
                let {pool: t, tickLower: n, tickUpper: r, amount0: a, useFullPrecision: o} = e;
                return et.fromAmounts({
                    pool: t,
                    tickLower: n,
                    tickUpper: r,
                    amount0: a,
                    amount1: i.Bz,
                    useFullPrecision: o
                })
            }
            static fromAmount1(e) {
                let {pool: t, tickLower: n, tickUpper: r, amount1: a} = e;
                return et.fromAmounts({
                    pool: t,
                    tickLower: n,
                    tickUpper: r,
                    amount0: i.Bz,
                    amount1: a,
                    useFullPrecision: !0
                })
            }
            constructor({pool: e, liquidity: t, tickLower: n, tickUpper: r}) {
                this._token0Amount = null,
                this._token1Amount = null,
                this._mintAmounts = null,
                (0,
                a.Z)(n < r, "TICK_ORDER"),
                (0,
                a.Z)(n >= I.MIN_TICK && n % e.tickSpacing == 0, "TICK_LOWER"),
                (0,
                a.Z)(r <= I.MAX_TICK && r % e.tickSpacing == 0, "TICK_UPPER"),
                this.pool = e,
                this.tickLower = n,
                this.tickUpper = r,
                this.liquidity = BigInt(t)
            }
        }
          , en = class {
            get chainId() {
                return this.pools[0].chainId
            }
            get midPrice() {
                if (null !== this._midPrice)
                    return this._midPrice;
                let {price: e} = this.pools.slice(1).reduce((e,t)=>{
                    let {nextInput: n, price: r} = e;
                    return n.equals(t.token0) ? {
                        nextInput: t.token1,
                        price: r.multiply(t.token0Price)
                    } : {
                        nextInput: t.token0,
                        price: r.multiply(t.token1Price)
                    }
                }
                , this.pools[0].token0.equals(this.input.wrapped) ? {
                    nextInput: this.pools[0].token1,
                    price: this.pools[0].token0Price
                } : {
                    nextInput: this.pools[0].token0,
                    price: this.pools[0].token1Price
                });
                return this._midPrice = new Price$1(this.input,this.output,e.denominator,e.numerator)
            }
            constructor(e, t, n) {
                this._midPrice = null,
                invariant11(e.length > 0, "POOLS");
                let {chainId: r} = e[0]
                  , i = e.every(e=>e.chainId === r);
                invariant11(i, "CHAIN_IDS");
                let a = t.wrapped;
                invariant11(e[0].involvesToken(a), "INPUT"),
                invariant11(e[e.length - 1].involvesToken(n.wrapped), "OUTPUT");
                let o = [a];
                for (let[t,n] of e.entries()) {
                    let e = o[t];
                    invariant11(e.equals(n.token0) || e.equals(n.token1), "PATH");
                    let r = e.equals(n.token0) ? n.token1 : n.token0;
                    o.push(r)
                }
                this.pools = e,
                this.tokenPath = o,
                this.input = t,
                this.output = null != n ? n : o[o.length - 1]
            }
        }
        ;
        function er(e, t) {
            if (invariant11(e.inputAmount.currency.equals(t.inputAmount.currency), "INPUT_CURRENCY"),
            invariant11(e.outputAmount.currency.equals(t.outputAmount.currency), "OUTPUT_CURRENCY"),
            e.outputAmount.equalTo(t.outputAmount)) {
                if (e.inputAmount.equalTo(t.inputAmount)) {
                    let n = e.swaps.reduce((e,t)=>e + t.route.tokenPath.length, 0)
                      , r = t.swaps.reduce((e,t)=>e + t.route.tokenPath.length, 0);
                    return n - r
                }
                return e.inputAmount.lessThan(t.inputAmount) ? -1 : 1
            }
            return e.outputAmount.lessThan(t.outputAmount) ? 1 : -1
        }
        var ei = class {
            get route() {
                return invariant11(1 == this.swaps.length, "MULTIPLE_ROUTES"),
                this.swaps[0].route
            }
            get inputAmount() {
                if (this._inputAmount)
                    return this._inputAmount;
                let e = this.swaps[0].inputAmount.currency
                  , t = this.swaps.map(e=>{
                    let {inputAmount: t} = e;
                    return t
                }
                ).reduce((e,t)=>e.add(t), CurrencyAmount.fromRawAmount(e, 0));
                return this._inputAmount = t,
                this._inputAmount
            }
            get outputAmount() {
                if (this._outputAmount)
                    return this._outputAmount;
                let e = this.swaps[0].outputAmount.currency
                  , t = this.swaps.map(e=>{
                    let {outputAmount: t} = e;
                    return t
                }
                ).reduce((e,t)=>e.add(t), CurrencyAmount.fromRawAmount(e, 0));
                return this._outputAmount = t,
                this._outputAmount
            }
            get executionPrice() {
                var e;
                return null !== (e = this._executionPrice) && void 0 !== e ? e : this._executionPrice = new Price(this.inputAmount.currency,this.outputAmount.currency,this.inputAmount.quotient,this.outputAmount.quotient)
            }
            get priceImpact() {
                if (this._priceImpact)
                    return this._priceImpact;
                let e = CurrencyAmount.fromRawAmount(this.outputAmount.currency, 0);
                for (let {route: t, inputAmount: n} of this.swaps) {
                    let {midPrice: r} = t;
                    e = e.add(r.quote(n))
                }
                let t = e.subtract(this.outputAmount).divide(e);
                return this._priceImpact = new Percent$1(t.numerator,t.denominator),
                this._priceImpact
            }
            static async exactIn(e, t) {
                return ei.fromRoute(e, t, TradeType.EXACT_INPUT)
            }
            static async exactOut(e, t) {
                return ei.fromRoute(e, t, TradeType.EXACT_OUTPUT)
            }
            static async fromRoute(e, t, n) {
                let r, i;
                let a = Array(e.tokenPath.length);
                if (n === TradeType.EXACT_INPUT) {
                    invariant11(t.currency.equals(e.input), "INPUT"),
                    a[0] = t.wrapped;
                    for (let t = 0; t < e.tokenPath.length - 1; t++) {
                        let n = e.pools[t]
                          , [r] = await n.getOutputAmount(a[t]);
                        a[t + 1] = r
                    }
                    r = CurrencyAmount.fromFractionalAmount(e.input, t.numerator, t.denominator),
                    i = CurrencyAmount.fromFractionalAmount(e.output, a[a.length - 1].numerator, a[a.length - 1].denominator)
                } else {
                    invariant11(t.currency.equals(e.output), "OUTPUT"),
                    a[a.length - 1] = t.wrapped;
                    for (let t = e.tokenPath.length - 1; t > 0; t--) {
                        let n = e.pools[t - 1]
                          , [r] = await n.getInputAmount(a[t]);
                        a[t - 1] = r
                    }
                    r = CurrencyAmount.fromFractionalAmount(e.input, a[0].numerator, a[0].denominator),
                    i = CurrencyAmount.fromFractionalAmount(e.output, t.numerator, t.denominator)
                }
                return new ei({
                    routes: [{
                        inputAmount: r,
                        outputAmount: i,
                        route: e
                    }],
                    tradeType: n
                })
            }
            static async fromRoutes(e, t) {
                let n = [];
                for (let {route: r, amount: i} of e) {
                    let e, a;
                    let o = Array(r.tokenPath.length);
                    if (t === TradeType.EXACT_INPUT) {
                        invariant11(i.currency.equals(r.input), "INPUT"),
                        e = CurrencyAmount.fromFractionalAmount(r.input, i.numerator, i.denominator),
                        o[0] = CurrencyAmount.fromFractionalAmount(r.input.wrapped, i.numerator, i.denominator);
                        for (let e = 0; e < r.tokenPath.length - 1; e++) {
                            let t = r.pools[e]
                              , [n] = await t.getOutputAmount(o[e]);
                            o[e + 1] = n
                        }
                        a = CurrencyAmount.fromFractionalAmount(r.output, o[o.length - 1].numerator, o[o.length - 1].denominator)
                    } else {
                        invariant11(i.currency.equals(r.output), "OUTPUT"),
                        a = CurrencyAmount.fromFractionalAmount(r.output, i.numerator, i.denominator),
                        o[o.length - 1] = CurrencyAmount.fromFractionalAmount(r.output.wrapped, i.numerator, i.denominator);
                        for (let e = r.tokenPath.length - 1; e > 0; e--) {
                            let t = r.pools[e - 1]
                              , [n] = await t.getInputAmount(o[e]);
                            o[e - 1] = n
                        }
                        e = CurrencyAmount.fromFractionalAmount(r.input, o[0].numerator, o[0].denominator)
                    }
                    n.push({
                        route: r,
                        inputAmount: e,
                        outputAmount: a
                    })
                }
                return new ei({
                    routes: n,
                    tradeType: t
                })
            }
            static createUncheckedTrade(e) {
                return new ei({
                    ...e,
                    routes: [{
                        inputAmount: e.inputAmount,
                        outputAmount: e.outputAmount,
                        route: e.route
                    }]
                })
            }
            static createUncheckedTradeWithMultipleRoutes(e) {
                return new ei(e)
            }
            minimumAmountOut(e) {
                let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.outputAmount;
                if (invariant11(!e.lessThan(0n), "SLIPPAGE_TOLERANCE"),
                this.tradeType === TradeType.EXACT_OUTPUT)
                    return t;
                let n = new Fraction(1n).add(e).invert().multiply(t.quotient).quotient;
                return CurrencyAmount.fromRawAmount(t.currency, n)
            }
            maximumAmountIn(e) {
                let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.inputAmount;
                if (invariant11(!e.lessThan(0n), "SLIPPAGE_TOLERANCE"),
                this.tradeType === TradeType.EXACT_INPUT)
                    return t;
                let n = new Fraction(1n).add(e).multiply(t.quotient).quotient;
                return CurrencyAmount.fromRawAmount(t.currency, n)
            }
            worstExecutionPrice(e) {
                return new Price(this.inputAmount.currency,this.outputAmount.currency,this.maximumAmountIn(e).quotient,this.minimumAmountOut(e).quotient)
            }
            static async bestTradeExactIn(e, t, n) {
                let {maxNumResults: r=3, maxHops: i=3} = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : {}
                  , a = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : []
                  , o = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : t
                  , s = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : [];
                invariant11(e.length > 0, "POOLS"),
                invariant11(i > 0, "MAX_HOPS"),
                invariant11(t === o || a.length > 0, "INVALID_RECURSION");
                let u = o.wrapped
                  , l = n.wrapped;
                for (let o = 0; o < e.length; o++) {
                    let c;
                    let d = e[o];
                    if (d.token0.equals(u.currency) || d.token1.equals(u.currency)) {
                        try {
                            let[e] = await d.getOutputAmount(u);
                            c = e
                        } catch (e) {
                            if (e.isInsufficientInputAmountError)
                                continue;
                            throw e
                        }
                        if (c.currency.isToken && c.currency.equals(l))
                            sortedInsert(s, await ei.fromRoute(new en([...a, d],t.currency,n), t, TradeType.EXACT_INPUT), r, er);
                        else if (i > 1 && e.length > 1) {
                            let u = e.slice(0, o).concat(e.slice(o + 1, e.length));
                            await ei.bestTradeExactIn(u, t, n, {
                                maxNumResults: r,
                                maxHops: i - 1
                            }, [...a, d], c, s)
                        }
                    }
                }
                return s
            }
            static async bestTradeExactOut(e, t, n) {
                let {maxNumResults: r=3, maxHops: i=3} = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : {}
                  , a = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : []
                  , o = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : n
                  , s = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : [];
                invariant11(e.length > 0, "POOLS"),
                invariant11(i > 0, "MAX_HOPS"),
                invariant11(n === o || a.length > 0, "INVALID_RECURSION");
                let u = o.wrapped
                  , l = t.wrapped;
                for (let o = 0; o < e.length; o++) {
                    let c;
                    let d = e[o];
                    if (d.token0.equals(u.currency) || d.token1.equals(u.currency)) {
                        try {
                            let[e] = await d.getInputAmount(u);
                            c = e
                        } catch (e) {
                            if (e.isInsufficientReservesError)
                                continue;
                            throw e
                        }
                        if (c.currency.equals(l))
                            sortedInsert(s, await ei.fromRoute(new en([d, ...a],t,n.currency), n, TradeType.EXACT_OUTPUT), r, er);
                        else if (i > 1 && e.length > 1) {
                            let u = e.slice(0, o).concat(e.slice(o + 1, e.length));
                            await ei.bestTradeExactOut(u, t, n, {
                                maxNumResults: r,
                                maxHops: i - 1
                            }, [d, ...a], c, s)
                        }
                    }
                }
                return s
            }
            constructor({routes: e, tradeType: t}) {
                let n = e[0].inputAmount.currency
                  , r = e[0].outputAmount.currency;
                invariant11(e.every(e=>{
                    let {route: t} = e;
                    return n.wrapped.equals(t.input.wrapped)
                }
                ), "INPUT_CURRENCY_MATCH"),
                invariant11(e.every(e=>{
                    let {route: t} = e;
                    return r.wrapped.equals(t.output.wrapped)
                }
                ), "OUTPUT_CURRENCY_MATCH");
                let i = e.map(e=>{
                    let {route: t} = e;
                    return t.pools.length
                }
                ).reduce((e,t)=>e + t, 0)
                  , a = new Set;
                for (let {route: t} of e)
                    for (let e of t.pools)
                        a.add(ee.getAddress(e.token0, e.token1, e.fee));
                invariant11(i == a.size, "POOLS_DUPLICATED"),
                this.swaps = e,
                this.tradeType = t
            }
        }
          , ea = class {
            static encodeMulticall(e) {
                return Array.isArray(e) || (e = [e]),
                1 === e.length ? e[0] : ea.INTERFACE.encodeFunctionData("multicall", [e])
            }
            constructor() {}
        }
          , eo = ea;
        eo.INTERFACE = new s.Interface([{
            inputs: [{
                internalType: "bytes[]",
                name: "data",
                type: "bytes[]"
            }],
            name: "multicall",
            outputs: [{
                internalType: "bytes[]",
                name: "results",
                type: "bytes[]"
            }],
            stateMutability: "payable",
            type: "function"
        }]);
        var es = class {
            static encodePermit(e, t) {
                return "nonce"in t ? es.INTERFACE.encodeFunctionData("selfPermitAllowed", [e.address, R(t.nonce), R(t.expiry), t.v, t.r, t.s]) : es.INTERFACE.encodeFunctionData("selfPermit", [e.address, R(t.amount), R(t.deadline), t.v, t.r, t.s])
            }
            constructor() {}
        }
          , eu = es;
        eu.INTERFACE = new s.Interface([{
            inputs: [{
                internalType: "address",
                name: "token",
                type: "address"
            }, {
                internalType: "uint256",
                name: "value",
                type: "uint256"
            }, {
                internalType: "uint256",
                name: "deadline",
                type: "uint256"
            }, {
                internalType: "uint8",
                name: "v",
                type: "uint8"
            }, {
                internalType: "bytes32",
                name: "r",
                type: "bytes32"
            }, {
                internalType: "bytes32",
                name: "s",
                type: "bytes32"
            }],
            name: "selfPermit",
            outputs: [],
            stateMutability: "payable",
            type: "function"
        }, {
            inputs: [{
                internalType: "address",
                name: "token",
                type: "address"
            }, {
                internalType: "uint256",
                name: "nonce",
                type: "uint256"
            }, {
                internalType: "uint256",
                name: "expiry",
                type: "uint256"
            }, {
                internalType: "uint8",
                name: "v",
                type: "uint8"
            }, {
                internalType: "bytes32",
                name: "r",
                type: "bytes32"
            }, {
                internalType: "bytes32",
                name: "s",
                type: "bytes32"
            }],
            name: "selfPermitAllowed",
            outputs: [],
            stateMutability: "payable",
            type: "function"
        }, {
            inputs: [{
                internalType: "address",
                name: "token",
                type: "address"
            }, {
                internalType: "uint256",
                name: "nonce",
                type: "uint256"
            }, {
                internalType: "uint256",
                name: "expiry",
                type: "uint256"
            }, {
                internalType: "uint8",
                name: "v",
                type: "uint8"
            }, {
                internalType: "bytes32",
                name: "r",
                type: "bytes32"
            }, {
                internalType: "bytes32",
                name: "s",
                type: "bytes32"
            }],
            name: "selfPermitAllowedIfNecessary",
            outputs: [],
            stateMutability: "payable",
            type: "function"
        }, {
            inputs: [{
                internalType: "address",
                name: "token",
                type: "address"
            }, {
                internalType: "uint256",
                name: "value",
                type: "uint256"
            }, {
                internalType: "uint256",
                name: "deadline",
                type: "uint256"
            }, {
                internalType: "uint8",
                name: "v",
                type: "uint8"
            }, {
                internalType: "bytes32",
                name: "r",
                type: "bytes32"
            }, {
                internalType: "bytes32",
                name: "s",
                type: "bytes32"
            }],
            name: "selfPermitIfNecessary",
            outputs: [],
            stateMutability: "payable",
            type: "function"
        }]);
        var el = class {
            static encodeFeeBips(e) {
                return R(e.multiply(1e4).quotient)
            }
            static encodeUnwrapWETH9(e, t, n) {
                if (t = (0,
                i.qn)(t),
                n) {
                    let r = this.encodeFeeBips(n.fee)
                      , a = (0,
                    i.qn)(n.recipient);
                    return el.INTERFACE.encodeFunctionData("unwrapWETH9WithFee", [R(e), t, r, a])
                }
                return el.INTERFACE.encodeFunctionData("unwrapWETH9", [R(e), t])
            }
            static encodeSweepToken(e, t, n, r) {
                if (n = (0,
                i.qn)(n),
                r) {
                    let a = this.encodeFeeBips(r.fee)
                      , o = (0,
                    i.qn)(r.recipient);
                    return el.INTERFACE.encodeFunctionData("sweepTokenWithFee", [e.address, R(t), n, a, o])
                }
                return el.INTERFACE.encodeFunctionData("sweepToken", [e.address, R(t), n])
            }
            static encodeRefundETH() {
                return el.INTERFACE.encodeFunctionData("refundETH")
            }
            constructor() {}
        }
          , ec = el;
        ec.INTERFACE = new s.Interface([{
            inputs: [],
            name: "refundETH",
            outputs: [],
            stateMutability: "payable",
            type: "function"
        }, {
            inputs: [{
                internalType: "address",
                name: "token",
                type: "address"
            }, {
                internalType: "uint256",
                name: "amountMinimum",
                type: "uint256"
            }, {
                internalType: "address",
                name: "recipient",
                type: "address"
            }],
            name: "sweepToken",
            outputs: [],
            stateMutability: "payable",
            type: "function"
        }, {
            inputs: [{
                internalType: "address",
                name: "token",
                type: "address"
            }, {
                internalType: "uint256",
                name: "amountMinimum",
                type: "uint256"
            }, {
                internalType: "address",
                name: "recipient",
                type: "address"
            }, {
                internalType: "uint256",
                name: "feeBips",
                type: "uint256"
            }, {
                internalType: "address",
                name: "feeRecipient",
                type: "address"
            }],
            name: "sweepTokenWithFee",
            outputs: [],
            stateMutability: "payable",
            type: "function"
        }, {
            inputs: [{
                internalType: "uint256",
                name: "amountMinimum",
                type: "uint256"
            }, {
                internalType: "address",
                name: "recipient",
                type: "address"
            }],
            name: "unwrapWETH9",
            outputs: [],
            stateMutability: "payable",
            type: "function"
        }, {
            inputs: [{
                internalType: "uint256",
                name: "amountMinimum",
                type: "uint256"
            }, {
                internalType: "address",
                name: "recipient",
                type: "address"
            }, {
                internalType: "uint256",
                name: "feeBips",
                type: "uint256"
            }, {
                internalType: "address",
                name: "feeRecipient",
                type: "address"
            }],
            name: "unwrapWETH9WithFee",
            outputs: [],
            stateMutability: "payable",
            type: "function"
        }]);
        var ed = R(2n ** 128n - 1n);
        function ep(e) {
            return Object.keys(e).some(e=>"recipient" === e)
        }
        var ef = class {
            static encodeCreate(e) {
                return ef.INTERFACE.encodeFunctionData("createAndInitializePoolIfNecessary", [e.token0.address, e.token1.address, e.fee, R(e.sqrtRatioX96)])
            }
            static createCallParameters(e) {
                return {
                    calldata: this.encodeCreate(e),
                    value: R(0)
                }
            }
            static addCallParameters(e, t) {
                (0,
                a.Z)(e.liquidity > 0n, "ZERO_LIQUIDITY");
                let n = []
                  , {amount0: r, amount1: o} = e.mintAmounts
                  , s = e.mintAmountsWithSlippage(t.slippageTolerance)
                  , u = R(s.amount0)
                  , l = R(s.amount1)
                  , c = R(t.deadline);
                if (ep(t) && t.createPool && n.push(this.encodeCreate(e.pool)),
                t.token0Permit && n.push(eu.encodePermit(e.pool.token0, t.token0Permit)),
                t.token1Permit && n.push(eu.encodePermit(e.pool.token1, t.token1Permit)),
                ep(t)) {
                    let a = (0,
                    i.qn)(t.recipient);
                    n.push(ef.INTERFACE.encodeFunctionData("mint", [{
                        token0: e.pool.token0.address,
                        token1: e.pool.token1.address,
                        fee: e.pool.fee,
                        tickLower: e.tickLower,
                        tickUpper: e.tickUpper,
                        amount0Desired: R(r),
                        amount1Desired: R(o),
                        amount0Min: u,
                        amount1Min: l,
                        recipient: a,
                        deadline: c
                    }]))
                } else
                    n.push(ef.INTERFACE.encodeFunctionData("increaseLiquidity", [{
                        tokenId: R(t.tokenId),
                        amount0Desired: R(r),
                        amount1Desired: R(o),
                        amount0Min: u,
                        amount1Min: l,
                        deadline: c
                    }]));
                let d = R(0);
                if (t.useNative) {
                    let {wrapped: i} = t.useNative;
                    (0,
                    a.Z)(e.pool.token0.equals(i) || e.pool.token1.equals(i), "NO_WETH");
                    let s = e.pool.token0.equals(i) ? r : o;
                    s > 0n && n.push(ec.encodeRefundETH()),
                    d = R(s)
                }
                return {
                    calldata: eo.encodeMulticall(n),
                    value: d
                }
            }
            static encodeCollect(e) {
                let t = []
                  , n = R(e.tokenId)
                  , r = e.expectedCurrencyOwed0.currency.isNative || e.expectedCurrencyOwed1.currency.isNative
                  , a = (0,
                i.qn)(e.recipient);
                if (t.push(ef.INTERFACE.encodeFunctionData("collect", [{
                    tokenId: n,
                    recipient: r ? c : a,
                    amount0Max: ed,
                    amount1Max: ed
                }])),
                r) {
                    let n = e.expectedCurrencyOwed0.currency.isNative ? e.expectedCurrencyOwed0.quotient : e.expectedCurrencyOwed1.quotient
                      , r = e.expectedCurrencyOwed0.currency.isNative ? e.expectedCurrencyOwed1.currency : e.expectedCurrencyOwed0.currency
                      , i = e.expectedCurrencyOwed0.currency.isNative ? e.expectedCurrencyOwed1.quotient : e.expectedCurrencyOwed0.quotient;
                    t.push(ec.encodeUnwrapWETH9(n, a)),
                    t.push(ec.encodeSweepToken(r, i, a))
                }
                return t
            }
            static collectCallParameters(e) {
                let t = ef.encodeCollect(e);
                return {
                    calldata: eo.encodeMulticall(t),
                    value: R(0)
                }
            }
            static removeCallParameters(e, t) {
                let n = []
                  , r = R(t.deadline)
                  , o = R(t.tokenId)
                  , s = new et({
                    pool: e.pool,
                    liquidity: t.liquidityPercentage.multiply(e.liquidity).quotient,
                    tickLower: e.tickLower,
                    tickUpper: e.tickUpper
                });
                (0,
                a.Z)(s.liquidity > 0n, "ZERO_LIQUIDITY");
                let {amount0: u, amount1: l} = s.burnAmountsWithSlippage(t.slippageTolerance);
                t.permit && n.push(ef.INTERFACE.encodeFunctionData("permit", [(0,
                i.qn)(t.permit.spender), o, R(t.permit.deadline), t.permit.v, t.permit.r, t.permit.s])),
                n.push(ef.INTERFACE.encodeFunctionData("decreaseLiquidity", [{
                    tokenId: o,
                    liquidity: R(s.liquidity),
                    amount0Min: R(u),
                    amount1Min: R(l),
                    deadline: r
                }]));
                let {expectedCurrencyOwed0: c, expectedCurrencyOwed1: d, ...p} = t.collectOptions;
                return n.push(...ef.encodeCollect({
                    tokenId: R(t.tokenId),
                    expectedCurrencyOwed0: c.add(i.ih.fromRawAmount(c.currency, u)),
                    expectedCurrencyOwed1: d.add(i.ih.fromRawAmount(d.currency, l)),
                    ...p
                })),
                t.liquidityPercentage.equalTo(1n) ? t.burnToken && n.push(ef.INTERFACE.encodeFunctionData("burn", [o])) : (0,
                a.Z)(!0 !== t.burnToken, "CANNOT_BURN"),
                {
                    calldata: eo.encodeMulticall(n),
                    value: R(0)
                }
            }
            static safeTransferFromParameters(e) {
                let t = (0,
                i.qn)(e.recipient)
                  , n = (0,
                i.qn)(e.sender);
                return {
                    calldata: e.data ? ef.INTERFACE.encodeFunctionData("safeTransferFrom(address,address,uint256,bytes)", [n, t, R(e.tokenId), e.data]) : ef.INTERFACE.encodeFunctionData("safeTransferFrom(address,address,uint256)", [n, t, R(e.tokenId)]),
                    value: R(0)
                }
            }
            constructor() {}
        }
          , eh = ef;
        eh.INTERFACE = new s.Interface([{
            inputs: [{
                internalType: "address",
                name: "_deployer",
                type: "address"
            }, {
                internalType: "address",
                name: "_factory",
                type: "address"
            }, {
                internalType: "address",
                name: "_WETH9",
                type: "address"
            }, {
                internalType: "address",
                name: "_tokenDescriptor_",
                type: "address"
            }],
            stateMutability: "nonpayable",
            type: "constructor"
        }, {
            anonymous: !1,
            inputs: [{
                indexed: !0,
                internalType: "address",
                name: "owner",
                type: "address"
            }, {
                indexed: !0,
                internalType: "address",
                name: "approved",
                type: "address"
            }, {
                indexed: !0,
                internalType: "uint256",
                name: "tokenId",
                type: "uint256"
            }],
            name: "Approval",
            type: "event"
        }, {
            anonymous: !1,
            inputs: [{
                indexed: !0,
                internalType: "address",
                name: "owner",
                type: "address"
            }, {
                indexed: !0,
                internalType: "address",
                name: "operator",
                type: "address"
            }, {
                indexed: !1,
                internalType: "bool",
                name: "approved",
                type: "bool"
            }],
            name: "ApprovalForAll",
            type: "event"
        }, {
            anonymous: !1,
            inputs: [{
                indexed: !0,
                internalType: "uint256",
                name: "tokenId",
                type: "uint256"
            }, {
                indexed: !1,
                internalType: "address",
                name: "recipient",
                type: "address"
            }, {
                indexed: !1,
                internalType: "uint256",
                name: "amount0",
                type: "uint256"
            }, {
                indexed: !1,
                internalType: "uint256",
                name: "amount1",
                type: "uint256"
            }],
            name: "Collect",
            type: "event"
        }, {
            anonymous: !1,
            inputs: [{
                indexed: !0,
                internalType: "uint256",
                name: "tokenId",
                type: "uint256"
            }, {
                indexed: !1,
                internalType: "uint128",
                name: "liquidity",
                type: "uint128"
            }, {
                indexed: !1,
                internalType: "uint256",
                name: "amount0",
                type: "uint256"
            }, {
                indexed: !1,
                internalType: "uint256",
                name: "amount1",
                type: "uint256"
            }],
            name: "DecreaseLiquidity",
            type: "event"
        }, {
            anonymous: !1,
            inputs: [{
                indexed: !0,
                internalType: "uint256",
                name: "tokenId",
                type: "uint256"
            }, {
                indexed: !1,
                internalType: "uint128",
                name: "liquidity",
                type: "uint128"
            }, {
                indexed: !1,
                internalType: "uint256",
                name: "amount0",
                type: "uint256"
            }, {
                indexed: !1,
                internalType: "uint256",
                name: "amount1",
                type: "uint256"
            }],
            name: "IncreaseLiquidity",
            type: "event"
        }, {
            anonymous: !1,
            inputs: [{
                indexed: !0,
                internalType: "address",
                name: "from",
                type: "address"
            }, {
                indexed: !0,
                internalType: "address",
                name: "to",
                type: "address"
            }, {
                indexed: !0,
                internalType: "uint256",
                name: "tokenId",
                type: "uint256"
            }],
            name: "Transfer",
            type: "event"
        }, {
            inputs: [],
            name: "DOMAIN_SEPARATOR",
            outputs: [{
                internalType: "bytes32",
                name: "",
                type: "bytes32"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [],
            name: "PERMIT_TYPEHASH",
            outputs: [{
                internalType: "bytes32",
                name: "",
                type: "bytes32"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [],
            name: "WETH9",
            outputs: [{
                internalType: "address",
                name: "",
                type: "address"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [{
                internalType: "address",
                name: "to",
                type: "address"
            }, {
                internalType: "uint256",
                name: "tokenId",
                type: "uint256"
            }],
            name: "approve",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function"
        }, {
            inputs: [{
                internalType: "address",
                name: "owner",
                type: "address"
            }],
            name: "balanceOf",
            outputs: [{
                internalType: "uint256",
                name: "",
                type: "uint256"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [],
            name: "baseURI",
            outputs: [{
                internalType: "string",
                name: "",
                type: "string"
            }],
            stateMutability: "pure",
            type: "function"
        }, {
            inputs: [{
                internalType: "uint256",
                name: "tokenId",
                type: "uint256"
            }],
            name: "burn",
            outputs: [],
            stateMutability: "payable",
            type: "function"
        }, {
            inputs: [{
                components: [{
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256"
                }, {
                    internalType: "address",
                    name: "recipient",
                    type: "address"
                }, {
                    internalType: "uint128",
                    name: "amount0Max",
                    type: "uint128"
                }, {
                    internalType: "uint128",
                    name: "amount1Max",
                    type: "uint128"
                }],
                internalType: "struct INonfungiblePositionManager.CollectParams",
                name: "params",
                type: "tuple"
            }],
            name: "collect",
            outputs: [{
                internalType: "uint256",
                name: "amount0",
                type: "uint256"
            }, {
                internalType: "uint256",
                name: "amount1",
                type: "uint256"
            }],
            stateMutability: "payable",
            type: "function"
        }, {
            inputs: [{
                internalType: "address",
                name: "token0",
                type: "address"
            }, {
                internalType: "address",
                name: "token1",
                type: "address"
            }, {
                internalType: "uint24",
                name: "fee",
                type: "uint24"
            }, {
                internalType: "uint160",
                name: "sqrtPriceX96",
                type: "uint160"
            }],
            name: "createAndInitializePoolIfNecessary",
            outputs: [{
                internalType: "address",
                name: "pool",
                type: "address"
            }],
            stateMutability: "payable",
            type: "function"
        }, {
            inputs: [{
                components: [{
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256"
                }, {
                    internalType: "uint128",
                    name: "liquidity",
                    type: "uint128"
                }, {
                    internalType: "uint256",
                    name: "amount0Min",
                    type: "uint256"
                }, {
                    internalType: "uint256",
                    name: "amount1Min",
                    type: "uint256"
                }, {
                    internalType: "uint256",
                    name: "deadline",
                    type: "uint256"
                }],
                internalType: "struct INonfungiblePositionManager.DecreaseLiquidityParams",
                name: "params",
                type: "tuple"
            }],
            name: "decreaseLiquidity",
            outputs: [{
                internalType: "uint256",
                name: "amount0",
                type: "uint256"
            }, {
                internalType: "uint256",
                name: "amount1",
                type: "uint256"
            }],
            stateMutability: "payable",
            type: "function"
        }, {
            inputs: [],
            name: "deployer",
            outputs: [{
                internalType: "address",
                name: "",
                type: "address"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [],
            name: "factory",
            outputs: [{
                internalType: "address",
                name: "",
                type: "address"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [{
                internalType: "uint256",
                name: "tokenId",
                type: "uint256"
            }],
            name: "getApproved",
            outputs: [{
                internalType: "address",
                name: "",
                type: "address"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [{
                components: [{
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256"
                }, {
                    internalType: "uint256",
                    name: "amount0Desired",
                    type: "uint256"
                }, {
                    internalType: "uint256",
                    name: "amount1Desired",
                    type: "uint256"
                }, {
                    internalType: "uint256",
                    name: "amount0Min",
                    type: "uint256"
                }, {
                    internalType: "uint256",
                    name: "amount1Min",
                    type: "uint256"
                }, {
                    internalType: "uint256",
                    name: "deadline",
                    type: "uint256"
                }],
                internalType: "struct INonfungiblePositionManager.IncreaseLiquidityParams",
                name: "params",
                type: "tuple"
            }],
            name: "increaseLiquidity",
            outputs: [{
                internalType: "uint128",
                name: "liquidity",
                type: "uint128"
            }, {
                internalType: "uint256",
                name: "amount0",
                type: "uint256"
            }, {
                internalType: "uint256",
                name: "amount1",
                type: "uint256"
            }],
            stateMutability: "payable",
            type: "function"
        }, {
            inputs: [{
                internalType: "address",
                name: "owner",
                type: "address"
            }, {
                internalType: "address",
                name: "operator",
                type: "address"
            }],
            name: "isApprovedForAll",
            outputs: [{
                internalType: "bool",
                name: "",
                type: "bool"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [{
                components: [{
                    internalType: "address",
                    name: "token0",
                    type: "address"
                }, {
                    internalType: "address",
                    name: "token1",
                    type: "address"
                }, {
                    internalType: "uint24",
                    name: "fee",
                    type: "uint24"
                }, {
                    internalType: "int24",
                    name: "tickLower",
                    type: "int24"
                }, {
                    internalType: "int24",
                    name: "tickUpper",
                    type: "int24"
                }, {
                    internalType: "uint256",
                    name: "amount0Desired",
                    type: "uint256"
                }, {
                    internalType: "uint256",
                    name: "amount1Desired",
                    type: "uint256"
                }, {
                    internalType: "uint256",
                    name: "amount0Min",
                    type: "uint256"
                }, {
                    internalType: "uint256",
                    name: "amount1Min",
                    type: "uint256"
                }, {
                    internalType: "address",
                    name: "recipient",
                    type: "address"
                }, {
                    internalType: "uint256",
                    name: "deadline",
                    type: "uint256"
                }],
                internalType: "struct INonfungiblePositionManager.MintParams",
                name: "params",
                type: "tuple"
            }],
            name: "mint",
            outputs: [{
                internalType: "uint256",
                name: "tokenId",
                type: "uint256"
            }, {
                internalType: "uint128",
                name: "liquidity",
                type: "uint128"
            }, {
                internalType: "uint256",
                name: "amount0",
                type: "uint256"
            }, {
                internalType: "uint256",
                name: "amount1",
                type: "uint256"
            }],
            stateMutability: "payable",
            type: "function"
        }, {
            inputs: [{
                internalType: "bytes[]",
                name: "data",
                type: "bytes[]"
            }],
            name: "multicall",
            outputs: [{
                internalType: "bytes[]",
                name: "results",
                type: "bytes[]"
            }],
            stateMutability: "payable",
            type: "function"
        }, {
            inputs: [],
            name: "name",
            outputs: [{
                internalType: "string",
                name: "",
                type: "string"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [{
                internalType: "uint256",
                name: "tokenId",
                type: "uint256"
            }],
            name: "ownerOf",
            outputs: [{
                internalType: "address",
                name: "",
                type: "address"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [{
                internalType: "uint256",
                name: "amount0Owed",
                type: "uint256"
            }, {
                internalType: "uint256",
                name: "amount1Owed",
                type: "uint256"
            }, {
                internalType: "bytes",
                name: "data",
                type: "bytes"
            }],
            name: "pancakeV3MintCallback",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function"
        }, {
            inputs: [{
                internalType: "address",
                name: "spender",
                type: "address"
            }, {
                internalType: "uint256",
                name: "tokenId",
                type: "uint256"
            }, {
                internalType: "uint256",
                name: "deadline",
                type: "uint256"
            }, {
                internalType: "uint8",
                name: "v",
                type: "uint8"
            }, {
                internalType: "bytes32",
                name: "r",
                type: "bytes32"
            }, {
                internalType: "bytes32",
                name: "s",
                type: "bytes32"
            }],
            name: "permit",
            outputs: [],
            stateMutability: "payable",
            type: "function"
        }, {
            inputs: [{
                internalType: "uint256",
                name: "tokenId",
                type: "uint256"
            }],
            name: "positions",
            outputs: [{
                internalType: "uint96",
                name: "nonce",
                type: "uint96"
            }, {
                internalType: "address",
                name: "operator",
                type: "address"
            }, {
                internalType: "address",
                name: "token0",
                type: "address"
            }, {
                internalType: "address",
                name: "token1",
                type: "address"
            }, {
                internalType: "uint24",
                name: "fee",
                type: "uint24"
            }, {
                internalType: "int24",
                name: "tickLower",
                type: "int24"
            }, {
                internalType: "int24",
                name: "tickUpper",
                type: "int24"
            }, {
                internalType: "uint128",
                name: "liquidity",
                type: "uint128"
            }, {
                internalType: "uint256",
                name: "feeGrowthInside0LastX128",
                type: "uint256"
            }, {
                internalType: "uint256",
                name: "feeGrowthInside1LastX128",
                type: "uint256"
            }, {
                internalType: "uint128",
                name: "tokensOwed0",
                type: "uint128"
            }, {
                internalType: "uint128",
                name: "tokensOwed1",
                type: "uint128"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [],
            name: "refundETH",
            outputs: [],
            stateMutability: "payable",
            type: "function"
        }, {
            inputs: [{
                internalType: "address",
                name: "from",
                type: "address"
            }, {
                internalType: "address",
                name: "to",
                type: "address"
            }, {
                internalType: "uint256",
                name: "tokenId",
                type: "uint256"
            }],
            name: "safeTransferFrom",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function"
        }, {
            inputs: [{
                internalType: "address",
                name: "from",
                type: "address"
            }, {
                internalType: "address",
                name: "to",
                type: "address"
            }, {
                internalType: "uint256",
                name: "tokenId",
                type: "uint256"
            }, {
                internalType: "bytes",
                name: "_data",
                type: "bytes"
            }],
            name: "safeTransferFrom",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function"
        }, {
            inputs: [{
                internalType: "address",
                name: "token",
                type: "address"
            }, {
                internalType: "uint256",
                name: "value",
                type: "uint256"
            }, {
                internalType: "uint256",
                name: "deadline",
                type: "uint256"
            }, {
                internalType: "uint8",
                name: "v",
                type: "uint8"
            }, {
                internalType: "bytes32",
                name: "r",
                type: "bytes32"
            }, {
                internalType: "bytes32",
                name: "s",
                type: "bytes32"
            }],
            name: "selfPermit",
            outputs: [],
            stateMutability: "payable",
            type: "function"
        }, {
            inputs: [{
                internalType: "address",
                name: "token",
                type: "address"
            }, {
                internalType: "uint256",
                name: "nonce",
                type: "uint256"
            }, {
                internalType: "uint256",
                name: "expiry",
                type: "uint256"
            }, {
                internalType: "uint8",
                name: "v",
                type: "uint8"
            }, {
                internalType: "bytes32",
                name: "r",
                type: "bytes32"
            }, {
                internalType: "bytes32",
                name: "s",
                type: "bytes32"
            }],
            name: "selfPermitAllowed",
            outputs: [],
            stateMutability: "payable",
            type: "function"
        }, {
            inputs: [{
                internalType: "address",
                name: "token",
                type: "address"
            }, {
                internalType: "uint256",
                name: "nonce",
                type: "uint256"
            }, {
                internalType: "uint256",
                name: "expiry",
                type: "uint256"
            }, {
                internalType: "uint8",
                name: "v",
                type: "uint8"
            }, {
                internalType: "bytes32",
                name: "r",
                type: "bytes32"
            }, {
                internalType: "bytes32",
                name: "s",
                type: "bytes32"
            }],
            name: "selfPermitAllowedIfNecessary",
            outputs: [],
            stateMutability: "payable",
            type: "function"
        }, {
            inputs: [{
                internalType: "address",
                name: "token",
                type: "address"
            }, {
                internalType: "uint256",
                name: "value",
                type: "uint256"
            }, {
                internalType: "uint256",
                name: "deadline",
                type: "uint256"
            }, {
                internalType: "uint8",
                name: "v",
                type: "uint8"
            }, {
                internalType: "bytes32",
                name: "r",
                type: "bytes32"
            }, {
                internalType: "bytes32",
                name: "s",
                type: "bytes32"
            }],
            name: "selfPermitIfNecessary",
            outputs: [],
            stateMutability: "payable",
            type: "function"
        }, {
            inputs: [{
                internalType: "address",
                name: "operator",
                type: "address"
            }, {
                internalType: "bool",
                name: "approved",
                type: "bool"
            }],
            name: "setApprovalForAll",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function"
        }, {
            inputs: [{
                internalType: "bytes4",
                name: "interfaceId",
                type: "bytes4"
            }],
            name: "supportsInterface",
            outputs: [{
                internalType: "bool",
                name: "",
                type: "bool"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [{
                internalType: "address",
                name: "token",
                type: "address"
            }, {
                internalType: "uint256",
                name: "amountMinimum",
                type: "uint256"
            }, {
                internalType: "address",
                name: "recipient",
                type: "address"
            }],
            name: "sweepToken",
            outputs: [],
            stateMutability: "payable",
            type: "function"
        }, {
            inputs: [],
            name: "symbol",
            outputs: [{
                internalType: "string",
                name: "",
                type: "string"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [{
                internalType: "uint256",
                name: "index",
                type: "uint256"
            }],
            name: "tokenByIndex",
            outputs: [{
                internalType: "uint256",
                name: "",
                type: "uint256"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [{
                internalType: "address",
                name: "owner",
                type: "address"
            }, {
                internalType: "uint256",
                name: "index",
                type: "uint256"
            }],
            name: "tokenOfOwnerByIndex",
            outputs: [{
                internalType: "uint256",
                name: "",
                type: "uint256"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [{
                internalType: "uint256",
                name: "tokenId",
                type: "uint256"
            }],
            name: "tokenURI",
            outputs: [{
                internalType: "string",
                name: "",
                type: "string"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [],
            name: "totalSupply",
            outputs: [{
                internalType: "uint256",
                name: "",
                type: "uint256"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [{
                internalType: "address",
                name: "from",
                type: "address"
            }, {
                internalType: "address",
                name: "to",
                type: "address"
            }, {
                internalType: "uint256",
                name: "tokenId",
                type: "uint256"
            }],
            name: "transferFrom",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function"
        }, {
            inputs: [{
                internalType: "uint256",
                name: "amountMinimum",
                type: "uint256"
            }, {
                internalType: "address",
                name: "recipient",
                type: "address"
            }],
            name: "unwrapWETH9",
            outputs: [],
            stateMutability: "payable",
            type: "function"
        }, {
            stateMutability: "payable",
            type: "receive"
        }]);
        var em = class {
            static quoteCallParameters(e, t, n) {
                let r, o = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : {}, s = 1 === e.pools.length, u = R(t.quotient), l = o.useQuoterV2 ? this.V2INTERFACE : this.V1INTERFACE;
                if (s) {
                    var c;
                    let t = {
                        tokenIn: e.tokenPath[0].address,
                        tokenOut: e.tokenPath[1].address,
                        fee: e.pools[0].fee,
                        sqrtPriceLimitX96: R(null !== (c = null == o ? void 0 : o.sqrtPriceLimitX96) && void 0 !== c ? c : 0)
                    }
                      , a = {
                        ...t,
                        ...n === i.YL.EXACT_INPUT ? {
                            amountIn: u
                        } : {
                            amount: u
                        }
                    }
                      , s = [t.tokenIn, t.tokenOut, t.fee, u, t.sqrtPriceLimitX96]
                      , d = n === i.YL.EXACT_INPUT ? "quoteExactInputSingle" : "quoteExactOutputSingle";
                    r = l.encodeFunctionData(d, o.useQuoterV2 ? [a] : s)
                } else {
                    (0,
                    a.Z)((null == o ? void 0 : o.sqrtPriceLimitX96) === void 0, "MULTIHOP_PRICE_LIMIT");
                    let t = F(e, n === i.YL.EXACT_OUTPUT)
                      , s = n === i.YL.EXACT_INPUT ? "quoteExactInput" : "quoteExactOutput";
                    r = l.encodeFunctionData(s, [t, u])
                }
                return {
                    calldata: r,
                    value: R(0)
                }
            }
        }
        ;
        em.V1INTERFACE = new s.Interface([{
            inputs: [{
                internalType: "address",
                name: "_deployer",
                type: "address"
            }, {
                internalType: "address",
                name: "_factory",
                type: "address"
            }, {
                internalType: "address",
                name: "_WETH9",
                type: "address"
            }],
            stateMutability: "nonpayable",
            type: "constructor"
        }, {
            inputs: [],
            name: "WETH9",
            outputs: [{
                internalType: "address",
                name: "",
                type: "address"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [],
            name: "deployer",
            outputs: [{
                internalType: "address",
                name: "",
                type: "address"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [],
            name: "factory",
            outputs: [{
                internalType: "address",
                name: "",
                type: "address"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [{
                internalType: "int256",
                name: "amount0Delta",
                type: "int256"
            }, {
                internalType: "int256",
                name: "amount1Delta",
                type: "int256"
            }, {
                internalType: "bytes",
                name: "path",
                type: "bytes"
            }],
            name: "pancakeV3SwapCallback",
            outputs: [],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [{
                internalType: "bytes",
                name: "path",
                type: "bytes"
            }, {
                internalType: "uint256",
                name: "amountIn",
                type: "uint256"
            }],
            name: "quoteExactInput",
            outputs: [{
                internalType: "uint256",
                name: "amountOut",
                type: "uint256"
            }],
            stateMutability: "nonpayable",
            type: "function"
        }, {
            inputs: [{
                internalType: "address",
                name: "tokenIn",
                type: "address"
            }, {
                internalType: "address",
                name: "tokenOut",
                type: "address"
            }, {
                internalType: "uint24",
                name: "fee",
                type: "uint24"
            }, {
                internalType: "uint256",
                name: "amountIn",
                type: "uint256"
            }, {
                internalType: "uint160",
                name: "sqrtPriceLimitX96",
                type: "uint160"
            }],
            name: "quoteExactInputSingle",
            outputs: [{
                internalType: "uint256",
                name: "amountOut",
                type: "uint256"
            }],
            stateMutability: "nonpayable",
            type: "function"
        }, {
            inputs: [{
                internalType: "bytes",
                name: "path",
                type: "bytes"
            }, {
                internalType: "uint256",
                name: "amountOut",
                type: "uint256"
            }],
            name: "quoteExactOutput",
            outputs: [{
                internalType: "uint256",
                name: "amountIn",
                type: "uint256"
            }],
            stateMutability: "nonpayable",
            type: "function"
        }, {
            inputs: [{
                internalType: "address",
                name: "tokenIn",
                type: "address"
            }, {
                internalType: "address",
                name: "tokenOut",
                type: "address"
            }, {
                internalType: "uint24",
                name: "fee",
                type: "uint24"
            }, {
                internalType: "uint256",
                name: "amountOut",
                type: "uint256"
            }, {
                internalType: "uint160",
                name: "sqrtPriceLimitX96",
                type: "uint160"
            }],
            name: "quoteExactOutputSingle",
            outputs: [{
                internalType: "uint256",
                name: "amountIn",
                type: "uint256"
            }],
            stateMutability: "nonpayable",
            type: "function"
        }]),
        em.V2INTERFACE = new s.Interface([{
            inputs: [{
                internalType: "address",
                name: "_deployer",
                type: "address"
            }, {
                internalType: "address",
                name: "_factory",
                type: "address"
            }, {
                internalType: "address",
                name: "_WETH9",
                type: "address"
            }],
            stateMutability: "nonpayable",
            type: "constructor"
        }, {
            inputs: [],
            name: "WETH9",
            outputs: [{
                internalType: "address",
                name: "",
                type: "address"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [],
            name: "deployer",
            outputs: [{
                internalType: "address",
                name: "",
                type: "address"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [],
            name: "factory",
            outputs: [{
                internalType: "address",
                name: "",
                type: "address"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [{
                internalType: "int256",
                name: "amount0Delta",
                type: "int256"
            }, {
                internalType: "int256",
                name: "amount1Delta",
                type: "int256"
            }, {
                internalType: "bytes",
                name: "path",
                type: "bytes"
            }],
            name: "pancakeV3SwapCallback",
            outputs: [],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [{
                internalType: "bytes",
                name: "path",
                type: "bytes"
            }, {
                internalType: "uint256",
                name: "amountIn",
                type: "uint256"
            }],
            name: "quoteExactInput",
            outputs: [{
                internalType: "uint256",
                name: "amountOut",
                type: "uint256"
            }, {
                internalType: "uint160[]",
                name: "sqrtPriceX96AfterList",
                type: "uint160[]"
            }, {
                internalType: "uint32[]",
                name: "initializedTicksCrossedList",
                type: "uint32[]"
            }, {
                internalType: "uint256",
                name: "gasEstimate",
                type: "uint256"
            }],
            stateMutability: "nonpayable",
            type: "function"
        }, {
            inputs: [{
                components: [{
                    internalType: "address",
                    name: "tokenIn",
                    type: "address"
                }, {
                    internalType: "address",
                    name: "tokenOut",
                    type: "address"
                }, {
                    internalType: "uint256",
                    name: "amountIn",
                    type: "uint256"
                }, {
                    internalType: "uint24",
                    name: "fee",
                    type: "uint24"
                }, {
                    internalType: "uint160",
                    name: "sqrtPriceLimitX96",
                    type: "uint160"
                }],
                internalType: "struct IQuoterV2.QuoteExactInputSingleParams",
                name: "params",
                type: "tuple"
            }],
            name: "quoteExactInputSingle",
            outputs: [{
                internalType: "uint256",
                name: "amountOut",
                type: "uint256"
            }, {
                internalType: "uint160",
                name: "sqrtPriceX96After",
                type: "uint160"
            }, {
                internalType: "uint32",
                name: "initializedTicksCrossed",
                type: "uint32"
            }, {
                internalType: "uint256",
                name: "gasEstimate",
                type: "uint256"
            }],
            stateMutability: "nonpayable",
            type: "function"
        }, {
            inputs: [{
                internalType: "bytes",
                name: "path",
                type: "bytes"
            }, {
                internalType: "uint256",
                name: "amountOut",
                type: "uint256"
            }],
            name: "quoteExactOutput",
            outputs: [{
                internalType: "uint256",
                name: "amountIn",
                type: "uint256"
            }, {
                internalType: "uint160[]",
                name: "sqrtPriceX96AfterList",
                type: "uint160[]"
            }, {
                internalType: "uint32[]",
                name: "initializedTicksCrossedList",
                type: "uint32[]"
            }, {
                internalType: "uint256",
                name: "gasEstimate",
                type: "uint256"
            }],
            stateMutability: "nonpayable",
            type: "function"
        }, {
            inputs: [{
                components: [{
                    internalType: "address",
                    name: "tokenIn",
                    type: "address"
                }, {
                    internalType: "address",
                    name: "tokenOut",
                    type: "address"
                }, {
                    internalType: "uint256",
                    name: "amount",
                    type: "uint256"
                }, {
                    internalType: "uint24",
                    name: "fee",
                    type: "uint24"
                }, {
                    internalType: "uint160",
                    name: "sqrtPriceLimitX96",
                    type: "uint160"
                }],
                internalType: "struct IQuoterV2.QuoteExactOutputSingleParams",
                name: "params",
                type: "tuple"
            }],
            name: "quoteExactOutputSingle",
            outputs: [{
                internalType: "uint256",
                name: "amountIn",
                type: "uint256"
            }, {
                internalType: "uint160",
                name: "sqrtPriceX96After",
                type: "uint160"
            }, {
                internalType: "uint32",
                name: "initializedTicksCrossed",
                type: "uint32"
            }, {
                internalType: "uint256",
                name: "gasEstimate",
                type: "uint256"
            }],
            stateMutability: "nonpayable",
            type: "function"
        }]);
        var ey = class {
            static encodeClaim(e, t) {
                var n;
                let r = [];
                r.push(ey.INTERFACE.encodeFunctionData("unstakeToken", [this._encodeIncentiveKey(e), R(t.tokenId)]));
                let a = (0,
                i.qn)(t.recipient)
                  , o = null !== (n = t.amount) && void 0 !== n ? n : 0;
                return r.push(ey.INTERFACE.encodeFunctionData("claimReward", [e.rewardToken.address, a, R(o)])),
                r
            }
            static collectRewards(e, t) {
                e = Array.isArray(e) ? e : [e];
                let n = [];
                for (let r = 0; r < e.length; r++) {
                    let i = e[r];
                    (n = n.concat(this.encodeClaim(i, t))).push(ey.INTERFACE.encodeFunctionData("stakeToken", [this._encodeIncentiveKey(i), R(t.tokenId)]))
                }
                return {
                    calldata: eo.encodeMulticall(n),
                    value: R(0)
                }
            }
            static withdrawToken(e, t) {
                let n = [];
                e = Array.isArray(e) ? e : [e];
                let r = {
                    tokenId: t.tokenId,
                    recipient: t.recipient,
                    amount: t.amount
                };
                for (let t = 0; t < e.length; t++) {
                    let i = e[t];
                    n = n.concat(this.encodeClaim(i, r))
                }
                let a = (0,
                i.qn)(t.owner);
                return n.push(ey.INTERFACE.encodeFunctionData("withdrawToken", [R(t.tokenId), a, t.data ? t.data : R(0)])),
                {
                    calldata: eo.encodeMulticall(n),
                    value: R(0)
                }
            }
            static encodeDeposit(e) {
                let t;
                if ((e = Array.isArray(e) ? e : [e]).length > 1) {
                    let n = [];
                    for (let t = 0; t < e.length; t++) {
                        let r = e[t];
                        n.push(this._encodeIncentiveKey(r))
                    }
                    t = s.defaultAbiCoder.encode([`${ey.INCENTIVE_KEY_ABI}[]`], [n])
                } else
                    t = s.defaultAbiCoder.encode([ey.INCENTIVE_KEY_ABI], [this._encodeIncentiveKey(e[0])]);
                return t
            }
            static _encodeIncentiveKey(e) {
                let {token0: t, token1: n, fee: r} = e.pool
                  , a = (0,
                i.qn)(e.refundee);
                return {
                    rewardToken: e.rewardToken.address,
                    pool: ee.getAddress(t, n, r),
                    startTime: R(e.startTime),
                    endTime: R(e.endTime),
                    refundee: a
                }
            }
            constructor() {}
        }
          , eg = ey;
        eg.INTERFACE = new s.Interface([{
            inputs: [{
                internalType: "contract IUniswapV3Factory",
                name: "_factory",
                type: "address"
            }, {
                internalType: "contract INonfungiblePositionManager",
                name: "_nonfungiblePositionManager",
                type: "address"
            }, {
                internalType: "uint256",
                name: "_maxIncentiveStartLeadTime",
                type: "uint256"
            }, {
                internalType: "uint256",
                name: "_maxIncentiveDuration",
                type: "uint256"
            }],
            stateMutability: "nonpayable",
            type: "constructor"
        }, {
            anonymous: !1,
            inputs: [{
                indexed: !0,
                internalType: "uint256",
                name: "tokenId",
                type: "uint256"
            }, {
                indexed: !0,
                internalType: "address",
                name: "oldOwner",
                type: "address"
            }, {
                indexed: !0,
                internalType: "address",
                name: "newOwner",
                type: "address"
            }],
            name: "DepositTransferred",
            type: "event"
        }, {
            anonymous: !1,
            inputs: [{
                indexed: !0,
                internalType: "contract IERC20Minimal",
                name: "rewardToken",
                type: "address"
            }, {
                indexed: !0,
                internalType: "contract IUniswapV3Pool",
                name: "pool",
                type: "address"
            }, {
                indexed: !1,
                internalType: "uint256",
                name: "startTime",
                type: "uint256"
            }, {
                indexed: !1,
                internalType: "uint256",
                name: "endTime",
                type: "uint256"
            }, {
                indexed: !1,
                internalType: "address",
                name: "refundee",
                type: "address"
            }, {
                indexed: !1,
                internalType: "uint256",
                name: "reward",
                type: "uint256"
            }],
            name: "IncentiveCreated",
            type: "event"
        }, {
            anonymous: !1,
            inputs: [{
                indexed: !0,
                internalType: "bytes32",
                name: "incentiveId",
                type: "bytes32"
            }, {
                indexed: !1,
                internalType: "uint256",
                name: "refund",
                type: "uint256"
            }],
            name: "IncentiveEnded",
            type: "event"
        }, {
            anonymous: !1,
            inputs: [{
                indexed: !0,
                internalType: "address",
                name: "to",
                type: "address"
            }, {
                indexed: !1,
                internalType: "uint256",
                name: "reward",
                type: "uint256"
            }],
            name: "RewardClaimed",
            type: "event"
        }, {
            anonymous: !1,
            inputs: [{
                indexed: !0,
                internalType: "uint256",
                name: "tokenId",
                type: "uint256"
            }, {
                indexed: !0,
                internalType: "bytes32",
                name: "incentiveId",
                type: "bytes32"
            }, {
                indexed: !1,
                internalType: "uint128",
                name: "liquidity",
                type: "uint128"
            }],
            name: "TokenStaked",
            type: "event"
        }, {
            anonymous: !1,
            inputs: [{
                indexed: !0,
                internalType: "uint256",
                name: "tokenId",
                type: "uint256"
            }, {
                indexed: !0,
                internalType: "bytes32",
                name: "incentiveId",
                type: "bytes32"
            }],
            name: "TokenUnstaked",
            type: "event"
        }, {
            inputs: [{
                internalType: "contract IERC20Minimal",
                name: "rewardToken",
                type: "address"
            }, {
                internalType: "address",
                name: "to",
                type: "address"
            }, {
                internalType: "uint256",
                name: "amountRequested",
                type: "uint256"
            }],
            name: "claimReward",
            outputs: [{
                internalType: "uint256",
                name: "reward",
                type: "uint256"
            }],
            stateMutability: "nonpayable",
            type: "function"
        }, {
            inputs: [{
                components: [{
                    internalType: "contract IERC20Minimal",
                    name: "rewardToken",
                    type: "address"
                }, {
                    internalType: "contract IUniswapV3Pool",
                    name: "pool",
                    type: "address"
                }, {
                    internalType: "uint256",
                    name: "startTime",
                    type: "uint256"
                }, {
                    internalType: "uint256",
                    name: "endTime",
                    type: "uint256"
                }, {
                    internalType: "address",
                    name: "refundee",
                    type: "address"
                }],
                internalType: "struct IUniswapV3Staker.IncentiveKey",
                name: "key",
                type: "tuple"
            }, {
                internalType: "uint256",
                name: "reward",
                type: "uint256"
            }],
            name: "createIncentive",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function"
        }, {
            inputs: [{
                internalType: "uint256",
                name: "",
                type: "uint256"
            }],
            name: "deposits",
            outputs: [{
                internalType: "address",
                name: "owner",
                type: "address"
            }, {
                internalType: "uint48",
                name: "numberOfStakes",
                type: "uint48"
            }, {
                internalType: "int24",
                name: "tickLower",
                type: "int24"
            }, {
                internalType: "int24",
                name: "tickUpper",
                type: "int24"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [{
                components: [{
                    internalType: "contract IERC20Minimal",
                    name: "rewardToken",
                    type: "address"
                }, {
                    internalType: "contract IUniswapV3Pool",
                    name: "pool",
                    type: "address"
                }, {
                    internalType: "uint256",
                    name: "startTime",
                    type: "uint256"
                }, {
                    internalType: "uint256",
                    name: "endTime",
                    type: "uint256"
                }, {
                    internalType: "address",
                    name: "refundee",
                    type: "address"
                }],
                internalType: "struct IUniswapV3Staker.IncentiveKey",
                name: "key",
                type: "tuple"
            }],
            name: "endIncentive",
            outputs: [{
                internalType: "uint256",
                name: "refund",
                type: "uint256"
            }],
            stateMutability: "nonpayable",
            type: "function"
        }, {
            inputs: [],
            name: "factory",
            outputs: [{
                internalType: "contract IUniswapV3Factory",
                name: "",
                type: "address"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [{
                components: [{
                    internalType: "contract IERC20Minimal",
                    name: "rewardToken",
                    type: "address"
                }, {
                    internalType: "contract IUniswapV3Pool",
                    name: "pool",
                    type: "address"
                }, {
                    internalType: "uint256",
                    name: "startTime",
                    type: "uint256"
                }, {
                    internalType: "uint256",
                    name: "endTime",
                    type: "uint256"
                }, {
                    internalType: "address",
                    name: "refundee",
                    type: "address"
                }],
                internalType: "struct IUniswapV3Staker.IncentiveKey",
                name: "key",
                type: "tuple"
            }, {
                internalType: "uint256",
                name: "tokenId",
                type: "uint256"
            }],
            name: "getRewardInfo",
            outputs: [{
                internalType: "uint256",
                name: "reward",
                type: "uint256"
            }, {
                internalType: "uint160",
                name: "secondsInsideX128",
                type: "uint160"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [{
                internalType: "bytes32",
                name: "",
                type: "bytes32"
            }],
            name: "incentives",
            outputs: [{
                internalType: "uint256",
                name: "totalRewardUnclaimed",
                type: "uint256"
            }, {
                internalType: "uint160",
                name: "totalSecondsClaimedX128",
                type: "uint160"
            }, {
                internalType: "uint96",
                name: "numberOfStakes",
                type: "uint96"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [],
            name: "maxIncentiveDuration",
            outputs: [{
                internalType: "uint256",
                name: "",
                type: "uint256"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [],
            name: "maxIncentiveStartLeadTime",
            outputs: [{
                internalType: "uint256",
                name: "",
                type: "uint256"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [{
                internalType: "bytes[]",
                name: "data",
                type: "bytes[]"
            }],
            name: "multicall",
            outputs: [{
                internalType: "bytes[]",
                name: "results",
                type: "bytes[]"
            }],
            stateMutability: "payable",
            type: "function"
        }, {
            inputs: [],
            name: "nonfungiblePositionManager",
            outputs: [{
                internalType: "contract INonfungiblePositionManager",
                name: "",
                type: "address"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [{
                internalType: "address",
                name: "",
                type: "address"
            }, {
                internalType: "address",
                name: "from",
                type: "address"
            }, {
                internalType: "uint256",
                name: "tokenId",
                type: "uint256"
            }, {
                internalType: "bytes",
                name: "data",
                type: "bytes"
            }],
            name: "onERC721Received",
            outputs: [{
                internalType: "bytes4",
                name: "",
                type: "bytes4"
            }],
            stateMutability: "nonpayable",
            type: "function"
        }, {
            inputs: [{
                internalType: "contract IERC20Minimal",
                name: "",
                type: "address"
            }, {
                internalType: "address",
                name: "",
                type: "address"
            }],
            name: "rewards",
            outputs: [{
                internalType: "uint256",
                name: "",
                type: "uint256"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [{
                components: [{
                    internalType: "contract IERC20Minimal",
                    name: "rewardToken",
                    type: "address"
                }, {
                    internalType: "contract IUniswapV3Pool",
                    name: "pool",
                    type: "address"
                }, {
                    internalType: "uint256",
                    name: "startTime",
                    type: "uint256"
                }, {
                    internalType: "uint256",
                    name: "endTime",
                    type: "uint256"
                }, {
                    internalType: "address",
                    name: "refundee",
                    type: "address"
                }],
                internalType: "struct IUniswapV3Staker.IncentiveKey",
                name: "key",
                type: "tuple"
            }, {
                internalType: "uint256",
                name: "tokenId",
                type: "uint256"
            }],
            name: "stakeToken",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function"
        }, {
            inputs: [{
                internalType: "uint256",
                name: "tokenId",
                type: "uint256"
            }, {
                internalType: "bytes32",
                name: "incentiveId",
                type: "bytes32"
            }],
            name: "stakes",
            outputs: [{
                internalType: "uint160",
                name: "secondsPerLiquidityInsideInitialX128",
                type: "uint160"
            }, {
                internalType: "uint128",
                name: "liquidity",
                type: "uint128"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [{
                internalType: "uint256",
                name: "tokenId",
                type: "uint256"
            }, {
                internalType: "address",
                name: "to",
                type: "address"
            }],
            name: "transferDeposit",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function"
        }, {
            inputs: [{
                components: [{
                    internalType: "contract IERC20Minimal",
                    name: "rewardToken",
                    type: "address"
                }, {
                    internalType: "contract IUniswapV3Pool",
                    name: "pool",
                    type: "address"
                }, {
                    internalType: "uint256",
                    name: "startTime",
                    type: "uint256"
                }, {
                    internalType: "uint256",
                    name: "endTime",
                    type: "uint256"
                }, {
                    internalType: "address",
                    name: "refundee",
                    type: "address"
                }],
                internalType: "struct IUniswapV3Staker.IncentiveKey",
                name: "key",
                type: "tuple"
            }, {
                internalType: "uint256",
                name: "tokenId",
                type: "uint256"
            }],
            name: "unstakeToken",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function"
        }, {
            inputs: [{
                internalType: "uint256",
                name: "tokenId",
                type: "uint256"
            }, {
                internalType: "address",
                name: "to",
                type: "address"
            }, {
                internalType: "bytes",
                name: "data",
                type: "bytes"
            }],
            name: "withdrawToken",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function"
        }]),
        eg.INCENTIVE_KEY_ABI = "tuple(address rewardToken, address pool, uint256 startTime, uint256 endTime, address refundee)";
        var eb = class {
            static swapCallParameters(e, t) {
                Array.isArray(e) || (e = [e]);
                let n = e[0]
                  , r = n.inputAmount.currency.wrapped
                  , o = n.outputAmount.currency.wrapped;
                (0,
                a.Z)(e.every(e=>e.inputAmount.currency.wrapped.equals(r)), "TOKEN_IN_DIFF"),
                (0,
                a.Z)(e.every(e=>e.outputAmount.currency.wrapped.equals(o)), "TOKEN_OUT_DIFF");
                let s = []
                  , u = i.ih.fromRawAmount(e[0].inputAmount.currency, 0)
                  , l = i.ih.fromRawAmount(e[0].outputAmount.currency, 0)
                  , d = e.reduce((e,n)=>e.add(n.minimumAmountOut(t.slippageTolerance)), l)
                  , p = n.inputAmount.currency.isNative && n.tradeType === i.YL.EXACT_OUTPUT
                  , f = n.inputAmount.currency.isNative
                  , h = n.outputAmount.currency.isNative
                  , m = h || !!t.fee
                  , y = f ? e.reduce((e,n)=>e.add(n.maximumAmountIn(t.slippageTolerance)), u) : u;
                t.inputTokenPermit && ((0,
                a.Z)(n.inputAmount.currency.isToken, "NON_TOKEN_PERMIT"),
                s.push(eu.encodePermit(n.inputAmount.currency, t.inputTokenPermit)));
                let g = (0,
                i.qn)(t.recipient)
                  , b = R(t.deadline);
                for (let n of e)
                    for (let {route: e, inputAmount: r, outputAmount: o} of n.swaps) {
                        let u = R(n.maximumAmountIn(t.slippageTolerance, r).quotient)
                          , l = R(n.minimumAmountOut(t.slippageTolerance, o).quotient)
                          , d = 1 === e.pools.length;
                        if (d) {
                            var v, w;
                            if (n.tradeType === i.YL.EXACT_INPUT) {
                                let n = {
                                    tokenIn: e.tokenPath[0].address,
                                    tokenOut: e.tokenPath[1].address,
                                    fee: e.pools[0].fee,
                                    recipient: m ? c : g,
                                    deadline: b,
                                    amountIn: u,
                                    amountOutMinimum: l,
                                    sqrtPriceLimitX96: R(null !== (v = t.sqrtPriceLimitX96) && void 0 !== v ? v : 0)
                                };
                                s.push(eb.INTERFACE.encodeFunctionData("exactInputSingle", [n]))
                            } else {
                                let n = {
                                    tokenIn: e.tokenPath[0].address,
                                    tokenOut: e.tokenPath[1].address,
                                    fee: e.pools[0].fee,
                                    recipient: m ? c : g,
                                    deadline: b,
                                    amountOut: l,
                                    amountInMaximum: u,
                                    sqrtPriceLimitX96: R(null !== (w = t.sqrtPriceLimitX96) && void 0 !== w ? w : 0)
                                };
                                s.push(eb.INTERFACE.encodeFunctionData("exactOutputSingle", [n]))
                            }
                        } else {
                            (0,
                            a.Z)(void 0 === t.sqrtPriceLimitX96, "MULTIHOP_PRICE_LIMIT");
                            let r = F(e, n.tradeType === i.YL.EXACT_OUTPUT);
                            if (n.tradeType === i.YL.EXACT_INPUT) {
                                let e = {
                                    path: r,
                                    recipient: m ? c : g,
                                    deadline: b,
                                    amountIn: u,
                                    amountOutMinimum: l
                                };
                                s.push(eb.INTERFACE.encodeFunctionData("exactInput", [e]))
                            } else {
                                let e = {
                                    path: r,
                                    recipient: m ? c : g,
                                    deadline: b,
                                    amountOut: l,
                                    amountInMaximum: u
                                };
                                s.push(eb.INTERFACE.encodeFunctionData("exactOutput", [e]))
                            }
                        }
                    }
                return m && (t.fee ? h ? s.push(ec.encodeUnwrapWETH9(d.quotient, g, t.fee)) : s.push(ec.encodeSweepToken(n.outputAmount.currency.wrapped, d.quotient, g, t.fee)) : s.push(ec.encodeUnwrapWETH9(d.quotient, g))),
                p && s.push(ec.encodeRefundETH()),
                {
                    calldata: eo.encodeMulticall(s),
                    value: R(y.quotient)
                }
            }
            constructor() {}
        }
        ;
        eb.INTERFACE = new s.Interface([{
            inputs: [{
                internalType: "address",
                name: "_deployer",
                type: "address"
            }, {
                internalType: "address",
                name: "_factory",
                type: "address"
            }, {
                internalType: "address",
                name: "_WETH9",
                type: "address"
            }],
            stateMutability: "nonpayable",
            type: "constructor"
        }, {
            inputs: [],
            name: "WETH9",
            outputs: [{
                internalType: "address",
                name: "",
                type: "address"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [],
            name: "deployer",
            outputs: [{
                internalType: "address",
                name: "",
                type: "address"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [{
                components: [{
                    internalType: "bytes",
                    name: "path",
                    type: "bytes"
                }, {
                    internalType: "address",
                    name: "recipient",
                    type: "address"
                }, {
                    internalType: "uint256",
                    name: "deadline",
                    type: "uint256"
                }, {
                    internalType: "uint256",
                    name: "amountIn",
                    type: "uint256"
                }, {
                    internalType: "uint256",
                    name: "amountOutMinimum",
                    type: "uint256"
                }],
                internalType: "struct ISwapRouter.ExactInputParams",
                name: "params",
                type: "tuple"
            }],
            name: "exactInput",
            outputs: [{
                internalType: "uint256",
                name: "amountOut",
                type: "uint256"
            }],
            stateMutability: "payable",
            type: "function"
        }, {
            inputs: [{
                components: [{
                    internalType: "address",
                    name: "tokenIn",
                    type: "address"
                }, {
                    internalType: "address",
                    name: "tokenOut",
                    type: "address"
                }, {
                    internalType: "uint24",
                    name: "fee",
                    type: "uint24"
                }, {
                    internalType: "address",
                    name: "recipient",
                    type: "address"
                }, {
                    internalType: "uint256",
                    name: "deadline",
                    type: "uint256"
                }, {
                    internalType: "uint256",
                    name: "amountIn",
                    type: "uint256"
                }, {
                    internalType: "uint256",
                    name: "amountOutMinimum",
                    type: "uint256"
                }, {
                    internalType: "uint160",
                    name: "sqrtPriceLimitX96",
                    type: "uint160"
                }],
                internalType: "struct ISwapRouter.ExactInputSingleParams",
                name: "params",
                type: "tuple"
            }],
            name: "exactInputSingle",
            outputs: [{
                internalType: "uint256",
                name: "amountOut",
                type: "uint256"
            }],
            stateMutability: "payable",
            type: "function"
        }, {
            inputs: [{
                components: [{
                    internalType: "bytes",
                    name: "path",
                    type: "bytes"
                }, {
                    internalType: "address",
                    name: "recipient",
                    type: "address"
                }, {
                    internalType: "uint256",
                    name: "deadline",
                    type: "uint256"
                }, {
                    internalType: "uint256",
                    name: "amountOut",
                    type: "uint256"
                }, {
                    internalType: "uint256",
                    name: "amountInMaximum",
                    type: "uint256"
                }],
                internalType: "struct ISwapRouter.ExactOutputParams",
                name: "params",
                type: "tuple"
            }],
            name: "exactOutput",
            outputs: [{
                internalType: "uint256",
                name: "amountIn",
                type: "uint256"
            }],
            stateMutability: "payable",
            type: "function"
        }, {
            inputs: [{
                components: [{
                    internalType: "address",
                    name: "tokenIn",
                    type: "address"
                }, {
                    internalType: "address",
                    name: "tokenOut",
                    type: "address"
                }, {
                    internalType: "uint24",
                    name: "fee",
                    type: "uint24"
                }, {
                    internalType: "address",
                    name: "recipient",
                    type: "address"
                }, {
                    internalType: "uint256",
                    name: "deadline",
                    type: "uint256"
                }, {
                    internalType: "uint256",
                    name: "amountOut",
                    type: "uint256"
                }, {
                    internalType: "uint256",
                    name: "amountInMaximum",
                    type: "uint256"
                }, {
                    internalType: "uint160",
                    name: "sqrtPriceLimitX96",
                    type: "uint160"
                }],
                internalType: "struct ISwapRouter.ExactOutputSingleParams",
                name: "params",
                type: "tuple"
            }],
            name: "exactOutputSingle",
            outputs: [{
                internalType: "uint256",
                name: "amountIn",
                type: "uint256"
            }],
            stateMutability: "payable",
            type: "function"
        }, {
            inputs: [],
            name: "factory",
            outputs: [{
                internalType: "address",
                name: "",
                type: "address"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [{
                internalType: "bytes[]",
                name: "data",
                type: "bytes[]"
            }],
            name: "multicall",
            outputs: [{
                internalType: "bytes[]",
                name: "results",
                type: "bytes[]"
            }],
            stateMutability: "payable",
            type: "function"
        }, {
            inputs: [{
                internalType: "int256",
                name: "amount0Delta",
                type: "int256"
            }, {
                internalType: "int256",
                name: "amount1Delta",
                type: "int256"
            }, {
                internalType: "bytes",
                name: "_data",
                type: "bytes"
            }],
            name: "pancakeV3SwapCallback",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function"
        }, {
            inputs: [],
            name: "refundETH",
            outputs: [],
            stateMutability: "payable",
            type: "function"
        }, {
            inputs: [{
                internalType: "address",
                name: "token",
                type: "address"
            }, {
                internalType: "uint256",
                name: "value",
                type: "uint256"
            }, {
                internalType: "uint256",
                name: "deadline",
                type: "uint256"
            }, {
                internalType: "uint8",
                name: "v",
                type: "uint8"
            }, {
                internalType: "bytes32",
                name: "r",
                type: "bytes32"
            }, {
                internalType: "bytes32",
                name: "s",
                type: "bytes32"
            }],
            name: "selfPermit",
            outputs: [],
            stateMutability: "payable",
            type: "function"
        }, {
            inputs: [{
                internalType: "address",
                name: "token",
                type: "address"
            }, {
                internalType: "uint256",
                name: "nonce",
                type: "uint256"
            }, {
                internalType: "uint256",
                name: "expiry",
                type: "uint256"
            }, {
                internalType: "uint8",
                name: "v",
                type: "uint8"
            }, {
                internalType: "bytes32",
                name: "r",
                type: "bytes32"
            }, {
                internalType: "bytes32",
                name: "s",
                type: "bytes32"
            }],
            name: "selfPermitAllowed",
            outputs: [],
            stateMutability: "payable",
            type: "function"
        }, {
            inputs: [{
                internalType: "address",
                name: "token",
                type: "address"
            }, {
                internalType: "uint256",
                name: "nonce",
                type: "uint256"
            }, {
                internalType: "uint256",
                name: "expiry",
                type: "uint256"
            }, {
                internalType: "uint8",
                name: "v",
                type: "uint8"
            }, {
                internalType: "bytes32",
                name: "r",
                type: "bytes32"
            }, {
                internalType: "bytes32",
                name: "s",
                type: "bytes32"
            }],
            name: "selfPermitAllowedIfNecessary",
            outputs: [],
            stateMutability: "payable",
            type: "function"
        }, {
            inputs: [{
                internalType: "address",
                name: "token",
                type: "address"
            }, {
                internalType: "uint256",
                name: "value",
                type: "uint256"
            }, {
                internalType: "uint256",
                name: "deadline",
                type: "uint256"
            }, {
                internalType: "uint8",
                name: "v",
                type: "uint8"
            }, {
                internalType: "bytes32",
                name: "r",
                type: "bytes32"
            }, {
                internalType: "bytes32",
                name: "s",
                type: "bytes32"
            }],
            name: "selfPermitIfNecessary",
            outputs: [],
            stateMutability: "payable",
            type: "function"
        }, {
            inputs: [{
                internalType: "address",
                name: "token",
                type: "address"
            }, {
                internalType: "uint256",
                name: "amountMinimum",
                type: "uint256"
            }, {
                internalType: "address",
                name: "recipient",
                type: "address"
            }],
            name: "sweepToken",
            outputs: [],
            stateMutability: "payable",
            type: "function"
        }, {
            inputs: [{
                internalType: "address",
                name: "token",
                type: "address"
            }, {
                internalType: "uint256",
                name: "amountMinimum",
                type: "uint256"
            }, {
                internalType: "address",
                name: "recipient",
                type: "address"
            }, {
                internalType: "uint256",
                name: "feeBips",
                type: "uint256"
            }, {
                internalType: "address",
                name: "feeRecipient",
                type: "address"
            }],
            name: "sweepTokenWithFee",
            outputs: [],
            stateMutability: "payable",
            type: "function"
        }, {
            inputs: [{
                internalType: "uint256",
                name: "amountMinimum",
                type: "uint256"
            }, {
                internalType: "address",
                name: "recipient",
                type: "address"
            }],
            name: "unwrapWETH9",
            outputs: [],
            stateMutability: "payable",
            type: "function"
        }, {
            inputs: [{
                internalType: "uint256",
                name: "amountMinimum",
                type: "uint256"
            }, {
                internalType: "address",
                name: "recipient",
                type: "address"
            }, {
                internalType: "uint256",
                name: "feeBips",
                type: "uint256"
            }, {
                internalType: "address",
                name: "feeRecipient",
                type: "address"
            }],
            name: "unwrapWETH9WithFee",
            outputs: [],
            stateMutability: "payable",
            type: "function"
        }, {
            stateMutability: "payable",
            type: "receive"
        }]);
        var ev = class {
            static addCallParameters(e, t) {
                (0,
                a.Z)(e.liquidity > i.xE, "ZERO_LIQUIDITY");
                let n = []
                  , {amount0: r, amount1: o} = e.mintAmounts
                  , s = e.mintAmountsWithSlippage(t.slippageTolerance)
                  , u = R(s.amount0)
                  , l = R(s.amount1)
                  , c = R(t.deadline);
                (0,
                a.Z)(!ep(t), "NO_MINT_SUPPORT"),
                t.token0Permit && n.push(eu.encodePermit(e.pool.token0, t.token0Permit)),
                t.token1Permit && n.push(eu.encodePermit(e.pool.token1, t.token1Permit)),
                n.push(ev.INTERFACE.encodeFunctionData("increaseLiquidity", [{
                    tokenId: R(t.tokenId),
                    amount0Desired: R(r),
                    amount1Desired: R(o),
                    amount0Min: u,
                    amount1Min: l,
                    deadline: c
                }]));
                let d = R(0);
                if (t.useNative) {
                    let {wrapped: n} = t.useNative;
                    (0,
                    a.Z)(e.pool.token0.equals(n) || e.pool.token1.equals(n), "NO_WETH");
                    let i = e.pool.token0.equals(n) ? r : o;
                    d = R(i)
                }
                return {
                    calldata: eo.encodeMulticall(n),
                    value: d
                }
            }
            static encodeCollect(e) {
                let t = []
                  , n = R(e.tokenId)
                  , r = e.expectedCurrencyOwed0.currency.isNative || e.expectedCurrencyOwed1.currency.isNative
                  , a = (0,
                i.qn)(e.recipient);
                if (t.push(ev.INTERFACE.encodeFunctionData("collect", [{
                    tokenId: n,
                    recipient: r ? c : a,
                    amount0Max: ed,
                    amount1Max: ed
                }])),
                r) {
                    let n = e.expectedCurrencyOwed0.currency.isNative ? e.expectedCurrencyOwed0.quotient : e.expectedCurrencyOwed1.quotient
                      , r = e.expectedCurrencyOwed0.currency.isNative ? e.expectedCurrencyOwed1.currency : e.expectedCurrencyOwed0.currency
                      , i = e.expectedCurrencyOwed0.currency.isNative ? e.expectedCurrencyOwed1.quotient : e.expectedCurrencyOwed0.quotient;
                    t.push(ec.encodeUnwrapWETH9(n, a)),
                    t.push(ec.encodeSweepToken(r, i, a))
                }
                return t
            }
            static collectCallParameters(e) {
                let t = ev.encodeCollect(e);
                return {
                    calldata: eo.encodeMulticall(t),
                    value: R(0)
                }
            }
            static removeCallParameters(e, t) {
                let n = []
                  , r = R(t.deadline)
                  , o = R(t.tokenId)
                  , s = new et({
                    pool: e.pool,
                    liquidity: t.liquidityPercentage.multiply(e.liquidity).quotient,
                    tickLower: e.tickLower,
                    tickUpper: e.tickUpper
                });
                (0,
                a.Z)(s.liquidity > i.xE, "ZERO_LIQUIDITY");
                let {amount0: u, amount1: l} = s.burnAmountsWithSlippage(t.slippageTolerance);
                t.permit && n.push(ev.INTERFACE.encodeFunctionData("permit", [(0,
                i.qn)(t.permit.spender), o, R(t.permit.deadline), t.permit.v, t.permit.r, t.permit.s])),
                n.push(ev.INTERFACE.encodeFunctionData("decreaseLiquidity", [{
                    tokenId: o,
                    liquidity: R(s.liquidity),
                    amount0Min: R(u),
                    amount1Min: R(l),
                    deadline: r
                }]));
                let {expectedCurrencyOwed0: c, expectedCurrencyOwed1: d, ...p} = t.collectOptions;
                return n.push(...ev.encodeCollect({
                    tokenId: R(t.tokenId),
                    expectedCurrencyOwed0: c.add(i.ih.fromRawAmount(c.currency, u)),
                    expectedCurrencyOwed1: d.add(i.ih.fromRawAmount(d.currency, l)),
                    ...p
                })),
                (null == p ? void 0 : p.recipient) && (t.liquidityPercentage.equalTo(i.ry) ? n.push(ev.INTERFACE.encodeFunctionData("withdraw", [o.toString(), (0,
                i.qn)(null == p ? void 0 : p.recipient)])) : n.push(ev.INTERFACE.encodeFunctionData("harvest", [o.toString(), (0,
                i.qn)(null == p ? void 0 : p.recipient)]))),
                t.liquidityPercentage.equalTo(i.ry) ? t.burnToken && n.push(ev.INTERFACE.encodeFunctionData("burn", [o])) : (0,
                a.Z)(!0 !== t.burnToken, "CANNOT_BURN"),
                {
                    calldata: eo.encodeMulticall(n),
                    value: R(0)
                }
            }
            static harvestCallParameters(e) {
                let t = this.encodeHarvest(e);
                return {
                    calldata: eo.encodeMulticall(t),
                    value: R(0)
                }
            }
            static batchHarvestCallParameters(e) {
                let t = e.map(e=>this.encodeHarvest(e)).flat();
                return {
                    calldata: eo.encodeMulticall(t),
                    value: R(0)
                }
            }
            static encodeHarvest(e) {
                let {tokenId: t, to: n} = e
                  , r = [];
                return r.push(ev.INTERFACE.encodeFunctionData("harvest", [t.toString(), (0,
                i.qn)(n)])),
                r
            }
            static withdrawCallParameters(e) {
                let {tokenId: t, to: n} = e
                  , r = [];
                return r.push(ev.INTERFACE.encodeFunctionData("withdraw", [t.toString(), (0,
                i.qn)(n)])),
                {
                    calldata: eo.encodeMulticall(r),
                    value: R(0)
                }
            }
            constructor() {}
        }
          , ew = ev;
        ew.INTERFACE = new s.Interface([{
            inputs: [{
                internalType: "contract IERC20",
                name: "_CAKE",
                type: "address"
            }, {
                internalType: "contract INonfungiblePositionManager",
                name: "_nonfungiblePositionManager",
                type: "address"
            }, {
                internalType: "address",
                name: "_WETH",
                type: "address"
            }],
            stateMutability: "nonpayable",
            type: "constructor"
        }, {
            inputs: [{
                internalType: "uint256",
                name: "pid",
                type: "uint256"
            }],
            name: "DuplicatedPool",
            type: "error"
        }, {
            inputs: [],
            name: "InconsistentAmount",
            type: "error"
        }, {
            inputs: [],
            name: "InsufficientAmount",
            type: "error"
        }, {
            inputs: [],
            name: "InvalidNFT",
            type: "error"
        }, {
            inputs: [],
            name: "InvalidPeriodDuration",
            type: "error"
        }, {
            inputs: [],
            name: "InvalidPid",
            type: "error"
        }, {
            inputs: [],
            name: "NoBalance",
            type: "error"
        }, {
            inputs: [],
            name: "NoLMPool",
            type: "error"
        }, {
            inputs: [],
            name: "NoLiquidity",
            type: "error"
        }, {
            inputs: [],
            name: "NotEmpty",
            type: "error"
        }, {
            inputs: [],
            name: "NotOwner",
            type: "error"
        }, {
            inputs: [],
            name: "NotOwnerOrOperator",
            type: "error"
        }, {
            inputs: [],
            name: "NotPancakeNFT",
            type: "error"
        }, {
            inputs: [],
            name: "WrongReceiver",
            type: "error"
        }, {
            inputs: [],
            name: "ZeroAddress",
            type: "error"
        }, {
            anonymous: !1,
            inputs: [{
                indexed: !0,
                internalType: "uint256",
                name: "pid",
                type: "uint256"
            }, {
                indexed: !1,
                internalType: "uint256",
                name: "allocPoint",
                type: "uint256"
            }, {
                indexed: !0,
                internalType: "contract IPancakeV3Pool",
                name: "v3Pool",
                type: "address"
            }, {
                indexed: !0,
                internalType: "contract ILMPool",
                name: "lmPool",
                type: "address"
            }],
            name: "AddPool",
            type: "event"
        }, {
            anonymous: !1,
            inputs: [{
                indexed: !0,
                internalType: "address",
                name: "from",
                type: "address"
            }, {
                indexed: !0,
                internalType: "uint256",
                name: "pid",
                type: "uint256"
            }, {
                indexed: !0,
                internalType: "uint256",
                name: "tokenId",
                type: "uint256"
            }, {
                indexed: !1,
                internalType: "uint256",
                name: "liquidity",
                type: "uint256"
            }, {
                indexed: !1,
                internalType: "int24",
                name: "tickLower",
                type: "int24"
            }, {
                indexed: !1,
                internalType: "int24",
                name: "tickUpper",
                type: "int24"
            }],
            name: "Deposit",
            type: "event"
        }, {
            anonymous: !1,
            inputs: [{
                indexed: !0,
                internalType: "address",
                name: "sender",
                type: "address"
            }, {
                indexed: !1,
                internalType: "address",
                name: "to",
                type: "address"
            }, {
                indexed: !0,
                internalType: "uint256",
                name: "pid",
                type: "uint256"
            }, {
                indexed: !0,
                internalType: "uint256",
                name: "tokenId",
                type: "uint256"
            }, {
                indexed: !1,
                internalType: "uint256",
                name: "reward",
                type: "uint256"
            }],
            name: "Harvest",
            type: "event"
        }, {
            anonymous: !1,
            inputs: [{
                indexed: !1,
                internalType: "address",
                name: "deployer",
                type: "address"
            }],
            name: "NewLMPoolDeployerAddress",
            type: "event"
        }, {
            anonymous: !1,
            inputs: [{
                indexed: !1,
                internalType: "address",
                name: "operator",
                type: "address"
            }],
            name: "NewOperatorAddress",
            type: "event"
        }, {
            anonymous: !1,
            inputs: [{
                indexed: !1,
                internalType: "uint256",
                name: "periodDuration",
                type: "uint256"
            }],
            name: "NewPeriodDuration",
            type: "event"
        }, {
            anonymous: !1,
            inputs: [{
                indexed: !1,
                internalType: "address",
                name: "receiver",
                type: "address"
            }],
            name: "NewReceiver",
            type: "event"
        }, {
            anonymous: !1,
            inputs: [{
                indexed: !0,
                internalType: "uint256",
                name: "periodNumber",
                type: "uint256"
            }, {
                indexed: !1,
                internalType: "uint256",
                name: "startTime",
                type: "uint256"
            }, {
                indexed: !1,
                internalType: "uint256",
                name: "endTime",
                type: "uint256"
            }, {
                indexed: !1,
                internalType: "uint256",
                name: "cakePerSecond",
                type: "uint256"
            }, {
                indexed: !1,
                internalType: "uint256",
                name: "cakeAmount",
                type: "uint256"
            }],
            name: "NewUpkeepPeriod",
            type: "event"
        }, {
            anonymous: !1,
            inputs: [{
                indexed: !0,
                internalType: "address",
                name: "previousOwner",
                type: "address"
            }, {
                indexed: !0,
                internalType: "address",
                name: "newOwner",
                type: "address"
            }],
            name: "OwnershipTransferred",
            type: "event"
        }, {
            anonymous: !1,
            inputs: [{
                indexed: !1,
                internalType: "bool",
                name: "emergency",
                type: "bool"
            }],
            name: "SetEmergency",
            type: "event"
        }, {
            anonymous: !1,
            inputs: [{
                indexed: !0,
                internalType: "uint256",
                name: "pid",
                type: "uint256"
            }, {
                indexed: !1,
                internalType: "uint256",
                name: "allocPoint",
                type: "uint256"
            }],
            name: "SetPool",
            type: "event"
        }, {
            anonymous: !1,
            inputs: [{
                indexed: !0,
                internalType: "address",
                name: "farmBoostContract",
                type: "address"
            }],
            name: "UpdateFarmBoostContract",
            type: "event"
        }, {
            anonymous: !1,
            inputs: [{
                indexed: !0,
                internalType: "address",
                name: "from",
                type: "address"
            }, {
                indexed: !0,
                internalType: "uint256",
                name: "pid",
                type: "uint256"
            }, {
                indexed: !0,
                internalType: "uint256",
                name: "tokenId",
                type: "uint256"
            }, {
                indexed: !1,
                internalType: "int128",
                name: "liquidity",
                type: "int128"
            }, {
                indexed: !1,
                internalType: "int24",
                name: "tickLower",
                type: "int24"
            }, {
                indexed: !1,
                internalType: "int24",
                name: "tickUpper",
                type: "int24"
            }],
            name: "UpdateLiquidity",
            type: "event"
        }, {
            anonymous: !1,
            inputs: [{
                indexed: !0,
                internalType: "uint256",
                name: "periodNumber",
                type: "uint256"
            }, {
                indexed: !1,
                internalType: "uint256",
                name: "oldEndTime",
                type: "uint256"
            }, {
                indexed: !1,
                internalType: "uint256",
                name: "newEndTime",
                type: "uint256"
            }, {
                indexed: !1,
                internalType: "uint256",
                name: "remainingCake",
                type: "uint256"
            }],
            name: "UpdateUpkeepPeriod",
            type: "event"
        }, {
            anonymous: !1,
            inputs: [{
                indexed: !0,
                internalType: "address",
                name: "from",
                type: "address"
            }, {
                indexed: !1,
                internalType: "address",
                name: "to",
                type: "address"
            }, {
                indexed: !0,
                internalType: "uint256",
                name: "pid",
                type: "uint256"
            }, {
                indexed: !0,
                internalType: "uint256",
                name: "tokenId",
                type: "uint256"
            }],
            name: "Withdraw",
            type: "event"
        }, {
            inputs: [],
            name: "BOOST_PRECISION",
            outputs: [{
                internalType: "uint256",
                name: "",
                type: "uint256"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [],
            name: "CAKE",
            outputs: [{
                internalType: "contract IERC20",
                name: "",
                type: "address"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [],
            name: "FARM_BOOSTER",
            outputs: [{
                internalType: "contract IFarmBooster",
                name: "",
                type: "address"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [],
            name: "LMPoolDeployer",
            outputs: [{
                internalType: "contract ILMPoolDeployer",
                name: "",
                type: "address"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [],
            name: "MAX_BOOST_PRECISION",
            outputs: [{
                internalType: "uint256",
                name: "",
                type: "uint256"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [],
            name: "MAX_DURATION",
            outputs: [{
                internalType: "uint256",
                name: "",
                type: "uint256"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [],
            name: "MIN_DURATION",
            outputs: [{
                internalType: "uint256",
                name: "",
                type: "uint256"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [],
            name: "PERIOD_DURATION",
            outputs: [{
                internalType: "uint256",
                name: "",
                type: "uint256"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [],
            name: "PRECISION",
            outputs: [{
                internalType: "uint256",
                name: "",
                type: "uint256"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [],
            name: "WETH",
            outputs: [{
                internalType: "address",
                name: "",
                type: "address"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [{
                internalType: "uint256",
                name: "_allocPoint",
                type: "uint256"
            }, {
                internalType: "contract IPancakeV3Pool",
                name: "_v3Pool",
                type: "address"
            }, {
                internalType: "bool",
                name: "_withUpdate",
                type: "bool"
            }],
            name: "add",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function"
        }, {
            inputs: [{
                internalType: "address",
                name: "owner",
                type: "address"
            }],
            name: "balanceOf",
            outputs: [{
                internalType: "uint256",
                name: "",
                type: "uint256"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [{
                internalType: "uint256",
                name: "_tokenId",
                type: "uint256"
            }],
            name: "burn",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function"
        }, {
            inputs: [],
            name: "cakeAmountBelongToMC",
            outputs: [{
                internalType: "uint256",
                name: "",
                type: "uint256"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [{
                components: [{
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256"
                }, {
                    internalType: "address",
                    name: "recipient",
                    type: "address"
                }, {
                    internalType: "uint128",
                    name: "amount0Max",
                    type: "uint128"
                }, {
                    internalType: "uint128",
                    name: "amount1Max",
                    type: "uint128"
                }],
                internalType: "struct INonfungiblePositionManagerStruct.CollectParams",
                name: "params",
                type: "tuple"
            }],
            name: "collect",
            outputs: [{
                internalType: "uint256",
                name: "amount0",
                type: "uint256"
            }, {
                internalType: "uint256",
                name: "amount1",
                type: "uint256"
            }],
            stateMutability: "nonpayable",
            type: "function"
        }, {
            inputs: [{
                components: [{
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256"
                }, {
                    internalType: "address",
                    name: "recipient",
                    type: "address"
                }, {
                    internalType: "uint128",
                    name: "amount0Max",
                    type: "uint128"
                }, {
                    internalType: "uint128",
                    name: "amount1Max",
                    type: "uint128"
                }],
                internalType: "struct INonfungiblePositionManagerStruct.CollectParams",
                name: "params",
                type: "tuple"
            }, {
                internalType: "address",
                name: "to",
                type: "address"
            }],
            name: "collectTo",
            outputs: [{
                internalType: "uint256",
                name: "amount0",
                type: "uint256"
            }, {
                internalType: "uint256",
                name: "amount1",
                type: "uint256"
            }],
            stateMutability: "nonpayable",
            type: "function"
        }, {
            inputs: [{
                components: [{
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256"
                }, {
                    internalType: "uint128",
                    name: "liquidity",
                    type: "uint128"
                }, {
                    internalType: "uint256",
                    name: "amount0Min",
                    type: "uint256"
                }, {
                    internalType: "uint256",
                    name: "amount1Min",
                    type: "uint256"
                }, {
                    internalType: "uint256",
                    name: "deadline",
                    type: "uint256"
                }],
                internalType: "struct INonfungiblePositionManagerStruct.DecreaseLiquidityParams",
                name: "params",
                type: "tuple"
            }],
            name: "decreaseLiquidity",
            outputs: [{
                internalType: "uint256",
                name: "amount0",
                type: "uint256"
            }, {
                internalType: "uint256",
                name: "amount1",
                type: "uint256"
            }],
            stateMutability: "nonpayable",
            type: "function"
        }, {
            inputs: [],
            name: "emergency",
            outputs: [{
                internalType: "bool",
                name: "",
                type: "bool"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [{
                internalType: "address",
                name: "_v3Pool",
                type: "address"
            }],
            name: "getLatestPeriodInfo",
            outputs: [{
                internalType: "uint256",
                name: "cakePerSecond",
                type: "uint256"
            }, {
                internalType: "uint256",
                name: "endTime",
                type: "uint256"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [{
                internalType: "uint256",
                name: "_pid",
                type: "uint256"
            }],
            name: "getLatestPeriodInfoByPid",
            outputs: [{
                internalType: "uint256",
                name: "cakePerSecond",
                type: "uint256"
            }, {
                internalType: "uint256",
                name: "endTime",
                type: "uint256"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [{
                internalType: "uint256",
                name: "_tokenId",
                type: "uint256"
            }, {
                internalType: "address",
                name: "_to",
                type: "address"
            }],
            name: "harvest",
            outputs: [{
                internalType: "uint256",
                name: "reward",
                type: "uint256"
            }],
            stateMutability: "nonpayable",
            type: "function"
        }, {
            inputs: [{
                components: [{
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256"
                }, {
                    internalType: "uint256",
                    name: "amount0Desired",
                    type: "uint256"
                }, {
                    internalType: "uint256",
                    name: "amount1Desired",
                    type: "uint256"
                }, {
                    internalType: "uint256",
                    name: "amount0Min",
                    type: "uint256"
                }, {
                    internalType: "uint256",
                    name: "amount1Min",
                    type: "uint256"
                }, {
                    internalType: "uint256",
                    name: "deadline",
                    type: "uint256"
                }],
                internalType: "struct INonfungiblePositionManagerStruct.IncreaseLiquidityParams",
                name: "params",
                type: "tuple"
            }],
            name: "increaseLiquidity",
            outputs: [{
                internalType: "uint128",
                name: "liquidity",
                type: "uint128"
            }, {
                internalType: "uint256",
                name: "amount0",
                type: "uint256"
            }, {
                internalType: "uint256",
                name: "amount1",
                type: "uint256"
            }],
            stateMutability: "payable",
            type: "function"
        }, {
            inputs: [],
            name: "latestPeriodCakePerSecond",
            outputs: [{
                internalType: "uint256",
                name: "",
                type: "uint256"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [],
            name: "latestPeriodEndTime",
            outputs: [{
                internalType: "uint256",
                name: "",
                type: "uint256"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [],
            name: "latestPeriodNumber",
            outputs: [{
                internalType: "uint256",
                name: "",
                type: "uint256"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [],
            name: "latestPeriodStartTime",
            outputs: [{
                internalType: "uint256",
                name: "",
                type: "uint256"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [{
                internalType: "bytes[]",
                name: "data",
                type: "bytes[]"
            }],
            name: "multicall",
            outputs: [{
                internalType: "bytes[]",
                name: "results",
                type: "bytes[]"
            }],
            stateMutability: "payable",
            type: "function"
        }, {
            inputs: [],
            name: "nonfungiblePositionManager",
            outputs: [{
                internalType: "contract INonfungiblePositionManager",
                name: "",
                type: "address"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [{
                internalType: "address",
                name: "",
                type: "address"
            }, {
                internalType: "address",
                name: "_from",
                type: "address"
            }, {
                internalType: "uint256",
                name: "_tokenId",
                type: "uint256"
            }, {
                internalType: "bytes",
                name: "",
                type: "bytes"
            }],
            name: "onERC721Received",
            outputs: [{
                internalType: "bytes4",
                name: "",
                type: "bytes4"
            }],
            stateMutability: "nonpayable",
            type: "function"
        }, {
            inputs: [],
            name: "operatorAddress",
            outputs: [{
                internalType: "address",
                name: "",
                type: "address"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [],
            name: "owner",
            outputs: [{
                internalType: "address",
                name: "",
                type: "address"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [{
                internalType: "uint256",
                name: "_tokenId",
                type: "uint256"
            }],
            name: "pendingCake",
            outputs: [{
                internalType: "uint256",
                name: "reward",
                type: "uint256"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [{
                internalType: "uint256",
                name: "",
                type: "uint256"
            }],
            name: "poolInfo",
            outputs: [{
                internalType: "uint256",
                name: "allocPoint",
                type: "uint256"
            }, {
                internalType: "contract IPancakeV3Pool",
                name: "v3Pool",
                type: "address"
            }, {
                internalType: "address",
                name: "token0",
                type: "address"
            }, {
                internalType: "address",
                name: "token1",
                type: "address"
            }, {
                internalType: "uint24",
                name: "fee",
                type: "uint24"
            }, {
                internalType: "uint256",
                name: "totalLiquidity",
                type: "uint256"
            }, {
                internalType: "uint256",
                name: "totalBoostLiquidity",
                type: "uint256"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [],
            name: "poolLength",
            outputs: [{
                internalType: "uint256",
                name: "",
                type: "uint256"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [],
            name: "receiver",
            outputs: [{
                internalType: "address",
                name: "",
                type: "address"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [],
            name: "renounceOwnership",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function"
        }, {
            inputs: [{
                internalType: "uint256",
                name: "_pid",
                type: "uint256"
            }, {
                internalType: "uint256",
                name: "_allocPoint",
                type: "uint256"
            }, {
                internalType: "bool",
                name: "_withUpdate",
                type: "bool"
            }],
            name: "set",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function"
        }, {
            inputs: [{
                internalType: "bool",
                name: "_emergency",
                type: "bool"
            }],
            name: "setEmergency",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function"
        }, {
            inputs: [{
                internalType: "contract ILMPoolDeployer",
                name: "_LMPoolDeployer",
                type: "address"
            }],
            name: "setLMPoolDeployer",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function"
        }, {
            inputs: [{
                internalType: "address",
                name: "_operatorAddress",
                type: "address"
            }],
            name: "setOperator",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function"
        }, {
            inputs: [{
                internalType: "uint256",
                name: "_periodDuration",
                type: "uint256"
            }],
            name: "setPeriodDuration",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function"
        }, {
            inputs: [{
                internalType: "address",
                name: "_receiver",
                type: "address"
            }],
            name: "setReceiver",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function"
        }, {
            inputs: [{
                internalType: "address",
                name: "token",
                type: "address"
            }, {
                internalType: "uint256",
                name: "amountMinimum",
                type: "uint256"
            }, {
                internalType: "address",
                name: "recipient",
                type: "address"
            }],
            name: "sweepToken",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function"
        }, {
            inputs: [{
                internalType: "address",
                name: "owner",
                type: "address"
            }, {
                internalType: "uint256",
                name: "index",
                type: "uint256"
            }],
            name: "tokenOfOwnerByIndex",
            outputs: [{
                internalType: "uint256",
                name: "",
                type: "uint256"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [],
            name: "totalAllocPoint",
            outputs: [{
                internalType: "uint256",
                name: "",
                type: "uint256"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [{
                internalType: "address",
                name: "newOwner",
                type: "address"
            }],
            name: "transferOwnership",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function"
        }, {
            inputs: [{
                internalType: "uint256",
                name: "amountMinimum",
                type: "uint256"
            }, {
                internalType: "address",
                name: "recipient",
                type: "address"
            }],
            name: "unwrapWETH9",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function"
        }, {
            inputs: [{
                internalType: "uint256",
                name: "_tokenId",
                type: "uint256"
            }, {
                internalType: "uint256",
                name: "_newMultiplier",
                type: "uint256"
            }],
            name: "updateBoostMultiplier",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function"
        }, {
            inputs: [{
                internalType: "address",
                name: "_newFarmBoostContract",
                type: "address"
            }],
            name: "updateFarmBoostContract",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function"
        }, {
            inputs: [{
                internalType: "uint256",
                name: "_tokenId",
                type: "uint256"
            }],
            name: "updateLiquidity",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function"
        }, {
            inputs: [{
                internalType: "uint256[]",
                name: "pids",
                type: "uint256[]"
            }],
            name: "updatePools",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function"
        }, {
            inputs: [{
                internalType: "uint256",
                name: "_amount",
                type: "uint256"
            }, {
                internalType: "uint256",
                name: "_duration",
                type: "uint256"
            }, {
                internalType: "bool",
                name: "_withUpdate",
                type: "bool"
            }],
            name: "upkeep",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function"
        }, {
            inputs: [{
                internalType: "uint256",
                name: "",
                type: "uint256"
            }],
            name: "userPositionInfos",
            outputs: [{
                internalType: "uint128",
                name: "liquidity",
                type: "uint128"
            }, {
                internalType: "uint128",
                name: "boostLiquidity",
                type: "uint128"
            }, {
                internalType: "int24",
                name: "tickLower",
                type: "int24"
            }, {
                internalType: "int24",
                name: "tickUpper",
                type: "int24"
            }, {
                internalType: "uint256",
                name: "rewardGrowthInside",
                type: "uint256"
            }, {
                internalType: "uint256",
                name: "reward",
                type: "uint256"
            }, {
                internalType: "address",
                name: "user",
                type: "address"
            }, {
                internalType: "uint256",
                name: "pid",
                type: "uint256"
            }, {
                internalType: "uint256",
                name: "boostMultiplier",
                type: "uint256"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [{
                internalType: "address",
                name: "",
                type: "address"
            }],
            name: "v3PoolAddressPid",
            outputs: [{
                internalType: "uint256",
                name: "",
                type: "uint256"
            }],
            stateMutability: "view",
            type: "function"
        }, {
            inputs: [{
                internalType: "uint256",
                name: "_tokenId",
                type: "uint256"
            }, {
                internalType: "address",
                name: "_to",
                type: "address"
            }],
            name: "withdraw",
            outputs: [{
                internalType: "uint256",
                name: "reward",
                type: "uint256"
            }],
            stateMutability: "nonpayable",
            type: "function"
        }, {
            stateMutability: "payable",
            type: "receive"
        }])
    },
    93018: function(e, t, n) {
        "use strict";
        n.d(t, {
            AhP: function() {
                return na
            },
            ApJ: function() {
                return nC
            },
            Dmr: function() {
                return ns
            },
            F2S: function() {
                return nM
            },
            IP4: function() {
                return nr
            },
            IXe: function() {
                return ej
            },
            J0p: function() {
                return ng
            },
            K6X: function() {
                return nA
            },
            KV9: function() {
                return ny
            },
            LQk: function() {
                return nh
            },
            LkN: function() {
                return nk
            },
            OJH: function() {
                return nL
            },
            OLZ: function() {
                return nU
            },
            QH8: function() {
                return no
            },
            Qgf: function() {
                return nl
            },
            REe: function() {
                return ne
            },
            RUZ: function() {
                return tE
            },
            SXW: function() {
                return nZ
            },
            WZR: function() {
                return n_
            },
            WjP: function() {
                return nn
            },
            Y$E: function() {
                return nD
            },
            YHl: function() {
                return nw
            },
            ZYl: function() {
                return nm
            },
            aQP: function() {
                return nt
            },
            a_5: function() {
                return nE
            },
            ag7: function() {
                return nx
            },
            cZ8: function() {
                return nf
            },
            cbU: function() {
                return np
            },
            ecV: function() {
                return nO
            },
            f4N: function() {
                return tV
            },
            foU: function() {
                return nT
            },
            gQG: function() {
                return nq
            },
            jgW: function() {
                return ni
            },
            khQ: function() {
                return tv
            },
            niD: function() {
                return tB
            },
            o3: function() {
                return nb
            },
            pex: function() {
                return nF
            },
            qub: function() {
                return nR
            },
            rDi: function() {
                return nj
            },
            sbY: function() {
                return nu
            },
            wWn: function() {
                return n$
            },
            yrc: function() {
                return nv
            },
            zAD: function() {
                return nd
            }
        });
        var r = n(36280);
        n(16776);
        var i = Object.defineProperty
          , a = (e,t,n)=>t in e ? i(e, t, {
            enumerable: !0,
            configurable: !0,
            writable: !0,
            value: n
        }) : e[t] = n
          , o = (e,t,n)=>(a(e, "symbol" != typeof t ? t + "" : t, n),
        n)
          , s = {
            name: "viem",
            description: "TypeScript Interface for Ethereum",
            version: "0.2.12",
            scripts: {
                anvil: "dotenv -- sh -c 'anvil --fork-url $VITE_ANVIL_FORK_URL --fork-block-number $VITE_ANVIL_BLOCK_NUMBER --block-time $VITE_ANVIL_BLOCK_TIME'",
                bench: "vitest bench --no-threads",
                "bench:ci": "CI=true vitest bench --no-threads",
                build: "tsup && size-limit",
                changeset: "changeset",
                "changeset:release": "pnpm build && changeset publish",
                "changeset:version": "changeset version && pnpm install --lockfile-only",
                clean: "rimraf dist abi chains contract ens public test utils wallet window",
                "contracts:build": "wagmi generate",
                dev: "DEV=true tsup",
                "dev:docs": "pnpm -r --filter site dev",
                format: "rome format . --write",
                lint: "rome check .",
                "lint:fix": "pnpm lint --apply",
                playground: "pnpm --filter playground-browser dev",
                postinstall: "pnpm dev && pnpm contracts:build",
                preinstall: "npx only-allow pnpm",
                prepublishOnly: "pnpm bun scripts/prepublishOnly.ts",
                prepare: "npx simple-git-hooks",
                test: "vitest dev --no-threads",
                "test:cov": "vitest dev --coverage --no-threads",
                "test:ci": "CI=true vitest --coverage --no-threads",
                "test:typecheck": "SKIP_GLOBAL_SETUP=true vitest typecheck",
                "test:ui": "vitest dev --ui --no-threads",
                typecheck: "tsc --noEmit"
            },
            tsup: {
                entry: ["src/index.ts", "src/abi.ts", "src/accounts/index.ts", "src/chains.ts", "src/contract.ts", "src/ens.ts", "src/ethers.ts", "src/public.ts", "src/test.ts", "src/utils/index.ts", "src/wallet.ts", "src/window.ts"]
            },
            files: ["/abi", "/accounts", "/dist", "/chains", "/contract", "/ens", "/ethers", "/public", "/test", "/utils", "/wallet", "/window"],
            exports: {
                ".": {
                    types: "./dist/index.d.ts",
                    module: "./dist/index.mts",
                    default: "./dist/index.js"
                },
                "./abi": {
                    types: "./dist/abi.d.ts",
                    module: "./dist/abi.mts",
                    default: "./dist/abi.js"
                },
                "./accounts": {
                    types: "./dist/accounts/index.d.ts",
                    module: "./dist/accounts/index.mts",
                    default: "./dist/accounts/index.js"
                },
                "./chains": {
                    types: "./dist/chains.d.ts",
                    module: "./dist/chains.mts",
                    default: "./dist/chains.js"
                },
                "./contract": {
                    types: "./dist/contract.d.ts",
                    module: "./dist/contract.mts",
                    default: "./dist/contract.js"
                },
                "./ens": {
                    types: "./dist/ens.d.ts",
                    module: "./dist/ens.mts",
                    default: "./dist/ens.js"
                },
                "./ethers": {
                    types: "./dist/ethers.d.ts",
                    module: "./dist/ethers.mts",
                    default: "./dist/ethers.js"
                },
                "./public": {
                    types: "./dist/public.d.ts",
                    module: "./dist/public.mts",
                    default: "./dist/public.js"
                },
                "./test": {
                    types: "./dist/test.d.ts",
                    module: "./dist/test.mts",
                    default: "./dist/test.js"
                },
                "./utils": {
                    types: "./dist/utils/index.d.ts",
                    module: "./dist/utils/index.mts",
                    default: "./dist/utils/index.js"
                },
                "./wallet": {
                    types: "./dist/wallet.d.ts",
                    module: "./dist/wallet.mts",
                    default: "./dist/wallet.js"
                },
                "./window": {
                    types: "./dist/window.d.ts",
                    module: "./dist/window.mts",
                    default: "./dist/window.js"
                },
                "./package.json": "./package.json"
            },
            main: "dist/index.js",
            module: "dist/index.mjs",
            types: "dist/index.d.ts",
            sideEffects: !1,
            dependencies: {
                "@adraffy/ens-normalize": "1.9.0",
                "@noble/curves": "0.9.0",
                "@noble/hashes": "1.3.0",
                "@scure/bip32": "1.2.0",
                "@scure/bip39": "1.2.0",
                "@wagmi/chains": "0.2.16",
                abitype: "0.7.1",
                "isomorphic-ws": "5.0.0",
                ws: "8.12.0"
            },
            devDependencies: {
                "@actions/core": "^1.10.0",
                "@actions/github": "^5.1.1",
                "@changesets/changelog-github": "^0.4.5",
                "@changesets/cli": "^2.23.2",
                "@size-limit/preset-big-lib": "^8.2.4",
                "@types/dedent": "^0.7.0",
                "@types/fs-extra": "^9.0.13",
                "@types/node": "^17.0.45",
                "@types/ws": "^8.5.4",
                "@vitest/coverage-c8": "^0.29.2",
                "@vitest/ui": "^0.29.2",
                "@wagmi/cli": "^0.1.6",
                bun: "^0.5.5",
                bundlewatch: "^0.3.3",
                dedent: "^0.7.0",
                "dotenv-cli": "^7.1.0",
                ethers: "^5.7.2",
                "ethers@6": "npm:ethers@^6.0.2",
                execa: "^6.1.0",
                "fs-extra": "^10.1.0",
                rimraf: "^4.1.2",
                rome: "^12.0.0",
                "simple-git-hooks": "^2.8.1",
                "size-limit": "^8.2.4",
                tsup: "^6.6.0",
                typescript: "^4.9.4",
                vite: "^4.1.4",
                vitest: "~0.29.2"
            },
            license: "MIT",
            repository: "wagmi-dev/viem",
            authors: ["awkweb.eth", "jxom.eth"],
            keywords: ["eth", "ethereum", "dapps", "wallet", "web3"],
            "size-limit": [{
                path: "dist/index.js"
            }],
            "simple-git-hooks": {
                "pre-commit": "pnpm format && pnpm lint:fix"
            },
            pnpm: {
                overrides: {
                    viem: "workspace:*"
                },
                patchedDependencies: {
                    "vitepress@1.0.0-alpha.61": "patches/vitepress@1.0.0-alpha.61.patch"
                },
                peerDependencyRules: {
                    ignoreMissing: ["@algolia/client-search"]
                }
            }
        }
          , u = e=>e
          , l = e=>e
          , c = ()=>`${s.name}@${s.version}`
          , d = class extends Error {
            constructor(e, t={}) {
                let n = t.cause instanceof d ? t.cause.details : t.cause?.message ? t.cause.message : t.details
                  , r = t.cause instanceof d && t.cause.docsPath || t.docsPath
                  , i = [e || "An error occurred.", "", ...t.metaMessages ? [...t.metaMessages, ""] : [], ...r ? [`Docs: https://viem.sh ${r}.html ${t.docsSlug ? `#${t.docsSlug}` : ""}`] : [], ...n ? [`Details: ${n}`] : [], `Version: ${c()}`].join("\n");
                super(i),
                o(this, "details"),
                o(this, "docsPath"),
                o(this, "metaMessages"),
                o(this, "shortMessage"),
                o(this, "name", "ViemError"),
                t.cause && (this.cause = t.cause),
                this.details = n,
                this.docsPath = r,
                this.metaMessages = t.metaMessages,
                this.shortMessage = e
            }
        }
          , p = class extends d {
            constructor({data: e, size: t}) {
                super(`Data size of ${t} bytes is invalid.
Size must be in increments of 32 bytes (size % 32 === 0).`, {
                    metaMessages: [`Data: ${e} (${t} bytes)`]
                }),
                o(this, "name", "AbiDecodingDataSizeInvalidError")
            }
        }
          , f = class extends d {
            constructor({data: e, params: t, size: n}) {
                super(`Data size of ${n} bytes is too small for given parameters.`, {
                    metaMessages: [`Params: (${th(t, {
                        includeName: !0
                    })})`, `Data:   ${e} (${n} bytes)`]
                }),
                o(this, "name", "AbiDecodingDataSizeTooSmallError"),
                o(this, "data"),
                o(this, "params"),
                o(this, "size"),
                this.data = e,
                this.params = t,
                this.size = n
            }
        }
          , h = class extends d {
            constructor() {
                super('Cannot decode zero data ("0x") with ABI parameters.'),
                o(this, "name", "AbiDecodingZeroDataError")
            }
        }
          , m = class extends d {
            constructor({expectedLength: e, givenLength: t, type: n}) {
                super(`ABI encoding array length mismatch for type ${n}.
Expected length: ${e}
Given length: ${t}`),
                o(this, "name", "AbiEncodingArrayLengthMismatchError")
            }
        }
          , y = class extends d {
            constructor({expectedSize: e, value: t}) {
                super(`Size of bytes "${t}" (bytes ${eV(t)}) does not match expected size (bytes ${e}).`),
                o(this, "name", "AbiEncodingBytesSizeMismatchError")
            }
        }
          , g = class extends d {
            constructor({expectedLength: e, givenLength: t}) {
                super(`ABI encoding params/values length mismatch.
Expected length (params): ${e}
Given length (values): ${t}`),
                o(this, "name", "AbiEncodingLengthMismatchError")
            }
        }
          , b = class extends d {
            constructor(e, {docsPath: t}) {
                super(`Encoded error signature "${e}" not found on ABI.
Make sure you are using the correct ABI and that the error exists on it.
You can look up the signature here: https://openchain.xyz/signatures?query=${e}.`, {
                    docsPath: t
                }),
                o(this, "name", "AbiErrorSignatureNotFoundError")
            }
        }
          , v = class extends d {
            constructor({docsPath: e}) {
                super("Cannot extract event signature from empty topics.", {
                    docsPath: e
                }),
                o(this, "name", "AbiEventSignatureEmptyTopicsError")
            }
        }
          , w = class extends d {
            constructor(e, {docsPath: t}) {
                super(`Encoded event signature "${e}" not found on ABI.
Make sure you are using the correct ABI and that the event exists on it.
You can look up the signature here: https://openchain.xyz/signatures?query=${e}.`, {
                    docsPath: t
                }),
                o(this, "name", "AbiEventSignatureNotFoundError")
            }
        }
          , T = class extends d {
            constructor(e, {docsPath: t}) {
                super(`Event "${e}" not found on ABI.
Make sure you are using the correct ABI and that the event exists on it.`, {
                    docsPath: t
                }),
                o(this, "name", "AbiEventNotFoundError")
            }
        }
          , E = class extends d {
            constructor(e, {docsPath: t}) {
                super(`Function "${e}" not found on ABI.
Make sure you are using the correct ABI and that the function exists on it.`, {
                    docsPath: t
                }),
                o(this, "name", "AbiFunctionNotFoundError")
            }
        }
          , A = class extends d {
            constructor(e, {docsPath: t}) {
                super(`Function "${e}" does not contain any \`outputs\` on ABI.
Cannot decode function result without knowing what the parameter types are.
Make sure you are using the correct ABI and that the function exists on it.`, {
                    docsPath: t
                }),
                o(this, "name", "AbiFunctionOutputsNotFoundError")
            }
        }
          , x = class extends d {
            constructor({data: e, params: t, size: n}) {
                super(`Data size of ${n} bytes is too small for non-indexed event parameters.`, {
                    metaMessages: ["This error is usually caused if the ABI event has too many non-indexed event parameters for the emitted log.", "", `Params: (${th(t, {
                        includeName: !0
                    })})`, `Data:   ${e} (${n} bytes)`]
                }),
                o(this, "name", "DecodeLogDataMismatch"),
                o(this, "data"),
                o(this, "params"),
                o(this, "size"),
                this.data = e,
                this.params = t,
                this.size = n
            }
        }
          , k = class extends d {
            constructor({abiItem: e, param: t}) {
                super(`Expected a topic for indexed event parameter ${t.name ? ` "${t.name}"` : ""} on event "${tf(e, {
                    includeName: !0
                })}".`),
                o(this, "name", "DecodeLogTopicsMismatch")
            }
        }
          , C = class extends d {
            constructor(e, {docsPath: t}) {
                super(`Type "${e}" is not a valid encoding type.
Please provide a valid ABI type.`, {
                    docsPath: t
                }),
                o(this, "name", "InvalidAbiEncodingType")
            }
        }
          , _ = class extends d {
            constructor(e, {docsPath: t}) {
                super(`Type "${e}" is not a valid decoding type.
Please provide a valid ABI type.`, {
                    docsPath: t
                }),
                o(this, "name", "InvalidAbiDecodingType")
            }
        }
          , S = class extends d {
            constructor(e) {
                super(`Value "${e}" is not a valid array.`),
                o(this, "name", "InvalidArrayError")
            }
        }
          , I = class extends d {
            constructor(e) {
                super(`"${e}" is not a valid definition type.
Valid types: "function", "event", "error"`),
                o(this, "name", "InvalidDefinitionTypeError")
            }
        }
          , P = class extends d {
            constructor({docsPath: e}={}) {
                super("Could not find an Account to execute with this Action.\nPlease provide an Account with the `account` argument on the Action, or by supplying an `account` to the WalletClient.", {
                    docsPath: e,
                    docsSlug: "account"
                }),
                o(this, "name", "AccountNotFoundError")
            }
        }
          , B = class extends d {
            constructor({address: e}) {
                super(`Address "${e}" is invalid.`),
                o(this, "name", "InvalidAddressError")
            }
        }
          , O = class extends d {
            constructor({blockHash: e, blockNumber: t}) {
                let n = "Block";
                e && (n = `Block at hash "${e}"`),
                t && (n = `Block at number "${t}"`),
                super(`${n} could not be found.`),
                o(this, "name", "BlockNotFoundError")
            }
        }
          , N = class extends d {
            constructor({blockNumber: e, chain: t, contract: n}) {
                super(`Chain "${t.name}" does not support contract "${n.name}".`, {
                    metaMessages: ["This could be due to any of the following:", ...e && n.blockCreated && n.blockCreated > e ? [`- The contract "${n.name}" was not deployed until block ${n.blockCreated} (current block ${e}).`] : [`- The chain does not have the contract "${n.name}" configured.`]]
                }),
                o(this, "name", "ChainDoesNotSupportContract")
            }
        }
          , R = [{
            inputs: [{
                components: [{
                    name: "target",
                    type: "address"
                }, {
                    name: "allowFailure",
                    type: "bool"
                }, {
                    name: "callData",
                    type: "bytes"
                }],
                name: "calls",
                type: "tuple[]"
            }],
            name: "aggregate3",
            outputs: [{
                components: [{
                    name: "success",
                    type: "bool"
                }, {
                    name: "returnData",
                    type: "bytes"
                }],
                name: "returnData",
                type: "tuple[]"
            }],
            stateMutability: "view",
            type: "function"
        }]
          , F = [{
            name: "resolve",
            type: "function",
            stateMutability: "view",
            inputs: [{
                name: "name",
                type: "bytes"
            }, {
                name: "data",
                type: "bytes"
            }],
            outputs: [{
                name: "",
                type: "bytes"
            }, {
                name: "address",
                type: "address"
            }]
        }]
          , D = [{
            name: "text",
            type: "function",
            stateMutability: "view",
            inputs: [{
                name: "name",
                type: "bytes32"
            }, {
                name: "key",
                type: "string"
            }],
            outputs: [{
                name: "",
                type: "string"
            }]
        }]
          , M = [{
            name: "addr",
            type: "function",
            stateMutability: "view",
            inputs: [{
                name: "name",
                type: "bytes32"
            }],
            outputs: [{
                name: "",
                type: "address"
            }]
        }]
          , L = {
            1: "An `assert` condition failed.",
            17: "Arithmic operation resulted in underflow or overflow.",
            18: "Division or modulo by zero (e.g. `5 / 0` or `23 % 0`).",
            33: "Attempted to convert to an invalid type.",
            34: "Attempted to access a storage byte array that is incorrectly encoded.",
            49: "Performed `.pop()` on an empty array",
            50: "Array index is out of bounds.",
            65: "Allocated too much memory or created an array which is too large.",
            81: "Attempted to call a zero-initialized variable of internal function type."
        }
          , U = {
            inputs: [{
                name: "message",
                type: "string"
            }],
            name: "Error",
            type: "error"
        }
          , q = {
            inputs: [{
                name: "reason",
                type: "uint256"
            }],
            name: "Panic",
            type: "error"
        }
          , j = {
            gwei: 9,
            wei: 18
        }
          , $ = {
            ether: -9,
            wei: 9
        };
        function Z(e) {
            let t = Object.entries(e).map(([e,t])=>void 0 === t || !1 === t ? null : [e, t]).filter(Boolean)
              , n = t.reduce((e,[t])=>Math.max(e, t.length), 0);
            return t.map(([e,t])=>`  ${`${e}:`.padEnd(n + 1)}  ${t}`).join("\n")
        }
        var H = class extends d {
            constructor() {
                super("Cannot specify both a `gasPrice` and a `maxFeePerGas`/`maxPriorityFeePerGas`.\nUse `maxFeePerGas`/`maxPriorityFeePerGas` for EIP-1559 compatible networks, and `gasPrice` for others."),
                o(this, "name", "FeeConflictError")
            }
        }
          , G = class extends d {
            constructor({blockHash: e, blockNumber: t, blockTag: n, hash: r, index: i}) {
                let a = "Transaction";
                n && void 0 !== i && (a = `Transaction at block time "${n}" at index "${i}"`),
                e && void 0 !== i && (a = `Transaction at block hash "${e}" at index "${i}"`),
                t && void 0 !== i && (a = `Transaction at block number "${t}" at index "${i}"`),
                r && (a = `Transaction with hash "${r}"`),
                super(`${a} could not be found.`),
                o(this, "name", "TransactionNotFoundError")
            }
        }
          , z = class extends d {
            constructor({hash: e}) {
                super(`Transaction receipt with hash "${e}" could not be found. The Transaction may not be processed on a block yet.`),
                o(this, "name", "TransactionReceiptNotFoundError")
            }
        }
          , V = class extends d {
            constructor({hash: e}) {
                super(`Timed out while waiting for transaction with hash "${e}" to be confirmed.`),
                o(this, "name", "WaitForTransactionReceiptTimeoutError")
            }
        }
          , W = class extends d {
            constructor(e, {account: t, docsPath: n, chain: r, data: i, gas: a, gasPrice: s, maxFeePerGas: u, maxPriorityFeePerGas: l, nonce: c, to: d, value: p}) {
                let f = t ? tx(t) : void 0
                  , h = Z({
                    from: f?.address,
                    to: d,
                    value: void 0 !== p && `${nV(p)} ${r?.nativeCurrency.symbol || "ETH"}`,
                    data: i,
                    gas: a,
                    gasPrice: void 0 !== s && `${nW(s)} gwei`,
                    maxFeePerGas: void 0 !== u && `${nW(u)} gwei`,
                    maxPriorityFeePerGas: void 0 !== l && `${nW(l)} gwei`,
                    nonce: c
                });
                super(e.shortMessage, {
                    cause: e,
                    docsPath: n,
                    metaMessages: [...e.metaMessages ? [...e.metaMessages, " "] : [], "Raw Call Arguments:", h].filter(Boolean)
                }),
                o(this, "cause"),
                o(this, "name", "CallExecutionError"),
                this.cause = e
            }
        }
          , K = class extends d {
            constructor(e, {abi: t, args: n, contractAddress: r, docsPath: i, functionName: a, sender: s}) {
                let l = tg({
                    abi: t,
                    args: n,
                    name: a
                })
                  , c = l ? tA({
                    abiItem: l,
                    args: n,
                    includeFunctionName: !1,
                    includeName: !1
                }) : void 0
                  , d = l ? tf(l, {
                    includeName: !0
                }) : void 0
                  , p = Z({
                    address: r && u(r),
                    function: d,
                    args: c && "()" !== c && `${[...Array(a?.length ?? 0).keys()].map(()=>" ").join("")}${c}`,
                    sender: s
                });
                super(e.shortMessage || `An unknown error occurred while executing the contract function "${a}".`, {
                    cause: e,
                    docsPath: i,
                    metaMessages: [...e.metaMessages ? [...e.metaMessages, " "] : [], "Contract Call:", p].filter(Boolean)
                }),
                o(this, "abi"),
                o(this, "args"),
                o(this, "cause"),
                o(this, "contractAddress"),
                o(this, "formattedArgs"),
                o(this, "functionName"),
                o(this, "sender"),
                o(this, "name", "ContractFunctionExecutionError"),
                this.abi = t,
                this.args = n,
                this.cause = e,
                this.contractAddress = r,
                this.functionName = a,
                this.sender = s
            }
        }
          , X = class extends d {
            constructor({abi: e, data: t, functionName: n, message: r}) {
                let i, a, s;
                if (t && "0x" !== t) {
                    s = function({abi: e, data: t}) {
                        let n = eW(t, 0, 4);
                        if ("0x" === n)
                            throw new h;
                        let r = [...e || [], U, q]
                          , i = r.find(e=>"error" === e.type && n === ta(tf(e)));
                        if (!i)
                            throw new b(n,{
                                docsPath: "/docs/contract/decodeErrorResult"
                            });
                        return {
                            abiItem: i,
                            args: "inputs"in i && i.inputs && i.inputs.length > 0 ? td(i.inputs, eW(t, 4)) : void 0,
                            errorName: i.name
                        }
                    }({
                        abi: e,
                        data: t
                    });
                    let {abiItem: n, errorName: r, args: o} = s;
                    if ("Error" === r)
                        a = o[0];
                    else if ("Panic" === r) {
                        let[e] = o;
                        a = L[e]
                    } else if (o) {
                        let e = n ? tf(n, {
                            includeName: !0
                        }) : void 0
                          , t = n ? tA({
                            abiItem: n,
                            args: o,
                            includeFunctionName: !1,
                            includeName: !1
                        }) : void 0;
                        i = [e ? `Error: ${e}` : "", t && "()" !== t ? `       ${[...Array(r?.length ?? 0).keys()].map(()=>" ").join("")}${t}` : ""]
                    }
                } else
                    r && (a = r);
                super(a ? [`The contract function "${n}" reverted with the following reason:`, a].join("\n") : `The contract function "${n}" reverted.`, {
                    metaMessages: i
                }),
                o(this, "name", "ContractFunctionRevertedError"),
                o(this, "data"),
                o(this, "reason"),
                this.reason = a,
                this.data = s
            }
        }
          , J = class extends d {
            constructor({functionName: e}) {
                super(`The contract function "${e}" returned no data ("0x").`, {
                    metaMessages: ["This could be due to any of the following:", `  - The contract does not have the function "${e}",`, "  - The parameters passed to the contract function may be invalid, or", "  - The address is not a contract."]
                }),
                o(this, "name", "ContractFunctionZeroDataError")
            }
        }
          , Q = class extends d {
            constructor({data: e, message: t}) {
                super(t || ""),
                o(this, "code", 3),
                o(this, "name", "RawContractError"),
                o(this, "data"),
                this.data = e
            }
        }
          , Y = class extends d {
            constructor({size: e, targetSize: t, type: n}) {
                super(`${n.charAt(0).toUpperCase()}${n.slice(1).toLowerCase()} size (${e}) exceeds padding size (${t}).`),
                o(this, "name", "SizeExceedsPaddingSizeError")
            }
        }
          , ee = class extends d {
            constructor({max: e, min: t, signed: n, size: r, value: i}) {
                super(`Number "${i}" is not in safe ${r ? `${8 * r}-bit ${n ? "signed" : "unsigned"} ` : ""}integer range ${e ? `(${t} to ${e})` : `(above ${t})`}`),
                o(this, "name", "IntegerOutOfRangeError")
            }
        }
          , et = class extends d {
            constructor(e) {
                super(`Hex value "${e}" is not a valid boolean. The hex value must be "0x0" (false) or "0x1" (true).`),
                o(this, "name", "InvalidHexBooleanError")
            }
        }
          , en = class extends d {
            constructor({data: e}) {
                super("Unable to extract image from metadata. The metadata may be malformed or invalid.", {
                    metaMessages: ["- Metadata must be a JSON object with at least an `image`, `image_url` or `image_data` property.", "", `Provided data: ${JSON.stringify(e)}`]
                }),
                o(this, "name", "EnsAvatarInvalidMetadataError")
            }
        }
          , er = class extends d {
            constructor({reason: e}) {
                super(`ENS NFT avatar URI is invalid. ${e}`),
                o(this, "name", "EnsAvatarInvalidNftUriError")
            }
        }
          , ei = class extends d {
            constructor({uri: e}) {
                super(`Unable to resolve ENS avatar URI "${e}". The URI may be malformed, invalid, or does not respond with a valid image.`),
                o(this, "name", "EnsAvatarUriResolutionError")
            }
        }
          , ea = class extends d {
            constructor({namespace: e}) {
                super(`ENS NFT avatar namespace "${e}" is not supported. Must be "erc721" or "erc1155".`),
                o(this, "name", "EnsAvatarUnsupportedNamespaceError")
            }
        }
          , eo = class extends d {
            constructor(e, {account: t, docsPath: n, chain: r, data: i, gas: a, gasPrice: s, maxFeePerGas: u, maxPriorityFeePerGas: l, nonce: c, to: d, value: p}) {
                let f = Z({
                    from: t?.address,
                    to: d,
                    value: void 0 !== p && `${nV(p)} ${r?.nativeCurrency.symbol || "ETH"}`,
                    data: i,
                    gas: a,
                    gasPrice: void 0 !== s && `${nW(s)} gwei`,
                    maxFeePerGas: void 0 !== u && `${nW(u)} gwei`,
                    maxPriorityFeePerGas: void 0 !== l && `${nW(l)} gwei`,
                    nonce: c
                });
                super(e.shortMessage, {
                    cause: e,
                    docsPath: n,
                    metaMessages: [...e.metaMessages ? [...e.metaMessages, " "] : [], "Estimate Gas Arguments:", f].filter(Boolean)
                }),
                o(this, "cause"),
                o(this, "name", "EstimateGasExecutionError"),
                this.cause = e
            }
        }
          , es = class extends d {
            constructor(e) {
                super(`Filter type "${e}" is not supported.`),
                o(this, "name", "FilterTypeNotSupportedError")
            }
        }
          , eu = class extends d {
            constructor({cause: e, message: t}={}) {
                let n = t?.replace("execution reverted: ", "")?.replace("execution reverted", "");
                super(`Execution reverted ${n ? `with reason: ${n}` : "for an unknown reason"}.`, {
                    cause: e
                }),
                o(this, "name", "ExecutionRevertedError")
            }
        }
        ;
        o(eu, "code", 3),
        o(eu, "nodeMessage", /execution reverted/);
        var el = class extends d {
            constructor({cause: e, maxFeePerGas: t}={}) {
                super(`The fee cap (\`maxFeePerGas\`${t ? ` = ${nW(t)} gwei` : ""}) cannot be higher than the maximum allowed value (2^256-1).`, {
                    cause: e
                }),
                o(this, "name", "FeeCapTooHigh")
            }
        }
        ;
        o(el, "nodeMessage", /max fee per gas higher than 2\^256-1|fee cap higher than 2\^256-1/);
        var ec = class extends d {
            constructor({cause: e, maxFeePerGas: t}={}) {
                super(`The fee cap (\`maxFeePerGas\`${t ? ` = ${nW(t)}` : ""} gwei) cannot be lower than the block base fee.`, {
                    cause: e
                }),
                o(this, "name", "FeeCapTooLow")
            }
        }
        ;
        o(ec, "nodeMessage", /max fee per gas less than block base fee|fee cap less than block base fee|transaction is outdated/);
        var ed = class extends d {
            constructor({cause: e, nonce: t}={}) {
                super(`Nonce provided for the transaction ${t ? `(${t}) ` : ""}is higher than the next one expected.`, {
                    cause: e
                }),
                o(this, "name", "NonceTooHighError")
            }
        }
        ;
        o(ed, "nodeMessage", /nonce too high/);
        var ep = class extends d {
            constructor({cause: e, nonce: t}={}) {
                super(`Nonce provided for the transaction ${t ? `(${t}) ` : ""}is lower than the current nonce of the account.
Try increasing the nonce or find the latest nonce with \`getTransactionCount\`.`, {
                    cause: e
                }),
                o(this, "name", "NonceTooLowError")
            }
        }
        ;
        o(ep, "nodeMessage", /nonce too low|transaction already imported/);
        var ef = class extends d {
            constructor({cause: e, nonce: t}={}) {
                super(`Nonce provided for the transaction ${t ? `(${t}) ` : ""}exceeds the maximum allowed nonce.`, {
                    cause: e
                }),
                o(this, "name", "NonceMaxValueError")
            }
        }
        ;
        o(ef, "nodeMessage", /nonce has max value/);
        var eh = class extends d {
            constructor({cause: e}={}) {
                super("The total cost (gas * gas fee + value) of executing this transaction exceeds the balance of the account.", {
                    cause: e,
                    metaMessages: ["This error could arise when the account does not have enough funds to:", " - pay for the total gas fee,", " - pay for the value to send.", " ", "The cost of the transaction is calculated as `gas * gas fee + value`, where:", " - `gas` is the amount of gas needed for transaction to execute,", " - `gas fee` is the gas fee,", " - `value` is the amount of ether to send to the recipient."]
                }),
                o(this, "name", "InsufficientFundsError")
            }
        }
        ;
        o(eh, "nodeMessage", /insufficient funds/);
        var em = class extends d {
            constructor({cause: e, gas: t}={}) {
                super(`The amount of gas ${t ? `(${t}) ` : ""}provided for the transaction exceeds the limit allowed for the block.`, {
                    cause: e
                }),
                o(this, "name", "IntrinsicGasTooHighError")
            }
        }
        ;
        o(em, "nodeMessage", /intrinsic gas too high|gas limit reached/);
        var ey = class extends d {
            constructor({cause: e, gas: t}={}) {
                super(`The amount of gas ${t ? `(${t}) ` : ""}provided for the transaction is too low.`, {
                    cause: e
                }),
                o(this, "name", "IntrinsicGasTooLowError")
            }
        }
        ;
        o(ey, "nodeMessage", /intrinsic gas too low/);
        var eg = class extends d {
            constructor({cause: e}) {
                super("The transaction type is not supported for this chain.", {
                    cause: e
                }),
                o(this, "name", "TransactionTypeNotSupportedError")
            }
        }
        ;
        o(eg, "nodeMessage", /transaction type not valid/);
        var eb = class extends d {
            constructor({cause: e, maxPriorityFeePerGas: t, maxFeePerGas: n}={}) {
                super(`The provided tip (\`maxPriorityFeePerGas\`${t ? ` = ${nW(t)} gwei` : ""}) cannot be higher than the fee cap (\`maxFeePerGas\`${n ? ` = ${nW(n)} gwei` : ""}).`, {
                    cause: e
                }),
                o(this, "name", "TipAboveFeeCapError")
            }
        }
        ;
        o(eb, "nodeMessage", /max priority fee per gas higher than max fee per gas|tip higher than fee cap/);
        var ev = class extends d {
            constructor({cause: e}) {
                super(`An error occurred while executing: ${e?.message}`, {
                    cause: e
                }),
                o(this, "name", "UnknownNodeError")
            }
        }
          , ew = class extends d {
            constructor(e, {docsPath: t, metaMessages: n, shortMessage: r}) {
                super(r, {
                    cause: e,
                    docsPath: t,
                    metaMessages: n || e?.metaMessages
                }),
                this.name = e.name
            }
        }
          , eT = class extends ew {
            constructor(e, {docsPath: t, shortMessage: n}) {
                super(e, {
                    docsPath: t,
                    shortMessage: n
                }),
                o(this, "code"),
                this.code = e.code,
                this.name = e.name
            }
        }
          , eE = class extends eT {
            constructor(e) {
                super(e, {
                    shortMessage: "Invalid JSON was received by the server. An error occurred on the server while parsing the JSON text."
                }),
                o(this, "name", "ParseRpcError"),
                o(this, "code", -32700)
            }
        }
          , eA = class extends eT {
            constructor(e) {
                super(e, {
                    shortMessage: "JSON is not a valid request object."
                }),
                o(this, "name", "InvalidRequestRpcError"),
                o(this, "code", -32600)
            }
        }
          , ex = class extends eT {
            constructor(e) {
                super(e, {
                    shortMessage: "The method does not exist / is not available."
                }),
                o(this, "name", "MethodNotFoundRpcError"),
                o(this, "code", -32601)
            }
        }
          , ek = class extends eT {
            constructor(e) {
                super(e, {
                    shortMessage: "Invalid parameters were provided to the RPC method.\nDouble check you have provided the correct parameters."
                }),
                o(this, "name", "InvalidParamsRpcError"),
                o(this, "code", -32602)
            }
        }
          , eC = class extends eT {
            constructor(e) {
                super(e, {
                    shortMessage: "An internal error was received."
                }),
                o(this, "name", "InternalRpcError"),
                o(this, "code", -32603)
            }
        }
          , e_ = class extends eT {
            constructor(e) {
                super(e, {
                    shortMessage: "Missing or invalid parameters.\nDouble check you have provided the correct parameters."
                }),
                o(this, "name", "InvalidInputRpcError"),
                o(this, "code", -32e3)
            }
        }
          , eS = class extends eT {
            constructor(e) {
                super(e, {
                    shortMessage: "Requested resource not found."
                }),
                o(this, "name", "ResourceNotFoundRpcError"),
                o(this, "code", -32001)
            }
        }
          , eI = class extends eT {
            constructor(e) {
                super(e, {
                    shortMessage: "Requested resource not available."
                }),
                o(this, "name", "ResourceUnavailableRpcError"),
                o(this, "code", -32002)
            }
        }
          , eP = class extends eT {
            constructor(e) {
                super(e, {
                    shortMessage: "Transaction creation failed."
                }),
                o(this, "name", "TransactionRejectedRpcError"),
                o(this, "code", -32003)
            }
        }
          , eB = class extends eT {
            constructor(e) {
                super(e, {
                    shortMessage: "Method is not implemented."
                }),
                o(this, "name", "MethodNotSupportedRpcError"),
                o(this, "code", -32004)
            }
        }
          , eO = class extends eT {
            constructor(e) {
                super(e, {
                    shortMessage: "Request exceeds defined limit."
                }),
                o(this, "name", "LimitExceededRpcError"),
                o(this, "code", -32005)
            }
        }
          , eN = class extends eT {
            constructor(e) {
                super(e, {
                    shortMessage: "Version of JSON-RPC protocol is not supported."
                }),
                o(this, "name", "JsonRpcVersionUnsupportedError"),
                o(this, "code", -32006)
            }
        }
          , eR = class extends ew {
            constructor(e) {
                super(e, {
                    shortMessage: "User rejected the request."
                }),
                o(this, "name", "UserRejectedRequestError"),
                o(this, "code", 4001)
            }
        }
          , eF = class extends ew {
            constructor(e) {
                super(e, {
                    shortMessage: "An error occurred when attempting to switch chain."
                }),
                o(this, "name", "SwitchChainError"),
                o(this, "code", 4902)
            }
        }
          , eD = class extends ew {
            constructor(e) {
                super(e, {
                    shortMessage: "An unknown RPC error occurred."
                }),
                o(this, "name", "UnknownRpcError")
            }
        }
          , eM = class extends d {
            constructor({body: e, details: t, headers: n, status: r, url: i}) {
                super("HTTP request failed.", {
                    details: t,
                    metaMessages: [r && `Status: ${r}`, `URL: ${l(i)}`, `Request body: ${tG(e)}`].filter(Boolean)
                }),
                o(this, "name", "HttpRequestError"),
                o(this, "body"),
                o(this, "headers"),
                o(this, "status"),
                o(this, "url"),
                this.body = e,
                this.headers = n,
                this.status = r,
                this.url = i
            }
        }
          , eL = class extends d {
            constructor({body: e, details: t, url: n}) {
                super("WebSocket request failed.", {
                    details: t,
                    metaMessages: [`URL: ${l(n)}`, `Request body: ${tG(e)}`]
                }),
                o(this, "name", "WebSocketRequestError")
            }
        }
          , eU = class extends d {
            constructor({body: e, error: t, url: n}) {
                super("RPC Request failed.", {
                    cause: t,
                    details: t.message,
                    metaMessages: [`URL: ${l(n)}`, `Request body: ${tG(e)}`]
                }),
                o(this, "code"),
                o(this, "name", "RpcError"),
                this.code = t.code
            }
        }
          , eq = class extends d {
            constructor({body: e, url: t}) {
                super("The request took too long to respond.", {
                    details: "The request timed out.",
                    metaMessages: [`URL: ${l(t)}`, `Request body: ${tG(e)}`]
                }),
                o(this, "name", "TimeoutError")
            }
        }
          , ej = class extends d {
            constructor() {
                super("No URL was provided to the Transport. Please provide a valid RPC URL to the Transport.", {
                    docsPath: "/docs/clients/intro"
                })
            }
        }
        ;
        function e$(e) {
            return !!e && "string" == typeof e && /^0x[0-9a-fA-F]*$/.test(e)
        }
        function eZ(e) {
            return "string" == typeof e[0] ? eH(e) : function(e) {
                let t = 0;
                for (let n of e)
                    t += n.length;
                let n = new Uint8Array(t)
                  , r = 0;
                for (let t of e)
                    n.set(t, r),
                    r += t.length;
                return n
            }(e)
        }
        function eH(e) {
            return `0x ${e.reduce((e,t)=>e + t.replace("0x", ""), "")}`
        }
        function eG(e, {dir: t, size: n=32}={}) {
            if (null === n)
                return e;
            let r = e.replace("0x", "");
            if (r.length > 2 * n)
                throw new Y({
                    size: Math.ceil(r.length / 2),
                    targetSize: n,
                    type: "hex"
                });
            return `0x ${r["right" === t ? "padEnd" : "padStart"](2 * n, "0")}`
        }
        function ez(e, {dir: t="left"}={}) {
            let n = "string" == typeof e ? e.replace("0x", "") : e
              , r = 0;
            for (let e = 0; e < n.length - 1 && "0" === n["left" === t ? e : n.length - e - 1].toString(); e++)
                r++;
            return (n = "left" === t ? n.slice(r) : n.slice(0, n.length - r),
            "string" == typeof e) ? (1 === n.length && "right" === t && (n = `${n}0`),
            `0x ${n}`) : n
        }
        function eV(e) {
            return e$(e) ? Math.ceil((e.length - 2) / 2) : e.length
        }
        function eW(e, t, n) {
            return e$(e) ? function(e, t, n) {
                eK(e, t);
                let r = e.replace("0x", "").slice((t ?? 0) * 2, (n ?? e.length) * 2);
                return `0x ${r}`
            }(e, t, n) : (eK(e, t),
            e.slice(t, n))
        }
        function eK(e, t) {
            if ("number" == typeof t && t > 0 && t > eV(e) - 1)
                throw Error(`Slice starting at offset "${t}" is out-of-bounds (size: ${eV(e)}).`)
        }
        var eX = Array.from({
            length: 256
        }, (e,t)=>t.toString(16).padStart(2, "0"));
        function eJ(e) {
            return `0x ${Number(e)}`
        }
        function eQ(e) {
            let t = "";
            for (let n = 0; n < e.length; n++)
                t += eX[e[n]];
            return `0x ${t}`
        }
        function eY(e) {
            return "number" == typeof e || "bigint" == typeof e ? e0(e) : "string" == typeof e ? e2(e) : "boolean" == typeof e ? eJ(e) : eQ(e)
        }
        function e0(e, t={}) {
            let n;
            let {signed: r, size: i} = t
              , a = BigInt(e);
            i ? n = r ? (1n << 8n * BigInt(i) - 1n) - 1n : 2n ** (8n * BigInt(i)) - 1n : "number" == typeof e && (n = BigInt(Number.MAX_SAFE_INTEGER));
            let o = "bigint" == typeof n && r ? -n - 1n : 0;
            if (n && a > n || a < o) {
                let t = "bigint" == typeof e ? "n" : "";
                throw new ee({
                    max: n ? `${n}${t}` : void 0,
                    min: `${o}${t}`,
                    signed: r,
                    size: i,
                    value: `${e}${t}`
                })
            }
            let s = `0x ${(r && a < 0 ? (1n << BigInt(8 * i)) + BigInt(a) : a).toString(16)}`;
            return i ? function(e, {dir: t, size: n=32}={}) {
                return "string" == typeof e ? eG(e, {
                    dir: t,
                    size: n
                }) : function(e, {dir: t, size: n=32}={}) {
                    if (null === n)
                        return e;
                    if (e.length > n)
                        throw new Y({
                            size: e.length,
                            targetSize: n,
                            type: "bytes"
                        });
                    let r = new Uint8Array(n);
                    for (let i = 0; i < n; i++) {
                        let a = "right" === t;
                        r[a ? i : n - i - 1] = e[a ? i : e.length - i - 1]
                    }
                    return r
                }(e, {
                    dir: t,
                    size: n
                })
            }(s, {
                size: i
            }) : s
        }
        var e1 = new TextEncoder;
        function e2(e) {
            let t = e1.encode(e);
            return eY(t)
        }
        var e6 = new TextEncoder;
        function e5(e) {
            return "number" == typeof e || "bigint" == typeof e ? function(e, t) {
                let n = e0(e, void 0);
                return e3(n)
            }(e) : "boolean" == typeof e ? function(e) {
                let t = new Uint8Array(1);
                return t[0] = Number(e),
                t
            }(e) : e$(e) ? e3(e) : e8(e)
        }
        function e3(e) {
            let t = e.slice(2);
            t.length % 2 && (t = `0 ${t}`);
            let n = new Uint8Array(t.length / 2);
            for (let e = 0; e < n.length; e++) {
                let r = 2 * e
                  , i = t.slice(r, r + 2)
                  , a = Number.parseInt(i, 16);
                if (Number.isNaN(a) || a < 0)
                    throw new d(`Invalid byte sequence ("${i}" in "${t}").`);
                n[e] = a
            }
            return n
        }
        function e8(e) {
            return e6.encode(e)
        }
        function e4(e, t={}) {
            let {signed: n} = t
              , r = BigInt(e);
            if (!n)
                return r;
            let i = (e.length - 2) / 2
              , a = (1n << 8n * BigInt(i) - 1n) - 1n;
            return r <= a ? r : r - BigInt(`0x ${"f".padStart(2 * i, "f")}`) - 1n
        }
        function e9(e, t={}) {
            return Number(e4(e, t))
        }
        var e7 = /((function|event)\s)?(.*)(\((.*)\))/;
        function te(e) {
            let t = e.match(e7)
              , n = t?.[2] || void 0
              , r = t?.[3]
              , i = t?.[5] || void 0;
            return {
                type: n,
                name: r,
                params: i
            }
        }
        function tt(e, t) {
            let n = (0,
            r.fr)(e$(e) ? e5(e) : e);
            return "bytes" === (t || "hex") ? n : eY(n)
        }
        var tn = e=>tt(e5(e));
        function tr(e) {
            let t = te(e).name
              , n = function(e) {
                let t = te(e).params
                  , n = t?.split(",").map(e=>e.trim().split(" "));
                return n?.map(e=>({
                    type: e[0],
                    name: "indexed" === e[1] ? e[2] : e[1],
                    ..."indexed" === e[1] ? {
                        indexed: !0
                    } : {}
                }))
            }(e);
            return n && 0 !== n.length ? tn(`${t}(${n.map(({type: e})=>e).join(",")})`) : tn(e.replace(/ /g, ""))
        }
        var ti = e=>tr(e)
          , ta = e=>eW(tr(e), 0, 4)
          , to = /^0x[a-fA-F0-9]{40}$/;
        function ts(e) {
            return to.test(e)
        }
        function tu(e, t) {
            if (e.length !== t.length)
                throw new g({
                    expectedLength: e.length,
                    givenLength: t.length
                });
            let n = function({params: e, values: t}) {
                let n = [];
                for (let r = 0; r < e.length; r++)
                    n.push(function e({param: t, value: n}) {
                        let r = tc(t.type);
                        if (r) {
                            let[i,a] = r;
                            return function(t, {length: n, param: r}) {
                                let i = null === n;
                                if (!Array.isArray(t))
                                    throw new S(t);
                                if (!i && t.length !== n)
                                    throw new m({
                                        expectedLength: n,
                                        givenLength: t.length,
                                        type: `${r.type}[${n}]`
                                    });
                                let a = !1
                                  , o = [];
                                for (let n = 0; n < t.length; n++) {
                                    let i = e({
                                        param: r,
                                        value: t[n]
                                    });
                                    i.dynamic && (a = !0),
                                    o.push(i)
                                }
                                if (i || a) {
                                    let e = tl(o);
                                    if (i) {
                                        let t = e0(o.length, {
                                            size: 32
                                        });
                                        return {
                                            dynamic: !0,
                                            encoded: o.length > 0 ? eZ([t, e]) : t
                                        }
                                    }
                                    if (a)
                                        return {
                                            dynamic: !0,
                                            encoded: e
                                        }
                                }
                                return {
                                    dynamic: !1,
                                    encoded: eZ(o.map(({encoded: e})=>e))
                                }
                            }(n, {
                                length: i,
                                param: {
                                    ...t,
                                    type: a
                                }
                            })
                        }
                        if ("tuple" === t.type)
                            return function(t, {param: n}) {
                                let r = !1
                                  , i = [];
                                for (let a = 0; a < n.components.length; a++) {
                                    let o = n.components[a]
                                      , s = Array.isArray(t) ? a : o.name
                                      , u = e({
                                        param: o,
                                        value: t[s]
                                    });
                                    i.push(u),
                                    u.dynamic && (r = !0)
                                }
                                return {
                                    dynamic: r,
                                    encoded: r ? tl(i) : eZ(i.map(({encoded: e})=>e))
                                }
                            }(n, {
                                param: t
                            });
                        if ("address" === t.type)
                            return function(e) {
                                if (!ts(e))
                                    throw new B({
                                        address: e
                                    });
                                return {
                                    dynamic: !1,
                                    encoded: eG(e.toLowerCase())
                                }
                            }(n);
                        if ("bool" === t.type)
                            return {
                                dynamic: !1,
                                encoded: eG(eJ(n))
                            };
                        if (t.type.startsWith("uint") || t.type.startsWith("int")) {
                            let e = t.type.startsWith("int");
                            return function(e, {signed: t}) {
                                return {
                                    dynamic: !1,
                                    encoded: e0(e, {
                                        size: 32,
                                        signed: t
                                    })
                                }
                            }(n, {
                                signed: e
                            })
                        }
                        if (t.type.startsWith("bytes"))
                            return function(e, {param: t}) {
                                let[n,r] = t.type.split("bytes");
                                if (!r) {
                                    let t = Math.ceil(eV(e) / 32)
                                      , n = [];
                                    for (let r = 0; r < t; r++)
                                        n.push(eG(eW(e, 32 * r, (r + 1) * 32), {
                                            dir: "right"
                                        }));
                                    return {
                                        dynamic: !0,
                                        encoded: eZ([eG(e0(eV(e), {
                                            size: 32
                                        })), ...n])
                                    }
                                }
                                if (eV(e) !== parseInt(r))
                                    throw new y({
                                        expectedSize: parseInt(r),
                                        value: e
                                    });
                                return {
                                    dynamic: !1,
                                    encoded: eG(e, {
                                        dir: "right"
                                    })
                                }
                            }(n, {
                                param: t
                            });
                        if ("string" === t.type)
                            return function(e) {
                                let t = e2(e)
                                  , n = Math.ceil(eV(t) / 32)
                                  , r = [];
                                for (let e = 0; e < n; e++)
                                    r.push(eG(eW(t, 32 * e, (e + 1) * 32), {
                                        dir: "right"
                                    }));
                                return {
                                    dynamic: !0,
                                    encoded: eZ([eG(e0(eV(t), {
                                        size: 32
                                    })), ...r])
                                }
                            }(n);
                        throw new C(t.type,{
                            docsPath: "/docs/contract/encodeAbiParameters"
                        })
                    }({
                        param: e[r],
                        value: t[r]
                    }));
                return n
            }({
                params: e,
                values: t
            })
              , r = tl(n);
            return 0 === r.length ? "0x" : r
        }
        function tl(e) {
            let t = 0;
            for (let n = 0; n < e.length; n++) {
                let {dynamic: r, encoded: i} = e[n];
                r ? t += 32 : t += eV(i)
            }
            let n = []
              , r = []
              , i = 0;
            for (let a = 0; a < e.length; a++) {
                let {dynamic: o, encoded: s} = e[a];
                o ? (n.push(e0(t + i, {
                    size: 32
                })),
                r.push(s),
                i += eV(s)) : n.push(s)
            }
            return eZ([...n, ...r])
        }
        function tc(e) {
            let t = e.match(/^(.*)\[(\d+)?\]$/);
            return t ? [t[2] ? Number(t[2]) : null, t[1]] : void 0
        }
        function td(e, t) {
            if ("0x" === t && e.length > 0)
                throw new h;
            if (eV(t) % 32 != 0)
                throw new p({
                    data: t,
                    size: eV(t)
                });
            return function({data: e, params: t}) {
                let n = []
                  , r = 0;
                for (let i = 0; i < t.length; i++) {
                    if (r >= eV(e))
                        throw new f({
                            data: e,
                            params: t,
                            size: eV(e)
                        });
                    let a = t[i]
                      , {consumed: o, value: s} = function e({data: t, param: n, position: r}) {
                        let i = tc(n.type);
                        if (i) {
                            let[a,o] = i;
                            return function(t, {param: n, length: r, position: i}) {
                                if (!r) {
                                    let r = e9(eW(t, i, i + 32))
                                      , a = e9(eW(t, r, r + 32))
                                      , o = 0
                                      , s = [];
                                    for (let i = 0; i < a; ++i) {
                                        let i = e({
                                            data: eW(t, r + 32),
                                            param: n,
                                            position: o
                                        });
                                        o += i.consumed,
                                        s.push(i.value)
                                    }
                                    return {
                                        value: s,
                                        consumed: 32
                                    }
                                }
                                if (tp(n)) {
                                    let a = tc(n.type)
                                      , o = !a?.[0]
                                      , s = 0
                                      , u = [];
                                    for (let a = 0; a < r; ++a) {
                                        let r = e9(eW(t, i, i + 32))
                                          , l = e({
                                            data: eW(t, r),
                                            param: n,
                                            position: o ? s : 32 * a
                                        });
                                        s += l.consumed,
                                        u.push(l.value)
                                    }
                                    return {
                                        value: u,
                                        consumed: 32
                                    }
                                }
                                let a = 0
                                  , o = [];
                                for (let s = 0; s < r; ++s) {
                                    let r = e({
                                        data: t,
                                        param: n,
                                        position: i + a
                                    });
                                    a += r.consumed,
                                    o.push(r.value)
                                }
                                return {
                                    value: o,
                                    consumed: a
                                }
                            }(t, {
                                length: a,
                                param: {
                                    ...n,
                                    type: o
                                },
                                position: r
                            })
                        }
                        if ("tuple" === n.type)
                            return function(t, {param: n, position: r}) {
                                let i = 0 === n.components.length || n.components.some(({name: e})=>!e)
                                  , a = i ? [] : {}
                                  , o = 0;
                                if (tp(n)) {
                                    let s = e9(eW(t, r, r + 32));
                                    for (let r = 0; r < n.components.length; ++r) {
                                        let u = n.components[r]
                                          , l = e({
                                            data: eW(t, s),
                                            param: u,
                                            position: o
                                        });
                                        o += l.consumed,
                                        a[i ? r : u?.name] = l.value
                                    }
                                    return {
                                        consumed: 32,
                                        value: a
                                    }
                                }
                                for (let s = 0; s < n.components.length; ++s) {
                                    let u = n.components[s]
                                      , l = e({
                                        data: t,
                                        param: u,
                                        position: r + o
                                    });
                                    o += l.consumed,
                                    a[i ? s : u?.name] = l.value
                                }
                                return {
                                    consumed: o,
                                    value: a
                                }
                            }(t, {
                                param: n,
                                position: r
                            });
                        if ("string" === n.type)
                            return function(e, {position: t}) {
                                let n = e9(eW(e, t, t + 32))
                                  , r = e9(eW(e, n, n + 32));
                                if (0 === r)
                                    return {
                                        consumed: 32,
                                        value: ""
                                    };
                                let i = function(e) {
                                    let t = e3(e);
                                    return new TextDecoder().decode(t)
                                }(ez(eW(e, n + 32, n + 32 + r)));
                                return {
                                    consumed: 32,
                                    value: i
                                }
                            }(t, {
                                position: r
                            });
                        if (n.type.startsWith("bytes"))
                            return function(e, {param: t, position: n}) {
                                let[r,i] = t.type.split("bytes");
                                if (!i) {
                                    let t = e9(eW(e, n, n + 32))
                                      , r = e9(eW(e, t, t + 32));
                                    if (0 === r)
                                        return {
                                            consumed: 32,
                                            value: "0x"
                                        };
                                    let i = eW(e, t + 32, t + 32 + r);
                                    return {
                                        consumed: 32,
                                        value: i
                                    }
                                }
                                let a = eW(e, n, n + parseInt(i));
                                return {
                                    consumed: 32,
                                    value: a
                                }
                            }(t, {
                                param: n,
                                position: r
                            });
                        let a = eW(t, r, r + 32);
                        if (n.type.startsWith("uint") || n.type.startsWith("int"))
                            return function(e, {param: t}) {
                                let n = t.type.startsWith("int")
                                  , r = parseInt(t.type.split("int")[1] || "256");
                                return {
                                    consumed: 32,
                                    value: r > 48 ? e4(e, {
                                        signed: n
                                    }) : e9(e, {
                                        signed: n
                                    })
                                }
                            }(a, {
                                param: n
                            });
                        if ("address" === n.type)
                            return {
                                consumed: 32,
                                value: function(e) {
                                    let t = e.substring(2).toLowerCase()
                                      , n = tt(e8(t), "bytes")
                                      , r = t.split("");
                                    for (let e = 0; e < 40; e += 2)
                                        n[e >> 1] >> 4 >= 8 && r[e] && (r[e] = r[e].toUpperCase()),
                                        (15 & n[e >> 1]) >= 8 && r[e + 1] && (r[e + 1] = r[e + 1].toUpperCase());
                                    return `0x ${r.join("")}`
                                }(eW(a, -20))
                            };
                        if ("bool" === n.type)
                            return {
                                consumed: 32,
                                value: function(e) {
                                    if ("0x0" === ez(e))
                                        return !1;
                                    if ("0x1" === ez(e))
                                        return !0;
                                    throw new et(e)
                                }(a)
                            };
                        throw new _(n.type,{
                            docsPath: "/docs/contract/decodeAbiParameters"
                        })
                    }({
                        data: e,
                        param: a,
                        position: r
                    });
                    n.push(s),
                    r += o
                }
                return n
            }({
                data: t,
                params: e
            })
        }
        function tp(e) {
            let {type: t} = e;
            if ("string" === t || "bytes" === t || t.endsWith("[]"))
                return !0;
            if ("tuple" === t)
                return e.components?.some(tp);
            let n = tc(e.type);
            return !!(n && tp({
                ...e,
                type: n[1]
            }))
        }
        function tf(e, {includeName: t=!1}={}) {
            if ("function" !== e.type && "event" !== e.type && "error" !== e.type)
                throw new I(e.type);
            return `${e.name}(${th(e.inputs, {
                includeName: t
            })})`
        }
        function th(e, {includeName: t=!1}={}) {
            return e ? e.map(e=>(function(e, {includeName: t}) {
                return e.type.startsWith("tuple") ? `(${th(e.components, {
                    includeName: t
                })})${e.type.slice(5)}` : e.type + (t && e.name ? ` ${e.name}` : "")
            }
            )(e, {
                includeName: t
            })).join(t ? ", " : ",") : ""
        }
        var tm = "/docs/contract/decodeEventLog";
        function ty({abi: e, data: t, topics: n}) {
            let[r,...i] = n;
            if (!r)
                throw new v({
                    docsPath: tm
                });
            let a = e.find(e=>"event" === e.type && r === ti(tf(e)));
            if (!(a && "name"in a))
                throw new w(r,{
                    docsPath: tm
                });
            let {name: o, inputs: s} = a
              , u = s?.some(e=>!("name"in e && e.name))
              , l = u ? [] : {};
            if (i.length > 0) {
                let e = s.filter(e=>"indexed"in e && e.indexed);
                for (let t = 0; t < e.length; t++) {
                    let n = e[t]
                      , r = i[t];
                    if (!r)
                        throw new k({
                            abiItem: a,
                            param: n
                        });
                    l[n.name || t] = function({param: e, value: t}) {
                        if ("string" === e.type || "bytes" === e.type || "tuple" === e.type || e.type.match(/^(.*)\[(\d+)?\]$/))
                            return t;
                        let n = td([e], t) || [];
                        return n[0]
                    }({
                        param: n,
                        value: r
                    })
                }
            }
            if (t && "0x" !== t) {
                let e = s.filter(e=>!("indexed"in e && e.indexed));
                try {
                    let n = td(e, t);
                    if (n) {
                        if (u)
                            l = [...l, ...n];
                        else
                            for (let t = 0; t < e.length; t++)
                                l[e[t].name] = n[t]
                    }
                } catch (e) {
                    if (e instanceof f)
                        throw new x({
                            data: e.data,
                            params: e.params,
                            size: e.size
                        });
                    throw e
                }
            }
            return {
                eventName: o,
                args: Object.values(l).length > 0 ? l : void 0
            }
        }
        function tg({abi: e, args: t=[], name: n}) {
            let r = e.filter(e=>"name"in e && e.name === n);
            if (0 !== r.length) {
                if (1 === r.length)
                    return r[0];
                for (let e of r) {
                    if (!("inputs"in e))
                        continue;
                    if (!t || 0 === t.length) {
                        if (!e.inputs || 0 === e.inputs.length)
                            return e;
                        continue
                    }
                    if (!e.inputs || 0 === e.inputs.length)
                        continue;
                    let n = t.every((t,n)=>{
                        let r = "inputs"in e && e.inputs[n];
                        return !!r && function e(t, n) {
                            let r = typeof t
                              , i = n.type;
                            switch (i) {
                            case "address":
                                return ts(t);
                            case "bool":
                                return "boolean" === r;
                            case "function":
                            case "string":
                                return "string" === r;
                            default:
                                if ("tuple" === i && "components"in n)
                                    return Object.values(n.components).every((n,r)=>e(Object.values(t)[r], n));
                                if (/^u?int(8|16|24|32|40|48|56|64|72|80|88|96|104|112|120|128|136|144|152|160|168|176|184|192|200|208|216|224|232|240|248|256)?$/.test(i))
                                    return "number" === r || "bigint" === r;
                                if (/^bytes([1-9]|1[0-9]|2[0-9]|3[0-2])?$/.test(i))
                                    return "string" === r || t instanceof Uint8Array;
                                if (/[a-z]+[1-9]{0,3}(\[[0-9]{0,}\])+$/.test(i))
                                    return Array.isArray(t) && t.every(t=>e(t, {
                                        ...n,
                                        type: i.replace(/(\[[0-9]{0,}\])$/, "")
                                    }));
                                return !1
                            }
                        }(t, r)
                    }
                    );
                    if (n)
                        return e
                }
                return r[0]
            }
        }
        var tb = "/docs/contract/decodeFunctionResult";
        function tv({abi: e, args: t, functionName: n, data: r}) {
            let i = tg({
                abi: e,
                args: t,
                name: n
            });
            if (!i)
                throw new E(n,{
                    docsPath: tb
                });
            if (!("outputs"in i))
                throw new A(n,{
                    docsPath: tb
                });
            let a = td(i.outputs, r);
            return a && a.length > 1 ? a : a && 1 === a.length ? a[0] : void 0
        }
        function tw({abi: e, eventName: t, args: n}) {
            let r = tg({
                abi: e,
                args: n,
                name: t
            });
            if (!r)
                throw new T(t,{
                    docsPath: "/docs/contract/encodeEventTopics"
                });
            let i = tf(r)
              , a = ti(i)
              , o = [];
            if (n && "inputs"in r) {
                let e = Array.isArray(n) ? n : r.inputs?.map(e=>n[e.name]) ?? [];
                o = r.inputs?.filter(e=>"indexed"in e && e.indexed).map((t,n)=>Array.isArray(e[n]) ? e[n].map((r,i)=>tT({
                    param: t,
                    value: e[n][i]
                })) : e[n] ? tT({
                    param: t,
                    value: e[n]
                }) : null) ?? []
            }
            return [a, ...o]
        }
        function tT({param: e, value: t}) {
            if ("string" === e.type || "bytes" === e.type)
                return tt(e5(t));
            if ("tuple" === e.type || e.type.match(/^(.*)\[(\d+)?\]$/))
                throw new es(e.type);
            return tu([e], [t])
        }
        function tE({abi: e, args: t, functionName: n}) {
            let r = tg({
                abi: e,
                args: t,
                name: n
            });
            if (!r)
                throw new E(n,{
                    docsPath: "/docs/contract/encodeFunctionData"
                });
            let i = tf(r)
              , a = ta(i)
              , o = "inputs"in r && r.inputs ? tu(r.inputs, t ?? []) : void 0;
            return eH([a, o ?? "0x"])
        }
        function tA({abiItem: e, args: t, includeFunctionName: n=!0, includeName: r=!1}) {
            if ("name"in e && "inputs"in e && e.inputs)
                return `${n ? e.name : ""}(${e.inputs.map((e,n)=>`${r && e.name ? `${e.name}: ` : ""}${"object" == typeof t[n] ? tG(t[n]) : t[n]}`).join(", ")})`
        }
        function tx(e) {
            return "string" == typeof e ? {
                address: e,
                type: "json-rpc"
            } : e
        }
        var tk = new Map
          , tC = new Map;
        async function t_(e, {cacheKey: t, maxAge: n=1 / 0}) {
            let r = function(e) {
                let t = (e,t)=>({
                    clear: ()=>t.delete(e),
                    get: ()=>t.get(e),
                    set: n=>t.set(e, n)
                })
                  , n = t(e, tk)
                  , r = t(e, tC);
                return {
                    clear: ()=>{
                        n.clear(),
                        r.clear()
                    }
                    ,
                    promise: n,
                    response: r
                }
            }(t)
              , i = r.response.get();
            if (i && n > 0) {
                let e = new Date().getTime() - i.created.getTime();
                if (e < n)
                    return i.data
            }
            let a = r.promise.get();
            a || (a = e(),
            r.promise.set(a));
            let o = await a;
            return r.promise.clear(),
            r.response.set({
                created: new Date,
                data: o
            }),
            o
        }
        async function tS(e) {
            return new Promise(t=>setTimeout(t, e))
        }
        function tI(e, {errorInstance: t, timeout: n, signal: r}) {
            return new Promise((i,a)=>{
                (async()=>{
                    let o;
                    try {
                        let s = new AbortController;
                        n > 0 && (o = setTimeout(()=>{
                            r ? s.abort() : a(t)
                        }
                        , n)),
                        i(await e({
                            signal: s?.signal
                        }))
                    } catch (e) {
                        "AbortError" === e.name && a(t),
                        a(e)
                    } finally {
                        clearTimeout(o)
                    }
                }
                )()
            }
            )
        }
        var tP = e=>"code"in e ? -32603 !== e.code && -32005 !== e.code : e instanceof eM && !!e.status && 408 !== e.status && 413 !== e.status && 429 !== e.status && 500 !== e.status && 502 !== e.status && 503 !== e.status && 504 !== e.status;
        function tB(e, {retryDelay: t=150, retryCount: n=3}={}) {
            return async r=>(function(e, {delay: t=100, retryCount: n=2, shouldRetry: r=()=>!0}={}) {
                return new Promise((i,a)=>{
                    let o = async({count: s=0}={})=>{
                        let u = async({error: e})=>{
                            let n = "function" == typeof t ? t({
                                count: s,
                                error: e
                            }) : t;
                            n && await tS(n),
                            o({
                                count: s + 1
                            })
                        }
                        ;
                        try {
                            let t = await e();
                            i(t)
                        } catch (e) {
                            if (s < n && await r({
                                count: s,
                                error: e
                            }))
                                return u({
                                    error: e
                                });
                            a(e)
                        }
                    }
                    ;
                    o()
                }
                )
            }
            )(async()=>{
                try {
                    return await e(r)
                } catch (e) {
                    if (-32700 === e.code)
                        throw new eE(e);
                    if (-32600 === e.code)
                        throw new eA(e);
                    if (-32601 === e.code)
                        throw new ex(e);
                    if (-32602 === e.code)
                        throw new ek(e);
                    if (-32603 === e.code)
                        throw new eC(e);
                    if (-32e3 === e.code)
                        throw new e_(e);
                    if (-32001 === e.code)
                        throw new eS(e);
                    if (-32002 === e.code)
                        throw new eI(e);
                    if (-32003 === e.code)
                        throw new eP(e);
                    if (-32004 === e.code)
                        throw new eB(e);
                    if (-32005 === e.code)
                        throw new eO(e);
                    if (-32006 === e.code)
                        throw new eN(e);
                    if (4001 === e.code)
                        throw new eR(e);
                    if (4902 === e.code)
                        throw new eF(e);
                    if (e instanceof d)
                        throw e;
                    throw new eD(e)
                }
            }
            , {
                delay: ({count: e, error: n})=>{
                    if (n && n instanceof eM) {
                        let e = n?.headers?.get("Retry-After");
                        if (e?.match(/\d/))
                            return 1e3 * parseInt(e)
                    }
                    return ~~(1 << e) * t
                }
                ,
                retryCount: n,
                shouldRetry: ({error: e})=>!tP(e)
            })
        }
        function tO({blockNumber: e, chain: t, contract: n}) {
            let r = t?.contracts?.[n];
            if (!r)
                throw new N({
                    chain: t,
                    contract: {
                        name: n
                    }
                });
            if (e && r.blockCreated && r.blockCreated > e)
                throw new N({
                    blockNumber: e,
                    chain: t,
                    contract: {
                        name: n,
                        blockCreated: r.blockCreated
                    }
                });
            return r.address
        }
        function tN({format: e}) {
            return ({exclude: t, format: n})=>r=>{
                let i = e(r);
                if (t)
                    for (let e of t)
                        delete i[e];
                return {
                    ...i,
                    ...n?.(r)
                }
            }
        }
        var tR = {
            "0x0": "legacy",
            "0x1": "eip2930",
            "0x2": "eip1559"
        };
        function tF(e) {
            let t = {
                ...e,
                blockHash: e.blockHash ? e.blockHash : null,
                blockNumber: e.blockNumber ? BigInt(e.blockNumber) : null,
                chainId: e.chainId ? e9(e.chainId) : void 0,
                gas: e.gas ? BigInt(e.gas) : void 0,
                gasPrice: e.gasPrice ? BigInt(e.gasPrice) : void 0,
                maxFeePerGas: e.maxFeePerGas ? BigInt(e.maxFeePerGas) : void 0,
                maxPriorityFeePerGas: e.maxPriorityFeePerGas ? BigInt(e.maxPriorityFeePerGas) : void 0,
                nonce: e.nonce ? e9(e.nonce) : void 0,
                to: e.to ? e.to : null,
                transactionIndex: e.transactionIndex ? Number(e.transactionIndex) : null,
                type: e.type ? tR[e.type] : void 0,
                value: e.value ? BigInt(e.value) : void 0,
                v: e.v ? BigInt(e.v) : void 0
            };
            return "legacy" === t.type && (delete t.accessList,
            delete t.maxFeePerGas,
            delete t.maxPriorityFeePerGas),
            "eip2930" === t.type && (delete t.maxFeePerGas,
            delete t.maxPriorityFeePerGas),
            t
        }
        function tD(e) {
            let t = e.transactions?.map(e=>"string" == typeof e ? e : tF(e));
            return {
                ...e,
                baseFeePerGas: e.baseFeePerGas ? BigInt(e.baseFeePerGas) : null,
                difficulty: e.difficulty ? BigInt(e.difficulty) : void 0,
                gasLimit: e.gasLimit ? BigInt(e.gasLimit) : void 0,
                gasUsed: e.gasUsed ? BigInt(e.gasUsed) : void 0,
                hash: e.hash ? e.hash : null,
                logsBloom: e.logsBloom ? e.logsBloom : null,
                nonce: e.nonce ? e.nonce : null,
                number: e.number ? BigInt(e.number) : null,
                size: e.size ? BigInt(e.size) : void 0,
                timestamp: e.timestamp ? BigInt(e.timestamp) : void 0,
                transactions: t,
                totalDifficulty: e.totalDifficulty ? BigInt(e.totalDifficulty) : null
            }
        }
        function tM(e, {formatter: t}) {
            if (!t)
                return {};
            let n = Object.keys(t({}));
            return n.reduce((t,n)=>(e?.hasOwnProperty(n) && (t[n] = e[n]),
            t), {})
        }
        function tL(e, {args: t, eventName: n}={}) {
            return {
                ...e,
                blockHash: e.blockHash ? e.blockHash : null,
                blockNumber: e.blockNumber ? BigInt(e.blockNumber) : null,
                logIndex: e.logIndex ? BigInt(e.logIndex) : null,
                transactionHash: e.transactionHash ? e.transactionHash : null,
                transactionIndex: e.transactionIndex ? BigInt(e.transactionIndex) : null,
                ...n ? {
                    args: t,
                    eventName: n
                } : {}
            }
        }
        tN({
            format: tF
        }),
        tN({
            format: tD
        });
        var tU = {
            "0x0": "reverted",
            "0x1": "success"
        };
        function tq(e) {
            return {
                ...e,
                blockNumber: e.blockNumber ? BigInt(e.blockNumber) : null,
                contractAddress: e.contractAddress ? e.contractAddress : null,
                cumulativeGasUsed: e.cumulativeGasUsed ? BigInt(e.cumulativeGasUsed) : null,
                effectiveGasPrice: e.effectiveGasPrice ? BigInt(e.effectiveGasPrice) : null,
                gasUsed: e.gasUsed ? BigInt(e.gasUsed) : null,
                logs: e.logs ? e.logs.map(e=>tL(e)) : null,
                to: e.to ? e.to : null,
                transactionIndex: e.transactionIndex ? e9(e.transactionIndex) : null,
                status: e.status ? tU[e.status] : null,
                type: e.type ? tR[e.type] : null
            }
        }
        function tj(e) {
            return {
                ...e,
                gas: void 0 !== e.gas ? e0(e.gas) : void 0,
                gasPrice: void 0 !== e.gasPrice ? e0(e.gasPrice) : void 0,
                maxFeePerGas: void 0 !== e.maxFeePerGas ? e0(e.maxFeePerGas) : void 0,
                maxPriorityFeePerGas: void 0 !== e.maxPriorityFeePerGas ? e0(e.maxPriorityFeePerGas) : void 0,
                nonce: void 0 !== e.nonce ? e0(e.nonce) : void 0,
                value: void 0 !== e.value ? e0(e.value) : void 0
            }
        }
        function t$(e) {
            return e instanceof eP || e instanceof e_ || e instanceof eU && e.code === eu.code
        }
        function tZ(e, t) {
            let n = e.details.toLowerCase();
            if (el.nodeMessage.test(n))
                return new el({
                    cause: e,
                    maxFeePerGas: t?.maxFeePerGas
                });
            if (ec.nodeMessage.test(n))
                return new ec({
                    cause: e,
                    maxFeePerGas: t?.maxFeePerGas
                });
            if (ed.nodeMessage.test(n))
                return new ed({
                    cause: e,
                    nonce: t?.nonce
                });
            if (ep.nodeMessage.test(n))
                return new ep({
                    cause: e,
                    nonce: t?.nonce
                });
            if (ef.nodeMessage.test(n))
                return new ef({
                    cause: e,
                    nonce: t?.nonce
                });
            if (eh.nodeMessage.test(n))
                return new eh({
                    cause: e
                });
            if (em.nodeMessage.test(n))
                return new em({
                    cause: e,
                    gas: t?.gas
                });
            else if (ey.nodeMessage.test(n))
                return new ey({
                    cause: e,
                    gas: t?.gas
                });
            else if (eg.nodeMessage.test(n))
                return new eg({
                    cause: e
                });
            else if (eb.nodeMessage.test(n))
                return new eb({
                    cause: e,
                    maxFeePerGas: t?.maxFeePerGas,
                    maxPriorityFeePerGas: t?.maxPriorityFeePerGas
                });
            else if (n.match(eu.nodeMessage) || "code"in e.cause && e.cause?.code === eu.code)
                return new eu({
                    cause: e,
                    message: e.cause.details
                });
            return new ev({
                cause: e.cause.cause
            })
        }
        function tH(e, {abi: t, address: n, args: r, docsPath: i, functionName: a, sender: o}) {
            let {code: s, data: u, message: l} = e instanceof Q ? e : e instanceof W || e instanceof eo ? e.cause?.cause?.cause || {} : e.cause || {}
              , c = e;
            return e instanceof h ? c = new J({
                functionName: a
            }) : 3 === s && (u || l) && (c = new X({
                abi: t,
                data: u,
                functionName: a,
                message: l
            })),
            new K(c,{
                abi: t,
                args: r,
                contractAddress: n,
                docsPath: i,
                functionName: a,
                sender: o
            })
        }
        tN({
            format: tq
        }),
        tN({
            format: tj
        });
        var tG = (e,t,n)=>JSON.stringify(e, (e,n)=>{
            let r = "bigint" == typeof n ? n.toString() : n;
            return "function" == typeof t ? t(e, r) : r
        }
        , n)
          , tz = 0
          , tV = {
            http: async function(e, {body: t, fetchOptions: n={}, timeout: r=1e4}) {
                let {headers: i, method: a, signal: o} = n;
                try {
                    let s;
                    let u = await tI(async({signal: s})=>{
                        let u = await fetch(e, {
                            ...n,
                            body: tG({
                                jsonrpc: "2.0",
                                id: tz++,
                                ...t
                            }),
                            headers: {
                                ...i,
                                "Content-Type": "application/json"
                            },
                            method: a || "POST",
                            signal: o || (r > 0 ? s : void 0)
                        });
                        return u
                    }
                    , {
                        errorInstance: new eq({
                            body: t,
                            url: e
                        }),
                        timeout: r,
                        signal: !0
                    });
                    if (s = u.headers.get("Content-Type")?.startsWith("application/json") ? await u.json() : await u.text(),
                    !u.ok)
                        throw new eM({
                            body: t,
                            details: tG(s.error) || u.statusText,
                            headers: u.headers,
                            status: u.status,
                            url: e
                        });
                    if (s.error)
                        throw new eU({
                            body: t,
                            error: s.error,
                            url: e
                        });
                    return s
                } catch (n) {
                    if (n instanceof eM || n instanceof eU || n instanceof eq)
                        throw n;
                    throw new eM({
                        body: t,
                        details: n.message,
                        url: e
                    })
                }
            },
            webSocket: function(e, {body: t, onData: n, onError: r}) {
                if (e.readyState === e.CLOSED || e.readyState === e.CLOSING)
                    throw new eL({
                        body: t,
                        url: e.url,
                        details: "Socket is closed."
                    });
                let i = tz++
                  , a = ({data: o})=>{
                    let s = JSON.parse(o);
                    ("number" != typeof s.id || i === s.id) && (s.error ? r?.(new eU({
                        body: t,
                        error: s.error,
                        url: e.url
                    })) : n?.(s),
                    "eth_subscribe" === t.method && "string" == typeof s.result && e.subscriptions.set(s.result, a),
                    "eth_unsubscribe" === t.method && e.subscriptions.delete(t.params?.[0]))
                }
                ;
                return e.requests.set(i, a),
                e.send(JSON.stringify({
                    jsonrpc: "2.0",
                    ...t,
                    id: i
                })),
                e
            },
            webSocketAsync: async function(e, {body: t, timeout: n=1e4}) {
                return tI(()=>new Promise((n,r)=>tV.webSocket(e, {
                    body: t,
                    onData: n,
                    onError: r
                })), {
                    errorInstance: new eq({
                        body: t,
                        url: e.url
                    }),
                    timeout: n
                })
            }
        };
        function tW(e) {
            let {account: t, gasPrice: n, maxFeePerGas: r, maxPriorityFeePerGas: i, to: a} = e
              , o = t ? tx(t) : void 0;
            if (o && !ts(o.address))
                throw new B({
                    address: o.address
                });
            if (a && !ts(a))
                throw new B({
                    address: a
                });
            if (void 0 !== n && (void 0 !== r || void 0 !== i))
                throw new H;
            if (r && r > 2n ** 256n - 1n)
                throw new el({
                    maxFeePerGas: r
                });
            if (i && r && i > r)
                throw new eb({
                    maxFeePerGas: r,
                    maxPriorityFeePerGas: i
                })
        }
        var tK = /(?<protocol>https?:\/\/[^\/]*|ipfs:\/|ipns:\/|ar:\/)?(?<root>\/)?(?<subpath>ipfs\/|ipns\/)?(?<target>[\w\-.]+)(?<subtarget>\/.*)?/
          , tX = /^(Qm[1-9A-HJ-NP-Za-km-z]{44,}|b[A-Za-z2-7]{58,}|B[A-Z2-7]{58,}|z[1-9A-HJ-NP-Za-km-z]{48,}|F[0-9A-F]{50,})(\/(?<target>[\w\-.]+))?(?<subtarget>\/.*)?$/
          , tJ = /^data:([a-zA-Z\-/+]*);base64,([^"].*)/
          , tQ = /^data:([a-zA-Z\-/+]*)?(;[a-zA-Z0-9].*?)?(,)/;
        async function tY(e) {
            try {
                let t = await fetch(e, {
                    method: "HEAD"
                });
                if (200 === t.status) {
                    let e = t.headers.get("content-type");
                    return e?.startsWith("image/")
                }
                return !1
            } catch (t) {
                if ("object" == typeof t && void 0 !== t.response || !globalThis.hasOwnProperty("Image"))
                    return !1;
                return new Promise(t=>{
                    let n = new Image;
                    n.onload = ()=>{
                        t(!0)
                    }
                    ,
                    n.onerror = ()=>{
                        t(!1)
                    }
                    ,
                    n.src = e
                }
                )
            }
        }
        function t0(e, t) {
            return e ? e.endsWith("/") ? e.slice(0, -1) : e : t
        }
        function t1({uri: e, gatewayUrls: t}) {
            let n = tJ.test(e);
            if (n)
                return {
                    uri: e,
                    isOnChain: !0,
                    isEncoded: n
                };
            let r = t0(t?.ipfs, "https://ipfs.io")
              , i = t0(t?.arweave, "https://arweave.net")
              , a = e.match(tK)
              , {protocol: o, subpath: s, target: u, subtarget: l=""} = a?.groups || {}
              , c = "ipns:/" === o || "ipns/" === s
              , d = "ipfs:/" === o || "ipfs/" === s || tX.test(e);
            if (e.startsWith("http") && !c && !d) {
                let n = e;
                return t?.arweave && (n = e.replace(/https:\/\/arweave.net/g, t?.arweave)),
                {
                    uri: n,
                    isOnChain: !1,
                    isEncoded: !1
                }
            }
            if ((c || d) && u)
                return {
                    uri: `${r}/${c ? "ipns" : "ipfs"}/${u}${l}`,
                    isOnChain: !1,
                    isEncoded: !1
                };
            if ("ar:/" === o && u)
                return {
                    uri: `${i}/${u}${l || ""}`,
                    isOnChain: !1,
                    isEncoded: !1
                };
            let p = e.replace(tQ, "");
            if (p.startsWith("<svg") && (p = `data:image/svg+xml;base64,${btoa(p)}`),
            p.startsWith("data:") || p.startsWith("{"))
                return {
                    uri: p,
                    isOnChain: !0,
                    isEncoded: !1
                };
            throw new ei({
                uri: e
            })
        }
        function t2(e) {
            if ("object" != typeof e || !("image"in e) && !("image_url"in e) && !("image_data"in e))
                throw new en({
                    data: e
                });
            return e.image || e.image_url || e.image_data
        }
        async function t6({gatewayUrls: e, uri: t}) {
            try {
                let n = await fetch(t).then(e=>e.json())
                  , r = await t5({
                    gatewayUrls: e,
                    uri: t2(n)
                });
                return r
            } catch {
                throw new ei({
                    uri: t
                })
            }
        }
        async function t5({gatewayUrls: e, uri: t}) {
            let {uri: n, isOnChain: r} = t1({
                uri: t,
                gatewayUrls: e
            });
            if (r)
                return n;
            let i = await tY(n);
            if (i)
                return n;
            throw new ei({
                uri: t
            })
        }
        async function t3(e, {nft: t}) {
            if ("erc721" === t.namespace)
                return nk(e, {
                    address: t.contractAddress,
                    abi: [{
                        name: "tokenURI",
                        type: "function",
                        stateMutability: "view",
                        inputs: [{
                            name: "tokenId",
                            type: "uint256"
                        }],
                        outputs: [{
                            name: "",
                            type: "string"
                        }]
                    }],
                    functionName: "tokenURI",
                    args: [BigInt(t.tokenID)]
                });
            if ("erc1155" === t.namespace)
                return nk(e, {
                    address: t.contractAddress,
                    abi: [{
                        name: "uri",
                        type: "function",
                        stateMutability: "view",
                        inputs: [{
                            name: "_id",
                            type: "uint256"
                        }],
                        outputs: [{
                            name: "",
                            type: "string"
                        }]
                    }],
                    functionName: "uri",
                    args: [BigInt(t.tokenID)]
                });
            throw new ea({
                namespace: t.namespace
            })
        }
        async function t8(e, {gatewayUrls: t, record: n}) {
            return /eip155:/i.test(n) ? t4(e, {
                gatewayUrls: t,
                record: n
            }) : t5({
                uri: n,
                gatewayUrls: t
            })
        }
        async function t4(e, {gatewayUrls: t, record: n}) {
            let r = function(e) {
                e.startsWith("did:nft:") && (e = e.replace("did:nft:", "").replace(/_/g, "/"));
                let[t,n,r] = e.split("/")
                  , [i,a] = t.split(":")
                  , [o,s] = n.split(":");
                if (!i || "eip155" !== i.toLowerCase())
                    throw new er({
                        reason: "Only EIP-155 supported"
                    });
                if (!a)
                    throw new er({
                        reason: "Chain ID not found"
                    });
                if (!s)
                    throw new er({
                        reason: "Contract address not found"
                    });
                if (!r)
                    throw new er({
                        reason: "Token ID not found"
                    });
                if (!o)
                    throw new er({
                        reason: "ERC namespace not found"
                    });
                return {
                    chainID: parseInt(a),
                    namespace: o.toLowerCase(),
                    contractAddress: s,
                    tokenID: r
                }
            }(n)
              , i = await t3(e, {
                nft: r
            })
              , {uri: a, isOnChain: o, isEncoded: s} = t1({
                uri: i,
                gatewayUrls: t
            });
            if (o && (a.includes("data:application/json;base64,") || a.startsWith("{"))) {
                let e = s ? atob(a.replace("data:application/json;base64,", "")) : a
                  , n = JSON.parse(e);
                return t5({
                    uri: t2(n),
                    gatewayUrls: t
                })
            }
            let u = r.tokenID;
            return "erc1155" === r.namespace && (u = u.replace("0x", "").padStart(64, "0")),
            t6({
                gatewayUrls: t,
                uri: a.replace(/(?:0x)?{id}/, u)
            })
        }
        function t9(e) {
            let t = new Uint8Array(32).fill(0);
            if (!e)
                return eQ(t);
            let n = e.split(".");
            for (let e = n.length - 1; e >= 0; e -= 1) {
                let r = tt(e8(n[e]), "bytes");
                t = tt(eZ([t, r]), "bytes")
            }
            return eQ(t)
        }
        function t7(e) {
            let t = new Uint8Array("." === e || ".." === e ? 1 : e8(e.replace(/^\.|\.$/gm, "")).length + 2)
              , n = e.replace(/^\.|\.$/gm, "");
            if (!n.length)
                return t;
            let r = 0
              , i = n.split(".");
            for (let e = 0; e < i.length; e++) {
                let n = e8(i[e]);
                t[r] = n.length,
                t.set(n, r + 1),
                r += n.length + 1
            }
            return t
        }
        async function ne(e, t) {
            let {account: n, blockNumber: r, blockTag: i="latest", accessList: a, data: o, gas: s, gasPrice: u, maxFeePerGas: l, maxPriorityFeePerGas: c, nonce: d, to: p, value: f, ...h} = t
              , m = n ? tx(n) : void 0;
            try {
                tW(t);
                let n = r ? e0(r) : void 0
                  , y = e.chain?.formatters?.transactionRequest
                  , g = function(e, {formatter: t}) {
                    return t(e)
                }({
                    from: m?.address,
                    accessList: a,
                    data: o,
                    gas: s,
                    gasPrice: u,
                    maxFeePerGas: l,
                    maxPriorityFeePerGas: c,
                    nonce: d,
                    to: p,
                    value: f,
                    ...tM(h, {
                        formatter: y
                    })
                }, {
                    formatter: y || tj
                })
                  , b = await e.request({
                    method: "eth_call",
                    params: [g, n || i]
                });
                if ("0x" === b)
                    return {
                        data: void 0
                    };
                return {
                    data: b
                }
            } catch (n) {
                throw function(e, {docsPath: t, ...n}) {
                    let r = e;
                    return t$(e) && (r = tZ(e, n)),
                    new W(r,{
                        docsPath: t,
                        ...n
                    })
                }(n, {
                    ...t,
                    account: m,
                    chain: e.chain
                })
            }
        }
        async function nt(e, {abi: t, address: n, args: r, functionName: i, ...a}) {
            let o = a.account ? tx(a.account) : void 0
              , s = tE({
                abi: t,
                args: r,
                functionName: i
            });
            try {
                let {data: o} = await ne(e, {
                    data: s,
                    to: n,
                    ...a
                })
                  , u = tv({
                    abi: t,
                    args: r,
                    functionName: i,
                    data: o || "0x"
                });
                return {
                    result: u,
                    request: {
                        abi: t,
                        address: n,
                        args: r,
                        functionName: i,
                        ...a
                    }
                }
            } catch (e) {
                throw tH(e, {
                    abi: t,
                    address: n,
                    args: r,
                    docsPath: "/docs/contract/simulateContract",
                    functionName: i,
                    sender: o?.address
                })
            }
        }
        async function nn(e) {
            let t = await e.request({
                method: "eth_newPendingTransactionFilter"
            });
            return {
                id: t,
                type: "transaction"
            }
        }
        async function nr(e) {
            let t = await e.request({
                method: "eth_newBlockFilter"
            });
            return {
                id: t,
                type: "block"
            }
        }
        async function ni(e, {address: t, args: n, event: r, fromBlock: i, toBlock: a}={}) {
            let o = [];
            r && (o = tw({
                abi: [r],
                eventName: r.name,
                args: n
            }));
            let s = await e.request({
                method: "eth_newFilter",
                params: [{
                    address: t,
                    fromBlock: "bigint" == typeof i ? e0(i) : i,
                    toBlock: "bigint" == typeof a ? e0(a) : a,
                    ...o.length ? {
                        topics: o
                    } : {}
                }]
            });
            return {
                abi: r ? [r] : void 0,
                args: n,
                eventName: r ? r.name : void 0,
                id: s,
                type: "event"
            }
        }
        async function na(e, {address: t, abi: n, args: r, eventName: i, fromBlock: a, toBlock: o}) {
            let s = i ? tw({
                abi: n,
                args: r,
                eventName: i
            }) : void 0
              , u = await e.request({
                method: "eth_newFilter",
                params: [{
                    address: t,
                    fromBlock: "bigint" == typeof a ? e0(a) : a,
                    toBlock: "bigint" == typeof o ? e0(o) : o,
                    topics: s
                }]
            });
            return {
                abi: n,
                args: r,
                eventName: i,
                id: u,
                type: "event"
            }
        }
        async function no(e, t) {
            if (!t.account)
                throw new P({
                    docsPath: "/docs/actions/public/estimateGas"
                });
            let n = tx(t.account);
            try {
                let {accessList: r, blockNumber: i, blockTag: a="latest", data: o, gas: s, gasPrice: u, maxFeePerGas: l, maxPriorityFeePerGas: c, nonce: d, to: p, value: f, ...h} = "local" === n.type ? await nG(e, t) : t
                  , m = i ? e0(i) : void 0;
                tW(t);
                let y = e.chain?.formatters?.transactionRequest
                  , g = function(e, {formatter: t}) {
                    return t(e)
                }({
                    from: n.address,
                    accessList: r,
                    data: o,
                    gas: s,
                    gasPrice: u,
                    maxFeePerGas: l,
                    maxPriorityFeePerGas: c,
                    nonce: d,
                    to: p,
                    value: f,
                    ...tM(h, {
                        formatter: y
                    })
                }, {
                    formatter: y || tj
                })
                  , b = await e.request({
                    method: "eth_estimateGas",
                    params: [g, m || a]
                });
                return BigInt(b)
            } catch (r) {
                throw function(e, {docsPath: t, ...n}) {
                    let r = e;
                    return t$(e) && (r = tZ(e, n)),
                    new eo(r,{
                        docsPath: t,
                        ...n
                    })
                }(r, {
                    ...t,
                    account: n,
                    chain: e.chain
                })
            }
        }
        async function ns(e, {abi: t, address: n, args: r, functionName: i, ...a}) {
            let o = tx(a.account)
              , s = tE({
                abi: t,
                args: r,
                functionName: i
            });
            try {
                let t = await no(e, {
                    data: s,
                    to: n,
                    ...a
                });
                return t
            } catch (e) {
                throw tH(e, {
                    abi: t,
                    address: n,
                    args: r,
                    docsPath: "/docs/contract/simulateContract",
                    functionName: i,
                    sender: o?.address
                })
            }
        }
        async function nu(e, {address: t, blockNumber: n, blockTag: r="latest"}) {
            let i = n ? e0(n) : void 0
              , a = await e.request({
                method: "eth_getBalance",
                params: [t, i || r]
            });
            return BigInt(a)
        }
        async function nl(e, {blockHash: t, blockNumber: n, blockTag: r="latest", includeTransactions: i=!1}={}) {
            let a = void 0 !== n ? e0(n) : void 0
              , o = null;
            if (!(o = t ? await e.request({
                method: "eth_getBlockByHash",
                params: [t, i]
            }) : await e.request({
                method: "eth_getBlockByNumber",
                params: [a || r, i]
            })))
                throw new O({
                    blockHash: t,
                    blockNumber: n
                });
            return function(e, {formatter: t}) {
                return t(e)
            }(o, {
                formatter: e.chain?.formatters?.block || tD
            })
        }
        var nc = e=>`blockNumber.${e}`;
        async function nd(e, {maxAge: t=e.pollingInterval}={}) {
            let n = await t_(()=>e.request({
                method: "eth_blockNumber"
            }), {
                cacheKey: nc(e.uid),
                maxAge: t
            });
            return BigInt(n)
        }
        async function np(e, {blockHash: t, blockNumber: n, blockTag: r="latest"}={}) {
            let i = void 0 !== n ? e0(n) : void 0;
            return e9(t ? await e.request({
                method: "eth_getBlockTransactionCountByHash",
                params: [t]
            }) : await e.request({
                method: "eth_getBlockTransactionCountByNumber",
                params: [i || r]
            }))
        }
        async function nf(e, {address: t, blockNumber: n, blockTag: r="latest"}) {
            let i = void 0 !== n ? e0(n) : void 0
              , a = await e.request({
                method: "eth_getCode",
                params: [t, i || r]
            });
            if ("0x" !== a)
                return a
        }
        async function nh(e) {
            let t = await e.request({
                method: "eth_chainId"
            });
            return e9(t)
        }
        async function nm(e, {blockCount: t, blockNumber: n, blockTag: r="latest", rewardPercentiles: i}) {
            let a = n ? e0(n) : void 0
              , o = await e.request({
                method: "eth_feeHistory",
                params: [e0(t), a || r, i]
            });
            return {
                baseFeePerGas: o.baseFeePerGas.map(e=>BigInt(e)),
                gasUsedRatio: o.gasUsedRatio,
                oldestBlock: BigInt(o.oldestBlock),
                reward: o.reward?.map(e=>e.map(e=>BigInt(e)))
            }
        }
        async function ny(e, {filter: t}) {
            let n = await e.request({
                method: "eth_getFilterChanges",
                params: [t.id]
            });
            return n.map(e=>{
                if ("string" == typeof e)
                    return e;
                try {
                    let {eventName: n, args: r} = "abi"in t && t.abi ? ty({
                        abi: t.abi,
                        data: e.data,
                        topics: e.topics
                    }) : {
                        eventName: void 0,
                        args: void 0
                    };
                    return tL(e, {
                        args: r,
                        eventName: n
                    })
                } catch {
                    return
                }
            }
            ).filter(Boolean)
        }
        async function ng(e, {filter: t}) {
            let n = await e.request({
                method: "eth_getFilterLogs",
                params: [t.id]
            });
            return n.map(e=>{
                try {
                    let {eventName: n, args: r} = "abi"in t && t.abi ? ty({
                        abi: t.abi,
                        data: e.data,
                        topics: e.topics
                    }) : {
                        eventName: void 0,
                        args: void 0
                    };
                    return tL(e, {
                        args: r,
                        eventName: n
                    })
                } catch {
                    return
                }
            }
            ).filter(Boolean)
        }
        async function nb(e) {
            let t = await e.request({
                method: "eth_gasPrice"
            });
            return BigInt(t)
        }
        async function nv(e, {address: t, blockHash: n, fromBlock: r, toBlock: i, event: a, args: o}={}) {
            let s = [];
            return a && (s = tw({
                abi: [a],
                eventName: a.name,
                args: o
            })),
            (n ? await e.request({
                method: "eth_getLogs",
                params: [{
                    address: t,
                    topics: s,
                    blockHash: n
                }]
            }) : await e.request({
                method: "eth_getLogs",
                params: [{
                    address: t,
                    topics: s,
                    fromBlock: "bigint" == typeof r ? e0(r) : r,
                    toBlock: "bigint" == typeof i ? e0(i) : i
                }]
            })).map(e=>{
                try {
                    let {eventName: t, args: n} = a ? ty({
                        abi: [a],
                        data: e.data,
                        topics: e.topics
                    }) : {
                        eventName: void 0,
                        args: void 0
                    };
                    return tL(e, {
                        args: n,
                        eventName: t
                    })
                } catch {
                    return
                }
            }
            ).filter(Boolean)
        }
        async function nw(e, {address: t, blockNumber: n, blockTag: r="latest", slot: i}) {
            let a = void 0 !== n ? e0(n) : void 0
              , o = await e.request({
                method: "eth_getStorageAt",
                params: [t, i, a || r]
            });
            return o
        }
        async function nT(e, {blockHash: t, blockNumber: n, blockTag: r="latest", hash: i, index: a}) {
            let o = void 0 !== n ? e0(n) : void 0
              , s = null;
            if (i ? s = await e.request({
                method: "eth_getTransactionByHash",
                params: [i]
            }) : t ? s = await e.request({
                method: "eth_getTransactionByBlockHashAndIndex",
                params: [t, e0(a)]
            }) : (o || r) && (s = await e.request({
                method: "eth_getTransactionByBlockNumberAndIndex",
                params: [o || r, e0(a)]
            })),
            !s)
                throw new G({
                    blockHash: t,
                    blockNumber: n,
                    blockTag: r,
                    hash: i,
                    index: a
                });
            return function(e, {formatter: t}) {
                return t(e)
            }(s, {
                formatter: e.chain?.formatters?.transaction || tF
            })
        }
        async function nE(e, {hash: t, transactionReceipt: n}) {
            let[r,i] = await Promise.all([nd(e), t ? nT(e, {
                hash: t
            }) : void 0])
              , a = n?.blockNumber || i?.blockNumber;
            return a ? r - a + 1n : 0n
        }
        async function nA(e, {address: t, blockTag: n="latest", blockNumber: r}) {
            let i = await e.request({
                method: "eth_getTransactionCount",
                params: [t, r ? e0(r) : n]
            });
            return e9(i)
        }
        async function nx(e, {hash: t}) {
            let n = await e.request({
                method: "eth_getTransactionReceipt",
                params: [t]
            });
            if (!n)
                throw new z({
                    hash: t
                });
            return function(e, {formatter: t}) {
                return t(e)
            }(n, {
                formatter: e.chain?.formatters?.transactionReceipt || tq
            })
        }
        async function nk(e, {abi: t, address: n, args: r, functionName: i, ...a}) {
            let o = tE({
                abi: t,
                args: r,
                functionName: i
            });
            try {
                let {data: s} = await ne(e, {
                    data: o,
                    to: n,
                    ...a
                });
                return tv({
                    abi: t,
                    args: r,
                    functionName: i,
                    data: s || "0x"
                })
            } catch (e) {
                throw tH(e, {
                    abi: t,
                    address: n,
                    args: r,
                    docsPath: "/docs/contract/readContract",
                    functionName: i
                })
            }
        }
        async function nC(e, t) {
            let {allowFailure: n=!0, blockNumber: r, blockTag: i, contracts: a, multicallAddress: o} = t
              , s = o;
            if (!s) {
                if (!e.chain)
                    throw Error("client chain not configured. multicallAddress is required.");
                s = tO({
                    blockNumber: r,
                    chain: e.chain,
                    contract: "multicall3"
                })
            }
            let u = a.map(({abi: e, address: t, args: r, functionName: i})=>{
                try {
                    let n = tE({
                        abi: e,
                        args: r,
                        functionName: i
                    });
                    return {
                        allowFailure: !0,
                        callData: n,
                        target: t
                    }
                } catch (o) {
                    let a = tH(o, {
                        abi: e,
                        address: t,
                        args: r,
                        docsPath: "/docs/contract/multicall",
                        functionName: i
                    });
                    if (!n)
                        throw a;
                    return {
                        allowFailure: !0,
                        callData: "0x",
                        target: t
                    }
                }
            }
            )
              , l = await nk(e, {
                abi: R,
                address: s,
                args: [u],
                blockNumber: r,
                blockTag: i,
                functionName: "aggregate3"
            });
            return l.map(({returnData: e, success: t},r)=>{
                let {callData: i} = u[r]
                  , {abi: o, address: s, functionName: l, args: c} = a[r];
                try {
                    if ("0x" === i)
                        throw new h;
                    if (!t)
                        throw new Q({
                            data: e
                        });
                    let r = tv({
                        abi: o,
                        data: e,
                        functionName: l
                    });
                    return n ? {
                        result: r,
                        status: "success"
                    } : r
                } catch (t) {
                    let e = tH(t, {
                        abi: o,
                        address: s,
                        args: c,
                        docsPath: "/docs/contract/multicall",
                        functionName: l
                    });
                    if (!n)
                        throw e;
                    return {
                        error: e,
                        result: void 0,
                        status: "failure"
                    }
                }
            }
            )
        }
        async function n_(e, {filter: t}) {
            return e.request({
                method: "eth_uninstallFilter",
                params: [t.id]
            })
        }
        var nS = new Map
          , nI = new Map
          , nP = 0;
        function nB(e, t, n) {
            let r = ++nP
              , i = ()=>nS.get(e) || []
              , a = ()=>{
                let t = i();
                nS.set(e, t.filter(e=>e.id !== r))
            }
              , o = ()=>{
                let t = nI.get(e);
                1 === i().length && t && t(),
                a()
            }
              , s = i();
            if (nS.set(e, [...s, {
                id: r,
                fns: t
            }]),
            s && s.length > 0)
                return o;
            let u = {};
            for (let e in t)
                u[e] = (...t)=>{
                    let n = i();
                    0 !== n.length && n.forEach(n=>n.fns[e]?.(...t))
                }
                ;
            let l = n(u);
            return "function" == typeof l && nI.set(e, l),
            o
        }
        async function nO(e, {confirmations: t=1, hash: n, onReplaced: r, pollingInterval: i=e.pollingInterval, timeout: a}) {
            let o, s, u;
            let l = JSON.stringify(["waitForTransactionReceipt", e.uid, n]);
            return new Promise((c,d)=>{
                a && setTimeout(()=>d(new V({
                    hash: n
                })), a);
                let p = nB(l, {
                    onReplaced: r,
                    resolve: c,
                    reject: d
                }, r=>{
                    let a = nR(e, {
                        emitMissed: !0,
                        emitOnBegin: !0,
                        poll: !0,
                        pollingInterval: i,
                        async onBlockNumber(i) {
                            let l = async e=>{
                                a(),
                                e(),
                                p()
                            }
                            ;
                            try {
                                if (u) {
                                    if (i - u.blockNumber + 1n < t)
                                        return;
                                    l(()=>r.resolve(u));
                                    return
                                }
                                if (o = await nT(e, {
                                    hash: n
                                }),
                                u = await nx(e, {
                                    hash: n
                                }),
                                i - u.blockNumber + 1n < t)
                                    return;
                                l(()=>r.resolve(u))
                            } catch (n) {
                                if (o && (n instanceof G || n instanceof z)) {
                                    s = o;
                                    let n = await nl(e, {
                                        blockNumber: i,
                                        includeTransactions: !0
                                    })
                                      , a = n.transactions.find(({from: e, nonce: t})=>e === s.from && t === s.nonce);
                                    if (!a || i - (u = await nx(e, {
                                        hash: a.hash
                                    })).blockNumber + 1n < t)
                                        return;
                                    let c = "replaced";
                                    a.to === s.to && a.value === s.value ? c = "repriced" : a.from === a.to && 0n === a.value && (c = "cancelled"),
                                    l(()=>{
                                        r.onReplaced?.({
                                            reason: c,
                                            replacedTransaction: s,
                                            transaction: a,
                                            transactionReceipt: u
                                        }),
                                        r.resolve(u)
                                    }
                                    )
                                } else
                                    l(()=>r.reject(n))
                            }
                        }
                    });
                    return a
                }
                )
            }
            )
        }
        function nN(e, {emitOnBegin: t, initialWaitTime: n, interval: r}) {
            let i = !0
              , a = ()=>i = !1
              , o = async()=>{
                let o;
                t && (o = await e({
                    unpoll: a
                }));
                let s = await n?.(o) ?? r;
                await tS(s);
                let u = async()=>{
                    i && (await e({
                        unpoll: a
                    }),
                    await tS(r),
                    u())
                }
                ;
                u()
            }
            ;
            return o(),
            a
        }
        function nR(e, {emitOnBegin: t=!1, emitMissed: n=!1, onBlockNumber: r, onError: i, poll: a, pollingInterval: o=e.pollingInterval}) {
            let s, u, l;
            let c = void 0 !== a ? a : "webSocket" !== e.transport.type;
            return c ? (()=>{
                let a = JSON.stringify(["watchBlockNumber", e.uid, t, n, o]);
                return nB(a, {
                    onBlockNumber: r,
                    onError: i
                }, r=>nN(async()=>{
                    try {
                        let t = await nd(e, {
                            maxAge: 0
                        });
                        if (s) {
                            if (t === s)
                                return;
                            if (t - s > 1 && n)
                                for (let e = s + 1n; e < t; e++)
                                    r.onBlockNumber(e, s),
                                    s = e
                        }
                        (!s || t > s) && (r.onBlockNumber(t, s),
                        s = t)
                    } catch (e) {
                        r.onError?.(e)
                    }
                }
                , {
                    emitOnBegin: t,
                    interval: o
                }))
            }
            )() : (u = !0,
            l = ()=>u = !1,
            (async()=>{
                try {
                    let {unsubscribe: t} = await e.transport.subscribe({
                        params: ["newHeads"],
                        onData(e) {
                            if (!u)
                                return;
                            let t = e4(e.result?.number);
                            r(t, s),
                            s = t
                        },
                        onError(e) {
                            i?.(e)
                        }
                    });
                    l = t,
                    u || l()
                } catch (e) {
                    i?.(e)
                }
            }
            )(),
            l)
        }
        function nF(e, {blockTag: t="latest", emitMissed: n=!1, emitOnBegin: r=!1, onBlock: i, onError: a, includeTransactions: o=!1, poll: s, pollingInterval: u=e.pollingInterval}) {
            let l, c, d;
            let p = void 0 !== s ? s : "webSocket" !== e.transport.type;
            return p ? (()=>{
                let s = JSON.stringify(["watchBlocks", e.uid, n, r, o, u]);
                return nB(s, {
                    onBlock: i,
                    onError: a
                }, i=>nN(async()=>{
                    try {
                        let r = await nl(e, {
                            blockTag: t,
                            includeTransactions: o
                        });
                        if (r.number && l?.number) {
                            if (r.number === l.number)
                                return;
                            if (r.number - l.number > 1 && n)
                                for (let t = l?.number + 1n; t < r.number; t++) {
                                    let n = await nl(e, {
                                        blockNumber: t,
                                        includeTransactions: o
                                    });
                                    i.onBlock(n, l),
                                    l = n
                                }
                        }
                        (!l?.number || "pending" === t && !r?.number || r.number && r.number > l.number) && (i.onBlock(r, l),
                        l = r)
                    } catch (e) {
                        i.onError?.(e)
                    }
                }
                , {
                    emitOnBegin: r,
                    interval: u
                }))
            }
            )() : (c = !0,
            d = ()=>c = !1,
            (async()=>{
                try {
                    let {unsubscribe: t} = await e.transport.subscribe({
                        params: ["newHeads"],
                        onData(e) {
                            if (!c)
                                return;
                            let t = e.result;
                            i(t, l),
                            l = t
                        },
                        onError(e) {
                            a?.(e)
                        }
                    });
                    d = t,
                    c || d()
                } catch (e) {
                    a?.(e)
                }
            }
            )(),
            d)
        }
        function nD(e, {abi: t, address: n, args: r, batch: i=!0, eventName: a, onError: o, onLogs: s, pollingInterval: u=e.pollingInterval}) {
            let l = JSON.stringify(["watchContractEvent", n, r, i, e.uid, a, u]);
            return nB(l, {
                onLogs: s,
                onError: o
            }, o=>{
                let s, l;
                let c = !1
                  , d = nN(async()=>{
                    if (!c) {
                        try {
                            l = await na(e, {
                                abi: t,
                                address: n,
                                args: r,
                                eventName: a
                            })
                        } catch {}
                        c = !0;
                        return
                    }
                    try {
                        let u;
                        if (l)
                            u = await ny(e, {
                                filter: l
                            });
                        else {
                            let i = await nd(e);
                            u = s && s !== i ? await nv(e, {
                                address: n,
                                args: r,
                                fromBlock: s + 1n,
                                toBlock: i,
                                event: tg({
                                    abi: t,
                                    name: a
                                })
                            }) : [],
                            s = i
                        }
                        if (0 === u.length)
                            return;
                        i ? o.onLogs(u) : u.forEach(e=>o.onLogs([e]))
                    } catch (e) {
                        o.onError?.(e)
                    }
                }
                , {
                    emitOnBegin: !0,
                    interval: u
                });
                return async()=>{
                    l && await n_(e, {
                        filter: l
                    }),
                    d()
                }
            }
            )
        }
        function nM(e, {address: t, args: n, batch: r=!0, event: i, onError: a, onLogs: o, pollingInterval: s=e.pollingInterval}) {
            let u = JSON.stringify(["watchEvent", t, n, r, e.uid, i, s]);
            return nB(u, {
                onLogs: o,
                onError: a
            }, a=>{
                let o, u;
                let l = !1
                  , c = nN(async()=>{
                    if (!l) {
                        try {
                            u = await ni(e, {
                                address: t,
                                args: n,
                                event: i
                            })
                        } catch {}
                        l = !0;
                        return
                    }
                    try {
                        let s;
                        if (u)
                            s = await ny(e, {
                                filter: u
                            });
                        else {
                            let r = await nd(e);
                            s = o && o !== r ? await nv(e, {
                                address: t,
                                args: n,
                                fromBlock: o + 1n,
                                toBlock: r,
                                event: i
                            }) : [],
                            o = r
                        }
                        if (0 === s.length)
                            return;
                        r ? a.onLogs(s) : s.forEach(e=>a.onLogs([e]))
                    } catch (e) {
                        a.onError?.(e)
                    }
                }
                , {
                    emitOnBegin: !0,
                    interval: s
                });
                return async()=>{
                    u && await n_(e, {
                        filter: u
                    }),
                    c()
                }
            }
            )
        }
        function nL(e, {batch: t=!0, onError: n, onTransactions: r, poll: i, pollingInterval: a=e.pollingInterval}) {
            let o, s;
            let u = void 0 !== i ? i : "webSocket" !== e.transport.type;
            return u ? (()=>{
                let i = JSON.stringify(["watchPendingTransactions", e.uid, t, a]);
                return nB(i, {
                    onTransactions: r,
                    onError: n
                }, n=>{
                    let r;
                    let i = nN(async()=>{
                        try {
                            if (!r)
                                try {
                                    r = await nn(e);
                                    return
                                } catch (e) {
                                    throw i(),
                                    e
                                }
                            let a = await ny(e, {
                                filter: r
                            });
                            if (0 === a.length)
                                return;
                            t ? n.onTransactions(a) : a.forEach(e=>n.onTransactions([e]))
                        } catch (e) {
                            n.onError?.(e)
                        }
                    }
                    , {
                        emitOnBegin: !0,
                        interval: a
                    });
                    return async()=>{
                        r && await n_(e, {
                            filter: r
                        }),
                        i()
                    }
                }
                )
            }
            )() : (o = !0,
            s = ()=>o = !1,
            (async()=>{
                try {
                    let {unsubscribe: t} = await e.transport.subscribe({
                        params: ["newPendingTransactions"],
                        onData(e) {
                            if (!o)
                                return;
                            let t = e.result;
                            r([t])
                        },
                        onError(e) {
                            n?.(e)
                        }
                    });
                    s = t,
                    o || s()
                } catch (e) {
                    n?.(e)
                }
            }
            )(),
            s)
        }
        async function nU(e, {blockNumber: t, blockTag: n, name: r, universalResolverAddress: i}) {
            let a = i;
            if (!a) {
                if (!e.chain)
                    throw Error("client chain not configured. universalResolverAddress is required.");
                a = tO({
                    blockNumber: t,
                    chain: e.chain,
                    contract: "ensUniversalResolver"
                })
            }
            let o = await nk(e, {
                address: a,
                abi: F,
                functionName: "resolve",
                args: [eY(t7(r)), tE({
                    abi: M,
                    functionName: "addr",
                    args: [t9(r)]
                })],
                blockNumber: t,
                blockTag: n
            });
            if ("0x" === o[0])
                return null;
            let s = tv({
                abi: M,
                functionName: "addr",
                data: o[0]
            });
            return "0x0" === ez(s) ? null : s
        }
        async function nq(e, {blockNumber: t, blockTag: n, name: r, key: i, universalResolverAddress: a}) {
            let o = a;
            if (!o) {
                if (!e.chain)
                    throw Error("client chain not configured. universalResolverAddress is required.");
                o = tO({
                    blockNumber: t,
                    chain: e.chain,
                    contract: "ensUniversalResolver"
                })
            }
            let s = await nk(e, {
                address: o,
                abi: F,
                functionName: "resolve",
                args: [eY(t7(r)), tE({
                    abi: D,
                    functionName: "text",
                    args: [t9(r), i]
                })],
                blockNumber: t,
                blockTag: n
            });
            if ("0x" === s[0])
                return null;
            let u = tv({
                abi: D,
                functionName: "text",
                data: s[0]
            });
            return "" === u ? null : u
        }
        async function nj(e, {blockNumber: t, blockTag: n, gatewayUrls: r, name: i, universalResolverAddress: a}) {
            let o = await nq(e, {
                blockNumber: t,
                blockTag: n,
                key: "avatar",
                name: i,
                universalResolverAddress: a
            });
            if (!o)
                return null;
            try {
                return await t8(e, {
                    record: o,
                    gatewayUrls: r
                })
            } catch {
                return null
            }
        }
        async function n$(e, {address: t, blockNumber: n, blockTag: r, universalResolverAddress: i}) {
            let a = i;
            if (!a) {
                if (!e.chain)
                    throw Error("client chain not configured. universalResolverAddress is required.");
                a = tO({
                    blockNumber: n,
                    chain: e.chain,
                    contract: "ensUniversalResolver"
                })
            }
            let o = `${t.toLowerCase().substring(2)}.addr.reverse`;
            try {
                let t = await nk(e, {
                    address: a,
                    abi: [{
                        name: "reverse",
                        type: "function",
                        stateMutability: "view",
                        inputs: [{
                            type: "bytes",
                            name: "reverseName"
                        }],
                        outputs: [{
                            type: "string",
                            name: "resolvedName"
                        }, {
                            type: "address",
                            name: "resolvedAddress"
                        }, {
                            type: "address",
                            name: "reverseResolver"
                        }, {
                            type: "address",
                            name: "resolver"
                        }]
                    }],
                    functionName: "reverse",
                    args: [eY(t7(o))],
                    blockNumber: n,
                    blockTag: r
                });
                return t[0]
            } catch (e) {
                if (e instanceof K && e.cause.reason === L[50])
                    return null;
                throw e
            }
        }
        async function nZ(e, {blockNumber: t, blockTag: n, name: r, universalResolverAddress: i}) {
            let a = i;
            if (!a) {
                if (!e.chain)
                    throw Error("client chain not configured. universalResolverAddress is required.");
                a = tO({
                    blockNumber: t,
                    chain: e.chain,
                    contract: "ensUniversalResolver"
                })
            }
            let[o] = await nk(e, {
                address: a,
                abi: [{
                    inputs: [{
                        type: "bytes"
                    }],
                    name: "findResolver",
                    outputs: [{
                        type: "address"
                    }, {
                        type: "bytes32"
                    }],
                    stateMutability: "view",
                    type: "function"
                }],
                functionName: "findResolver",
                args: [eY(t7(r))],
                blockNumber: t,
                blockTag: n
            });
            return o
        }
        var nH = function(e, t="wei") {
            return function(e, t) {
                let[n,r="0"] = "1.5".split(".")
                  , i = n.startsWith("-");
                if (i && (n = n.slice(1)),
                r = r.replace(/(0+)$/, ""),
                0 === t)
                    n = `${Math.round(Number(`${n}.${r}`))}`,
                    r = "";
                else if (r.length > t) {
                    let[e,n] = [r.slice(0, t), r.slice(t)];
                    r = `${/^0+$/.test(e) ? e.slice(0, e.length - 1) : ""}${Math.round(Number(`${e}.${n}`))}`
                } else
                    r = r.padEnd(t, "0");
                return BigInt(`${i ? "-" : ""}${n}${r}`)
            }(0, $[t])
        }(0);
        async function nG(e, t) {
            let {account: n, gas: r, gasPrice: i, maxFeePerGas: a, maxPriorityFeePerGas: o, nonce: s} = t;
            if (!n)
                throw new P;
            let u = tx(n)
              , l = await nl(e, {
                blockTag: "latest"
            })
              , c = {
                ...t,
                from: u.address
            };
            if (void 0 === s && (c.nonce = await nA(e, {
                address: u.address,
                blockTag: "pending"
            })),
            l.baseFeePerGas) {
                if (void 0 !== i)
                    throw new d("Chain does not support legacy `gasPrice`.");
                if (void 0 === a)
                    c.maxPriorityFeePerGas = o ?? nH,
                    c.maxFeePerGas = 120n * l.baseFeePerGas / 100n + c.maxPriorityFeePerGas;
                else {
                    if (void 0 === o && a < nH)
                        throw new d("`maxFeePerGas` cannot be less than the default `maxPriorityFeePerGas` (1.5 gwei).");
                    c.maxFeePerGas = a,
                    c.maxPriorityFeePerGas = o ?? nH
                }
            } else {
                if (void 0 !== a || void 0 !== o)
                    throw new d("Chain does not support EIP-1559 fees.");
                void 0 === i && (c.gasPrice = await nb(e) * 120n / 100n)
            }
            return void 0 === r && (c.gas = await no(e, {
                ...c,
                account: {
                    address: u.address,
                    type: "json-rpc"
                }
            })),
            tW(c),
            c
        }
        function nz(e, t) {
            let n = e.toString()
              , r = n.startsWith("-");
            r && (n = n.slice(1));
            let[i,a] = [(n = n.padStart(t, "0")).slice(0, n.length - t), n.slice(n.length - t)];
            return a = a.replace(/(0+)$/, ""),
            `${r ? "-" : ""}${i || "0"}${a ? `.${a}` : ""}`
        }
        function nV(e, t="wei") {
            return nz(e, j[t])
        }
        function nW(e, t="wei") {
            return nz(e, $[t])
        }
    },
    72309: function(e, t, n) {
        "use strict";
        if (n.r(t),
        n.d(t, {
            SafeConnector: function() {
                return r.J
            }
        }),
        2272 == n.j)
            var r = n(97869)
    },
    17437: function(e, t, n) {
        "use strict";
        if (n.d(t, {
            $4: function() {
                return j
            },
            Dm: function() {
                return ei
            },
            KQ: function() {
                return L
            },
            LK: function() {
                return O
            },
            LN: function() {
                return G
            },
            QW: function() {
                return J
            },
            do: function() {
                return er
            },
            eI: function() {
                return g
            },
            eM: function() {
                return w
            },
            g0: function() {
                return en
            },
            m8: function() {
                return T
            },
            mA: function() {
                return D
            },
            mx: function() {
                return W
            },
            qL: function() {
                return H
            },
            yL: function() {
                return C
            },
            yw: function() {
                return Y
            }
        }),
        2272 == n.j)
            var r = n(35703);
        if (2272 == n.j)
            var i = n(3822);
        if (2272 == n.j)
            var a = n(52947);
        if (2272 == n.j)
            var o = n(86234);
        if (2272 == n.j)
            var s = n(59002);
        var u = n(52983);
        if (2272 == n.j)
            var l = n(77466);
        if (2272 == n.j)
            var c = n(75970);
        if (2272 == n.j)
            var d = n(25454);
        var p = n(83576);
        if (2272 == n.j)
            var f = n(50225);
        if (2272 == n.j)
            var h = n(22719);
        if (2272 == n.j)
            var m = n(15768);
        var y = n(52014);
        function g({queryClient: e=new i.S({
            defaultOptions: {
                queries: {
                    cacheTime: 864e5,
                    networkMode: "offlineFirst",
                    refetchOnWindowFocus: !1,
                    retry: 0
                },
                mutations: {
                    networkMode: "offlineFirst"
                }
            }
        }), storage: t=(0,
        o.o6)({
            storage: "undefined" != typeof window && window.localStorage ? window.localStorage : o.wp
        }), persister: n="undefined" != typeof window ? (0,
        r.K)({
            key: "cache",
            storage: t,
            serialize: e=>e,
            deserialize: e=>e
        }) : void 0, ...s}) {
            let u = (0,
            o.eI)({
                ...s,
                storage: t
            });
            return n && (0,
            a.wO)({
                queryClient: e,
                persister: n,
                dehydrateOptions: {
                    shouldDehydrateQuery: e=>0 !== e.cacheTime && !1 !== e.queryKey[0].persist
                }
            }),
            Object.assign(u, {
                queryClient: e
            })
        }
        var b = u.createContext(void 0)
          , v = u.createContext(void 0);
        function w({children: e, client: t}) {
            return u.createElement(b.Provider, {
                children: u.createElement(s.aH, {
                    children: e,
                    client: t.queryClient,
                    context: v
                }),
                value: t
            })
        }
        function T() {
            let e = u.useContext(b);
            if (!e)
                throw Error("`useClient` must be used within `WagmiConfig`.\n\nRead more: https://wagmi.sh/react/WagmiConfig");
            return e
        }
        var E = p.useSyncExternalStore;
        function A(e, t, n) {
            let r = (0,
            f.lV)(e, t, n);
            return (0,
            h.D)({
                context: v,
                ...r
            })
        }
        function x(e, t, n) {
            let r = Array.isArray(e) ? "function" == typeof t ? {
                ...n,
                queryKey: e,
                queryFn: t
            } : {
                ...t,
                queryKey: e
            } : e
              , i = function(e, t) {
                var n, r;
                let i = (0,
                s.NL)({
                    context: e.context
                })
                  , a = (0,
                l.S)()
                  , o = (0,
                c._)()
                  , p = i.defaultQueryOptions(e);
                p._optimisticResults = a ? "isRestoring" : "optimistic",
                p.onError && (p.onError = d.V.batchCalls(p.onError)),
                p.onSuccess && (p.onSuccess = d.V.batchCalls(p.onSuccess)),
                p.onSettled && (p.onSettled = d.V.batchCalls(p.onSettled)),
                p.suspense && "number" != typeof p.staleTime && (p.staleTime = 1e3),
                (p.suspense || p.useErrorBoundary) && !o.isReset() && (p.retryOnMount = !1);
                let[f] = u.useState(()=>new t(i,p))
                  , h = f.getOptimisticResult(p);
                if (E(u.useCallback(e=>a ? ()=>void 0 : f.subscribe(d.V.batchCalls(e)), [f, a]), ()=>f.getCurrentResult(), ()=>f.getCurrentResult()),
                u.useEffect(()=>{
                    o.clearReset()
                }
                , [o]),
                u.useEffect(()=>{
                    f.setOptions(p, {
                        listeners: !1
                    })
                }
                , [p, f]),
                p.suspense && h.isLoading && h.isFetching && !a)
                    throw f.fetchOptimistic(p).then(({data: e})=>{
                        p.onSuccess?.(e),
                        p.onSettled?.(e, null)
                    }
                    ).catch(e=>{
                        o.clearReset(),
                        p.onError?.(e),
                        p.onSettled?.(void 0, e)
                    }
                    );
                if (h.isError && !o.isReset() && !h.isFetching && (n = p.useErrorBoundary,
                r = [h.error, f.getCurrentQuery()],
                "function" == typeof n ? n(...r) : !!n))
                    throw h.error;
                let m = "loading" === h.status && "idle" === h.fetchStatus ? "idle" : h.status
                  , y = "loading" === m && "fetching" === h.fetchStatus;
                return {
                    ...h,
                    defaultedOptions: p,
                    isIdle: "idle" === m,
                    isLoading: y,
                    observer: f,
                    status: m
                }
            }({
                context: v,
                ...r
            }, m.z)
              , a = {
                data: i.data,
                error: i.error,
                fetchStatus: i.fetchStatus,
                isError: i.isError,
                isFetched: i.isFetched,
                isFetchedAfterMount: i.isFetchedAfterMount,
                isFetching: i.isFetching,
                isIdle: i.isIdle,
                isLoading: i.isLoading,
                isRefetching: i.isRefetching,
                isSuccess: i.isSuccess,
                refetch: i.refetch,
                status: i.status,
                internal: {
                    dataUpdatedAt: i.dataUpdatedAt,
                    errorUpdatedAt: i.errorUpdatedAt,
                    failureCount: i.failureCount,
                    isFetchedAfterMount: i.isFetchedAfterMount,
                    isLoadingError: i.isLoadingError,
                    isPaused: i.isPaused,
                    isPlaceholderData: i.isPlaceholderData,
                    isPreviousData: i.isPreviousData,
                    isRefetchError: i.isRefetchError,
                    isStale: i.isStale,
                    remove: i.remove
                }
            };
            return i.defaultedOptions.notifyOnChangeProps ? a : function(e, t) {
                let n = {};
                return Object.keys(e).forEach(r=>{
                    Object.defineProperty(n, r, {
                        configurable: !1,
                        enumerable: !0,
                        get: ()=>(t.trackedProps.add(r),
                        e[r])
                    })
                }
                ),
                n
            }(a, i.observer)
        }
        var k = ()=>(0,
        s.NL)({
            context: v
        });
        function C({chainId: e}={}) {
            return (0,
            y.useSyncExternalStoreWithSelector)(t=>(0,
            o.b0)({
                chainId: e
            }, t), ()=>(0,
            o.VH)({
                chainId: e
            }), ()=>(0,
            o.VH)({
                chainId: e
            }), e=>e, (e,t)=>e.network.chainId === t.network.chainId)
        }
        function _({chainId: e}={}) {
            let t = C({
                chainId: e
            });
            return t.network.chainId
        }
        function S({chainId: e, scopeKey: t}) {
            return [{
                entity: "blockNumber",
                chainId: e,
                scopeKey: t
            }]
        }
        function I({queryKey: [{chainId: e}]}) {
            return (0,
            o.RQ)({
                chainId: e
            })
        }
        function P({cacheTime: e=0, chainId: t, enabled: n=!0, scopeKey: r, staleTime: i, suspense: a, watch: s=!1, onBlock: l, onError: c, onSettled: d, onSuccess: p}={}) {
            let f = _({
                chainId: t
            })
              , h = C({
                chainId: f
            })
              , m = function({chainId: e}={}) {
                return (0,
                y.useSyncExternalStoreWithSelector)(t=>(0,
                o.Fx)({
                    chainId: e
                }, t), ()=>(0,
                o.lG)({
                    chainId: e
                }), ()=>(0,
                o.lG)({
                    chainId: e
                }), e=>e, (e,t)=>e?.network.chainId === t?.network.chainId)
            }({
                chainId: f
            })
              , g = k();
            return u.useEffect(()=>{
                if (!n || !s && !l)
                    return;
                let e = (0,
                o.Ds)(e=>{
                    s && g.setQueryData(S({
                        chainId: f,
                        scopeKey: r
                    }), e),
                    l && l(e)
                }
                , 1)
                  , t = m ?? h;
                return t.on("block", e),
                ()=>{
                    t.off("block", e)
                }
            }
            , [f, r, l, h, g, s, m, n]),
            x(S({
                scopeKey: r,
                chainId: f
            }), I, {
                cacheTime: e,
                enabled: n,
                staleTime: i,
                suspense: a,
                onError: c,
                onSettled: d,
                onSuccess: p
            })
        }
        function B({queryKey: [{chainId: e, formatUnits: t}]}) {
            return (0,
            o.jS)({
                chainId: e,
                formatUnits: t
            })
        }
        function O({cacheTime: e, chainId: t, enabled: n=!0, formatUnits: r="wei", scopeKey: i, staleTime: a, suspense: o, watch: s, onError: l, onSettled: c, onSuccess: d}={}) {
            let p = _({
                chainId: t
            })
              , f = u.useMemo(()=>(function({chainId: e, formatUnits: t, scopeKey: n}) {
                return [{
                    entity: "feeData",
                    chainId: e,
                    formatUnits: t,
                    scopeKey: n
                }]
            }
            )({
                chainId: p,
                formatUnits: r,
                scopeKey: i
            }), [p, r, i])
              , h = x(f, B, {
                cacheTime: e,
                enabled: n,
                staleTime: a,
                suspense: o,
                onError: l,
                onSettled: c,
                onSuccess: d
            });
            return N({
                chainId: p,
                enabled: !!(n && s),
                queryKey: f
            }),
            h
        }
        function N({chainId: e, enabled: t, queryKey: n}) {
            let r = k();
            P({
                chainId: e,
                enabled: t,
                onBlock: t ? ()=>r.invalidateQueries(n) : void 0,
                scopeKey: t ? void 0 : "idle"
            })
        }
        var R = e=>"object" == typeof e && !Array.isArray(e);
        function F(e, t, n=t, r=o.vZ) {
            let i = u.useRef([])
              , a = (0,
            y.useSyncExternalStoreWithSelector)(e, t, n, e=>e, (e,t)=>{
                if (R(e) && R(t) && i.current.length) {
                    for (let n of i.current) {
                        let i = r(e[n], t[n]);
                        if (!i)
                            return !1
                    }
                    return !0
                }
                return r(e, t)
            }
            );
            if (R(a)) {
                let e = {
                    ...a
                };
                return Object.defineProperties(e, Object.entries(e).reduce((e,[t,n])=>({
                    ...e,
                    [t]: {
                        configurable: !1,
                        enumerable: !0,
                        get: ()=>(i.current.includes(t) || i.current.push(t),
                        n)
                    }
                }), {})),
                e
            }
            return a
        }
        function D({onConnect: e, onDisconnect: t}={}) {
            let n = u.useCallback(n=>{
                let r = (0,
                o.s3)()
                  , i = r.subscribe(e=>({
                    address: e.data?.account,
                    connector: e.connector,
                    status: e.status
                }), (r,i)=>(e && "connected" !== i.status && "connected" === r.status && e({
                    address: r.address,
                    connector: r.connector,
                    isReconnected: "reconnecting" === i.status
                }),
                t && "connected" === i.status && "disconnected" === r.status && t(),
                n((0,
                o.D0)())));
                return i
            }
            , [e, t])
              , r = F(n, o.D0)
              , i = u.useRef()
              , {address: a, connector: s, status: l} = r;
            return u.useEffect(()=>{
                e && void 0 === i.current && "connected" === l && e({
                    address: a,
                    connector: s,
                    isReconnected: !0
                }),
                i.current = l
            }
            , []),
            r
        }
        function M({queryKey: [{address: e, chainId: t, formatUnits: n, token: r}]}) {
            if (!e)
                throw Error("address is required");
            return (0,
            o.EG)({
                address: e,
                chainId: t,
                formatUnits: n,
                token: r
            })
        }
        function L({address: e, cacheTime: t, chainId: n, enabled: r=!0, formatUnits: i, scopeKey: a, staleTime: o, suspense: s, token: l, watch: c, onError: d, onSettled: p, onSuccess: f}={}) {
            let h = _({
                chainId: n
            })
              , m = u.useMemo(()=>(function({address: e, chainId: t, formatUnits: n, scopeKey: r, token: i}) {
                return [{
                    entity: "balance",
                    address: e,
                    chainId: t,
                    formatUnits: n,
                    scopeKey: r,
                    token: i
                }]
            }
            )({
                address: e,
                chainId: h,
                formatUnits: i,
                scopeKey: a,
                token: l
            }), [e, h, i, a, l])
              , y = x(m, M, {
                cacheTime: t,
                enabled: !!(r && e),
                staleTime: o,
                suspense: s,
                onError: d,
                onSettled: p,
                onSuccess: f
            });
            return N({
                chainId: h,
                enabled: !!(r && c && e),
                queryKey: m
            }),
            y
        }
        var U = e=>[{
            entity: "connect",
            ...e
        }]
          , q = e=>{
            let {connector: t, chainId: n} = e;
            if (!t)
                throw Error("connector is required");
            return (0,
            o.$j)({
                connector: t,
                chainId: n
            })
        }
        ;
        function j({chainId: e, connector: t, onError: n, onMutate: r, onSettled: i, onSuccess: a}={}) {
            let o = T()
              , {data: s, error: l, isError: c, isIdle: d, isLoading: p, isSuccess: f, mutate: h, mutateAsync: m, reset: y, status: g, variables: b} = A(U({
                connector: t,
                chainId: e
            }), q, {
                onError: n,
                onMutate: r,
                onSettled: i,
                onSuccess: a
            })
              , v = u.useCallback(n=>h({
                chainId: n?.chainId ?? e,
                connector: n?.connector ?? t
            }), [e, t, h])
              , w = u.useCallback(n=>m({
                chainId: n?.chainId ?? e,
                connector: n?.connector ?? t
            }), [e, t, m]);
            return {
                connect: v,
                connectAsync: w,
                connectors: o.connectors,
                data: s,
                error: l,
                isError: c,
                isIdle: d,
                isLoading: p,
                isSuccess: f,
                pendingConnector: b?.connector,
                reset: y,
                status: g,
                variables: b
            }
        }
        var $ = [{
            entity: "disconnect"
        }]
          , Z = ()=>(0,
        o.zP)();
        function H({onError: e, onMutate: t, onSettled: n, onSuccess: r}={}) {
            let {error: i, isError: a, isIdle: o, isLoading: s, isSuccess: u, mutate: l, mutateAsync: c, reset: d, status: p} = A($, Z, {
                ...e ? {
                    onError(t, n, r) {
                        e(t, r)
                    }
                } : {},
                onMutate: t,
                ...n ? {
                    onSettled(e, t, r, i) {
                        n(t, i)
                    }
                } : {},
                ...r ? {
                    onSuccess(e, t, n) {
                        r(n)
                    }
                } : {}
            });
            return {
                disconnect: l,
                disconnectAsync: c,
                error: i,
                isError: a,
                isIdle: o,
                isLoading: s,
                isSuccess: u,
                reset: d,
                status: p
            }
        }
        function G() {
            return F(o.QC, o.Hy)
        }
        function z({chainId: e}) {
            return [{
                entity: "signer",
                chainId: e,
                persist: !1
            }]
        }
        function V({queryKey: [{chainId: e}]}) {
            return (0,
            o.DG)({
                chainId: e
            })
        }
        function W({chainId: e, suspense: t, onError: n, onSettled: r, onSuccess: i}={}) {
            let {connector: a} = D()
              , s = _({
                chainId: e
            })
              , l = x(z({
                chainId: s
            }), V, {
                cacheTime: 0,
                enabled: !!a,
                staleTime: 1 / 0,
                suspense: t,
                onError: n,
                onSettled: r,
                onSuccess: i
            })
              , c = k();
            return u.useEffect(()=>{
                let e = (0,
                o.rn)({
                    chainId: s
                }, e=>{
                    e ? c.invalidateQueries(z({
                        chainId: s
                    })) : c.removeQueries(z({
                        chainId: s
                    }))
                }
                );
                return e
            }
            , [c, s]),
            l
        }
        var K = e=>[{
            entity: "signMessage",
            ...e
        }]
          , X = e=>{
            let {message: t} = e;
            if (!t)
                throw Error("message is required");
            return (0,
            o.l)({
                message: t
            })
        }
        ;
        function J({message: e, onError: t, onMutate: n, onSettled: r, onSuccess: i}={}) {
            let {data: a, error: o, isError: s, isIdle: l, isLoading: c, isSuccess: d, mutate: p, mutateAsync: f, reset: h, status: m, variables: y} = A(K({
                message: e
            }), X, {
                onError: t,
                onMutate: n,
                onSettled: r,
                onSuccess: i
            })
              , g = u.useCallback(t=>p(t || {
                message: e
            }), [e, p])
              , b = u.useCallback(t=>f(t || {
                message: e
            }), [e, f]);
            return {
                data: a,
                error: o,
                isError: s,
                isIdle: l,
                isLoading: c,
                isSuccess: d,
                reset: h,
                signMessage: g,
                signMessageAsync: b,
                status: m,
                variables: y
            }
        }
        function Q(e) {
            let {domain: t, types: n, value: r} = e;
            if (!t)
                throw Error("domain is required");
            if (!n)
                throw Error("types is required");
            if (!r)
                throw Error("value is required");
            return (0,
            o.xq)({
                domain: t,
                types: n,
                value: r
            })
        }
        function Y({domain: e, types: t, value: n, onError: r, onMutate: i, onSettled: a, onSuccess: o}={}) {
            let {data: s, error: l, isError: c, isIdle: d, isLoading: p, isSuccess: f, mutate: h, mutateAsync: m, reset: y, status: g, variables: b} = A(function({domain: e, types: t, value: n}) {
                return [{
                    entity: "signTypedData",
                    domain: e,
                    types: t,
                    value: n
                }]
            }({
                domain: e,
                types: t,
                value: n
            }), Q, {
                onError: r,
                onMutate: i,
                onSettled: a,
                onSuccess: o
            })
              , v = u.useCallback(r=>h({
                domain: r?.domain ?? e,
                types: r?.types ?? t,
                value: r?.value ?? n
            }), [e, t, n, h])
              , w = u.useCallback(r=>m({
                domain: r?.domain ?? e,
                types: r?.types ?? t,
                value: r?.value ?? n
            }), [e, t, n, m]);
            return {
                data: s,
                error: l,
                isError: c,
                isIdle: d,
                isLoading: p,
                isSuccess: f,
                reset: y,
                signTypedData: v,
                signTypedDataAsync: w,
                status: g,
                variables: b
            }
        }
        var ee = e=>[{
            entity: "switchNetwork",
            ...e
        }]
          , et = e=>{
            let {chainId: t} = e;
            if (!t)
                throw Error("chainId is required");
            return (0,
            o.If)({
                chainId: t
            })
        }
        ;
        function en({chainId: e, throwForSwitchChainNotSupported: t, onError: n, onMutate: r, onSettled: i, onSuccess: a}={}) {
            let o, s;
            let l = T()
              , c = function() {
                let[,e] = u.useReducer(e=>e + 1, 0);
                return e
            }()
              , {data: d, error: p, isError: f, isIdle: h, isLoading: m, isSuccess: y, mutate: g, mutateAsync: b, reset: v, status: w, variables: E} = A(ee({
                chainId: e
            }), et, {
                onError: n,
                onMutate: r,
                onSettled: i,
                onSuccess: a
            })
              , x = u.useCallback(t=>g({
                chainId: t ?? e
            }), [e, g])
              , k = u.useCallback(t=>b({
                chainId: t ?? e
            }), [e, b]);
            u.useEffect(()=>{
                let e = l.subscribe(({chains: e, connector: t})=>({
                    chains: e,
                    connector: t
                }), c);
                return e
            }
            , [l, c]);
            let C = !!l.connector?.switchChain;
            return (t || C) && (o = x,
            s = k),
            {
                chains: l.chains ?? [],
                data: d,
                error: p,
                isError: f,
                isIdle: h,
                isLoading: m,
                isSuccess: y,
                pendingChainId: E?.chainId,
                reset: v,
                status: w,
                switchNetwork: o,
                switchNetworkAsync: s,
                variables: E
            }
        }
        function er({abi: e, address: t, args: n, cacheOnBlock: r=!1, cacheTime: i, chainId: a, enabled: s=!0, functionName: l, isDataEqual: c, onError: d, onSettled: p, onSuccess: h, overrides: m, scopeKey: y, select: g, staleTime: b, structuralSharing: v=(e,t)=>(0,
        o.vZ)(e, t) ? e : (0,
        f.Q$)(e, t), suspense: w, watch: T}={}) {
            let E = _({
                chainId: a
            })
              , {data: A} = P({
                chainId: E,
                enabled: T || r,
                scopeKey: T || r ? void 0 : "idle",
                watch: T
            })
              , k = u.useMemo(()=>(function({address: e, args: t, blockNumber: n, chainId: r, functionName: i, overrides: a, scopeKey: o}) {
                return [{
                    entity: "readContract",
                    address: e,
                    args: t,
                    blockNumber: n,
                    chainId: r,
                    functionName: i,
                    overrides: a,
                    scopeKey: o
                }]
            }
            )({
                address: t,
                args: n,
                blockNumber: r ? A : void 0,
                chainId: E,
                functionName: l,
                overrides: m,
                scopeKey: y
            }), [t, n, A, r, E, l, m, y])
              , C = u.useMemo(()=>{
                let n = !!(s && e && t && l);
                return r && (n = !!(n && A)),
                n
            }
            , [e, t, A, r, s, l]);
            return N({
                chainId: E,
                enabled: !!(C && T && !r),
                queryKey: k
            }),
            x(k, function({abi: e}) {
                return async({queryKey: [{address: t, args: n, chainId: r, functionName: i, overrides: a}]})=>{
                    if (!e)
                        throw Error("abi is required");
                    if (!t)
                        throw Error("address is required");
                    return await (0,
                    o.a4)({
                        address: t,
                        args: n,
                        chainId: r,
                        abi: e,
                        functionName: i,
                        overrides: a
                    }) ?? null
                }
            }({
                abi: e
            }), {
                cacheTime: i,
                enabled: C,
                isDataEqual: c,
                select(t) {
                    let n = e && l ? (0,
                    o.g_)({
                        abi: e,
                        data: t,
                        functionName: l
                    }) : t;
                    return g ? g(n) : n
                },
                staleTime: b,
                structuralSharing: v,
                suspense: w,
                onError: d,
                onSettled: p,
                onSuccess: h
            })
        }
        function ei({allowFailure: e=!0, cacheOnBlock: t=!1, cacheTime: n, contracts: r, enabled: i=!0, isDataEqual: a, keepPreviousData: s, onError: l, onSettled: c, onSuccess: d, overrides: p, scopeKey: h, select: m, staleTime: y, structuralSharing: g=(e,t)=>(0,
        o.vZ)(e, t) ? e : (0,
        f.Q$)(e, t), suspense: b, watch: v}={}) {
            let {data: w} = P({
                enabled: v || t,
                watch: v
            })
              , T = _()
              , E = u.useMemo(()=>(function({allowFailure: e, blockNumber: t, chainId: n, contracts: r, overrides: i, scopeKey: a}) {
                return [{
                    entity: "readContracts",
                    allowFailure: e,
                    blockNumber: t,
                    chainId: n,
                    scopeKey: a,
                    contracts: (r ?? []).map(({address: e, args: t, chainId: n, functionName: r})=>({
                        address: e,
                        args: t,
                        chainId: n,
                        functionName: r
                    })),
                    overrides: i
                }]
            }
            )({
                allowFailure: e,
                blockNumber: t ? w : void 0,
                chainId: T,
                contracts: r,
                overrides: p,
                scopeKey: h
            }), [e, w, t, T, h, r, p])
              , A = u.useMemo(()=>{
                let e = !!(i && r?.every(e=>e.abi && e.address && e.functionName));
                return t && (e = !!(e && w)),
                e
            }
            , [w, t, r, i]);
            N({
                enabled: !!(A && v && !t),
                queryKey: E
            });
            let k = (r ?? []).map(({abi: e})=>e);
            return x(E, function({abis: e}) {
                return ({queryKey: [{allowFailure: t, contracts: n, overrides: r}]})=>{
                    let i = n.map((t,n)=>({
                        ...t,
                        abi: e[n]
                    }));
                    return (0,
                    o.JH)({
                        allowFailure: t,
                        contracts: i,
                        overrides: r
                    })
                }
            }({
                abis: k
            }), {
                cacheTime: n,
                enabled: A,
                isDataEqual: a,
                keepPreviousData: s,
                staleTime: y,
                select(e) {
                    let t = e.map((e,t)=>{
                        let {abi: n, functionName: i} = r?.[t] ?? {};
                        return n && i ? (0,
                        o.g_)({
                            abi: n,
                            functionName: i,
                            data: e
                        }) : e
                    }
                    );
                    return m ? m(t) : t
                },
                structuralSharing: g,
                suspense: b,
                onError: l,
                onSettled: c,
                onSuccess: d
            })
        }
    },
    46256: function(e, t, n) {
        "use strict";
        n.d(t, {
            Km: function() {
                return ez
            },
            Rx: function() {
                return eT
            },
            Ry: function() {
                return eR
            },
            Z_: function() {
                return ew
            },
            jb: function() {
                return eV
            },
            z: function() {
                return te
            }
        }),
        (e6 = e8 || (e8 = {})).assertEqual = e=>e,
        e6.assertIs = function(e) {}
        ,
        e6.assertNever = function(e) {
            throw Error()
        }
        ,
        e6.arrayToEnum = e=>{
            let t = {};
            for (let n of e)
                t[n] = n;
            return t
        }
        ,
        e6.getValidEnumValues = e=>{
            let t = e6.objectKeys(e).filter(t=>"number" != typeof e[e[t]])
              , n = {};
            for (let r of t)
                n[r] = e[r];
            return e6.objectValues(n)
        }
        ,
        e6.objectValues = e=>e6.objectKeys(e).map(function(t) {
            return e[t]
        }),
        e6.objectKeys = "function" == typeof Object.keys ? e=>Object.keys(e) : e=>{
            let t = [];
            for (let n in e)
                Object.prototype.hasOwnProperty.call(e, n) && t.push(n);
            return t
        }
        ,
        e6.find = (e,t)=>{
            for (let n of e)
                if (t(n))
                    return n
        }
        ,
        e6.isInteger = "function" == typeof Number.isInteger ? e=>Number.isInteger(e) : e=>"number" == typeof e && isFinite(e) && Math.floor(e) === e,
        e6.joinValues = function(e, t=" | ") {
            return e.map(e=>"string" == typeof e ? `'${e}'` : e).join(t)
        }
        ,
        e6.jsonStringifyReplacer = (e,t)=>"bigint" == typeof t ? t.toString() : t,
        (e4 || (e4 = {})).mergeShapes = (e,t)=>({
            ...e,
            ...t
        });
        let r = e8.arrayToEnum(["string", "nan", "number", "integer", "float", "boolean", "date", "bigint", "symbol", "function", "undefined", "null", "array", "object", "unknown", "promise", "void", "never", "map", "set"])
          , i = e=>{
            switch (typeof e) {
            case "undefined":
                return r.undefined;
            case "string":
                return r.string;
            case "number":
                return isNaN(e) ? r.nan : r.number;
            case "boolean":
                return r.boolean;
            case "function":
                return r.function;
            case "bigint":
                return r.bigint;
            case "symbol":
                return r.symbol;
            case "object":
                if (Array.isArray(e))
                    return r.array;
                if (null === e)
                    return r.null;
                if (e.then && "function" == typeof e.then && e.catch && "function" == typeof e.catch)
                    return r.promise;
                if ("undefined" != typeof Map && e instanceof Map)
                    return r.map;
                if ("undefined" != typeof Set && e instanceof Set)
                    return r.set;
                if ("undefined" != typeof Date && e instanceof Date)
                    return r.date;
                return r.object;
            default:
                return r.unknown
            }
        }
          , a = e8.arrayToEnum(["invalid_type", "invalid_literal", "custom", "invalid_union", "invalid_union_discriminator", "invalid_enum_value", "unrecognized_keys", "invalid_arguments", "invalid_return_type", "invalid_date", "invalid_string", "too_small", "too_big", "invalid_intersection_types", "not_multiple_of", "not_finite"])
          , o = e=>{
            let t = JSON.stringify(e, null, 2);
            return t.replace(/"([^"]+)":/g, "$1:")
        }
        ;
        class s extends Error {
            constructor(e) {
                super(),
                this.issues = [],
                this.addIssue = e=>{
                    this.issues = [...this.issues, e]
                }
                ,
                this.addIssues = (e=[])=>{
                    this.issues = [...this.issues, ...e]
                }
                ;
                let t = new.target.prototype;
                Object.setPrototypeOf ? Object.setPrototypeOf(this, t) : this.__proto__ = t,
                this.name = "ZodError",
                this.issues = e
            }
            get errors() {
                return this.issues
            }
            format(e) {
                let t = e || function(e) {
                    return e.message
                }
                  , n = {
                    _errors: []
                }
                  , r = e=>{
                    for (let i of e.issues)
                        if ("invalid_union" === i.code)
                            i.unionErrors.map(r);
                        else if ("invalid_return_type" === i.code)
                            r(i.returnTypeError);
                        else if ("invalid_arguments" === i.code)
                            r(i.argumentsError);
                        else if (0 === i.path.length)
                            n._errors.push(t(i));
                        else {
                            let e = n
                              , r = 0;
                            for (; r < i.path.length; ) {
                                let n = i.path[r]
                                  , a = r === i.path.length - 1;
                                a ? (e[n] = e[n] || {
                                    _errors: []
                                },
                                e[n]._errors.push(t(i))) : e[n] = e[n] || {
                                    _errors: []
                                },
                                e = e[n],
                                r++
                            }
                        }
                }
                ;
                return r(this),
                n
            }
            toString() {
                return this.message
            }
            get message() {
                return JSON.stringify(this.issues, e8.jsonStringifyReplacer, 2)
            }
            get isEmpty() {
                return 0 === this.issues.length
            }
            flatten(e=e=>e.message) {
                let t = {}
                  , n = [];
                for (let r of this.issues)
                    r.path.length > 0 ? (t[r.path[0]] = t[r.path[0]] || [],
                    t[r.path[0]].push(e(r))) : n.push(e(r));
                return {
                    formErrors: n,
                    fieldErrors: t
                }
            }
            get formErrors() {
                return this.flatten()
            }
        }
        s.create = e=>{
            let t = new s(e);
            return t
        }
        ;
        let u = (e,t)=>{
            let n;
            switch (e.code) {
            case a.invalid_type:
                n = e.received === r.undefined ? "Required" : `Expected ${e.expected}, received ${e.received}`;
                break;
            case a.invalid_literal:
                n = `Invalid literal value, expected ${JSON.stringify(e.expected, e8.jsonStringifyReplacer)}`;
                break;
            case a.unrecognized_keys:
                n = `Unrecognized key(s) in object: ${e8.joinValues(e.keys, ", ")}`;
                break;
            case a.invalid_union:
                n = "Invalid input";
                break;
            case a.invalid_union_discriminator:
                n = `Invalid discriminator value. Expected ${e8.joinValues(e.options)}`;
                break;
            case a.invalid_enum_value:
                n = `Invalid enum value. Expected ${e8.joinValues(e.options)}, received '${e.received}'`;
                break;
            case a.invalid_arguments:
                n = "Invalid function arguments";
                break;
            case a.invalid_return_type:
                n = "Invalid function return type";
                break;
            case a.invalid_date:
                n = "Invalid date";
                break;
            case a.invalid_string:
                "object" == typeof e.validation ? "includes"in e.validation ? (n = `Invalid input: must include "${e.validation.includes}"`,
                "number" == typeof e.validation.position && (n = `${n} at one or more positions greater than or equal to ${e.validation.position}`)) : "startsWith"in e.validation ? n = `Invalid input: must start with "${e.validation.startsWith}"` : "endsWith"in e.validation ? n = `Invalid input: must end with "${e.validation.endsWith}"` : e8.assertNever(e.validation) : n = "regex" !== e.validation ? `Invalid ${e.validation}` : "Invalid";
                break;
            case a.too_small:
                n = "array" === e.type ? `Array must contain ${e.exact ? "exactly" : e.inclusive ? "at least" : "more than"} ${e.minimum} element(s)` : "string" === e.type ? `String must contain ${e.exact ? "exactly" : e.inclusive ? "at least" : "over"} ${e.minimum} character(s)` : "number" === e.type ? `Number must be ${e.exact ? "exactly equal to " : e.inclusive ? "greater than or equal to " : "greater than "}${e.minimum}` : "date" === e.type ? `Date must be ${e.exact ? "exactly equal to " : e.inclusive ? "greater than or equal to " : "greater than "}${new Date(Number(e.minimum))}` : "Invalid input";
                break;
            case a.too_big:
                n = "array" === e.type ? `Array must contain ${e.exact ? "exactly" : e.inclusive ? "at most" : "less than"} ${e.maximum} element(s)` : "string" === e.type ? `String must contain ${e.exact ? "exactly" : e.inclusive ? "at most" : "under"} ${e.maximum} character(s)` : "number" === e.type ? `Number must be ${e.exact ? "exactly" : e.inclusive ? "less than or equal to" : "less than"} ${e.maximum}` : "bigint" === e.type ? `BigInt must be ${e.exact ? "exactly" : e.inclusive ? "less than or equal to" : "less than"} ${e.maximum}` : "date" === e.type ? `Date must be ${e.exact ? "exactly" : e.inclusive ? "smaller than or equal to" : "smaller than"} ${new Date(Number(e.maximum))}` : "Invalid input";
                break;
            case a.custom:
                n = "Invalid input";
                break;
            case a.invalid_intersection_types:
                n = "Intersection results could not be merged";
                break;
            case a.not_multiple_of:
                n = `Number must be a multiple of ${e.multipleOf}`;
                break;
            case a.not_finite:
                n = "Number must be finite";
                break;
            default:
                n = t.defaultError,
                e8.assertNever(e)
            }
            return {
                message: n
            }
        }
          , l = u
          , c = e=>{
            let {data: t, path: n, errorMaps: r, issueData: i} = e
              , a = [...n, ...i.path || []]
              , o = {
                ...i,
                path: a
            }
              , s = ""
              , u = r.filter(e=>!!e).slice().reverse();
            for (let e of u)
                s = e(o, {
                    data: t,
                    defaultError: s
                }).message;
            return {
                ...i,
                path: a,
                message: i.message || s
            }
        }
        ;
        function d(e, t) {
            let n = c({
                issueData: t,
                data: e.data,
                path: e.path,
                errorMaps: [e.common.contextualErrorMap, e.schemaErrorMap, l, u].filter(e=>!!e)
            });
            e.common.issues.push(n)
        }
        class p {
            constructor() {
                this.value = "valid"
            }
            dirty() {
                "valid" === this.value && (this.value = "dirty")
            }
            abort() {
                "aborted" !== this.value && (this.value = "aborted")
            }
            static mergeArray(e, t) {
                let n = [];
                for (let r of t) {
                    if ("aborted" === r.status)
                        return f;
                    "dirty" === r.status && e.dirty(),
                    n.push(r.value)
                }
                return {
                    status: e.value,
                    value: n
                }
            }
            static async mergeObjectAsync(e, t) {
                let n = [];
                for (let e of t)
                    n.push({
                        key: await e.key,
                        value: await e.value
                    });
                return p.mergeObjectSync(e, n)
            }
            static mergeObjectSync(e, t) {
                let n = {};
                for (let r of t) {
                    let {key: t, value: i} = r;
                    if ("aborted" === t.status || "aborted" === i.status)
                        return f;
                    "dirty" === t.status && e.dirty(),
                    "dirty" === i.status && e.dirty(),
                    (void 0 !== i.value || r.alwaysSet) && (n[t.value] = i.value)
                }
                return {
                    status: e.value,
                    value: n
                }
            }
        }
        let f = Object.freeze({
            status: "aborted"
        })
          , h = e=>({
            status: "dirty",
            value: e
        })
          , m = e=>({
            status: "valid",
            value: e
        })
          , y = e=>"aborted" === e.status
          , g = e=>"dirty" === e.status
          , b = e=>"valid" === e.status
          , v = e=>"undefined" != typeof Promise && e instanceof Promise;
        (e5 = e9 || (e9 = {})).errToObj = e=>"string" == typeof e ? {
            message: e
        } : e || {},
        e5.toString = e=>"string" == typeof e ? e : null == e ? void 0 : e.message;
        class w {
            constructor(e, t, n, r) {
                this._cachedPath = [],
                this.parent = e,
                this.data = t,
                this._path = n,
                this._key = r
            }
            get path() {
                return this._cachedPath.length || (this._key instanceof Array ? this._cachedPath.push(...this._path, ...this._key) : this._cachedPath.push(...this._path, this._key)),
                this._cachedPath
            }
        }
        let T = (e,t)=>{
            if (b(t))
                return {
                    success: !0,
                    data: t.value
                };
            if (!e.common.issues.length)
                throw Error("Validation failed but no issues detected.");
            return {
                success: !1,
                get error() {
                    if (this._error)
                        return this._error;
                    let t = new s(e.common.issues);
                    return this._error = t,
                    this._error
                }
            }
        }
        ;
        function E(e) {
            if (!e)
                return {};
            let {errorMap: t, invalid_type_error: n, required_error: r, description: i} = e;
            if (t && (n || r))
                throw Error('Can\'t use "invalid_type_error" or "required_error" in conjunction with custom error map.');
            if (t)
                return {
                    errorMap: t,
                    description: i
                };
            let a = (e,t)=>"invalid_type" !== e.code ? {
                message: t.defaultError
            } : void 0 === t.data ? {
                message: null != r ? r : t.defaultError
            } : {
                message: null != n ? n : t.defaultError
            };
            return {
                errorMap: a,
                description: i
            }
        }
        class A {
            constructor(e) {
                this.spa = this.safeParseAsync,
                this._def = e,
                this.parse = this.parse.bind(this),
                this.safeParse = this.safeParse.bind(this),
                this.parseAsync = this.parseAsync.bind(this),
                this.safeParseAsync = this.safeParseAsync.bind(this),
                this.spa = this.spa.bind(this),
                this.refine = this.refine.bind(this),
                this.refinement = this.refinement.bind(this),
                this.superRefine = this.superRefine.bind(this),
                this.optional = this.optional.bind(this),
                this.nullable = this.nullable.bind(this),
                this.nullish = this.nullish.bind(this),
                this.array = this.array.bind(this),
                this.promise = this.promise.bind(this),
                this.or = this.or.bind(this),
                this.and = this.and.bind(this),
                this.transform = this.transform.bind(this),
                this.brand = this.brand.bind(this),
                this.default = this.default.bind(this),
                this.catch = this.catch.bind(this),
                this.describe = this.describe.bind(this),
                this.pipe = this.pipe.bind(this),
                this.isNullable = this.isNullable.bind(this),
                this.isOptional = this.isOptional.bind(this)
            }
            get description() {
                return this._def.description
            }
            _getType(e) {
                return i(e.data)
            }
            _getOrReturnCtx(e, t) {
                return t || {
                    common: e.parent.common,
                    data: e.data,
                    parsedType: i(e.data),
                    schemaErrorMap: this._def.errorMap,
                    path: e.path,
                    parent: e.parent
                }
            }
            _processInputParams(e) {
                return {
                    status: new p,
                    ctx: {
                        common: e.parent.common,
                        data: e.data,
                        parsedType: i(e.data),
                        schemaErrorMap: this._def.errorMap,
                        path: e.path,
                        parent: e.parent
                    }
                }
            }
            _parseSync(e) {
                let t = this._parse(e);
                if (v(t))
                    throw Error("Synchronous parse encountered promise.");
                return t
            }
            _parseAsync(e) {
                let t = this._parse(e);
                return Promise.resolve(t)
            }
            parse(e, t) {
                let n = this.safeParse(e, t);
                if (n.success)
                    return n.data;
                throw n.error
            }
            safeParse(e, t) {
                var n;
                let r = {
                    common: {
                        issues: [],
                        async: null !== (n = null == t ? void 0 : t.async) && void 0 !== n && n,
                        contextualErrorMap: null == t ? void 0 : t.errorMap
                    },
                    path: (null == t ? void 0 : t.path) || [],
                    schemaErrorMap: this._def.errorMap,
                    parent: null,
                    data: e,
                    parsedType: i(e)
                }
                  , a = this._parseSync({
                    data: e,
                    path: r.path,
                    parent: r
                });
                return T(r, a)
            }
            async parseAsync(e, t) {
                let n = await this.safeParseAsync(e, t);
                if (n.success)
                    return n.data;
                throw n.error
            }
            async safeParseAsync(e, t) {
                let n = {
                    common: {
                        issues: [],
                        contextualErrorMap: null == t ? void 0 : t.errorMap,
                        async: !0
                    },
                    path: (null == t ? void 0 : t.path) || [],
                    schemaErrorMap: this._def.errorMap,
                    parent: null,
                    data: e,
                    parsedType: i(e)
                }
                  , r = this._parse({
                    data: e,
                    path: n.path,
                    parent: n
                })
                  , a = await (v(r) ? r : Promise.resolve(r));
                return T(n, a)
            }
            refine(e, t) {
                let n = e=>"string" == typeof t || void 0 === t ? {
                    message: t
                } : "function" == typeof t ? t(e) : t;
                return this._refinement((t,r)=>{
                    let i = e(t)
                      , o = ()=>r.addIssue({
                        code: a.custom,
                        ...n(t)
                    });
                    return "undefined" != typeof Promise && i instanceof Promise ? i.then(e=>!!e || (o(),
                    !1)) : !!i || (o(),
                    !1)
                }
                )
            }
            refinement(e, t) {
                return this._refinement((n,r)=>!!e(n) || (r.addIssue("function" == typeof t ? t(n, r) : t),
                !1))
            }
            _refinement(e) {
                return new eu({
                    schema: this,
                    typeName: e7.ZodEffects,
                    effect: {
                        type: "refinement",
                        refinement: e
                    }
                })
            }
            superRefine(e) {
                return this._refinement(e)
            }
            optional() {
                return el.create(this, this._def)
            }
            nullable() {
                return ec.create(this, this._def)
            }
            nullish() {
                return this.nullable().optional()
            }
            array() {
                return G.create(this, this._def)
            }
            promise() {
                return es.create(this, this._def)
            }
            or(e) {
                return V.create([this, e], this._def)
            }
            and(e) {
                return X.create(this, e, this._def)
            }
            transform(e) {
                return new eu({
                    ...E(this._def),
                    schema: this,
                    typeName: e7.ZodEffects,
                    effect: {
                        type: "transform",
                        transform: e
                    }
                })
            }
            default(e) {
                return new ed({
                    ...E(this._def),
                    innerType: this,
                    defaultValue: "function" == typeof e ? e : ()=>e,
                    typeName: e7.ZodDefault
                })
            }
            brand() {
                return new em({
                    typeName: e7.ZodBranded,
                    type: this,
                    ...E(this._def)
                })
            }
            catch(e) {
                return new ep({
                    ...E(this._def),
                    innerType: this,
                    catchValue: "function" == typeof e ? e : ()=>e,
                    typeName: e7.ZodCatch
                })
            }
            describe(e) {
                let t = this.constructor;
                return new t({
                    ...this._def,
                    description: e
                })
            }
            pipe(e) {
                return ey.create(this, e)
            }
            isOptional() {
                return this.safeParse(void 0).success
            }
            isNullable() {
                return this.safeParse(null).success
            }
        }
        let x = /^c[^\s-]{8,}$/i
          , k = /^[a-z][a-z0-9]*$/
          , C = /[0-9A-HJKMNP-TV-Z]{26}/
          , _ = /^([a-f0-9]{8}-[a-f0-9]{4}-[1-5][a-f0-9]{3}-[a-f0-9]{4}-[a-f0-9]{12}|00000000-0000-0000-0000-000000000000)$/i
          , S = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\])|(\[IPv6:(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))\])|([A-Za-z0-9]([A-Za-z0-9-]*[A-Za-z0-9])*(\.[A-Za-z]{2,})+))$/
          , I = /^(\p{Extended_Pictographic}|\p{Emoji_Component})+$/u
          , P = /^(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))$/
          , B = /^(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))$/
          , O = e=>e.precision ? e.offset ? RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{${e.precision}}(([+-]\\d{2}(:?\\d{2})?)|Z)$`) : RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{${e.precision}}Z$`) : 0 === e.precision ? e.offset ? RegExp("^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(([+-]\\d{2}(:?\\d{2})?)|Z)$") : RegExp("^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z$") : e.offset ? RegExp("^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(([+-]\\d{2}(:?\\d{2})?)|Z)$") : RegExp("^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$");
        class N extends A {
            constructor() {
                super(...arguments),
                this._regex = (e,t,n)=>this.refinement(t=>e.test(t), {
                    validation: t,
                    code: a.invalid_string,
                    ...e9.errToObj(n)
                }),
                this.nonempty = e=>this.min(1, e9.errToObj(e)),
                this.trim = ()=>new N({
                    ...this._def,
                    checks: [...this._def.checks, {
                        kind: "trim"
                    }]
                }),
                this.toLowerCase = ()=>new N({
                    ...this._def,
                    checks: [...this._def.checks, {
                        kind: "toLowerCase"
                    }]
                }),
                this.toUpperCase = ()=>new N({
                    ...this._def,
                    checks: [...this._def.checks, {
                        kind: "toUpperCase"
                    }]
                })
            }
            _parse(e) {
                let t;
                this._def.coerce && (e.data = String(e.data));
                let n = this._getType(e);
                if (n !== r.string) {
                    let t = this._getOrReturnCtx(e);
                    return d(t, {
                        code: a.invalid_type,
                        expected: r.string,
                        received: t.parsedType
                    }),
                    f
                }
                let i = new p;
                for (let n of this._def.checks)
                    if ("min" === n.kind)
                        e.data.length < n.value && (d(t = this._getOrReturnCtx(e, t), {
                            code: a.too_small,
                            minimum: n.value,
                            type: "string",
                            inclusive: !0,
                            exact: !1,
                            message: n.message
                        }),
                        i.dirty());
                    else if ("max" === n.kind)
                        e.data.length > n.value && (d(t = this._getOrReturnCtx(e, t), {
                            code: a.too_big,
                            maximum: n.value,
                            type: "string",
                            inclusive: !0,
                            exact: !1,
                            message: n.message
                        }),
                        i.dirty());
                    else if ("length" === n.kind) {
                        let r = e.data.length > n.value
                          , o = e.data.length < n.value;
                        (r || o) && (t = this._getOrReturnCtx(e, t),
                        r ? d(t, {
                            code: a.too_big,
                            maximum: n.value,
                            type: "string",
                            inclusive: !0,
                            exact: !0,
                            message: n.message
                        }) : o && d(t, {
                            code: a.too_small,
                            minimum: n.value,
                            type: "string",
                            inclusive: !0,
                            exact: !0,
                            message: n.message
                        }),
                        i.dirty())
                    } else if ("email" === n.kind)
                        S.test(e.data) || (d(t = this._getOrReturnCtx(e, t), {
                            validation: "email",
                            code: a.invalid_string,
                            message: n.message
                        }),
                        i.dirty());
                    else if ("emoji" === n.kind)
                        I.test(e.data) || (d(t = this._getOrReturnCtx(e, t), {
                            validation: "emoji",
                            code: a.invalid_string,
                            message: n.message
                        }),
                        i.dirty());
                    else if ("uuid" === n.kind)
                        _.test(e.data) || (d(t = this._getOrReturnCtx(e, t), {
                            validation: "uuid",
                            code: a.invalid_string,
                            message: n.message
                        }),
                        i.dirty());
                    else if ("cuid" === n.kind)
                        x.test(e.data) || (d(t = this._getOrReturnCtx(e, t), {
                            validation: "cuid",
                            code: a.invalid_string,
                            message: n.message
                        }),
                        i.dirty());
                    else if ("cuid2" === n.kind)
                        k.test(e.data) || (d(t = this._getOrReturnCtx(e, t), {
                            validation: "cuid2",
                            code: a.invalid_string,
                            message: n.message
                        }),
                        i.dirty());
                    else if ("ulid" === n.kind)
                        C.test(e.data) || (d(t = this._getOrReturnCtx(e, t), {
                            validation: "ulid",
                            code: a.invalid_string,
                            message: n.message
                        }),
                        i.dirty());
                    else if ("url" === n.kind)
                        try {
                            new URL(e.data)
                        } catch (r) {
                            d(t = this._getOrReturnCtx(e, t), {
                                validation: "url",
                                code: a.invalid_string,
                                message: n.message
                            }),
                            i.dirty()
                        }
                    else if ("regex" === n.kind) {
                        n.regex.lastIndex = 0;
                        let r = n.regex.test(e.data);
                        r || (d(t = this._getOrReturnCtx(e, t), {
                            validation: "regex",
                            code: a.invalid_string,
                            message: n.message
                        }),
                        i.dirty())
                    } else if ("trim" === n.kind)
                        e.data = e.data.trim();
                    else if ("includes" === n.kind)
                        e.data.includes(n.value, n.position) || (d(t = this._getOrReturnCtx(e, t), {
                            code: a.invalid_string,
                            validation: {
                                includes: n.value,
                                position: n.position
                            },
                            message: n.message
                        }),
                        i.dirty());
                    else if ("toLowerCase" === n.kind)
                        e.data = e.data.toLowerCase();
                    else if ("toUpperCase" === n.kind)
                        e.data = e.data.toUpperCase();
                    else if ("startsWith" === n.kind)
                        e.data.startsWith(n.value) || (d(t = this._getOrReturnCtx(e, t), {
                            code: a.invalid_string,
                            validation: {
                                startsWith: n.value
                            },
                            message: n.message
                        }),
                        i.dirty());
                    else if ("endsWith" === n.kind)
                        e.data.endsWith(n.value) || (d(t = this._getOrReturnCtx(e, t), {
                            code: a.invalid_string,
                            validation: {
                                endsWith: n.value
                            },
                            message: n.message
                        }),
                        i.dirty());
                    else if ("datetime" === n.kind) {
                        let r = O(n);
                        r.test(e.data) || (d(t = this._getOrReturnCtx(e, t), {
                            code: a.invalid_string,
                            validation: "datetime",
                            message: n.message
                        }),
                        i.dirty())
                    } else if ("ip" === n.kind) {
                        var o, s;
                        o = e.data,
                        ("v4" === (s = n.version) || !s) && P.test(o) || ("v6" === s || !s) && B.test(o) || (d(t = this._getOrReturnCtx(e, t), {
                            validation: "ip",
                            code: a.invalid_string,
                            message: n.message
                        }),
                        i.dirty())
                    } else
                        e8.assertNever(n);
                return {
                    status: i.value,
                    value: e.data
                }
            }
            _addCheck(e) {
                return new N({
                    ...this._def,
                    checks: [...this._def.checks, e]
                })
            }
            email(e) {
                return this._addCheck({
                    kind: "email",
                    ...e9.errToObj(e)
                })
            }
            url(e) {
                return this._addCheck({
                    kind: "url",
                    ...e9.errToObj(e)
                })
            }
            emoji(e) {
                return this._addCheck({
                    kind: "emoji",
                    ...e9.errToObj(e)
                })
            }
            uuid(e) {
                return this._addCheck({
                    kind: "uuid",
                    ...e9.errToObj(e)
                })
            }
            cuid(e) {
                return this._addCheck({
                    kind: "cuid",
                    ...e9.errToObj(e)
                })
            }
            cuid2(e) {
                return this._addCheck({
                    kind: "cuid2",
                    ...e9.errToObj(e)
                })
            }
            ulid(e) {
                return this._addCheck({
                    kind: "ulid",
                    ...e9.errToObj(e)
                })
            }
            ip(e) {
                return this._addCheck({
                    kind: "ip",
                    ...e9.errToObj(e)
                })
            }
            datetime(e) {
                var t;
                return "string" == typeof e ? this._addCheck({
                    kind: "datetime",
                    precision: null,
                    offset: !1,
                    message: e
                }) : this._addCheck({
                    kind: "datetime",
                    precision: void 0 === (null == e ? void 0 : e.precision) ? null : null == e ? void 0 : e.precision,
                    offset: null !== (t = null == e ? void 0 : e.offset) && void 0 !== t && t,
                    ...e9.errToObj(null == e ? void 0 : e.message)
                })
            }
            regex(e, t) {
                return this._addCheck({
                    kind: "regex",
                    regex: e,
                    ...e9.errToObj(t)
                })
            }
            includes(e, t) {
                return this._addCheck({
                    kind: "includes",
                    value: e,
                    position: null == t ? void 0 : t.position,
                    ...e9.errToObj(null == t ? void 0 : t.message)
                })
            }
            startsWith(e, t) {
                return this._addCheck({
                    kind: "startsWith",
                    value: e,
                    ...e9.errToObj(t)
                })
            }
            endsWith(e, t) {
                return this._addCheck({
                    kind: "endsWith",
                    value: e,
                    ...e9.errToObj(t)
                })
            }
            min(e, t) {
                return this._addCheck({
                    kind: "min",
                    value: e,
                    ...e9.errToObj(t)
                })
            }
            max(e, t) {
                return this._addCheck({
                    kind: "max",
                    value: e,
                    ...e9.errToObj(t)
                })
            }
            length(e, t) {
                return this._addCheck({
                    kind: "length",
                    value: e,
                    ...e9.errToObj(t)
                })
            }
            get isDatetime() {
                return !!this._def.checks.find(e=>"datetime" === e.kind)
            }
            get isEmail() {
                return !!this._def.checks.find(e=>"email" === e.kind)
            }
            get isURL() {
                return !!this._def.checks.find(e=>"url" === e.kind)
            }
            get isEmoji() {
                return !!this._def.checks.find(e=>"emoji" === e.kind)
            }
            get isUUID() {
                return !!this._def.checks.find(e=>"uuid" === e.kind)
            }
            get isCUID() {
                return !!this._def.checks.find(e=>"cuid" === e.kind)
            }
            get isCUID2() {
                return !!this._def.checks.find(e=>"cuid2" === e.kind)
            }
            get isULID() {
                return !!this._def.checks.find(e=>"ulid" === e.kind)
            }
            get isIP() {
                return !!this._def.checks.find(e=>"ip" === e.kind)
            }
            get minLength() {
                let e = null;
                for (let t of this._def.checks)
                    "min" === t.kind && (null === e || t.value > e) && (e = t.value);
                return e
            }
            get maxLength() {
                let e = null;
                for (let t of this._def.checks)
                    "max" === t.kind && (null === e || t.value < e) && (e = t.value);
                return e
            }
        }
        N.create = e=>{
            var t;
            return new N({
                checks: [],
                typeName: e7.ZodString,
                coerce: null !== (t = null == e ? void 0 : e.coerce) && void 0 !== t && t,
                ...E(e)
            })
        }
        ;
        class R extends A {
            constructor() {
                super(...arguments),
                this.min = this.gte,
                this.max = this.lte,
                this.step = this.multipleOf
            }
            _parse(e) {
                let t;
                this._def.coerce && (e.data = Number(e.data));
                let n = this._getType(e);
                if (n !== r.number) {
                    let t = this._getOrReturnCtx(e);
                    return d(t, {
                        code: a.invalid_type,
                        expected: r.number,
                        received: t.parsedType
                    }),
                    f
                }
                let i = new p;
                for (let n of this._def.checks)
                    if ("int" === n.kind)
                        e8.isInteger(e.data) || (d(t = this._getOrReturnCtx(e, t), {
                            code: a.invalid_type,
                            expected: "integer",
                            received: "float",
                            message: n.message
                        }),
                        i.dirty());
                    else if ("min" === n.kind) {
                        let r = n.inclusive ? e.data < n.value : e.data <= n.value;
                        r && (d(t = this._getOrReturnCtx(e, t), {
                            code: a.too_small,
                            minimum: n.value,
                            type: "number",
                            inclusive: n.inclusive,
                            exact: !1,
                            message: n.message
                        }),
                        i.dirty())
                    } else if ("max" === n.kind) {
                        let r = n.inclusive ? e.data > n.value : e.data >= n.value;
                        r && (d(t = this._getOrReturnCtx(e, t), {
                            code: a.too_big,
                            maximum: n.value,
                            type: "number",
                            inclusive: n.inclusive,
                            exact: !1,
                            message: n.message
                        }),
                        i.dirty())
                    } else
                        "multipleOf" === n.kind ? 0 !== function(e, t) {
                            let n = (e.toString().split(".")[1] || "").length
                              , r = (t.toString().split(".")[1] || "").length
                              , i = n > r ? n : r
                              , a = parseInt(e.toFixed(i).replace(".", ""))
                              , o = parseInt(t.toFixed(i).replace(".", ""));
                            return a % o / Math.pow(10, i)
                        }(e.data, n.value) && (d(t = this._getOrReturnCtx(e, t), {
                            code: a.not_multiple_of,
                            multipleOf: n.value,
                            message: n.message
                        }),
                        i.dirty()) : "finite" === n.kind ? Number.isFinite(e.data) || (d(t = this._getOrReturnCtx(e, t), {
                            code: a.not_finite,
                            message: n.message
                        }),
                        i.dirty()) : e8.assertNever(n);
                return {
                    status: i.value,
                    value: e.data
                }
            }
            gte(e, t) {
                return this.setLimit("min", e, !0, e9.toString(t))
            }
            gt(e, t) {
                return this.setLimit("min", e, !1, e9.toString(t))
            }
            lte(e, t) {
                return this.setLimit("max", e, !0, e9.toString(t))
            }
            lt(e, t) {
                return this.setLimit("max", e, !1, e9.toString(t))
            }
            setLimit(e, t, n, r) {
                return new R({
                    ...this._def,
                    checks: [...this._def.checks, {
                        kind: e,
                        value: t,
                        inclusive: n,
                        message: e9.toString(r)
                    }]
                })
            }
            _addCheck(e) {
                return new R({
                    ...this._def,
                    checks: [...this._def.checks, e]
                })
            }
            int(e) {
                return this._addCheck({
                    kind: "int",
                    message: e9.toString(e)
                })
            }
            positive(e) {
                return this._addCheck({
                    kind: "min",
                    value: 0,
                    inclusive: !1,
                    message: e9.toString(e)
                })
            }
            negative(e) {
                return this._addCheck({
                    kind: "max",
                    value: 0,
                    inclusive: !1,
                    message: e9.toString(e)
                })
            }
            nonpositive(e) {
                return this._addCheck({
                    kind: "max",
                    value: 0,
                    inclusive: !0,
                    message: e9.toString(e)
                })
            }
            nonnegative(e) {
                return this._addCheck({
                    kind: "min",
                    value: 0,
                    inclusive: !0,
                    message: e9.toString(e)
                })
            }
            multipleOf(e, t) {
                return this._addCheck({
                    kind: "multipleOf",
                    value: e,
                    message: e9.toString(t)
                })
            }
            finite(e) {
                return this._addCheck({
                    kind: "finite",
                    message: e9.toString(e)
                })
            }
            safe(e) {
                return this._addCheck({
                    kind: "min",
                    inclusive: !0,
                    value: Number.MIN_SAFE_INTEGER,
                    message: e9.toString(e)
                })._addCheck({
                    kind: "max",
                    inclusive: !0,
                    value: Number.MAX_SAFE_INTEGER,
                    message: e9.toString(e)
                })
            }
            get minValue() {
                let e = null;
                for (let t of this._def.checks)
                    "min" === t.kind && (null === e || t.value > e) && (e = t.value);
                return e
            }
            get maxValue() {
                let e = null;
                for (let t of this._def.checks)
                    "max" === t.kind && (null === e || t.value < e) && (e = t.value);
                return e
            }
            get isInt() {
                return !!this._def.checks.find(e=>"int" === e.kind || "multipleOf" === e.kind && e8.isInteger(e.value))
            }
            get isFinite() {
                let e = null
                  , t = null;
                for (let n of this._def.checks) {
                    if ("finite" === n.kind || "int" === n.kind || "multipleOf" === n.kind)
                        return !0;
                    "min" === n.kind ? (null === t || n.value > t) && (t = n.value) : "max" === n.kind && (null === e || n.value < e) && (e = n.value)
                }
                return Number.isFinite(t) && Number.isFinite(e)
            }
        }
        R.create = e=>new R({
            checks: [],
            typeName: e7.ZodNumber,
            coerce: (null == e ? void 0 : e.coerce) || !1,
            ...E(e)
        });
        class F extends A {
            constructor() {
                super(...arguments),
                this.min = this.gte,
                this.max = this.lte
            }
            _parse(e) {
                let t;
                this._def.coerce && (e.data = BigInt(e.data));
                let n = this._getType(e);
                if (n !== r.bigint) {
                    let t = this._getOrReturnCtx(e);
                    return d(t, {
                        code: a.invalid_type,
                        expected: r.bigint,
                        received: t.parsedType
                    }),
                    f
                }
                let i = new p;
                for (let n of this._def.checks)
                    if ("min" === n.kind) {
                        let r = n.inclusive ? e.data < n.value : e.data <= n.value;
                        r && (d(t = this._getOrReturnCtx(e, t), {
                            code: a.too_small,
                            type: "bigint",
                            minimum: n.value,
                            inclusive: n.inclusive,
                            message: n.message
                        }),
                        i.dirty())
                    } else if ("max" === n.kind) {
                        let r = n.inclusive ? e.data > n.value : e.data >= n.value;
                        r && (d(t = this._getOrReturnCtx(e, t), {
                            code: a.too_big,
                            type: "bigint",
                            maximum: n.value,
                            inclusive: n.inclusive,
                            message: n.message
                        }),
                        i.dirty())
                    } else
                        "multipleOf" === n.kind ? e.data % n.value !== BigInt(0) && (d(t = this._getOrReturnCtx(e, t), {
                            code: a.not_multiple_of,
                            multipleOf: n.value,
                            message: n.message
                        }),
                        i.dirty()) : e8.assertNever(n);
                return {
                    status: i.value,
                    value: e.data
                }
            }
            gte(e, t) {
                return this.setLimit("min", e, !0, e9.toString(t))
            }
            gt(e, t) {
                return this.setLimit("min", e, !1, e9.toString(t))
            }
            lte(e, t) {
                return this.setLimit("max", e, !0, e9.toString(t))
            }
            lt(e, t) {
                return this.setLimit("max", e, !1, e9.toString(t))
            }
            setLimit(e, t, n, r) {
                return new F({
                    ...this._def,
                    checks: [...this._def.checks, {
                        kind: e,
                        value: t,
                        inclusive: n,
                        message: e9.toString(r)
                    }]
                })
            }
            _addCheck(e) {
                return new F({
                    ...this._def,
                    checks: [...this._def.checks, e]
                })
            }
            positive(e) {
                return this._addCheck({
                    kind: "min",
                    value: BigInt(0),
                    inclusive: !1,
                    message: e9.toString(e)
                })
            }
            negative(e) {
                return this._addCheck({
                    kind: "max",
                    value: BigInt(0),
                    inclusive: !1,
                    message: e9.toString(e)
                })
            }
            nonpositive(e) {
                return this._addCheck({
                    kind: "max",
                    value: BigInt(0),
                    inclusive: !0,
                    message: e9.toString(e)
                })
            }
            nonnegative(e) {
                return this._addCheck({
                    kind: "min",
                    value: BigInt(0),
                    inclusive: !0,
                    message: e9.toString(e)
                })
            }
            multipleOf(e, t) {
                return this._addCheck({
                    kind: "multipleOf",
                    value: e,
                    message: e9.toString(t)
                })
            }
            get minValue() {
                let e = null;
                for (let t of this._def.checks)
                    "min" === t.kind && (null === e || t.value > e) && (e = t.value);
                return e
            }
            get maxValue() {
                let e = null;
                for (let t of this._def.checks)
                    "max" === t.kind && (null === e || t.value < e) && (e = t.value);
                return e
            }
        }
        F.create = e=>{
            var t;
            return new F({
                checks: [],
                typeName: e7.ZodBigInt,
                coerce: null !== (t = null == e ? void 0 : e.coerce) && void 0 !== t && t,
                ...E(e)
            })
        }
        ;
        class D extends A {
            _parse(e) {
                this._def.coerce && (e.data = !!e.data);
                let t = this._getType(e);
                if (t !== r.boolean) {
                    let t = this._getOrReturnCtx(e);
                    return d(t, {
                        code: a.invalid_type,
                        expected: r.boolean,
                        received: t.parsedType
                    }),
                    f
                }
                return m(e.data)
            }
        }
        D.create = e=>new D({
            typeName: e7.ZodBoolean,
            coerce: (null == e ? void 0 : e.coerce) || !1,
            ...E(e)
        });
        class M extends A {
            _parse(e) {
                let t;
                this._def.coerce && (e.data = new Date(e.data));
                let n = this._getType(e);
                if (n !== r.date) {
                    let t = this._getOrReturnCtx(e);
                    return d(t, {
                        code: a.invalid_type,
                        expected: r.date,
                        received: t.parsedType
                    }),
                    f
                }
                if (isNaN(e.data.getTime())) {
                    let t = this._getOrReturnCtx(e);
                    return d(t, {
                        code: a.invalid_date
                    }),
                    f
                }
                let i = new p;
                for (let n of this._def.checks)
                    "min" === n.kind ? e.data.getTime() < n.value && (d(t = this._getOrReturnCtx(e, t), {
                        code: a.too_small,
                        message: n.message,
                        inclusive: !0,
                        exact: !1,
                        minimum: n.value,
                        type: "date"
                    }),
                    i.dirty()) : "max" === n.kind ? e.data.getTime() > n.value && (d(t = this._getOrReturnCtx(e, t), {
                        code: a.too_big,
                        message: n.message,
                        inclusive: !0,
                        exact: !1,
                        maximum: n.value,
                        type: "date"
                    }),
                    i.dirty()) : e8.assertNever(n);
                return {
                    status: i.value,
                    value: new Date(e.data.getTime())
                }
            }
            _addCheck(e) {
                return new M({
                    ...this._def,
                    checks: [...this._def.checks, e]
                })
            }
            min(e, t) {
                return this._addCheck({
                    kind: "min",
                    value: e.getTime(),
                    message: e9.toString(t)
                })
            }
            max(e, t) {
                return this._addCheck({
                    kind: "max",
                    value: e.getTime(),
                    message: e9.toString(t)
                })
            }
            get minDate() {
                let e = null;
                for (let t of this._def.checks)
                    "min" === t.kind && (null === e || t.value > e) && (e = t.value);
                return null != e ? new Date(e) : null
            }
            get maxDate() {
                let e = null;
                for (let t of this._def.checks)
                    "max" === t.kind && (null === e || t.value < e) && (e = t.value);
                return null != e ? new Date(e) : null
            }
        }
        M.create = e=>new M({
            checks: [],
            coerce: (null == e ? void 0 : e.coerce) || !1,
            typeName: e7.ZodDate,
            ...E(e)
        });
        class L extends A {
            _parse(e) {
                let t = this._getType(e);
                if (t !== r.symbol) {
                    let t = this._getOrReturnCtx(e);
                    return d(t, {
                        code: a.invalid_type,
                        expected: r.symbol,
                        received: t.parsedType
                    }),
                    f
                }
                return m(e.data)
            }
        }
        L.create = e=>new L({
            typeName: e7.ZodSymbol,
            ...E(e)
        });
        class U extends A {
            _parse(e) {
                let t = this._getType(e);
                if (t !== r.undefined) {
                    let t = this._getOrReturnCtx(e);
                    return d(t, {
                        code: a.invalid_type,
                        expected: r.undefined,
                        received: t.parsedType
                    }),
                    f
                }
                return m(e.data)
            }
        }
        U.create = e=>new U({
            typeName: e7.ZodUndefined,
            ...E(e)
        });
        class q extends A {
            _parse(e) {
                let t = this._getType(e);
                if (t !== r.null) {
                    let t = this._getOrReturnCtx(e);
                    return d(t, {
                        code: a.invalid_type,
                        expected: r.null,
                        received: t.parsedType
                    }),
                    f
                }
                return m(e.data)
            }
        }
        q.create = e=>new q({
            typeName: e7.ZodNull,
            ...E(e)
        });
        class j extends A {
            constructor() {
                super(...arguments),
                this._any = !0
            }
            _parse(e) {
                return m(e.data)
            }
        }
        j.create = e=>new j({
            typeName: e7.ZodAny,
            ...E(e)
        });
        class $ extends A {
            constructor() {
                super(...arguments),
                this._unknown = !0
            }
            _parse(e) {
                return m(e.data)
            }
        }
        $.create = e=>new $({
            typeName: e7.ZodUnknown,
            ...E(e)
        });
        class Z extends A {
            _parse(e) {
                let t = this._getOrReturnCtx(e);
                return d(t, {
                    code: a.invalid_type,
                    expected: r.never,
                    received: t.parsedType
                }),
                f
            }
        }
        Z.create = e=>new Z({
            typeName: e7.ZodNever,
            ...E(e)
        });
        class H extends A {
            _parse(e) {
                let t = this._getType(e);
                if (t !== r.undefined) {
                    let t = this._getOrReturnCtx(e);
                    return d(t, {
                        code: a.invalid_type,
                        expected: r.void,
                        received: t.parsedType
                    }),
                    f
                }
                return m(e.data)
            }
        }
        H.create = e=>new H({
            typeName: e7.ZodVoid,
            ...E(e)
        });
        class G extends A {
            _parse(e) {
                let {ctx: t, status: n} = this._processInputParams(e)
                  , i = this._def;
                if (t.parsedType !== r.array)
                    return d(t, {
                        code: a.invalid_type,
                        expected: r.array,
                        received: t.parsedType
                    }),
                    f;
                if (null !== i.exactLength) {
                    let e = t.data.length > i.exactLength.value
                      , r = t.data.length < i.exactLength.value;
                    (e || r) && (d(t, {
                        code: e ? a.too_big : a.too_small,
                        minimum: r ? i.exactLength.value : void 0,
                        maximum: e ? i.exactLength.value : void 0,
                        type: "array",
                        inclusive: !0,
                        exact: !0,
                        message: i.exactLength.message
                    }),
                    n.dirty())
                }
                if (null !== i.minLength && t.data.length < i.minLength.value && (d(t, {
                    code: a.too_small,
                    minimum: i.minLength.value,
                    type: "array",
                    inclusive: !0,
                    exact: !1,
                    message: i.minLength.message
                }),
                n.dirty()),
                null !== i.maxLength && t.data.length > i.maxLength.value && (d(t, {
                    code: a.too_big,
                    maximum: i.maxLength.value,
                    type: "array",
                    inclusive: !0,
                    exact: !1,
                    message: i.maxLength.message
                }),
                n.dirty()),
                t.common.async)
                    return Promise.all([...t.data].map((e,n)=>i.type._parseAsync(new w(t,e,t.path,n)))).then(e=>p.mergeArray(n, e));
                let o = [...t.data].map((e,n)=>i.type._parseSync(new w(t,e,t.path,n)));
                return p.mergeArray(n, o)
            }
            get element() {
                return this._def.type
            }
            min(e, t) {
                return new G({
                    ...this._def,
                    minLength: {
                        value: e,
                        message: e9.toString(t)
                    }
                })
            }
            max(e, t) {
                return new G({
                    ...this._def,
                    maxLength: {
                        value: e,
                        message: e9.toString(t)
                    }
                })
            }
            length(e, t) {
                return new G({
                    ...this._def,
                    exactLength: {
                        value: e,
                        message: e9.toString(t)
                    }
                })
            }
            nonempty(e) {
                return this.min(1, e)
            }
        }
        G.create = (e,t)=>new G({
            type: e,
            minLength: null,
            maxLength: null,
            exactLength: null,
            typeName: e7.ZodArray,
            ...E(t)
        });
        class z extends A {
            constructor() {
                super(...arguments),
                this._cached = null,
                this.nonstrict = this.passthrough,
                this.augment = this.extend
            }
            _getCached() {
                if (null !== this._cached)
                    return this._cached;
                let e = this._def.shape()
                  , t = e8.objectKeys(e);
                return this._cached = {
                    shape: e,
                    keys: t
                }
            }
            _parse(e) {
                let t = this._getType(e);
                if (t !== r.object) {
                    let t = this._getOrReturnCtx(e);
                    return d(t, {
                        code: a.invalid_type,
                        expected: r.object,
                        received: t.parsedType
                    }),
                    f
                }
                let {status: n, ctx: i} = this._processInputParams(e)
                  , {shape: o, keys: s} = this._getCached()
                  , u = [];
                if (!(this._def.catchall instanceof Z && "strip" === this._def.unknownKeys))
                    for (let e in i.data)
                        s.includes(e) || u.push(e);
                let l = [];
                for (let e of s) {
                    let t = o[e]
                      , n = i.data[e];
                    l.push({
                        key: {
                            status: "valid",
                            value: e
                        },
                        value: t._parse(new w(i,n,i.path,e)),
                        alwaysSet: e in i.data
                    })
                }
                if (this._def.catchall instanceof Z) {
                    let e = this._def.unknownKeys;
                    if ("passthrough" === e)
                        for (let e of u)
                            l.push({
                                key: {
                                    status: "valid",
                                    value: e
                                },
                                value: {
                                    status: "valid",
                                    value: i.data[e]
                                }
                            });
                    else if ("strict" === e)
                        u.length > 0 && (d(i, {
                            code: a.unrecognized_keys,
                            keys: u
                        }),
                        n.dirty());
                    else if ("strip" === e)
                        ;
                    else
                        throw Error("Internal ZodObject error: invalid unknownKeys value.")
                } else {
                    let e = this._def.catchall;
                    for (let t of u) {
                        let n = i.data[t];
                        l.push({
                            key: {
                                status: "valid",
                                value: t
                            },
                            value: e._parse(new w(i,n,i.path,t)),
                            alwaysSet: t in i.data
                        })
                    }
                }
                return i.common.async ? Promise.resolve().then(async()=>{
                    let e = [];
                    for (let t of l) {
                        let n = await t.key;
                        e.push({
                            key: n,
                            value: await t.value,
                            alwaysSet: t.alwaysSet
                        })
                    }
                    return e
                }
                ).then(e=>p.mergeObjectSync(n, e)) : p.mergeObjectSync(n, l)
            }
            get shape() {
                return this._def.shape()
            }
            strict(e) {
                return e9.errToObj,
                new z({
                    ...this._def,
                    unknownKeys: "strict",
                    ...void 0 !== e ? {
                        errorMap: (t,n)=>{
                            var r, i, a, o;
                            let s = null !== (a = null === (i = (r = this._def).errorMap) || void 0 === i ? void 0 : i.call(r, t, n).message) && void 0 !== a ? a : n.defaultError;
                            return "unrecognized_keys" === t.code ? {
                                message: null !== (o = e9.errToObj(e).message) && void 0 !== o ? o : s
                            } : {
                                message: s
                            }
                        }
                    } : {}
                })
            }
            strip() {
                return new z({
                    ...this._def,
                    unknownKeys: "strip"
                })
            }
            passthrough() {
                return new z({
                    ...this._def,
                    unknownKeys: "passthrough"
                })
            }
            extend(e) {
                return new z({
                    ...this._def,
                    shape: ()=>({
                        ...this._def.shape(),
                        ...e
                    })
                })
            }
            merge(e) {
                let t = new z({
                    unknownKeys: e._def.unknownKeys,
                    catchall: e._def.catchall,
                    shape: ()=>({
                        ...this._def.shape(),
                        ...e._def.shape()
                    }),
                    typeName: e7.ZodObject
                });
                return t
            }
            setKey(e, t) {
                return this.augment({
                    [e]: t
                })
            }
            catchall(e) {
                return new z({
                    ...this._def,
                    catchall: e
                })
            }
            pick(e) {
                let t = {};
                return e8.objectKeys(e).forEach(n=>{
                    e[n] && this.shape[n] && (t[n] = this.shape[n])
                }
                ),
                new z({
                    ...this._def,
                    shape: ()=>t
                })
            }
            omit(e) {
                let t = {};
                return e8.objectKeys(this.shape).forEach(n=>{
                    e[n] || (t[n] = this.shape[n])
                }
                ),
                new z({
                    ...this._def,
                    shape: ()=>t
                })
            }
            deepPartial() {
                return function e(t) {
                    if (t instanceof z) {
                        let n = {};
                        for (let r in t.shape) {
                            let i = t.shape[r];
                            n[r] = el.create(e(i))
                        }
                        return new z({
                            ...t._def,
                            shape: ()=>n
                        })
                    }
                    return t instanceof G ? new G({
                        ...t._def,
                        type: e(t.element)
                    }) : t instanceof el ? el.create(e(t.unwrap())) : t instanceof ec ? ec.create(e(t.unwrap())) : t instanceof J ? J.create(t.items.map(t=>e(t))) : t
                }(this)
            }
            partial(e) {
                let t = {};
                return e8.objectKeys(this.shape).forEach(n=>{
                    let r = this.shape[n];
                    e && !e[n] ? t[n] = r : t[n] = r.optional()
                }
                ),
                new z({
                    ...this._def,
                    shape: ()=>t
                })
            }
            required(e) {
                let t = {};
                return e8.objectKeys(this.shape).forEach(n=>{
                    if (e && !e[n])
                        t[n] = this.shape[n];
                    else {
                        let e = this.shape[n]
                          , r = e;
                        for (; r instanceof el; )
                            r = r._def.innerType;
                        t[n] = r
                    }
                }
                ),
                new z({
                    ...this._def,
                    shape: ()=>t
                })
            }
            keyof() {
                return ei(e8.objectKeys(this.shape))
            }
        }
        z.create = (e,t)=>new z({
            shape: ()=>e,
            unknownKeys: "strip",
            catchall: Z.create(),
            typeName: e7.ZodObject,
            ...E(t)
        }),
        z.strictCreate = (e,t)=>new z({
            shape: ()=>e,
            unknownKeys: "strict",
            catchall: Z.create(),
            typeName: e7.ZodObject,
            ...E(t)
        }),
        z.lazycreate = (e,t)=>new z({
            shape: e,
            unknownKeys: "strip",
            catchall: Z.create(),
            typeName: e7.ZodObject,
            ...E(t)
        });
        class V extends A {
            _parse(e) {
                let {ctx: t} = this._processInputParams(e)
                  , n = this._def.options;
                if (t.common.async)
                    return Promise.all(n.map(async e=>{
                        let n = {
                            ...t,
                            common: {
                                ...t.common,
                                issues: []
                            },
                            parent: null
                        };
                        return {
                            result: await e._parseAsync({
                                data: t.data,
                                path: t.path,
                                parent: n
                            }),
                            ctx: n
                        }
                    }
                    )).then(function(e) {
                        for (let t of e)
                            if ("valid" === t.result.status)
                                return t.result;
                        for (let n of e)
                            if ("dirty" === n.result.status)
                                return t.common.issues.push(...n.ctx.common.issues),
                                n.result;
                        let n = e.map(e=>new s(e.ctx.common.issues));
                        return d(t, {
                            code: a.invalid_union,
                            unionErrors: n
                        }),
                        f
                    });
                {
                    let e;
                    let r = [];
                    for (let i of n) {
                        let n = {
                            ...t,
                            common: {
                                ...t.common,
                                issues: []
                            },
                            parent: null
                        }
                          , a = i._parseSync({
                            data: t.data,
                            path: t.path,
                            parent: n
                        });
                        if ("valid" === a.status)
                            return a;
                        "dirty" !== a.status || e || (e = {
                            result: a,
                            ctx: n
                        }),
                        n.common.issues.length && r.push(n.common.issues)
                    }
                    if (e)
                        return t.common.issues.push(...e.ctx.common.issues),
                        e.result;
                    let i = r.map(e=>new s(e));
                    return d(t, {
                        code: a.invalid_union,
                        unionErrors: i
                    }),
                    f
                }
            }
            get options() {
                return this._def.options
            }
        }
        V.create = (e,t)=>new V({
            options: e,
            typeName: e7.ZodUnion,
            ...E(t)
        });
        let W = e=>{
            if (e instanceof en)
                return W(e.schema);
            if (e instanceof eu)
                return W(e.innerType());
            if (e instanceof er)
                return [e.value];
            if (e instanceof ea)
                return e.options;
            if (e instanceof eo)
                return Object.keys(e.enum);
            if (e instanceof ed)
                return W(e._def.innerType);
            if (e instanceof U)
                return [void 0];
            else if (e instanceof q)
                return [null];
            else
                return null
        }
        ;
        class K extends A {
            _parse(e) {
                let {ctx: t} = this._processInputParams(e);
                if (t.parsedType !== r.object)
                    return d(t, {
                        code: a.invalid_type,
                        expected: r.object,
                        received: t.parsedType
                    }),
                    f;
                let n = this.discriminator
                  , i = t.data[n]
                  , o = this.optionsMap.get(i);
                return o ? t.common.async ? o._parseAsync({
                    data: t.data,
                    path: t.path,
                    parent: t
                }) : o._parseSync({
                    data: t.data,
                    path: t.path,
                    parent: t
                }) : (d(t, {
                    code: a.invalid_union_discriminator,
                    options: Array.from(this.optionsMap.keys()),
                    path: [n]
                }),
                f)
            }
            get discriminator() {
                return this._def.discriminator
            }
            get options() {
                return this._def.options
            }
            get optionsMap() {
                return this._def.optionsMap
            }
            static create(e, t, n) {
                let r = new Map;
                for (let n of t) {
                    let t = W(n.shape[e]);
                    if (!t)
                        throw Error(`A discriminator value for key \`${e}\` could not be extracted from all schema options`);
                    for (let i of t) {
                        if (r.has(i))
                            throw Error(`Discriminator property ${String(e)} has duplicate value ${String(i)}`);
                        r.set(i, n)
                    }
                }
                return new K({
                    typeName: e7.ZodDiscriminatedUnion,
                    discriminator: e,
                    options: t,
                    optionsMap: r,
                    ...E(n)
                })
            }
        }
        class X extends A {
            _parse(e) {
                let {status: t, ctx: n} = this._processInputParams(e)
                  , o = (e,o)=>{
                    if (y(e) || y(o))
                        return f;
                    let s = function e(t, n) {
                        let a = i(t)
                          , o = i(n);
                        if (t === n)
                            return {
                                valid: !0,
                                data: t
                            };
                        if (a === r.object && o === r.object) {
                            let r = e8.objectKeys(n)
                              , i = e8.objectKeys(t).filter(e=>-1 !== r.indexOf(e))
                              , a = {
                                ...t,
                                ...n
                            };
                            for (let r of i) {
                                let i = e(t[r], n[r]);
                                if (!i.valid)
                                    return {
                                        valid: !1
                                    };
                                a[r] = i.data
                            }
                            return {
                                valid: !0,
                                data: a
                            }
                        }
                        if (a === r.array && o === r.array) {
                            if (t.length !== n.length)
                                return {
                                    valid: !1
                                };
                            let r = [];
                            for (let i = 0; i < t.length; i++) {
                                let a = t[i]
                                  , o = n[i]
                                  , s = e(a, o);
                                if (!s.valid)
                                    return {
                                        valid: !1
                                    };
                                r.push(s.data)
                            }
                            return {
                                valid: !0,
                                data: r
                            }
                        }
                        return a === r.date && o === r.date && +t == +n ? {
                            valid: !0,
                            data: t
                        } : {
                            valid: !1
                        }
                    }(e.value, o.value);
                    return s.valid ? ((g(e) || g(o)) && t.dirty(),
                    {
                        status: t.value,
                        value: s.data
                    }) : (d(n, {
                        code: a.invalid_intersection_types
                    }),
                    f)
                }
                ;
                return n.common.async ? Promise.all([this._def.left._parseAsync({
                    data: n.data,
                    path: n.path,
                    parent: n
                }), this._def.right._parseAsync({
                    data: n.data,
                    path: n.path,
                    parent: n
                })]).then(([e,t])=>o(e, t)) : o(this._def.left._parseSync({
                    data: n.data,
                    path: n.path,
                    parent: n
                }), this._def.right._parseSync({
                    data: n.data,
                    path: n.path,
                    parent: n
                }))
            }
        }
        X.create = (e,t,n)=>new X({
            left: e,
            right: t,
            typeName: e7.ZodIntersection,
            ...E(n)
        });
        class J extends A {
            _parse(e) {
                let {status: t, ctx: n} = this._processInputParams(e);
                if (n.parsedType !== r.array)
                    return d(n, {
                        code: a.invalid_type,
                        expected: r.array,
                        received: n.parsedType
                    }),
                    f;
                if (n.data.length < this._def.items.length)
                    return d(n, {
                        code: a.too_small,
                        minimum: this._def.items.length,
                        inclusive: !0,
                        exact: !1,
                        type: "array"
                    }),
                    f;
                let i = this._def.rest;
                !i && n.data.length > this._def.items.length && (d(n, {
                    code: a.too_big,
                    maximum: this._def.items.length,
                    inclusive: !0,
                    exact: !1,
                    type: "array"
                }),
                t.dirty());
                let o = [...n.data].map((e,t)=>{
                    let r = this._def.items[t] || this._def.rest;
                    return r ? r._parse(new w(n,e,n.path,t)) : null
                }
                ).filter(e=>!!e);
                return n.common.async ? Promise.all(o).then(e=>p.mergeArray(t, e)) : p.mergeArray(t, o)
            }
            get items() {
                return this._def.items
            }
            rest(e) {
                return new J({
                    ...this._def,
                    rest: e
                })
            }
        }
        J.create = (e,t)=>{
            if (!Array.isArray(e))
                throw Error("You must pass an array of schemas to z.tuple([ ... ])");
            return new J({
                items: e,
                typeName: e7.ZodTuple,
                rest: null,
                ...E(t)
            })
        }
        ;
        class Q extends A {
            get keySchema() {
                return this._def.keyType
            }
            get valueSchema() {
                return this._def.valueType
            }
            _parse(e) {
                let {status: t, ctx: n} = this._processInputParams(e);
                if (n.parsedType !== r.object)
                    return d(n, {
                        code: a.invalid_type,
                        expected: r.object,
                        received: n.parsedType
                    }),
                    f;
                let i = []
                  , o = this._def.keyType
                  , s = this._def.valueType;
                for (let e in n.data)
                    i.push({
                        key: o._parse(new w(n,e,n.path,e)),
                        value: s._parse(new w(n,n.data[e],n.path,e))
                    });
                return n.common.async ? p.mergeObjectAsync(t, i) : p.mergeObjectSync(t, i)
            }
            get element() {
                return this._def.valueType
            }
            static create(e, t, n) {
                return new Q(t instanceof A ? {
                    keyType: e,
                    valueType: t,
                    typeName: e7.ZodRecord,
                    ...E(n)
                } : {
                    keyType: N.create(),
                    valueType: e,
                    typeName: e7.ZodRecord,
                    ...E(t)
                })
            }
        }
        class Y extends A {
            _parse(e) {
                let {status: t, ctx: n} = this._processInputParams(e);
                if (n.parsedType !== r.map)
                    return d(n, {
                        code: a.invalid_type,
                        expected: r.map,
                        received: n.parsedType
                    }),
                    f;
                let i = this._def.keyType
                  , o = this._def.valueType
                  , s = [...n.data.entries()].map(([e,t],r)=>({
                    key: i._parse(new w(n,e,n.path,[r, "key"])),
                    value: o._parse(new w(n,t,n.path,[r, "value"]))
                }));
                if (n.common.async) {
                    let e = new Map;
                    return Promise.resolve().then(async()=>{
                        for (let n of s) {
                            let r = await n.key
                              , i = await n.value;
                            if ("aborted" === r.status || "aborted" === i.status)
                                return f;
                            ("dirty" === r.status || "dirty" === i.status) && t.dirty(),
                            e.set(r.value, i.value)
                        }
                        return {
                            status: t.value,
                            value: e
                        }
                    }
                    )
                }
                {
                    let e = new Map;
                    for (let n of s) {
                        let r = n.key
                          , i = n.value;
                        if ("aborted" === r.status || "aborted" === i.status)
                            return f;
                        ("dirty" === r.status || "dirty" === i.status) && t.dirty(),
                        e.set(r.value, i.value)
                    }
                    return {
                        status: t.value,
                        value: e
                    }
                }
            }
        }
        Y.create = (e,t,n)=>new Y({
            valueType: t,
            keyType: e,
            typeName: e7.ZodMap,
            ...E(n)
        });
        class ee extends A {
            _parse(e) {
                let {status: t, ctx: n} = this._processInputParams(e);
                if (n.parsedType !== r.set)
                    return d(n, {
                        code: a.invalid_type,
                        expected: r.set,
                        received: n.parsedType
                    }),
                    f;
                let i = this._def;
                null !== i.minSize && n.data.size < i.minSize.value && (d(n, {
                    code: a.too_small,
                    minimum: i.minSize.value,
                    type: "set",
                    inclusive: !0,
                    exact: !1,
                    message: i.minSize.message
                }),
                t.dirty()),
                null !== i.maxSize && n.data.size > i.maxSize.value && (d(n, {
                    code: a.too_big,
                    maximum: i.maxSize.value,
                    type: "set",
                    inclusive: !0,
                    exact: !1,
                    message: i.maxSize.message
                }),
                t.dirty());
                let o = this._def.valueType;
                function s(e) {
                    let n = new Set;
                    for (let r of e) {
                        if ("aborted" === r.status)
                            return f;
                        "dirty" === r.status && t.dirty(),
                        n.add(r.value)
                    }
                    return {
                        status: t.value,
                        value: n
                    }
                }
                let u = [...n.data.values()].map((e,t)=>o._parse(new w(n,e,n.path,t)));
                return n.common.async ? Promise.all(u).then(e=>s(e)) : s(u)
            }
            min(e, t) {
                return new ee({
                    ...this._def,
                    minSize: {
                        value: e,
                        message: e9.toString(t)
                    }
                })
            }
            max(e, t) {
                return new ee({
                    ...this._def,
                    maxSize: {
                        value: e,
                        message: e9.toString(t)
                    }
                })
            }
            size(e, t) {
                return this.min(e, t).max(e, t)
            }
            nonempty(e) {
                return this.min(1, e)
            }
        }
        ee.create = (e,t)=>new ee({
            valueType: e,
            minSize: null,
            maxSize: null,
            typeName: e7.ZodSet,
            ...E(t)
        });
        class et extends A {
            constructor() {
                super(...arguments),
                this.validate = this.implement
            }
            _parse(e) {
                let {ctx: t} = this._processInputParams(e);
                if (t.parsedType !== r.function)
                    return d(t, {
                        code: a.invalid_type,
                        expected: r.function,
                        received: t.parsedType
                    }),
                    f;
                function n(e, n) {
                    return c({
                        data: e,
                        path: t.path,
                        errorMaps: [t.common.contextualErrorMap, t.schemaErrorMap, l, u].filter(e=>!!e),
                        issueData: {
                            code: a.invalid_arguments,
                            argumentsError: n
                        }
                    })
                }
                function i(e, n) {
                    return c({
                        data: e,
                        path: t.path,
                        errorMaps: [t.common.contextualErrorMap, t.schemaErrorMap, l, u].filter(e=>!!e),
                        issueData: {
                            code: a.invalid_return_type,
                            returnTypeError: n
                        }
                    })
                }
                let o = {
                    errorMap: t.common.contextualErrorMap
                }
                  , p = t.data;
                return this._def.returns instanceof es ? m(async(...e)=>{
                    let t = new s([])
                      , r = await this._def.args.parseAsync(e, o).catch(r=>{
                        throw t.addIssue(n(e, r)),
                        t
                    }
                    )
                      , a = await p(...r)
                      , u = await this._def.returns._def.type.parseAsync(a, o).catch(e=>{
                        throw t.addIssue(i(a, e)),
                        t
                    }
                    );
                    return u
                }
                ) : m((...e)=>{
                    let t = this._def.args.safeParse(e, o);
                    if (!t.success)
                        throw new s([n(e, t.error)]);
                    let r = p(...t.data)
                      , a = this._def.returns.safeParse(r, o);
                    if (!a.success)
                        throw new s([i(r, a.error)]);
                    return a.data
                }
                )
            }
            parameters() {
                return this._def.args
            }
            returnType() {
                return this._def.returns
            }
            args(...e) {
                return new et({
                    ...this._def,
                    args: J.create(e).rest($.create())
                })
            }
            returns(e) {
                return new et({
                    ...this._def,
                    returns: e
                })
            }
            implement(e) {
                let t = this.parse(e);
                return t
            }
            strictImplement(e) {
                let t = this.parse(e);
                return t
            }
            static create(e, t, n) {
                return new et({
                    args: e || J.create([]).rest($.create()),
                    returns: t || $.create(),
                    typeName: e7.ZodFunction,
                    ...E(n)
                })
            }
        }
        class en extends A {
            get schema() {
                return this._def.getter()
            }
            _parse(e) {
                let {ctx: t} = this._processInputParams(e)
                  , n = this._def.getter();
                return n._parse({
                    data: t.data,
                    path: t.path,
                    parent: t
                })
            }
        }
        en.create = (e,t)=>new en({
            getter: e,
            typeName: e7.ZodLazy,
            ...E(t)
        });
        class er extends A {
            _parse(e) {
                if (e.data !== this._def.value) {
                    let t = this._getOrReturnCtx(e);
                    return d(t, {
                        received: t.data,
                        code: a.invalid_literal,
                        expected: this._def.value
                    }),
                    f
                }
                return {
                    status: "valid",
                    value: e.data
                }
            }
            get value() {
                return this._def.value
            }
        }
        function ei(e, t) {
            return new ea({
                values: e,
                typeName: e7.ZodEnum,
                ...E(t)
            })
        }
        er.create = (e,t)=>new er({
            value: e,
            typeName: e7.ZodLiteral,
            ...E(t)
        });
        class ea extends A {
            _parse(e) {
                if ("string" != typeof e.data) {
                    let t = this._getOrReturnCtx(e)
                      , n = this._def.values;
                    return d(t, {
                        expected: e8.joinValues(n),
                        received: t.parsedType,
                        code: a.invalid_type
                    }),
                    f
                }
                if (-1 === this._def.values.indexOf(e.data)) {
                    let t = this._getOrReturnCtx(e)
                      , n = this._def.values;
                    return d(t, {
                        received: t.data,
                        code: a.invalid_enum_value,
                        options: n
                    }),
                    f
                }
                return m(e.data)
            }
            get options() {
                return this._def.values
            }
            get enum() {
                let e = {};
                for (let t of this._def.values)
                    e[t] = t;
                return e
            }
            get Values() {
                let e = {};
                for (let t of this._def.values)
                    e[t] = t;
                return e
            }
            get Enum() {
                let e = {};
                for (let t of this._def.values)
                    e[t] = t;
                return e
            }
            extract(e) {
                return ea.create(e)
            }
            exclude(e) {
                return ea.create(this.options.filter(t=>!e.includes(t)))
            }
        }
        ea.create = ei;
        class eo extends A {
            _parse(e) {
                let t = e8.getValidEnumValues(this._def.values)
                  , n = this._getOrReturnCtx(e);
                if (n.parsedType !== r.string && n.parsedType !== r.number) {
                    let e = e8.objectValues(t);
                    return d(n, {
                        expected: e8.joinValues(e),
                        received: n.parsedType,
                        code: a.invalid_type
                    }),
                    f
                }
                if (-1 === t.indexOf(e.data)) {
                    let e = e8.objectValues(t);
                    return d(n, {
                        received: n.data,
                        code: a.invalid_enum_value,
                        options: e
                    }),
                    f
                }
                return m(e.data)
            }
            get enum() {
                return this._def.values
            }
        }
        eo.create = (e,t)=>new eo({
            values: e,
            typeName: e7.ZodNativeEnum,
            ...E(t)
        });
        class es extends A {
            unwrap() {
                return this._def.type
            }
            _parse(e) {
                let {ctx: t} = this._processInputParams(e);
                if (t.parsedType !== r.promise && !1 === t.common.async)
                    return d(t, {
                        code: a.invalid_type,
                        expected: r.promise,
                        received: t.parsedType
                    }),
                    f;
                let n = t.parsedType === r.promise ? t.data : Promise.resolve(t.data);
                return m(n.then(e=>this._def.type.parseAsync(e, {
                    path: t.path,
                    errorMap: t.common.contextualErrorMap
                })))
            }
        }
        es.create = (e,t)=>new es({
            type: e,
            typeName: e7.ZodPromise,
            ...E(t)
        });
        class eu extends A {
            innerType() {
                return this._def.schema
            }
            sourceType() {
                return this._def.schema._def.typeName === e7.ZodEffects ? this._def.schema.sourceType() : this._def.schema
            }
            _parse(e) {
                let {status: t, ctx: n} = this._processInputParams(e)
                  , r = this._def.effect || null;
                if ("preprocess" === r.type) {
                    let e = r.transform(n.data);
                    return n.common.async ? Promise.resolve(e).then(e=>this._def.schema._parseAsync({
                        data: e,
                        path: n.path,
                        parent: n
                    })) : this._def.schema._parseSync({
                        data: e,
                        path: n.path,
                        parent: n
                    })
                }
                let i = {
                    addIssue: e=>{
                        d(n, e),
                        e.fatal ? t.abort() : t.dirty()
                    }
                    ,
                    get path() {
                        return n.path
                    }
                };
                if (i.addIssue = i.addIssue.bind(i),
                "refinement" === r.type) {
                    let e = e=>{
                        let t = r.refinement(e, i);
                        if (n.common.async)
                            return Promise.resolve(t);
                        if (t instanceof Promise)
                            throw Error("Async refinement encountered during synchronous parse operation. Use .parseAsync instead.");
                        return e
                    }
                    ;
                    if (!1 !== n.common.async)
                        return this._def.schema._parseAsync({
                            data: n.data,
                            path: n.path,
                            parent: n
                        }).then(n=>"aborted" === n.status ? f : ("dirty" === n.status && t.dirty(),
                        e(n.value).then(()=>({
                            status: t.value,
                            value: n.value
                        }))));
                    {
                        let r = this._def.schema._parseSync({
                            data: n.data,
                            path: n.path,
                            parent: n
                        });
                        return "aborted" === r.status ? f : ("dirty" === r.status && t.dirty(),
                        e(r.value),
                        {
                            status: t.value,
                            value: r.value
                        })
                    }
                }
                if ("transform" === r.type) {
                    if (!1 !== n.common.async)
                        return this._def.schema._parseAsync({
                            data: n.data,
                            path: n.path,
                            parent: n
                        }).then(e=>b(e) ? Promise.resolve(r.transform(e.value, i)).then(e=>({
                            status: t.value,
                            value: e
                        })) : e);
                    {
                        let e = this._def.schema._parseSync({
                            data: n.data,
                            path: n.path,
                            parent: n
                        });
                        if (!b(e))
                            return e;
                        let a = r.transform(e.value, i);
                        if (a instanceof Promise)
                            throw Error("Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.");
                        return {
                            status: t.value,
                            value: a
                        }
                    }
                }
                e8.assertNever(r)
            }
        }
        eu.create = (e,t,n)=>new eu({
            schema: e,
            typeName: e7.ZodEffects,
            effect: t,
            ...E(n)
        }),
        eu.createWithPreprocess = (e,t,n)=>new eu({
            schema: t,
            effect: {
                type: "preprocess",
                transform: e
            },
            typeName: e7.ZodEffects,
            ...E(n)
        });
        class el extends A {
            _parse(e) {
                let t = this._getType(e);
                return t === r.undefined ? m(void 0) : this._def.innerType._parse(e)
            }
            unwrap() {
                return this._def.innerType
            }
        }
        el.create = (e,t)=>new el({
            innerType: e,
            typeName: e7.ZodOptional,
            ...E(t)
        });
        class ec extends A {
            _parse(e) {
                let t = this._getType(e);
                return t === r.null ? m(null) : this._def.innerType._parse(e)
            }
            unwrap() {
                return this._def.innerType
            }
        }
        ec.create = (e,t)=>new ec({
            innerType: e,
            typeName: e7.ZodNullable,
            ...E(t)
        });
        class ed extends A {
            _parse(e) {
                let {ctx: t} = this._processInputParams(e)
                  , n = t.data;
                return t.parsedType === r.undefined && (n = this._def.defaultValue()),
                this._def.innerType._parse({
                    data: n,
                    path: t.path,
                    parent: t
                })
            }
            removeDefault() {
                return this._def.innerType
            }
        }
        ed.create = (e,t)=>new ed({
            innerType: e,
            typeName: e7.ZodDefault,
            defaultValue: "function" == typeof t.default ? t.default : ()=>t.default,
            ...E(t)
        });
        class ep extends A {
            _parse(e) {
                let {ctx: t} = this._processInputParams(e)
                  , n = {
                    ...t,
                    common: {
                        ...t.common,
                        issues: []
                    }
                }
                  , r = this._def.innerType._parse({
                    data: n.data,
                    path: n.path,
                    parent: {
                        ...n
                    }
                });
                return v(r) ? r.then(e=>({
                    status: "valid",
                    value: "valid" === e.status ? e.value : this._def.catchValue({
                        get error() {
                            return new s(n.common.issues)
                        },
                        input: n.data
                    })
                })) : {
                    status: "valid",
                    value: "valid" === r.status ? r.value : this._def.catchValue({
                        get error() {
                            return new s(n.common.issues)
                        },
                        input: n.data
                    })
                }
            }
            removeCatch() {
                return this._def.innerType
            }
        }
        ep.create = (e,t)=>new ep({
            innerType: e,
            typeName: e7.ZodCatch,
            catchValue: "function" == typeof t.catch ? t.catch : ()=>t.catch,
            ...E(t)
        });
        class ef extends A {
            _parse(e) {
                let t = this._getType(e);
                if (t !== r.nan) {
                    let t = this._getOrReturnCtx(e);
                    return d(t, {
                        code: a.invalid_type,
                        expected: r.nan,
                        received: t.parsedType
                    }),
                    f
                }
                return {
                    status: "valid",
                    value: e.data
                }
            }
        }
        ef.create = e=>new ef({
            typeName: e7.ZodNaN,
            ...E(e)
        });
        let eh = Symbol("zod_brand");
        class em extends A {
            _parse(e) {
                let {ctx: t} = this._processInputParams(e)
                  , n = t.data;
                return this._def.type._parse({
                    data: n,
                    path: t.path,
                    parent: t
                })
            }
            unwrap() {
                return this._def.type
            }
        }
        class ey extends A {
            _parse(e) {
                let {status: t, ctx: n} = this._processInputParams(e);
                if (n.common.async) {
                    let e = async()=>{
                        let e = await this._def.in._parseAsync({
                            data: n.data,
                            path: n.path,
                            parent: n
                        });
                        return "aborted" === e.status ? f : "dirty" === e.status ? (t.dirty(),
                        h(e.value)) : this._def.out._parseAsync({
                            data: e.value,
                            path: n.path,
                            parent: n
                        })
                    }
                    ;
                    return e()
                }
                {
                    let e = this._def.in._parseSync({
                        data: n.data,
                        path: n.path,
                        parent: n
                    });
                    return "aborted" === e.status ? f : "dirty" === e.status ? (t.dirty(),
                    {
                        status: "dirty",
                        value: e.value
                    }) : this._def.out._parseSync({
                        data: e.value,
                        path: n.path,
                        parent: n
                    })
                }
            }
            static create(e, t) {
                return new ey({
                    in: e,
                    out: t,
                    typeName: e7.ZodPipeline
                })
            }
        }
        let eg = (e,t={},n)=>e ? j.create().superRefine((r,i)=>{
            var a, o;
            if (!e(r)) {
                let e = "function" == typeof t ? t(r) : "string" == typeof t ? {
                    message: t
                } : t
                  , s = null === (o = null !== (a = e.fatal) && void 0 !== a ? a : n) || void 0 === o || o;
                i.addIssue({
                    code: "custom",
                    ..."string" == typeof e ? {
                        message: e
                    } : e,
                    fatal: s
                })
            }
        }
        ) : j.create()
          , eb = {
            object: z.lazycreate
        };
        (e3 = e7 || (e7 = {})).ZodString = "ZodString",
        e3.ZodNumber = "ZodNumber",
        e3.ZodNaN = "ZodNaN",
        e3.ZodBigInt = "ZodBigInt",
        e3.ZodBoolean = "ZodBoolean",
        e3.ZodDate = "ZodDate",
        e3.ZodSymbol = "ZodSymbol",
        e3.ZodUndefined = "ZodUndefined",
        e3.ZodNull = "ZodNull",
        e3.ZodAny = "ZodAny",
        e3.ZodUnknown = "ZodUnknown",
        e3.ZodNever = "ZodNever",
        e3.ZodVoid = "ZodVoid",
        e3.ZodArray = "ZodArray",
        e3.ZodObject = "ZodObject",
        e3.ZodUnion = "ZodUnion",
        e3.ZodDiscriminatedUnion = "ZodDiscriminatedUnion",
        e3.ZodIntersection = "ZodIntersection",
        e3.ZodTuple = "ZodTuple",
        e3.ZodRecord = "ZodRecord",
        e3.ZodMap = "ZodMap",
        e3.ZodSet = "ZodSet",
        e3.ZodFunction = "ZodFunction",
        e3.ZodLazy = "ZodLazy",
        e3.ZodLiteral = "ZodLiteral",
        e3.ZodEnum = "ZodEnum",
        e3.ZodEffects = "ZodEffects",
        e3.ZodNativeEnum = "ZodNativeEnum",
        e3.ZodOptional = "ZodOptional",
        e3.ZodNullable = "ZodNullable",
        e3.ZodDefault = "ZodDefault",
        e3.ZodCatch = "ZodCatch",
        e3.ZodPromise = "ZodPromise",
        e3.ZodBranded = "ZodBranded",
        e3.ZodPipeline = "ZodPipeline";
        let ev = (e,t={
            message: `Input not instance of ${e.name}`
        })=>eg(t=>t instanceof e, t)
          , ew = N.create
          , eT = R.create
          , eE = ef.create
          , eA = F.create
          , ex = D.create
          , ek = M.create
          , eC = L.create
          , e_ = U.create
          , eS = q.create
          , eI = j.create
          , eP = $.create
          , eB = Z.create
          , eO = H.create
          , eN = G.create
          , eR = z.create
          , eF = z.strictCreate
          , eD = V.create
          , eM = K.create
          , eL = X.create
          , eU = J.create
          , eq = Q.create
          , ej = Y.create
          , e$ = ee.create
          , eZ = et.create
          , eH = en.create
          , eG = er.create
          , ez = ea.create
          , eV = eo.create
          , eW = es.create
          , eK = eu.create
          , eX = el.create
          , eJ = ec.create
          , eQ = eu.createWithPreprocess
          , eY = ey.create
          , e0 = ()=>ew().optional()
          , e1 = ()=>eT().optional()
          , e2 = ()=>ex().optional();
        var e6, e5, e3, e8, e4, e9, e7, te = Object.freeze({
            __proto__: null,
            defaultErrorMap: u,
            setErrorMap: function(e) {
                l = e
            },
            getErrorMap: function() {
                return l
            },
            makeIssue: c,
            EMPTY_PATH: [],
            addIssueToContext: d,
            ParseStatus: p,
            INVALID: f,
            DIRTY: h,
            OK: m,
            isAborted: y,
            isDirty: g,
            isValid: b,
            isAsync: v,
            get util() {
                return e8
            },
            get objectUtil() {
                return e4
            },
            ZodParsedType: r,
            getParsedType: i,
            ZodType: A,
            ZodString: N,
            ZodNumber: R,
            ZodBigInt: F,
            ZodBoolean: D,
            ZodDate: M,
            ZodSymbol: L,
            ZodUndefined: U,
            ZodNull: q,
            ZodAny: j,
            ZodUnknown: $,
            ZodNever: Z,
            ZodVoid: H,
            ZodArray: G,
            ZodObject: z,
            ZodUnion: V,
            ZodDiscriminatedUnion: K,
            ZodIntersection: X,
            ZodTuple: J,
            ZodRecord: Q,
            ZodMap: Y,
            ZodSet: ee,
            ZodFunction: et,
            ZodLazy: en,
            ZodLiteral: er,
            ZodEnum: ea,
            ZodNativeEnum: eo,
            ZodPromise: es,
            ZodEffects: eu,
            ZodTransformer: eu,
            ZodOptional: el,
            ZodNullable: ec,
            ZodDefault: ed,
            ZodCatch: ep,
            ZodNaN: ef,
            BRAND: eh,
            ZodBranded: em,
            ZodPipeline: ey,
            custom: eg,
            Schema: A,
            ZodSchema: A,
            late: eb,
            get ZodFirstPartyTypeKind() {
                return e7
            },
            coerce: {
                string: e=>N.create({
                    ...e,
                    coerce: !0
                }),
                number: e=>R.create({
                    ...e,
                    coerce: !0
                }),
                boolean: e=>D.create({
                    ...e,
                    coerce: !0
                }),
                bigint: e=>F.create({
                    ...e,
                    coerce: !0
                }),
                date: e=>M.create({
                    ...e,
                    coerce: !0
                })
            },
            any: eI,
            array: eN,
            bigint: eA,
            boolean: ex,
            date: ek,
            discriminatedUnion: eM,
            effect: eK,
            enum: ez,
            function: eZ,
            instanceof: ev,
            intersection: eL,
            lazy: eH,
            literal: eG,
            map: ej,
            nan: eE,
            nativeEnum: eV,
            never: eB,
            null: eS,
            nullable: eJ,
            number: eT,
            object: eR,
            oboolean: e2,
            onumber: e1,
            optional: eX,
            ostring: e0,
            pipeline: eY,
            preprocess: eQ,
            promise: eW,
            record: eq,
            set: e$,
            strictObject: eF,
            string: ew,
            symbol: eC,
            transformer: eK,
            tuple: eU,
            undefined: e_,
            union: eD,
            unknown: eP,
            void: eO,
            NEVER: f,
            ZodIssueCode: a,
            quotelessJson: o,
            ZodError: s
        })
    },
    25232: function(e) {
        "use strict";
        e.exports = JSON.parse('[{"inputs":[{"components":[{"internalType":"address","name":"target","type":"address"},{"internalType":"bytes","name":"callData","type":"bytes"}],"internalType":"struct Multicall3.Call[]","name":"calls","type":"tuple[]"}],"name":"aggregate","outputs":[{"internalType":"uint256","name":"blockNumber","type":"uint256"},{"internalType":"bytes[]","name":"returnData","type":"bytes[]"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"target","type":"address"},{"internalType":"bool","name":"allowFailure","type":"bool"},{"internalType":"bytes","name":"callData","type":"bytes"}],"internalType":"struct Multicall3.Call3[]","name":"calls","type":"tuple[]"}],"name":"aggregate3","outputs":[{"components":[{"internalType":"bool","name":"success","type":"bool"},{"internalType":"bytes","name":"returnData","type":"bytes"}],"internalType":"struct Multicall3.Result[]","name":"returnData","type":"tuple[]"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"target","type":"address"},{"internalType":"bool","name":"allowFailure","type":"bool"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"callData","type":"bytes"}],"internalType":"struct Multicall3.Call3Value[]","name":"calls","type":"tuple[]"}],"name":"aggregate3Value","outputs":[{"components":[{"internalType":"bool","name":"success","type":"bool"},{"internalType":"bytes","name":"returnData","type":"bytes"}],"internalType":"struct Multicall3.Result[]","name":"returnData","type":"tuple[]"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"target","type":"address"},{"internalType":"bytes","name":"callData","type":"bytes"}],"internalType":"struct Multicall3.Call[]","name":"calls","type":"tuple[]"}],"name":"blockAndAggregate","outputs":[{"internalType":"uint256","name":"blockNumber","type":"uint256"},{"internalType":"bytes32","name":"blockHash","type":"bytes32"},{"components":[{"internalType":"bool","name":"success","type":"bool"},{"internalType":"bytes","name":"returnData","type":"bytes"}],"internalType":"struct Multicall3.Result[]","name":"returnData","type":"tuple[]"}],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"getBasefee","outputs":[{"internalType":"uint256","name":"basefee","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"blockNumber","type":"uint256"}],"name":"getBlockHash","outputs":[{"internalType":"bytes32","name":"blockHash","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getBlockNumber","outputs":[{"internalType":"uint256","name":"blockNumber","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getChainId","outputs":[{"internalType":"uint256","name":"chainid","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getCurrentBlockCoinbase","outputs":[{"internalType":"address","name":"coinbase","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getCurrentBlockDifficulty","outputs":[{"internalType":"uint256","name":"difficulty","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getCurrentBlockGasLimit","outputs":[{"internalType":"uint256","name":"gaslimit","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getCurrentBlockTimestamp","outputs":[{"internalType":"uint256","name":"timestamp","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"addr","type":"address"}],"name":"getEthBalance","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getLastBlockHash","outputs":[{"internalType":"bytes32","name":"blockHash","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bool","name":"requireSuccess","type":"bool"},{"components":[{"internalType":"address","name":"target","type":"address"},{"internalType":"bytes","name":"callData","type":"bytes"}],"internalType":"struct Multicall3.Call[]","name":"calls","type":"tuple[]"}],"name":"tryAggregate","outputs":[{"components":[{"internalType":"bool","name":"success","type":"bool"},{"internalType":"bytes","name":"returnData","type":"bytes"}],"internalType":"struct Multicall3.Result[]","name":"returnData","type":"tuple[]"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bool","name":"requireSuccess","type":"bool"},{"components":[{"internalType":"address","name":"target","type":"address"},{"internalType":"bytes","name":"callData","type":"bytes"}],"internalType":"struct Multicall3.Call[]","name":"calls","type":"tuple[]"}],"name":"tryBlockAndAggregate","outputs":[{"internalType":"uint256","name":"blockNumber","type":"uint256"},{"internalType":"bytes32","name":"blockHash","type":"bytes32"},{"components":[{"internalType":"bool","name":"success","type":"bool"},{"internalType":"bytes","name":"returnData","type":"bytes"}],"internalType":"struct Multicall3.Result[]","name":"returnData","type":"tuple[]"}],"stateMutability":"payable","type":"function"}]')
    }
}]);
//# sourceMappingURL=worker-chunks-fb74f49ddd57de22.js.map